{"version":3,"sources":["utils/polyfills.js","utils/Utils.js","controller/ServerCalls.js","controller/StandardTaskSequencer.js","controller/Controller.js","state/IndexPathHelper.js","components/PropTypesHelper.js","state/UserDefPathHelper.js","state/StateAttributeAccess.js","state/StateManagerHelper.js","state/RecommendationsManager.js","config/AutoLayoutHelper.js","config/CommonConfigHelper.js","state/PathTranslationHelper.js","components/table/TableHelper.js","components/CbaComboBox.js","eval/PropagationHelper.js","components/SelectGroupHelper.js","state/TraceLogHelper.js","components/RenderingHelper.js","state/ComponentStateHelper.js","components/PageHistoryHelper.js","components/BookmarkHelper.js","components/WebToolbar/WebTab.js","components/WebToolbar/WebToolbarHelper.js","components/MenuItemTree.js","components/WebToolbar/WebToolbar.js","components/PageAreaRenderer.js","components/CbaPageArea.js","dialog/ScoringModalData.js","dialog/StatemachineModalData.js","dialog/TracingModalData.js","dialog/ManageBookmarksData.js","dialog/ModalDialog.js","dialog/ModalManager.js","components/SpecialClickActionsHelper.js","components/MenuBuildHelper.js","dialog/DialogPresenter.js","components/CommonActionsHelper.js","components/CbaRichTextField/PositionCalculationHelper.js","components/CbaRichTextField/EditorStateHelper.js","components/CbaRichTextField/DraftLink.js","components/CbaRichTextField/Media.js","components/CbaRichTextField/DraftBullet.js","components/MathJax/MathJaxTranspiler.js","components/CbaRichTextField/MathJaxEntity.js","components/CbaRichTextField/CbaRichTextField.js","components/CbaRichTextField/SelectionHelper.js","components/CbaRichTextField/TextBlockSelectHelper.js","components/InputComponent.js","components/CbaSingleLineInputField.js","components/table/CbaTableCell.js","components/CbaTree/DataGridRenderers/CbaTreeHeader.js","components/CbaTree/TreeTraceHelper.js","components/CbaTree/TreeContextMenuHelper.js","components/CbaTree/DataGridRenderers/CbaTreeCell.js","components/CbaTree/DataGridRenderers/CbaTreeRow.js","components/CbaTree/TreeUtils.js","components/calculator/ValueFormatter.js","components/CbaTree/CbaTreeChildArea.js","components/media/MediaPreview.js","components/media/CbaMedia.js","eval/TermEvaluator.js","config/DragAndDropHelper.js","components/CbaContainer.js","components/CbaRectangle.js","components/CbaSimpleTextField.js","components/CbaButton.js","components/CbaRadioButton.js","components/CbaCheckbox.js","components/CbaLink.js","components/CbaPolygon.js","components/CbaRegionMap.js","components/CbaInnerHtml.js","components/CbaExternalPageFrame.js","components/CbaTree/CbaTree.js","components/CbaTree/CbaTreeView.js","components/table/CellEvaluator.js","components/table/CbaTable.js","components/table/CbaTableCellEditor.js","components/calculator/CbaCalculatorHistory.js","components/calculator/CbaCalculatorInput.js","components/CbaInputField.js","components/CbaTimer/CbaStopWatch.js","components/variable/CbaScaleValueInput.js","components/variable/CbaSpinnerValueInput.js","components/CbaTimer/CbaTimer.js","components/list/ListItem.js","components/list/CbaList.js","components/CbaInterpreter.js","components/CbaTestPresenter.js","components/HeaderButtons.js","components/TopButtonToolbar.js","components/TaskNavigator.js","components/LoggedInView.js","preamble/Login.js","components/PageEventsObserver.js","preamble/App.js","state/ComponentStateManager.js","state/ComponentDirectory.js","state/IncidentsAccumulator.js","eval/ConditionalLinkHelper.js","config/PageConfigurationsManager.js","config/CalculationsConfigurationManager.js","state/PresenterStateManager.js","eval/ValueMapper.js","state/TaskManager.js","state/TaskResultsManager.js","state/TimedEventsCatalog.js","state/StatemachineEventHistory.js","state/Statemachine.js","state/StatemachinesManager.js","state/TaskNavigatorStateManager.js","state/TraceLogBuffer.js","state/ClipboardManager.js","utils/StringUtils.js","transmit/UserDataUploader.js","transmit/TraceLogUploader.js","transmit/PostMessageReceiver.js","components/calculator/EvaluatorHelper.js","components/calculator/ExpressionEvaluator.js","components/calculator/Evaluator.js","components/calculator/KeyboardHelper.js","components/calculator/Renderer.js","components/calculator/HistoryRenderer.js","components/calculator/CbaCalculatorEngine.js","state/CalculatorsManager.js","state/ActionRegister.js","state/FocusRegister.js","config/CustomDragLayer.js","state/RecordingBuffer.js","transmit/RecordingUploader.js","state/LibraryManager.js","state/VariableManager.js","preamble/ReplayRunner.js","state/ReplayStepMonitor.js","preamble/TaskPlayer.js","index.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","String","startsWith","searchString","position","_this","indexOf","Utils","_classCallCheck","this","_createClass","key","value","valueMightBeUndefined","defaultValue","baseObject","propertyName","candidate","constructor","Object","keys","length","array","arrayContainsNonEmptyEntry","some","toString","concat","packageJson","version","name","console","info","getCbaVersion","isMobileForced","getQueryParam","navigator","maxTouchPoints","settings","settingName","defaultMode","configFromWindowGlobal","cba_runtime_config","modeFromWindowGlobal","mode","warn","trim","getEventReceiverConfigurationInternal","location","href","urlString","eventTargetWindow","getParameterValueFromUrlOrConfigStructure","eventDomainUri","startTaskPlayerEvent","getWaitingMessageTextsInternal","primary","secondary","parameterName","urlQuery","UrlLib","parse","query","getUrlWithoutPathFromLocation","protocol","portAddOn","port","hostname","error","paramName","getQueryParams","getQueryParamsFromUrlString","elem","fullscreenEnabled","mozFullScreenEnabled","webkitFullscreenEnabled","msFullscreenEnabled","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","fullscreenElement","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","resources","path","isExternal","map","resource","resourceCopy","safeDeepCopy","expectedType","valueType","Number","isInteger","x","y","sizerElement","scrollingElement","iframe","scrollHeight","scrollWidth","scrollableHeight","clientHeight","scrollableWidth","clientWidth","_Utils$calculateFinal","calculateFinalScrollValue","finalX","finalY","doScroll","top","left","element","scroll","behavior","parseInt","includes","computePercentage","parseFloat","num","percentage","deepCopy","object","JSON","stringify","safeDeepCopyObjects","from","to","Array","Date","RegExp","Function","Boolean","forEach","isMobile","a","check","isMobileModeSetAsParameter","userAgent","vendor","opera","test","substr","keyCodes","Backspace","Tab","Enter","Shift","Ctrl","Alt","Escape","ServerCalls","getControllerMode","username","log","runWithSimplifiedPreviewServer","doGetCourseConfigurationStep","getFirstCourse","then","courseStepResult","doGetTestConfigurationsStep","testsStepResult","doGetItemConfigurationsStep","itemsStepResult","doBuildConfigurationStep","assets","arguments","type","resourcePromises","Promise","resolve","reject","linkTag","createElement","as","rel","size","Math","pow","onload","hadErrors","onerror","head","append","all","getCallingUrlWithoutParams","getCallingUrlWithoutPath","restApiTargets","CONFIGURATION_API","split","substring","lastIndexOf","courseName","getCourse","headerButtons","sessionId","courses","testsToRetrieve","buildArrayWithoutDuplicates","promisesForTests","testName","getTest","axiosAllWrapper","_testsStepResult$cont","contextData","tests","response","flaggedErrors","push","index","isEmptyRetrievedValue","collectedItemNames","filter","reduce","itemNamesArray","items","itemsToRetrieve","promisesForItems","itemName","getItem","_this2","_itemsStepResult$cont","validateJsonResults","success","payload","promisesArray","axios","catch","_toConsumableArray","Set","course","getDataFromServer","typeOfData","nameOfValue","urlPathExtension","addAsParam","instance","get","data","userId","ASSETS_API","TRACE_ENDPOINT","RECORDING_ENDPOINT","create","baseURL","getServerPath","timeout","headers","Content-Type","StandardTaskSequencer","findFirstMatchingTaskInTest","newTestName","newTaskName","withErrorLog","newTest","getTestForName","newTaskEntry","taskCourse","find","theArray","task","item","taskName","getNextTaskInfo","nextTaskAvailable","taskList","getCurrentTaskIndex","getPreviousTaskInfo","previousTaskAvailable","switchCurrentTask","activeTestName","activeItemName","activeTaskName","getCurrentTaskInfo","getConfigurationInfo","result","getIndexForTask","buildTaskList","initialTask","findIndex","entry","testsCourse","taskEntry","Controller","runController","taskPlayer","runPlayer","setHttpTraceTransmission","setHttpRecordingTransmission","showLogin","obtainConfigurationAndRunFirstTask","loginDialogClosedCallback","getJsonsData","processConfigurationAndRunFirstTask","configurationData","digestConfigurationResponse","startFirstTaskInTaskPlayer","sendItemConfigurationToTaskPlayer","setTraceContextId","setRecordingContextId","setUserId","setTaskSequencer","taskSwitchCallback","taskAvailableCallback","setHeaderButtons","_this$taskSequencer$g","taskSequencer","ShowTaskNavigationBars","setMenuCarousels","tasks","activateDebuggingWindows","scoreDebugging","hotKey","traceDebugging","statemachineDebugging","startTask","receivedData","dependenciesUrl","MathJax","prefix","libraryPathsMap","dependencies","dependency","addItem","stopOldTaskAndStartNewTask","stopTask","stopOldTaskLogoutAndShowLogin","logout","clearItems","alert","request","scope","switchTaskNext","switchTaskPrevious","switchFirstMatchingTaskInterTest","missingTaskErrorFeedback","buildCurrentTaskLogString","newTaskInfo","message","isTestSwitch","buildLogString","currentTaskInfo","IndexPathHelper","pageName","pageSegment","withNameInFront","endIndex","segmentIndex","getPageNameFromPageSegment","slice","pathRoot","pageAreaType","pageAreaName","pageSegments","lastPageSlashIndex","firstPageSlashIndex","remainingPath","getLastPageSegmentFromPath","splice","dropPageSegmentFromPath","lastSlashIndex","slashIndex","treePath","childPath","typeKeyIndex","trimmedPath","rootPath","dropAllPageSegments","getPageNameFromPath","appendPageSegmentsToPath","buildPageSegment","replace","PropertyMissingException","PropTypesHelper","propTypesRequirement","props","propName","componentName","PropTypes","checkPropTypes","exception","propTypes","toAdd","componentStateManager","isRequired","componentDirectory","incidentsAccumulator","taskResultsManager","statemachinesManager","presenterStateManager","taskNavigatorStateManager","traceLogBuffer","traceLogUploader","recordingBuffer","recordingUploader","clipboardManager","pageConfigurationsManager","taskManager","number","width","height","string","alignmentHorizontal","oneOf","bold","bool","italic","underlined","default","disabled","oneOfType","visited","selected","text","asOptional","getColorVariantsPropTypes","background","style","radius","color","rotate","transformOrigin","getTransformOriginPropTypes","hidden","label","mouseOver","dynamic","shape","variable","valueMap","displayMode","overlayType","standard","alternate","onFocusIn","onFocusOut","page","pageUrl","conditional","receiver","receiverTab","historyMove","addOn","skipTrace","image","withChildren","positionPropsCheck","font","fontPropsCheck","colorPropsCheck","border","borderPropsCheck","transform","transformPropsCheck","state","statePropsCheck","textPropsCheck","imagePropsCheck","cursor","cursorPropsCheck","eventPropsCheck","classifiers","link","linkPropsCheck","userDefinedId","pageEditId","trace","tracePropsCheck","cbaChildren","selectGroups","arrayOf","blockSelectionChanges","enforceSingleSelect","allowDeselect","initiallySelected","deselectTarget","selectGroupMember","controllerPathId","groupName","selectGroupMemberName","moveable","resizable","cells","expanded","nodes","imagePath","depth","onRowExpandClick","func","onRowSelect","distance","UserDefPathHelper","processor","forEachUserDefIdInPath","dropUserDefIdFromPath","lastId","getLastUserDefIdFromPath","pageAreaNameSlashIndex","pageAreaNameStartIndex","firstIdSlashIndex","firstUserDefId","userDefId","userDefIdPath","segments","segment","_segment$split","_segment$split2","_slicedToArray","output","join","StateAttributeAccess","getStateAttribute","setStateAttribute","componentClassName","selectable","singleSelectStructure","controllerState","highlightable","selectedIds","defaultHighlightColor","editorState","selections","modifiersInEditorState","lastCaretPosition","StateManagerHelper","RecommendationsManager","runtime","setRecommendations","recommendations","oldRecommendations","traceRecommendationChange","taskNavigator","highlightRecommendations","refreshRecommendedComponents","setTaskNavigator","isRecommended","indexPath","getCurrentTestTaskItemNames","absoluteUserDefId","userDefIDPath","PathTranslationHelper","getUserDefPathForIndexPath","processTaskSelected","firstRecommendation","findFirstRecommendationForTask","setSelectedOnRecommendedComponent","doRecommendedPageSwitch","newRecommendations","reportEvent","buildRecommendationListForTrace","recommendation","ComponentStateHelper","updateStateAttributeByUserDefPath","extractSelected","setSelected","targetPageSegment","findPageSegmentForUserDefId","targetComponentConfig","findConfigurationForPageSegment","pathState","findOrBuildStateByUserDefPath","defaultLinkReceiver","extractDefaultLinkReceiver","CommonActionsHelper","doPageSwitch","config","RenderingHelper","triggerRenderingViaUserDefPath","AutoLayoutHelper","configProps","orientation","autoLayoutLayer","assign","CommonConfigHelper","buildAbsoluteStyleFromConfig","buildStyleForAutoLayoutPanel","buildStyleForAutoLayoutCell","buildStyleForAutoLayoutElement","raiseError","keywords","keyword","endsWith","_configProps$autoLayo","autoLayout","rows","columns","blockAlignVertically","blockAlignHorizontally","gap","display","gridTemplateRows","transformTemplateKeywords","gridTemplateColumns","alignContent","justifyContent","rowGap","row","columnGap","column","_configProps$autoLayo2","columnStart","rowStart","columnSpan","rowSpan","alignVertically","alignHorizontally","gridColumnStart","gridRowStart","gridColumnEnd","gridRowEnd","alignItems","transformFlexAlignmentKeyword","alignment","resultStyle","useElementPosition","positionFromState","right","_configProps$autoLayo3","addVerticalElementValues","addHorizontalElementValues","dragAndDrop","getUserDefinedId","positionString","textFromVariable","getDynamicValueFromStatemachineAndMapper","textFromState","extractTextValue","extraStyle","extractDisabled","extractVisited","imageResource","getProperResourcePath","chooseImageOrColorVariant","imageStyle","float","opacity","React","src","alt","findOrBuildStateForPathId","recommended","recommendationsManager","buildStyleByState","_ref","positionInConfig","positionInState","extractPosition","orientationValue","_defineProperty","_Object$assign","paddingValue","padding","checkPosition","checkFont","checkState","buildStyleForAutoLayout","extractHidden","setStyleAttribute","getCursorValue","setBorderStyleAttributes","setBackgroundStyleAttributes","rotateDegrees","translateX","translateY","fontMappingsArray","css","fontFamilyName","fontFileName","setStyleAttributeWithUnits","pointsArray","accumulated","child","dynamicConfig","variableManager","valueMapper","currentTaskId","getCurrentStatePathRoot","variableValue","getVariable","getMappedValue","propsState","attributes","attributeName","valueOrUndefined","borderProps","north","south","west","east","backgroundImageUrl","imageFromVariable","imageVariant","getRecommendationColor","units","variantsEntry","chosenVariant","pickVariantPropertyFromEntry","isBlockDefaultValue","withDefault","variant","isEmptyObject","resourceFromConfig","getProperResourcePathWithFlag","flag","resourceFolder","getResourcePath","getExternalResourcePath","toLowerCase","aditionalClasses","configClassNames","cssClassNames","buildStyleForMask","wrapperStyle","getPageSegmentArray","getUserDefIdForPageSegment","buildUserDefIdPath","getPageAreaTypeFromPath","getPageAreaNameFromPath","appendUserDefIdToPath","userDefPath","pathId","appendPageSegmentToPathRoot","textBlockNamePath","pageAreasPath","textBlockName","textBlockOwnerPageSegment","findPageSegmentForTextBlockOwner","componentConfig","TableHelper","e","tablePath","isInEditMode","keyCode","which","arrow","ctrlKey","emitAutoFocusAndPreventDefault","eventEmitter","emit","preventDefault","n","isNaN","componentPath","tableCellPath","dropIndexFromPageSegment","tableUserDefIdPath","currentSelected","getStateAttributeByUserDefPath","extractSelectedCell","oldSelected","extractOldSelectedCell","CbaComboBox","_Component","_possibleConstructorReturn","_getPrototypeOf","call","getSelectedIdFromState","foundSelectedId","_this$props","comboBoxPath","stateManager","itemConfig","itemPath","appendIndexToPageSegment","itemState","SelectGroupHelper","extractSelectedState","setSelectedIdInState","newSelectedId","_this$props2","comboBoxState","getState","_assertThisInitialized","selectGroupControllerState","extractSelectGroupControllerState","registerStateByPathId","delegateSetSelectedToController","comboBoxGroup","onChangeHandler","_this$props3","oldSelectedId","hasVisibleItemCount","target","oldSelectedItem","newSelectedItem","updateStateAndTriggerRendering","traceUserInteractionPerConfig","buildTraceDetailsAddOn","sendStandardEvent","getDefaultLinkReceiver","onClickHandler","_this$props4","doBasicOnClick","scrollCurrentOptionIntoViewIfVisibleItemCountOne","onContextMenuHandler","doContextMenuOpen","onKeyDownHandler","_this$props5","handleKeyDown","buildTablePath","onFocusHandler","_this$props6","handleCellFocus","_this$props7","onBlur","triggerRenderingViaPath","checkForInvalidItems","isArray","generateOptions","itemsConfig","i","generateOptionsForSelect","options","focus","comboRef","current","visibleItemCount","currentlySelectedId","portalMenuContainerElement","querySelectorAll","el","localName","firstChild","className","portalMenuElement","children","scrollIntoView","onClickFrozenHandler","_this$props8","doStandardOnFrozenInteraction","stopPropagation","createRef","_inherits","onMount","onUnmount","nextProps","onReceiveProps","_this$props9","buildStyleByIndexPath","selectedId","boxShadow","maxHeightSize","customStyles","menu","provided","_objectSpread","marginTop","menuList","backgroundColor","option","isSelected","isFocused","lineHeight","fontSize","fontFamily","whiteSpace","overflow","textOverflow","control","minHeight","borderColor","borderWidth","borderRadius","borderStyle","container","s","valueContainer","singleValue","maxWidth","textAlign","indicatorsContainer","dropdownIndicator",":hover","indicatorSeparator","Fragment","onClick","onContextMenu","Select","styles","title","buildTitle","isDisabled","onChange","onKeyDown","onFocus","maxMenuHeight","menuPortalTarget","body","tabIndex","getCssClassNamesValue","ref","data-cba-id","itemsInConfig","itemInConfig","configOnPathSegment","additionalState","setDisabled","setHidden","getItemType","oldSelectedUserDefId","newSelected","newSelectedUserDefId","Component","defaultProps","PropagationHelper","propagationGroups","memberIndexPaths","setPropagationGroupControllerState","controllerIndexPath","appliedAction","getMatchingPropagationGroups","group","applyActionToGroupMembers","controllerUserDefPath","getter","setter","triggerRendering","getIndexPathForUserDefPath","applyToPropagationGroup","updateStateAttribute","fullControllerState","propagationsGroupsState","extractPropagationGroupControllerState","groupConfiguration","action","memberPathPageSegment","memberIndexPath","controlledPathId","selectGroupMemberInfo","extractSelectGroupMemberInfo","groupState","extractMatchingGroupState","singleSelectActive","currentlySelected","requestedSelectState","controlledPathState","singleSelectWithPageSwitch","overrideNoDeselect","doStandardSelectFlagSetting","selectionChangesBlocked","isSingleSelectControlled","withPageSwitch","handleSelectedChildChanges","component","doPageSwitchForComponent","componentType","selectGroupMemberConfig","getSelectGroupMemberPerConfig","isControlledType","containerPageSegment","setSelectGroupMemberInfo","isComboBoxItem","controlledPageSegment","setSelectGroupControllerState","isComboBox","initiallySelectedIndex","selectedEntry","firstItemPath","setStateAttributeForControllerByUserDefPath","comboItems","selectedItemUdi","childConfig","udi","itemIndex","selectedItemsIndexes","extractSelectedIds","selectedListItems","containerIndexPath","matchingChildrenPaths","containerChildrenArray","childIndexPath","selectionIdentification","getSelectionIdentificationWhenSelected","ret","isSelectGroupMember","matchingGroups","controllerAttributeSetter","setStateAttributeForControllerByIndexPath","controllerSelectGroupsState","oldSingleSelectActive","oldSelectedPageSegment","newSingleSelectActive","applyToMembers","fullMemberState","memberPageSegment","methodToApply","findIndexPathsOfDescendants","memberPath","memberInfo","clickSelectedPathId","controllerPath","newIndexResult","calculateNewSelectedIndex","noChange","newMember","doPageSwitchForSelectedSwitcher","clickedSelectedPageSegment","selectedSwitcherPageSegment","selectedSwitcherPath","selectedSwitcherConfig","TraceLogHelper","calculatorsManager","_taskManager$getCurre","currentStatePathRoot","now","components","buildComponentsSnapshot","presentation","getTaskState","incidents","getAllValuesForTask","getTime","clipboard","getStateForTracing","statemachine","states","getCurrentStateMachineLeafStates","history","getHistoryStatemachineData","calculator","getStateForTask","variables","buildVariablesInfoArrayForTask","getAllTasksState","stateType","stateDelta","replayStepMonitor","replayStepId","getCurrentReplayStepId","menuConfig","shouldOpen","entries","clientX","clientY","scrollLeft","scrollTop","currentScrollValue","currentOrientationValue","traceScroll","scrollTraceDetails","buildScrollTraceDetails","traceUserInteraction","incrementReplayStep","dumpScrollTriggeredToTrace","_TraceLogHelper$compu","computeScrollPosition","horizontal","vertical","traceDetails","direction","horizontalScroll","verticalScroll","lastScrollValue","isVerticalOrientation","round","_event$target","getComponentTypeForIndexPath","oldSelectedValue","oldComboSelectedId","getComboboxSelectedItem","dataBeforeSelection","buildTraceDetailsStructure","traceConfig","extendedValues","extendTraceDetailsObject","details","buildTraceLogDetails","timestamp","buildOldSelectedTraceLogValueObject","subtype","oldSelectedIndex","getComboboxItemIndexByUdi","tableIndexPath","_pageConfigurationsMa4","tableUserDefId","doRegistrations","doDeregistrations","_component$props","registerComponent","getObservedStatemachineVariableNames","variableName","addVariableChangeObserver","applyRegisteredActions","deregisterComponent","dropChangeObserverForPath","receiverComponent","findComponent","_component$props2","dumpRenderTriggeredToTrace","setState","previousState","buildCounterState","oldUpdateCount","updateCount","incrementCount","oldCount","line","hash64","str","hval","charCodeAt","shortHash","hashFnv32a","actionRegister","hasActionsRegisteredForPath","getRegisteredActionsForPath","clearRegisteredActionsForPath","fullState","newValue","registerStateByUserDefPath","formatSnapshotDump","getTaskSnapshot","rootInRuntime","filterExistingPathIds","id","getRootFromPath","parentIndexPath","parentPrefix","taskData","formatEntryForSnapshotDump","_entry","componentState","componentConfiguration","PageHistoryHelper","historyState","getHistoryState","currentCanGoBack","getRelevantPagesState","setHistoryState","currentCanGoForward","isHistoryModeWithTabs","isHistoryModeNoTabs","pagesState","pages","getCurrentPageFromPagesState","isHistoryModeSinglePage","tabName","currentTab","withTabs","noTabs","allTabs","pageInfo","getCurrentPageInfoForTab","currentIndex","getTab","tabConfig","pageImage","historyMode","Modes","withTabsMode","addPageToWithTabsHistory","noTabsMode","addPageToNoTabsHistory","singlePageMode","url","closable","tabWidth","createPagesState","addPageToPagesState","pageIndex","currentPage","pop","tabInfo","getInfoForTab","pageHistory","getFullState","withHistory","getHistoryModeKey","setFullState","BookmarkHelper","pageTab","triggeringType","requestingComponentPath","bookmarkState","getBookmarkState","bookmarks","bookmarkEntries","setBookmarkState","indexToDrop","pageToDrop","initializeBookmarkState","operationType","triggeringIndexPath","ownerIndexPath","tab","triggeringUserDefPath","ownerUserDefPath","triggerType","triggerIndexPath","triggerUserDefIdPath","triggerUserDefId","operation","ownerUserDefIdPath","ownerUserDefId","WebTab","closeTab","isActive","icon","webTabClass","webTabStyle","WebToolbarHelper","displayTabs","isInFirstHalf","leftVisibleTab","leftHiddenIndex","leftTab","rightVisibleTab","rightHiddenIndex","rightTab","hiddenTabs","newTab","displayTabsWidth","newWidth","allTabsInfo","totalWidth","accum","reducer","tabDict","isCurrentInFirstHalf","nextTab","getNextTopUpTab","topUpTabs","totalTabsMaxWidth","lowerLimit","upperLimit","scoreArray","indexOfCurrentTab","accumulatedWidth","currentTabScore","tabScore","showMoreButtonWidth","containerMarginWidth","buildTabDictionary","idx","getAllTabsInfo","parentPath","MenuItemTree","onMenuHide","dumpContextMenuTriggeredToTrace","contextTrigger","staticMenuConfig","handleContextClick","dynamicMenuConfig","persist","staticConfig","transformDynamicEntries","openMenuItemTree","sendEvent","_this3","itemAttributes","MenuItem","handleItemClick","MenuItemTreeIcon","altText","divider","SubMenu","buildEntries","submenu","ContextMenuTrigger","ContextMenu","onHide","nodeName","parentNode","getBoundingClientRect","hideMenu","dynamicEntries","expandDynamicEntry","replacementEntry","transformedCopy","attribute","provider","providerParam","maxHeight","margin","marginRight","WebToolbar","parentWidth","toolbarWidth","getAllTabs","topUpDisplayTabs","switchTab","CbaPageArea","switchHiddenTab","showMoreClickEvent","tabClickEvent","handleShowMoreTabs","buttonBoundingRect","buildTriggerBoundingRect","menuItems","getImageForTab","bottom","contextMenu","openMenuItemTreeWithDynamicConfig","getTabIconResource","iconForTab","renderTabs","firstTab","showMoreTabs","exceedsMaxTabsWidth","containerWidthWithShowMore","_WebToolbarHelper$bui","buildDisplayTabs","tabContainerRef","PageAreaRenderer","_childAreaStyle","embeddedPageName","hasTabs","tabsBar","scrollableAreaRef","findPage","pagePath","isExcessivePageNesting","childAreaStyle","role","onScroll","traceUserScroll","CbaInterpreter","content","bind","doStandardOnClick","scrollElement","doScrollOnHTMLElement","myPath","getEmbeddedPageName","positionOnlyState","setPosition","initialState","initializeHistoryState","hasStateWithoutPageHistory","currentEmbeddedPage","getPage","safeReceiverTab","getSafeReceiverTabDetails","addPage","updatePageIndicators","updatePageHistoryDependents","embeddingIndexPath","indicator","indicatorPath","indicatorIndexPath","buildIndicatorIndexPath","indicatorState","pageIndicators","pageMatchingIndicators","firstVisibleCandidate","isIndicatorNotHidden","currentPageIndicators","indicatorPathRoot","chosenIndicator","findPreferredIndicator","setSelectedForPossiblyControlledComponent","move","goHome","goForward","goBack","newPageName","canGoForward","canGoBack","forwardSwitchers","backwardSwitchers","locationDisplays","myPathWithoutMyPageSegment","switcher","pageEntry","getPropUndefinedSafe","locationDisplay","setTextValue","currentPageEntry","getEmbeddedPageEntry","addBookmark","dropBookmark","getBookmarks","initialPageName","initialPageUrl","initialTabConfig","initialTab","renderHitMissTable","resultsList","firstActiveMode","classToMemberCount","Map","member","oldEntry","class","set","buildClassMemberCountMap","hasActiveSiblings","weight","resultText","renderClassTableBody","classResultsList","hitMissResultsList","sort","compareClassEntryByName","hitMissName","hitMiss","matchingResult","getResultTextForHitMissByName","comment","renderClassTable","renderResultVariablesTable","resultVariablesList","valueHit","valueLabel","renderResultVariablesTableBody","ScoringModalData","scoringDetails","currentModalContent","hitClassFirstActive","classScoringModeHit","missClassFirstActive","classScoringModeMiss","execTime","nbHits","hitWeight","creditClass","reactionTime","nbMisses","missWeight","creditWeight","nbInteractions","hitRows","missRows","hitClassRows","missClassRows","resultVariables","StatemachineModalData","statemachineDetails","visitedStates","raisedEvents","TracingModalData","truncateTraceLog","popEntries","updateTraceLogState","tracingDetails","peekEntries","entryId","rowIndex","dumpAsStringAndTruncate","fullString","ManageBookmarksData","okButtonClicked","pageAreaIndexPath","testPresenter","toBeDeleted","handleClose","cancelButtonClicked","setBookmarkAsToBeDeleted","bookmark","labelConfiguration","deleteColumnHeader","bookmarkColumnHeader","okButton","cancelButton","toBeDeletedAccess","ModalDialog","centerPosition","innerWidth","innerHeight","isOpen","currentModal","currentModalTitle","closeDialog","Dialog","modal","isResizable","isDraggable","hasCloseIcon","closeOnEscape","onClose","ModalManager","SpecialClickActionsHelper","cut","cutEnabled","copy","copyEnabled","paste","pasteEnabled","cancelTask","pageEventsObserver","handleFullScreen","openFullScreen","documentElement","closeFullScreen","dialog","dialogPresenter","actionParam","doHistoryMoveOnAncestor","historyMoveEnabled","pageAreaPath","getPageAreaPath","receiverPath","dialogContent","openDialog","windowTitle","attachedScale","incrementValue","scaleValueInputPath","buildScaleValueInput","doHistoryMove","actionParamReceiverPath","findPageAreaAncestorPath","requestingComponentPathhWithoutLastPageSegment","MenuBuildHelper","displayComponentContextMenuConfig","transformEntries","displayComponentEntries","transformEntry","displayComponentEntry","transformSeparatorEntry","transformSubmenuEntry","transformActionEntry","transformLinkEntry","transformProvidedEntry","orignal","original","originalEntry","buildActionMethod","isActionDisabled","actionType","nextTask","backTask","startFullscreen","stopFullscreen","close","back","forward","home","manageBookmark","nextTaskEnabled","backTaskEnabled","backEnabled","forwardEnabled","menuEntries","pageLabel","pageAreaTab","switchEmbeddedPage","DialogPresenter","getDialogsFromPresenterStateManager","findPageForPageName","currentTaskPath","filteredDialogs","dialogs","d","visible","checkAndSetFocus","_page$content$config$","pageWidth","pageHeight","focused","handleFocusAndDrag","getCurrentDialogPosition","updatePositionAndFocusDialog","transformValue","ReactDOM","findDOMNode","refs","buildDialogRefKey","getElementsByClassName","match","buildDialogs","isModal","_page$content$config$2","dialogPath","buildDialogIndexPath","hideDialog","closeSpecificPageDialog","hideSpecificPageDialog","taskPath","currentPageAreaType","isDialogParentInPath","currentPageAreaName","traceValues","componentTypeValue","stopEventPropagation","signalFocusChangeToClipboardManager","registerFocus","values","browserEvent","traceUserInteractionPerTraceConfig","eventType","continuingInteractionKey","userInteraction","xPath","isXPageFirst","lastOrientationValue","throttleTraceScrollFunction","throttle","traceScrollWrap","leading","tracePath","getScrollDataFromEvent","isScrollOnPane1","computeScrollOrientation","addMouseEventDetails","detailsObject","valuesToAdd","browserSideEvent","pageX","pageY","screenX","screenY","selectedState","sendAlternateEvent","triggerEvent","defaultReceiver","targetReceiver","buildTargetReceiver","targetPage","conditionalLink","closeParentDialogFromPath","switchPage","targetPageConfig","buildMenuTreeItemConfiguration","readOnly","cutCallback","cutCallbackObj","selectionStart","selectionEnd","selectedText","deregisterSelection","registerSelection","drop","pathOfLinkRequestor","linkTargetsOtherPageArea","PositionCalculationHelper","targetModifier","configBlocks","blockKeyToIndexMap","configContentModifiers","contentModifiersInEditorState","contentModifierParentPath","actualPositionOffset","calculateCurrentPositionOffset","modifierPosition","actualBlockKey","calculateBlockKey","blockKey","blockOffset","offset","characterOffset","startBlockKey","offsetCounter","contentState","getCurrentContent","movedBlockKey","getKeyAfter","targetModifierBlockKey","blockShiftingModifiers","modifier","stateInEditorState","getModifierStateInEditorState","isEvaluatedInject","injectText","active","inBlock","beforePosition","hasMoreThanOneBlock","total","currentBlockShifter","blocks","lastBlockShifterInSameBlock","getLastModifierPerOffset","characterSwitchersStartOffset","characterSwitchersStartIndex","characterOffsetStartValue","getLastBlockOfFragment","afterPositionInSameBlock","isDynamicFragment","injectedText","candidateModifier","compareModifier","candidatePosition","comparePosition","candidateBlockIndex","compareBlockIndex","compareBlockKey","compareOffset","compareIndex","dynamicFragment","candidateModifiers","isGreaterPositionOffset","contentModifierIndex","fromState","EditorStateHelper","startOffset","endBlockKey","endOffset","toBeInserted","EditorState","Modifier","replaceText","buildDraftSelectionState","rawBlocksArrayToInsert","entityMapToInsert","rawValue","entityMap","blockMap","convertFromRaw","getBlockMap","replaceWithFragment","removeRange","styleNames","modifiedEditorState","targetSelection","styleName","applyInlineStyle","entityNames","entityName","applyEntity","forceSelection","selection","startKey","endKey","highlightKey","newEditorState","RichUtils","toggleInlineStyle","SelectionState","createEmpty","merge","anchorKey","anchorOffset","focusKey","focusOffset","DraftLink","_React$Component","getData","buildMyPath","getEntity","entityKey","linkReceiver","fullRichTextPath","getStateAttributeByPathId","getOrBuildState","persistState","currentTarget","contentEditable","buildStyle","onMouseDown","handleMouseDown","notVisited","findLinkEntities","contentBlock","callback","findEntityRanges","character","getType","Audio","kind","controls","Image","Video","Media","media","entity","block","getEntityAt","_entity$getData","relativePathSrc","DraftBullet","getStyle","getBullet","rawSymbol","bullet","_rawSymbol$split","fromCharCode","suppressContentEditableWarning","findBulletEntities","MathJaxTranspiler","apply","interval","setInterval","prevState","update","clearInterval","setTimeout","tex","texReset","tex2chtml","startup","clear","updateDocument","dangerouslySetInnerHTML","__html","innerHTML","MathJaxEntity","_getPrototypeOf2","_len","args","_key","getPropertyData","property","findMathJaxEntities","CbaRichTextField","editor","onParentClick","checkSelectable","fromSecond","toSecond","toggleType","doPageSwitchOrLetTheContainerDoIt","sendStandardOrAlternateEvent","debouncedDoHighlightActions","debounce","doHighlightActions","oldEditorState","extractEditorState","oldSelections","extractSelections","highlightActive","extractHighlightable","blockKeysList","SelectionHelper","getListOfBlockKeysInBlockOrder","hasContentChanges","contentStateEqual","saveEditorStateInPathState","blur","isSelection","lastUserEvent","clickedSelection","getSelectionHitByClick","getSelection","removeClickedSelection","currentHighlightKey","getHighlightColorKey","processHighlightClick","moveFocusToEnd","removeSelectionFromSelectionsArray","saveSelectionsInPathState","triggerHighlightEvent","currentEditorState","currentSelection","toggleOffOperationsList","oldSelection","getIntersect","buildSelection","toggleEditorStateStyleOnSelection","calculateSelectionsArray","highlightChangeEvent","saveModifiersStateInPathState","setModifiersInEditorState","setEditorState","calculateTextValue","newSelections","traceHighlightChange","setSelections","myBlockStyleFn","mediaBlockRenderer","editable","getStylesMap","highlightColors","getTopLevelConfiguration","originalStylesMap","findStylesMapInConfig","highlightStyleMap","rgbaColor","convertHighlightValueToKey","getHighlightColor","itemHighlightColor","stylesMap","HIGHLIGHT","currentColor","currentColorKey","generateSelectionStyle","isHighlightActive","highlightColor","wrapperId","selectionColor","isTouchDevice","editorComponent","forEachContentModifier","modifierPath","addListener","onRemoveLastSelection","onCurrentTimeUpdate","onClearFlashTexts","_this$props10","_this$props11","oldConfig","oldPath","newConfig","newPath","currentTime","_this$props12","registerState","finalEditorState","isRemoveSelection","_this$props13","setVisited","_this$props14","getValidCssIdFromPath","styleMap","extractModifiersInEditorState","_CbaRichTextField$app","applyContentModifiers","_CbaRichTextField$app2","newModifiersInEditorState","customDecorators","strategy","addLinkIndex","onTouchStart","Editor","blockStyleFn","blockRendererFn","blockRenderMap","DefaultDraftBlockRenderMap","handleBeforeInput","handlePastedText","keyBindingFn","customStyleMap","decorators","plugins","setDeepCopy","setComponentClassName","buildInitialEditorState","setHighlightable","highlightText","createWithContent","richTextFieldPageSegment","insertLinkConfigurationsFromEntityMap","contentModifiers","resultArray","extractDefaultHighlightColor","rgba","convertedValue","toSnapshotForEditorState","_entry2","fromSnapshotForEditorState","convertToRaw","editorPath","propsConfig","getBlockKeysToBlockIndexMap","modifierInConfig","modifierParentPath","modifierState","buildNonActiveModifierInEditorState","newModifierInEditorState","actualPosition","calculateActualPosition","modifierInEditorState","_CbaRichTextField$app3","applyEvaluatedInjectModifier","_CbaRichTextField$app4","_CbaRichTextField$app5","applyDynamicFragmentModifier","_CbaRichTextField$app6","contentModifierType","modifierConfig","currentInjectText","TermEvaluator","evaluateTerm","insertString","oldInjectText","replaceTextInBlock","applyInlineStyles","inlineStyles","applyEntities","entities","replaceWithBlocks","numberInjectedBlocks","removeBlocks","doForEach","addContentModifierIndex","getPlainText","oldSelectionsRaw","newSelectionsRaw","TransformSelectionsToTraceSelectionsDTO","getStartKey","getEndKey","getStartOffset","getEndOffset","selection1","selection2","editorContent","rawContent","builtSelection","startKeyIndex","isIntersect","selection1StartKeyIndex","selection2StartKeyIndex","selection1EndKeyIndex","selection2EndKeyIndex","isSameRowEnd","isS1StartSameRowAsS2End","isS1EndSameRowAsS2Start","isSel1StartToLeftOfSel2","isSel1EndToLeftOfSel2","isSel1StartToRightOfSel2","isSel1EndToRightOfSel2","selectionsArray","toRemove","click","keyRowOrder","clickedPosition","rowKey","pos","filteredSelections","isMultipleRow","isSelectionHitByClickOnMultipleRows","isSelectionHitByClickInsideOneRow","isSelectionHitByClickOnOneCharacter","filterConditions","getFocusKey","emptySelection","getIsBackward","keyToIndexMap","traceSelectionsDTO","convertHighlightKeyToValue","blockTextLengths","selectionsMergedStepByStep","currentSelectionIndex","nextSelection","isSelectionToEndOfBlock","isNextSelectionFromStart","newMergedSelection","isTopRowClick","isBottomRowClick","isMiddleRowClick","startIndex","oldContentRaw","newContentRaw","calculateSelectionsArrayFromContentState","highlightSelections","rawSelections","blockIndex","inlineStyleRanges","inlineStyle","mergeRowSelections","TextBlockSelectHelper","richTextPathState","richTextConfig","draftBlocks","buildBlockKeyToIndexMap","currentSelections","getSpansFromSelections","spanArrayContainsNonBlank","highlightedSelection","selectionsHighlighted","blockName","partial","textBlocks","getIdentifyingInfoForLogMessage","blockConfig","findBlockConfigForBlockName","spans","span","selectionsCoverANonBlankInSpanWithOptionalHighlight","every","selectionsCoverNonBlanksInSpanWithOptionalHighlight","selectionsCoverNonBlanksInSpan","selectionsCoverSpanWithGivenHighlightColor","spanToCover","selectionCoverSpanWithGivenHighlightColor","selectionCoversANonBlankInSpan","selectionHighlighted","allBlocksConfig","editorSelection","getSpanFromSelection","start","end","overlap","getOverlap","spanContainsNonBlank","uncoveredAreas","calculateUncoveredAreas","calculateUncoveredAreasBySingleSelection","spansToCover","areaIndex","hitFound","punchTarget","remainingAreas","punch","replaceEntryByArray","arrayToModify","indexToReplace","arrayToBeInserted","spanArray","spanIndex","nonBlankFound","endKeyIndex","stringContainsNonBlank","keyIndex","punchSpan","targetSpan","leftPunchBorder","max","rightPunchBorder","min","isLessOrEqual","isLess","isGreater","oneSpan","anotherSpan","leftOverlapBorder","rightOverlapBorder","one","another","leftBorder","rightBorder","isEqual","isLessBlockKey","leftKey","rightKey","InputComponent","validationPattern","traceType","oldText","newText","nativeEvent","inputTypeValue","inputType","inputDataValue","validationFailEvent","sourceInputPath","newTextIsValid","isValidText","newTextValue","isVariableValueInput","diffIndex","char","oldTextValue","origin","invalidTextValue","inputData","blockedDynamicUpdateText","setVariable","processSelectedTextForCutAndPaste","updateTextValue","registerAsInsertPosition","currentText","currentTextValue","isOldSelected","cellTraceDetails","cellPath","_component$props3","selectionDirection","positionValue","setLastCaretPosition","doStandardOnBlur","doStandardOnFocus","_component$props4","_event$target2","registerInsertPosition","contentToInsert","startPosition","endPosition","replacementText","_component$props5","CbaSingleLineInputField","inputRef","onKeyPressOnInput","isSpreadsheet","onContentUpdate","receivedRow","receivedColumn","textValue","isFormula","cellPathState","cellValue","buildDisplayText","onSelect","onSelectionHandler","onBlurHandler","onKeyPress","onCut","onCutCopyPaste","onCopy","onPaste","spellCheck","CbaTableCell","initializeSpreadsheet","isReadOnly","registerEventListeners","hadFocus","extractCellHadFocus","getPagePath","focusRegister","onCellFocused","setCellHadFocus","updateStateAndTriggerRender","keepHover","buildTableIndexPath","tableState","extractSelectable","isMultiSelectEnabled","keepSelection","selectionValue","onSelectionChange","oldValue","buildLabel","isInt","isFloat","numberOfDecimalPlaces","toFixed","defaultNumberOfDecimalPlaces","extractCellHasError","errorMessage","extractCellTitle","hasStandardTooltip","address","buildTableCell","tableCell","onDoubleClick","onDoubleClickCaptureHandler","onMouseEnter","onMouseLeave","imageReference","cellConfig","comboboxCopy","createCellCopy","setCellType","inputCopy","delegates","childCopy","parentTableUserDefId","boxSizing","hasHover","onRowHeaderUpdate","onColumnHeaderUpdate","onCellMouseEnter","onCellMouseLeave","onUpdateValue","onAutoFocus","selectedCell","isNotValidFormula","formula","isInitialization","oldFormula","extractFormula","setCellHasError","setCellTitle","setFormula","traceCellModified","rowToFocus","columnToFocus","oldEvaluatedValue","newEvaluatedValue","errorInFormula","currentCellType","extractCellType","cellType","oldCellType","oldErrorState","cell","cellCopy","selector","cellState","CbaTreeHeader","headerRef","useRef","_useDrop","useDrop","accept","TreeUtils","handleColumnMove","canDrop","collect","monitor","dragIsOver","isOver","dragCanDrop","_useDrop2","collectedPropsDrop","_useDrag","useDrag","canDrag","drag","DragAndDropHelper","addCanDropStyleAttributes","TreeTraceHelper","columnId","sortDirection","columnName","columnIndex","getTreeDataByPath","treeColumns","getSortDirectionForTrace","rowData","triggeredEvent","isTreeView","treeViewPath","nodeType","nodePathId","nodeTypes","getNodeName","deleteEvent","getNodeType","isTriggeredEventRequired","TreeContextMenuHelper","columnKey","buildContextMenuEntries","actionEntry","buildContextMenuAction","doTreeCut","doTreeCopy","doTreePaste","handlePasteDisabled","doTreeDelete","startRenameOperation","doTreeNew","contextMenuCommands","command","buildContextMenuActionEntry","actionHandler","nodePath","traceNodeAction","nodeTypeName","_TreeUtils$getTreeDat","treeState","copiedNode","currentlyCutNodePath","childTypes","cutNodes","flattenNodes","CbaTreeCell","handleContextMenuClick","updateOnSingleClick","openContextMenu","handleRenameCell","isRenameState","cellEditedValue","getInitialState","treeInstance","extractTreeState","currentRenameNode","setTreeState","handleCellInputFocus","select","handleCellInputBlur","doTreeRename","handleCellInputKeyDown","handleCellInputChange","getCellData","cellData","updateOnClick","_this$state","isLeaf","rowPath","hasSubRows","rowStartStyle","paddingLeft","rowImageStyle","backgroundImage","cellOuterStyle","cellStyle","buildTreeCellStyle","buildCellPath","CbaTreeRow","firstHover","currentNode","selectedClass","cutClass","reactGridClass","rowStyle","c","nodeTypeInstance","treeAction","getTreeDragDropAction","hoverCount","rowRef","ct","hover","deltaTime","doTreeCopyAction","doTreeMoveAction","canNodeTypeDrop","canNodeTypeDrag","begin","CbaTreeRowWrapper","_PureComponent","PureComponent","rootNodes","treeSettings","resetPathsToNodes","parseNodes","node","buildColumnId","isNodeExpandedAtInit","startCollapsed","const","DEFAULT_COLUMN","modifiedColumns","order","displayDroppedColumn","draggedColumnId","getTreePathFromColumnPath","parentInstance","parentPathState","parentTreeState","draggedColumn","droppedColumn","isDraggedToStart","emitTreeEvent","sortable","headerRenderer","sortAscendingByParameter","isDefault","hideLeaves","flatmap","sortAscendingByIndexHierarchy","extractTreeChildPathFromTreePath","treeNodes","filterLeaves","selectedNodePath","allNodes","isRoot","selectedNode","getNode","getParentNode","sortCellFinderFunction","param","sortDescendingByParameter","shouldContinue","treeStartCollapsed","cellInitSettings","contentPage","generateNodePathId","tooltip","searchedNodePath","foundNode","isPrimary","root","fontWeight","fontStyle","textDecoration","setTreeDataByPath","getTreeEventChangeName","getTreeFlatNodesFromUserDefIdPath","_TreeUtils$getTreeDat2","currentNodePath","nodePathIds","columnValues","targetNode","treeActionCurrentNode","_TreeUtils$getTreeDat3","targetNodeInstance","fromPath","toPath","shouldNotClearCut","_TreeUtils$getTreeDat4","collapseNode","_TreeUtils$getTreeDat5","_treeState","_TreeUtils$getTreeDat6","copiedNodeChild","copiedNodeParent","generateNodePathIdChild","isPasted","treeData","deletedNode","deleteEventNodeType","currentParsedNode","deletedNodes","selectedNodeInDeletedNodes","cutNodeInDeleteNodes","_TreeUtils$getTreeDat8","newTreeType","_TreeUtils$getTreeDat9","newNodeType","newNode","createNodeFromNodeType","primaryColumn","mockRowData","selectNodeAction","COLUMN_HEIGHT","ROW_HEIGHT","columnPath","compareLocator","node1","node2","comparator1","comparator2","comparison","path1","path2","indexArray1","indexArray2","commonDepth","checkedDepth","number1","number2","innerNode","canTreeDoIt","dragSource","canNodeTypeDoIt","dropTarget","getTreeInstanceFromChildComponent","treePathId","getTreePathFromChildComponent","getTreeFromUserDefIdPath","extractTreeNodes","extractTreeColumns","extractNodeTypes","treeReadOnly","extractTreeReadOnly","setTreeNodes","setTreeColumns","setNodeTypes","FORMATS","DE","decimal","grouping","EN","CbaTreeChildArea","handleTreeChange","subscription","remove","emptyStyle","MediaPreview","stream","pauseRecording","resumeRecording","shouldPause","mediaRef","useEffect","srcObject","pause","onPause","onPlay","autoPlay","OPERATION_PLAY","OPERATION_PAUSE","OPERATION_STOP","OPERATION_ENDED","CbaMedia","onClickCapture","onPlayHandler","isTaskPlayerPausePlay","saveInStateLastOperation","traceMedia","isStatemachineTriggered","startEvent","onPauseHandler","player","getMediaPlayer","duration","isPauseHandled","pauseEvent","onStopHandler","extractLastOperation","stopEvent","onEndedHandler","increasePlayNumberAndCheckMaxPlay","endEvent","handleTaskPauseOrResume","enterPause","lastOperation","shouldPlayOnResume","play","onVolumeChange","setMediaVolume","volume","onTimeUpdate","newTime","extractCurrentTime","setCurrentTime","endRecording","mediaBlob","recordNumber","extractRecordNumber","setMediaBlob","taskInfo","userDefinedIDPath","reportRecording","startRecordingTime","isRecording","debouncedEndRecording","shouldSendStartRecordingEvent","startRecordingDelayed","recordingStarted","setVolumeFromState","dropVariableChangeObserver","recording","maxRecord","extractMaxRecord","moment","format","setRecordNumber","stopRecording","setLastOperation","extractMediaVolume","newVolume","convertToMediaRefVolume","maxPlay","extractMaxPlay","currentPlayNumber","extractPlayNumber","setPlayNumber","setHideControls","automaticStart","extractAutomaticStart","hideControls","extractHideControls","modifiedTraceConfig","currentPlayNo","volumeLevel","computeVolumeInPercentage","mediaStyle","ReactMediaRecorder","audio","video","onStop","render","status","startRecording","previewStream","mediaBlobUrl","stopRecordingEvent","pauseRecordingEvent","startRecordingEvent","muted","extractMediaBlob","srcFromVariable","mediaReference","altSrc","mediaAlternateRef","extSrc","mediaReferenceExternal","altExtSrc","mediaAlternateRefExternal","poster","someResourceToPlay","createMediaRecorder","controlsList","onEnded","disablePictureInPicture","useAudio","playNumber","delegateComponent","delegatePath","contextSlots","mainEntry","valueIndex","paramsArray","previous","if","else","activeBranch","b","currentMaximumValue","currentMaximumName","candidateName","candidateValue","pattern","floor","ceil","trunc","expression","valuesArray","exp","regexp","cond","candidates","pageType","getCurrentPageNames","standardPage","xPage","pageAreaConfig","trimRootAndPageAreaFromPath","receiverTabInfo","receiverTabName","receiverTabImage","presenter","saveCurrentTaskResults","switchFirstMatchingTaskIntraTest","nbUserInteractions","nbUserInteractionsTotal","firstReactionTime","firstReactionTimeTotal","taskExecutionTime","taskExecutionTimeTotal","findComponentByAbsoluteUserDefId","registerAction","applySimpleSetter","getTraceDataBeforeSetSelection","traceChangesAfterSetSelection","getFormulaOrValue","caluculateTextInsert","insertPosition","dropLength","insertedValue","insertText","pathParameter","absolutePath","blockOwnerPathId","getIndexPathForTextBlockPath","richTextPageSegment","highlightColorValue","isTextBlockSelected","isSelectionContainsNonBlank","roundingMode","valueAsText","parsedValue","integerValueFromString","valueAsString","parseResult","parseDecimalString","whole","wholeValue","fractionClass","wholeUp","dotIndex","wholeString","fractionString","fractionValue","fractionCompareString","stop","logMessage","setAutomaticStart","setMaxPlay","isSender","isReceiver","modeToSet","extractDragAndDrop","setDragAndDrop","setSingleSelectActiveForController","setAllowDeselectForController","setSelectable","setSelectionChangesBlockedForController","currentTaskName","termIdentifiedByName","calculationsConfigurationManager","findCalculationByTaskName","calculationName","useExistingCalculationResults","existingResult","getResult","evaluateNamedCalculation","getStatePathRootForTask","_variableManager$getV","oldValueLeft","oldTypeLeft","_variableManager$getV2","oldValueRight","oldTypeRight","getListSelectedItems","getCurrentNodePathId","getNonSelectGroupSelectedChildren","getSelectGroupSelectedChildren","getSelected","timerEvent","remainingTimeInMillis","getTimerData","remainingTime","getListItemsPerMemberState","getNonSelectGroupSelectedChildrenPerMember","getSelectGroupSelectedChildrenPerMember","setPostponedTaskSwitch","switchCall","deferred","eventName","setTimedEventInterval","setStatePageAssignment","getTotalNbOfRaisedEvents","getRaisedEvents","getVisitedStates","getRaisedEventsInState","getValuesOfVariable","traceTextInternal","dumpSnapshotToTrace","operator","calcGetMem","calcOp","calcOpnd","scale","displayWidth","withThousandSeparator","includeOperandInHistory","angle","getValueFormatForCalculator","calcSettings","topLevelConfiguration","saveTaskState","findByComponentType","richTextComponent","highlightColorChanged","xPosition","yPosition","xPositionType","yPositionType","componentInstance","isXPage","currentPages","containerRef","CbaContainer","containerRendererRef","minDistance","maxDistance","anchorPointType","groupMembers","checkNonMembers","getIndexPathsForUserDefIds","checkChildhood","_TermEvaluator$getCom","getComparePointSets","memberComparePoints","nonMemberComparePoints","checkLocalGroup","minX","maxX","minY","maxY","rangeMembers","_TermEvaluator$getCom2","checkInRange","pageToLookFor","findIndexPathsInCurrentTaskOfComponentWithType","pageFrameInstance","targetWindow","getFrameWindow","getFrameContentUrl","postMessage","Error","caretPosition","extractLastCaretPosition","term","topLogName","evaluateTermInternal","logContext","typeOfTerm","logCalculation","isTermComplete","operatorName","operatorFunction","operators","evaluatedParams","ifThenElse","ifParamIndex","evaluationResult","evaluateParam","chosenBranch","chosenBranchIndex","ifGuard","branchesIndex","branchesArray","branchInfo","branchIndex","guard","branch","resultValue","index2","parameterValue","ValueFormatter","membersNotKeepingDistance","keepsDistanceToGroup","nonMembersKeepingDistance","excludeIndex","groupMember","keepDistance","pointA","pointB","xDelta","yDelta","sqrt","membersNotInRange","filterInRange","nonMembersInRange","filterOutOfRange","points","point","candidatePath","classifier","nonMemberIndexPaths","getIndexPathsForChildrenWithClassifier","getComparePointsForIndexPaths","userDefIdPaths","indexPaths","getComparePointForIndexPath","getComparePoint","positionFromConfig","getVisitedPathIds","regularExpressions","matchedNodes","getNodePathIds","matches","matchedNodesByPatternId","matchNodes","nodeToColumnValuesMap","getColumnValuesMap","shift","columnsMatch","treeCopyCurrentNode","treeMoveCurrentNode","contextValue","and","or","not","equal","notEqual","greater","greaterEqual","less","lessEqual","maxNamed","arrayLength","union","intersection","add","subtract","multiply","divide","modulo","stringFormat","concatenate","boolToString","numberToString","contains","getCurrentTest","getCurrentTask","getCurrentItem","getCurrentPage","getEmbeddedPage","saveTaskResults","previousTask","switchTaskInTest","switchTaskAndTest","recommend","getDisabled","getHidden","getVisited","getTextValue","isSelectedComponentOrTextBlock","isHighlighted","getIntegerValue","setMediaPlayerVolume","setMediaPlayer","initMediaPlayer","setDragAndDropMode","setSingleSelectMode","setAllowDeselect","setSelectChangeBlockMode","getCalculationResult","switchVariables","getImplicitVariable","getInternalImplicitVariable","raiseEvent","postponeTaskSwitch","setStatemachineAssignedPage","getNbStatemachineEventsRaised","getCurrentLeafStates","getRaisedStatemachineEvents","getStatemachineVariableValues","traceText","traceSnapshot","getVisitedNodes","matchNodesWithColumns","treeMove","treeCopy","scrollEmbeddedPage","scrollTopLevelPage","currentTimestamp","consoleLog","setGlobalPropertyHighlightColor","containerMembersFormLocalGroup","containerRangeContainsMembers","isInBookmarksList","callExternalPageFrame","patterns","hasMatch","DndItemTypes","VALUE_DISPLAY","itemType","previewData","senderConfig","getDragAndDrop","sender","statemachineEvent","dragAndDropData","senderData","getInitialClientOffset","triggerStatemachineEvent","isDragAndDropSender","idDragging","isDragging","dropsOfMyChildrenOnly","transferredData","receiverConfig","actionTerms","getClientOffset","lastEvaluationResult","evaluateActionTerms","relocateIfNecessary","logAction","senderIndexPath","isDragAndDropReceiver","shallow","dragAndDropInConfig","translationX","translationY","app","scaleValue","receiverUserDefIdPath","senderUserDefIdPath","senderUserDefId","receiverIndexPath","receiverUserDefId","sendingType","receivingType","ContainerRenderer","forwardRef","_DragAndDropHelper$ad","addDrop","_DragAndDropHelper$ad2","dropCollectedProps","extendedStyle","containerStyle","CbaRectangle","lineOnClickHandler","containerOnClickHandler","blockEvents","lineWidth","lineWidthString","baseLineStyle","northStyle","eastStyle","southStyle","westStyle","buildLineDiv","SimpleTextFieldRenderer","addDrag","dragCollectedProps","preview","getEmptyImage","captureDraggingState","_DragAndDropHelper$ad3","_DragAndDropHelper$ad4","addIsDraggingStyleAttributes","renderAsDiv","CbaSimpleTextField","onInputFieldUpdate","suppressSelections","textInputReferencePath","additionalCssClass","filteredPaths","CbaButton","selectedImage","pressed","onMouseUp","getBackgroundImage","isClipboardManagerAction","selectionHandlerType","selectionHandlerParam","increment","switchTaskIntraItem","switchTaskInterTest","getCurrentTaskResults","incrementScale","addFlexTextAlignmentToStyles","styleObject","flexAlignment","pressedState","highlight","positonInConfig","displayText","extractMultilineText","backgroundImageStateResult","getImageTag","CbaRadioButton","addFlexAlignmentToStyles","verticalAlign","horizontalAlign","flexDirection","computeFlexAlignment","computeMargins","isTop","marginValue","computeControlIconPosition","controlIconOnly","controlIconSize","controlPosition","rawText","textWrap","labelPosition","leftToRight","textWrapStyle","marginLeft","marginBottom","hasImage","inputStyle","labelPositionDelta","textStyle","paddingRight","radioWrapStyle","forKey","shortid","generate","htmlFor","checked","CbaCheckbox","hasLabel","checkboxLabel","checkBoxWrapStyle","CbaLink","CbaPolygon","renderingSelectedState","polygonStyle","buildStyleSvg","pointsString","buildPointsString","bendPoints","CbaRegionMap","regions","CbaInnerHtml","sanitizeHtml","innerHtml","CbaExternalPageFrame","saveIframeState","iframeWindow","iframeRef","contentWindow","stateToSave","setExternalContentState","reactionMessage","isPermissionDeniedException","restoreIframeState","savedState","extractExternalContentState","currentSaveTimer","clearTimeout","processSaveTimeout","isSaving","userDefIdPathMessage","getProperResourcePathExternalResources","pageAddress","URL","iframeInstance","childDocument","contentDocument","childWindow","querySelector","uniqueTitle","iframeUrl","buildIframeUrl","setVolatile","stateToRestore","callCount","configPageAddress","postMessageReceiver","registerAcceptableUrlForExternalPageFrameEvent","urlContainsParametersAlready","CbaTree","expandOnly","oldExpandedValue","addRowReferences","hideColumns","isDefaultColumn","displayNodes","getTreeDisplayNodes","displayTreeColumns","getDisplayColumns","ReactDataGrid","headerRowHeight","rowHeight","rowGetter","rowsCount","rowRenderer","onColumnResize","handleColumnResize","initTreeNodes","initTreeColumns","initTreeState","setTreeReadOnly","CbaTreeView","handleGridSort","setTreeViewSort","traceSort","extractTreeViewSort","treeViewState","getTreeViewDisplayNodes","displayColumns","hideColumnsHeader","onGridSort","sortColumn","buildErrorResult","evaluateCell","cellsTable","maxCellCoordinates","cellToEvaluate","evaluatedCellsList","dataCellCoordinates","col","cellContent","extendedCellsList","parser","Parser","on","referredCoordinates","done","recursiveResult","startCellCoordinates","endCellCoordinates","resultRows","resultRow","setFunction","sumUpNestedValues","CbaTable","tableData","extractTableData","_this$executeFormulaI","executeFormulaInternal","cellToUpdate","valueToUpdate","formulaToShow","errorMessageToShow","notifyShowAddress","notifyShowContent","notifyUpdateCellValue","_this$handleHeaderSel","handleHeaderSelection","setOldSelectedCell","notifyRemoveLastSelection","setSelectedCell","runAllAvailableFormulas","onRemoveOldSelection","removeAllListeners","isAnUpdate","executeFormulaAndNotifyOthers","setTableData","j","_this$executeFormulaI2","dataTable","_this$executeFormulaI3","res","hasError","buildResultString","buildErrorMessage","divByZeroError","naNError","syntaxError","circularError","notifyRowHeaderUpdate","notifyColumnHeaderUpdate","currentColumn","newColumn","currentRow","newRow","buildInitialData","Infinity","CbaTableCellEditor","updateContent","onAddressUpdate","setCellEditorAddress","isNotValid","buildAttachedTableIndexPath","setCellEditorIsNotValid","setCellEditorErrorMessage","setCellEditorContentIsReadOnly","setCellEditorContent","cellEditorPathWithoutLastPageSegment","attachedTable","adressTitle","contentTitle","extractCellEditorAddress","extractCellEditorContent","extractCellEditorContentIsReadOnly","addressWidth","cellAddressRelWidth","contentWidth","addressrStyle","contentStyle","isError","extractCellEditorIsNotValid","extractCellEditorErrorMessage","errorStyle","CbaCalculatorHistory","simpleTextFieldPath","getSimpleTextFieldPath","simpleTextFieldState","simpleTextFieldConfig","myState","CbaCalculatorInput","keydown","keypress","clipboardData","catchKeyboardInputEvents","keyboardShortcutsRegistered","addEventListener","removeEventListener","_CbaCalculatorInput$c","createDelegateComponent","CbaInputField","CbaStopWatch","counterValue","setCounterValueToState","setCounterValue","reinitialiseState","rawInitialCounterValue","extractCounterValue","initialCounterValue","hours","minutes","seconds","startTimer","formatTime","timer","CbaScaleValueInput","onChangeCompleteHandler","validateValue","pageIncrement","minValue","maxValue","onIncrementScale","incrementedValue","numberValue","scaleValueInput","stepIncrement","thumbSize","isHorizontal","Slider","step","onChangeComplete","CbaSpinnerValueInput","onChangeHandlerDebounced","onInvalidHandler","valueAsNumber","onInputHandler","inputValue","NumericInput","wrap","input","onInvalid","onInput","ROW","COLUMN_REVERSE","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","CbaTimer","timerAnimation","runForward","timerData","computeTimerPercentage","setTimerType","verticalOrientation","timerType","computeTimerType","computeTimerValue","time","miliseconds","totalTime","isRunning","showSecondsLabel","timerStyleDirection","animationStyle","timerParsedValue","ListItem","itemHeight","parentTabIndex","CbaList","getDisabledFromState","getSelectedIdsFromState","isCtrlKeyEvent","setSelectedIds","listPath","mapIndex","Delegate","getComponentClass","componentTypeName","CbaTestPresenter","modalType","isDialogOpen","isPaused","resume","generateTaskStyles","cssStyles","_noDividerStyle","_areaStyle","taskId","taskCssStyles","itemWidth","totalHeight","foundPage","isRighToLeft","standardPath","buildPathForPage","withEditContextMenu","itemLayout","isHorizontalDivider","xAreaSize","getXAreaSize","dividerOffset","calculateDividerOffset","dividerThickness","getDividerWidth","isDividerMovable","isDividerHidden","standardPageOrientation","getRtlOrientation","xPageOrientation","pagesAreaDir","getRtlDir","standardPageDir","noDividerStyle","wrapStyle","dividerStyle","getDividerColor","MozBoxSizing","WebkitBoxSizing","MozBackgroundClip","WebkitBackgroundClip","backgroundClip","transition","areaWrapStyle","areaStyle","keyMap","openConfigParams","print","keyHandlers","printCbaVersion","debugScoreHotKey","debugTraceHotKey","debugStatemachineHotKey","openTrace","openScoring","getScoring","openStateMachine","currentStatemachineData","currentVariableData","nullSafeStatemachineData","customFontsCss","buildCustomFontsCss","getCustomFontMappings","HotKeys","handlers","dir","isRightToLeftPage","SplitPane","pane1Style","pane2Style","resizerStyle","minSize","maxSize","defaultSize","allowResize","firstAreaDir","secondAreaDir","isRightToLeft","defaultWidth","getPagePosition","defaultHeight","getDividerConfig","xSize","xPlacement","getXPlacement","HeaderButtons","handleClick","button","oldState","renderHelper","getLargestHeightFromButtons","buttons","largestHeight","isButtonInvalid","buttonConfig","invalid","buildButtons","barWidth","buttonTotalWidth","buttonStyle","buttonWrapStyle","backgroundSize","backgroundPosition","backgroundRepeat","buttonPadding","isNonEmptyArray","TopButtonToolbar","buildSlides","buttonArray","Slide","buildCarouselConfig","buttonHeight","widthRatio","getButtonPadding","buttonWidth","carouselWidth","navButtonsWidth","carouselHeight","slideWidth","slideHeight","leftArrow","rightArrow","carouselWrapStyle","getCarouselMarginBottom","carouselStyle","slides","visibleSlides","arrows","computeCurrentSlideCenter","activeSlide","middlePoint","computeCurrentSlideNotCenter","carousel","carouselStore","getStoreState","currentSlide","buildCurrentSlide","carouselConfig","isCenter","buttonRatio","activateCenterToolbarOnChange","CarouselProvider","naturalSlideWidth","naturalSlideHeight","totalSlides","ButtonBack","ButtonNext","getCarouselHeight","TaskNavigator","verifiedRecommendations","buildTestButton","matchingRecommendation","findFirstRecommendationForTest","targetTaskInfo","selectDefaultTaskForTest","testButtonHeight","currentTest","buttonClickHandler","traceNavigation","navigateToTest","buildButtonStyle","buildButtonClassName","findFirstTaskWithNameForTest","testState","getTestState","defaultTask","findDefaultTaskForTest","buildTestNavigation","buildTaskButton","taskButtonHeight","currentItem","currentTask","navigateToTask","buildTopLayerStyle","assignRatioToButton","minWidth","buildTaskNavigation","activeTest","findTestForName","TopButtonToolBar","growth","testIndexForName","testForName","findFirstTaskInTest","targetTest","isTest","navigationTarget","navigationType","switchTaskIntraTest","getTaskNavigatorHeight","LoggedInView","handleTopLevelPageChange","buildTaskNavigator","shouldBuildNavigator","setTopLevelPageChangeHandler","startAutomaticTransmissions","reactClientLoaded","err","stopAutomaticTransmissions","Notifications","Login","switchToLoginState","handleLogin","loggedUserName","handleLoginClick","updateInputLoginValue","handleKeyPress","titleLabel","fieldLabel","buttonLabel","placeholder","TYPES","pageBlur","pageFocus","enterFullscreen","PageEventsObserver","lastVisibilityTime","lastFullScreenTime","isFullScreen","handleVisibility","newVisibilitytime","getMoment","timeSpent","computeTimeDifference","traceAction","buildTraceDetails","time1","time2","diff","asSeconds","alternateStateDuration","isFullscreenNow","newFullScreenTime","ifvisible","App","resize","computeScalingValue","showWaiting","loginDialogClosedHandler","loginTitleLabel","loginFieldLabel","loginButtonLabel","loginDialogDisabled","showTask","courseForNavigator","testsForNavigator","switchTask","scalingConfig","scalingMode","dumpTasksViewConfigurationToTraceLog","showReplay","setScalingConfig","horizontalScale","verticalScale","getScalingAlignmentCssClass","_this$scalingConfig","alignmentVertical","cssClass","fieldValue","renderWaiting","waitingMessageTexts","renderLogin","renderTask","_this$state2","initObserver","newValues","upperHeaderMenu","lowerHeaderMenu","ComponentStateManager","stateMap","getStateSnapshot","getSnapshot","buildPathRoot","preloadWithStateSnapshot","snapshot","fromSnapshotRepresentation","registerStateChangeFromSnapshot","fromSnapshotRepresentationForSingleEntry","doDeepCopyIfRequired","dumpStateChangeToTrace","toSnapshotRepresentationForSingleEntry","findOrBuildStateForPathIdInternal","filterMethod","registered","rootFromPath","buildStateFromConfig","entryFilter","updateVolatiles","toSnapshotRepresentation","getPosition","setDefaultLinkReceiver","calculateDefaultLinkReceiver","addPropagationGroupControllerState","addSelectGroupControllerState","addSelectGroupMemberInfo","addAttributesToInitialState","isLinkCatcher","linkCatcherConfiguration","catchLinkSetting","catchLinks","extractDeepCopy","extractVolatile","updateStateInComponentStateManager","toSnapshotRepresentationByComponent","_entry3","fromSnapshotRepresentationByComponent","extractComponentClassName","toSnapshot","fromSnapshot","ComponentDirectory","componentList","treeInstnancesUserDefinedIds","pageComponents","findComponentsByPageName","treeComnOnPage","len","lenComp","treeChildAreaIdToIgnore","subTreeViewIds","findSubTreeComponentsWithinAPage","comp","treeViewComnOnPage","IncidentsAccumulator","enterTask","atTime","leaveTask","startTimeOfCurrentTask","startTimeOfCurrentPause","timeSpentPausedInCurrentTask","firstReactionSeen","lastContinuingInteractionKey","getOrInitializeValuesForTask","getNonPausedTimeSpentInCurrentTask","pauseTask","resumeTask","getValuesForTask","taskValuesList","clearTasksState","preloadTasksState","allTasksState","injectStateChangeAtReplay","buildInitialValues","startOfCurrentPause","timeSpentInEarlierPauses","getTimeSpentInPausedState","ConditionalLinkHelper","branches","logUndefinedMessage","condition","actions","PageConfigurationsManager","pagesList","buildMappings","userDefinedIdCatalog","textBlockNameCatalog","supressWarning","pageSegmentCatalog","addMappingsForPage","addMappingsForComponent","addMappings","addMappingsForComponentList","buildComboBoxItemsArray","buildListItemsArray","buildLinkConfigurationsArray","textBlock","_CbaCalculatorInput$c2","CalculationsConfigurationManager","calculationEntry","findAllCalculationsByTaskName","calculation","tasksList","namedCalculations","findScoreResultListByTaskName","listName","list","findAllScoreResultListsByTaskName","elements","scoreResult","lists","findScoreResultAttributesByTaskName","findRelevantVariablesForTask","implicitVariables","targetVariables","excludedVariables","obj","PresenterStateManager","newState","taskEntriesList","removeDialog","taskState","removableDialog","newPosition","currentTaskState","setMainAreaPage","changeOrCreatePageArea","pageAreaList","pageAreaEntry","ValueMapper","valueMapName","valueToMap","valueMapToUse","valueMaps","acceptingGuard","guards","guardTerm","TaskManager","topLevelPageChangeHandler","itemConfiguration","resourcePath","externalResourcePath","itemInfoEntries","setSwitchCallback","switchCallback","setAvailabilityCallback","availabilityCallback","triggerGoToTask","newItemName","triggerTaskSwitch","checkAvailableTask","evaluateConditionalLink","combinedPosition","getTopComponentPosition","switchTopLevelPage","fullReceiverPath","evaluatedPageAreaType","preparePageSwitchInPresenterState","setPageName","calculations","getResultsListForTask","getOldTaskResults","buildScoringHitMissListEvaluationResult","buildScoringClassListEvaluationResult","addScoringAttributesEvaluationResult","addResultVariablesEvaluationResult","activeResourcePath","activeExternalResourcePath","oldTask","oldItem","oldTest","newTask","newItem","taskResult","stopCurrentStatemachine","setTestItemTaskNames","replayMode","itemInfo","getItemInfoForName","getTaskForName","newTaskId","setOrInitializeCurrentCalculator","switchCurrentStatemachineWithoutStarting","initializeVariablesForTask","traceVariableValues","prepareTaskSwitchInPresenterAndNavigatorState","startOrInitializeCurrentStatemachine","dumpFullStateToTrace","_this$runtime","componentsState","statemachines","getStatemachinesPreloadData","presenterState","taskNavigatorState","taskResults","calculators","_this$runtime2","clearStatemachines","_this$runtime3","preloadStatemachinesData","getItemResources","getItemInfo","usedResources","externalResources","mapResourcePath","internalResources","fontMappings","itemInfoEntry","requestType","scoringListName","scoringList","classResultVariables","computeClassResultVariables","explicitResultVariables","computeExplicitResultVariables","implicitResultVariables","simplifyImplicitVariablesName","computeImplicitResultVariables","sortedClassResultVariables","localeCompare","implicitVariablesResult","implicitVariableResult","simplifyImplicitVariableName","simplifyUserDefIdPath","isFirstActiveMode","hitClass","winnerHit","retrieveWinnerHit","textResult","computeTextResultForClassVariable","nameResult","computeNameResultForClassVariable","labelResult","computeLabelResultForClassVariable","createResultVariable","calculatedValue","flatMap","scoringResultPerMember","createPerMemberImplicitResultVariablesFor","createDefaultImplicitResultVariablesFor","selectGroupNumber","resultVariable","resultVariablesInPageAreas","retrieveImplicitVariablesEmbeddedInPageAreasAsAbsoluteUDI","variableUdi","adaptedCalculatedValue","adaptValueForCalculation","pageAreaVariableName","pageAreaVariableValue","memberState","adaptedIdCalculatedValue","adaptedOpCalculatedValue","nameValue","textResultValue","nameResultValue","labelResultValue","jsonString","implicitVariableAbsoluteUdi","implicitVariablesEmbeddedInPageAreas","implicitVariableUdi","pageAreaAbsoluteUserDefId","pageAreaUserDefId","memberAbsoluteUserDefPath","targetClass","hitName","filteredRows","findWinnerHitForFirstActiveMode","maxObject","currentObject","resultLabel","computeResultVariablesEvaluationResult","currentResults","evaluationStructure","buildHitRowsFromCalculations","buildHitClassRowsFromCalculations","results","suffix","hitRow","firstActiveHit","hitClassRow","defaultPageName","conditionalLinkResult","saveTestState","initialTaskEntry","buildInitialTaskStateObject","initialPage","initialXPage","conditionResult","initRule","afterConditionEvaluationTaskEntry","setPageForPageAreaInTaskState","newPage","TaskResultsManager","resultsForTask","TimedEventsCatalog","putEntry","triggerInterval","acceptingStatesList","getEntry","timedEventsList","buildTimedEventEntry","getTimerIntervals","clearTimeoutHook","handle","setTimeoutHook","argument","stateName","eventEntry","scheduledTimeoutHandle","scheduledTriggerTime","remainingInterval","timedEventEntry","scheduleTimedEvent","setScheduledDataInTimedEventEntry","startInterval","getNow","targetTime","timeoutId","entryToModify","StatemachineEventHistory","getHistoryDataForSnapshot","raisedEventsPerState","totalNbOfRaisedEvents","valuesPerVariable","valuesPerVariableAfterLastArtificialEvent","reportBeforeEvent","activeStates","variableValues","addVisitedStates","isArtificialEvent","addRaisedEvent","addRaisedEventPerStates","addVariableValues","reportAfterEvent","events","matchInHistory","matchInPendingMemory","addRaisedEventPerState","addVisitedState","stateToAdd","addValuePerVariable","isArtificialVariable","variableInfos","variableInfo","initialValues","Statemachine","model","timedEventDefaults","statePageMapDefaults","historySnapshot","running","stopTimedEvents","continue","paused","getCurrentStates","startTimedEvents","pauseTimedEvents","resumeTimedEvents","eventProcessingRuns","enqueueEventLastOut","runSingleEventWithHistoryReports","pendingEventFromQueue","pendingEventQueue","pendingTaskSwitch","switchToExecute","executePendingTaskSwitch","timedEvents","getEventData","setTriggerIntervalInEventEntry","getCurrentTimerIntervals","getStatePageAssignments","statePageMap","areaType","areaName","oldEntryIndex","getCurrentVariableValues","currentVariableValues","getVariableValuesMapForTask","getHistoryData","interpreter","getConfiguration","getFullConfiguration","getAllCurrentStates","buildStateMachine","machineModel","buildTimedEventsCatalog","scxml","scion","Statechart","transformMachineModel","errorInfo","tagname","reason","originalStates","statesCopy","modelCopy","transformStates","stateArray","parentStatePath","hasSubstates","statePath","buildStatePath","transformEntryExitActions","buildInitEventName","transitions","transformTransition","initEventName","onEntry","buildOnEntryFunction","onExit","buildOnExitFunction","putEventOnQueue","enqueueEventFirstOut","startMyTimedEvents","stateToPageMap","assignedPageSwitch","findScheduledEventsByState","stopTimedEvent","findUnscheduledEventsByState","startTimedEvent","findScheduledEvents","pauseTimedEvent","resumeTimedEvent","buildVariablesInfoArray","gen","unshift","buildStatePageMap","statePageAssignments","modelPageAssignments","dynamicPageAssignments","dynamicAssignment","oldAssignmentIndex","existingAssignment","statesList","catalog","findAcceptingStates","recursionResultState","stateId","buildConditionFunction","onTransition","buildOnTransitionFunction","sourceState","targetState","StatemachinesManager","currentMachine","preInitTriggeredEvents","existingMachine","statemachinesList","statemachineModelsList","newMachine","triggerRerenderForAllChangeObservers","pauseCurrentStatemachine","resumeCurrentStatemachine","taskSwitchCall","existingEntryIndex","statePageMapDefault","machine","timerIntervals","historyData","preloadData","machineData","TaskNavigatorStateManager","testEntriesList","TraceLogBuffer","entryType","entryContent","withReplaySupport","isReplaySupportType","withoutSnapshot","newEntry","getNextCount","buildTimeString","withExtendedMetaData","traceContextId","withoutItemConfiguration","withoutScoring","logEntriesList","newEntryListener","deliveredEntries","setNewEntryListener","setWithReplaySupport","setWithExtendedMetaData","setWithoutItemConfiguration","setWithoutSnapshot","setWithoutScoring","entryCounter","date","padLeadingZeroes","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","buildTimeZoneOffsetString","getTimezoneOffset","offsetInMinutes","absoluteOffsetInMinutes","abs","minutesOffset","hoursOffset","ClipboardManager","selectionHolderEntry","currentSelectionHolder","isReadOnlyCallback","setClipboardContent","getSelectionCallback","traceCutCopy","currentInsertPosition","insertPositionEntry","clipboardContent","insertCallback","tracePaste","deregisterInsertPosition","selectionHolder","newContent","traceLog","wasPerformed","contentDealerIndexPath","contentUserDefIdPath","contentIndexPath","contentUserDefId","isPerformed","StringUtils","word","charAt","toUpperCase","UserDataUploader","userDataBuffer","buildUserDataPostContentCallback","dataType","setSessionContext","loginTimestamp","sessionContext","getSessionContext","transmitInterval","setNewTimer","setImmediateCallback","stopOldTimer","dropImmediateCallback","collectEntriesAndTriggerTransmission","transmitterPromise","transmitterPromiseIsResolved","collectEntriesAndBuildTransmitPromise","notificationToaster","addUserDataEntries","getUserDataEntriesList","shouldTryAgainToSend","isMaxFailCountErrorDisplayed","notifyErrorMsg","getFailCount","setMaxFailCountErrorDisplayed","show","ex","userDataRequestBody","getTransmittingPromise","updateUserDataEntriesListAfterSuccessfulSend","noOfEntriesTransmitted","increaseNextSentFailCount","setPostMessageTransmissionChannel","targetWindowType","domainUri","transmissionChannel","axiosInstance","transmitCallback","setTransmitInterval","resetMaxFailCount","setCallbackTransmissionChannel","setConsoleTransmissionChannel","setHttpTransmissionChannel","transmitUrl","httpTimeout","setNotificationToaster","toaster","isMaxFailCountError","lastSentFailCount","newTransmitInterval","currentTimer","userDataEntriesList","newUserDataEntries","noOfTransmittedEntries","dataToTransmit","transmitViaPostMessage","transmitViaCallback","transmitViaConsole","transmitViaHttp","notify","targetOriginUri","uploaderInstance","messageToSend","getTargetWindow","getDataType","parent","opener","nbOfEntriesInTransmission","post","dataToLog","entriesList","capitalizedDataType","toFirstUpper","TraceLogUploader","_UserDataUploader","buildTracePostContent","sendTimestamp","metaData","cbaVers","PostMessageReceiver","parsedUrl","tryToParseURL","acceptedExternalPageFrameUrlsList","startReceiving","defaultAcceptedUrl","receiveEvent","sendTaskPlayerReadyEvent","windowType","sendResponseEvent","responder","source","dataInEvent","tryJsonParse","eventTime","eventProcessed","processRuntimeControlEvent","processIfExternalPageFrameEvent","traceMessage","microfinEvent","microfinVariable","isEmptyOrNoValue","isNoValue","safeIndexPath","safeUserDefIdPath","newType","callId","messagePayload","getUserInteractionCount","processAvailabilityMessage","availableTaskSwitches","isTaskSwitchAvailable","existingEntry","sourceWindow","setWaitMessages","setScalingConfiguration","preloadPromise","setPreload","requestId","isSuccess","images","videos","audios","insertMessageInTrace","logStateToTrace","flushTrace","channel","isValidTargetOrigin","targetOrigin","contextId","setTraceContentFilter","replaySupport","getUserId","getTask","responderFunction","getTasksState","replay","story","getScoringResult","getOldScoringResult","sendStatemachineEvent","scopes","scoreHotKey","traceHotKey","statemachineHotKey","eventToSend","triggeringEventOrigin","triggeringEventSourceWindow","messageString","eventOrigin","traceCount","originAsString","host","EvaluatorHelper","frequency","deg","unit","PI","ANGLE_DEGREE","ANGLE_RADIAN","fak","NaN","nthroot","negate","possible","isBigger","ExpressionEvaluator","stack","repeatingRunStatus","restoreState","calc","val","translateKey","updateRepeatingRunStatus","isStackEmpty","repeatingRunIsActive","calcValue","getRepeatingRunKey","getRepeatingRunValue","pushStackEntry","returnValue","newRank","getRankForKey","previousKey","peekStackKey","previousValue","peekStackValue","popStackEntry","resetStack","reset","resetRepeatingRun","o1","o2","setRepeatingRunValue","setRepeatingRunKey","RANK","=","+","-","/","*","yx","x√y","EE","Evaluator","setConfiguration","silentOnErrors","bigger","expressions","expressionNestingDepth","memory","resultBuffer","keysBuffer","getMem","memIdx","initRenderCommands","setCurrentEvaluationResult","sendToRender","getRenderCommands","evalKey","operand","evalKeyInternal","renderCommands","sendToRenderHistory","resetExpressionsStack","pushNestedExpression","popNestedExpression","peekNestedExpression","hasNestedExpression","getCurrentEvaluationResult","resetKeysBuffer","pushKeyToKeysBuffer","getPreviousKey","isKeyAC","popKeyFromKeysBuffer","getKeysBufferLength","getCurrentKey","isKeyC","operations","dispVal","evalOperation","functionForEval","originalResult","resultAsString","evalShouldResetHistoryIfDigitOnNextKey","dispValKeyOperand","shouldResetHistoryIfDigitOnNextKey","evalEndOfTerm","isEndOfTerm","evalsin","_ref2","isMultipleOfPi","sin","getRadiantValue","evalcsc","_ref3","evalsin1","_ref4","getDisplayValueFromRadiant","asin","evalcos","_ref5","cos","evalsec","_ref6","evalcos1","_ref7","acos","evaltan","_ref8","tan","evalcot","_ref9","evaltan1","_ref10","atan","evalsinh","_ref11","E","evalsinh1","_ref12","evalcosh","_ref13","evalcosh1","_ref14","evaltanh","_ref15","e1","e2","evaltanh1","_ref16","evalPI","_ref17","eval1perx","_ref18","evalx2","_ref19","evalx3","_ref20","eval2x","_ref21","evalex","_ref22","evaloperandyx","_ref23","evaloperandex","_ref24","eval2root","_ref25","eval3root","_ref26","evaloperandxrooty","_ref27","evalfactorial","_ref28","evalln","_ref29","evallog2","_ref30","evallog10","_ref31","evaloperandlog","_ref32","evalRandom","_ref33","random","evalLeftBracket","_ref34","evalRightBracket","_ref35","evalPlusMinus","_ref36","displayValue","evalEquals","_ref37","evalDigitOrDecimalPoint","_ref38","_this$getPreviousKey3","willOverflow","isAlreadyDecimalPoint","evalDecimalPoint","_ref39","evalMClear","_ref40","evalMSave","_ref41","evalMAdd","_ref42","doMemoryOperation","evalMMinus","_ref43","evalMRead","_ref44","valueFromMemory","getMemoryValue","evalAC","_ref45","evalC","_ref46","evalBackspace","_ref47","currentValue","evalViaExpressionEvaluator","_ref48","buildHardcodedCommandsList","radiantValue","withThis","buildUnaryOperatorCommand","csc","sin-1","sec","cos-1","cot","tan-1","sinh","sinh-1","cosh","cosh-1","tanh","tanh-1","π","1/x","x2","x3","buildBinaryOperatorCommand","2x","operandyx","operandex","2√","3√","operandx√y","x!","ln","log2","log10","operandlog","Rand","(",")","×","÷","–","+/–","0","1","2","3","4","5","6","7","8","9",".","mc","ms","m+","m-","mr","AC","C","calcFunction","getSupportedOperations","KeyboardHelper","operationsString","calculatorOperation","operationsArray","m","isSupportedOperation","fromKeyStrokeToCalculatorSupportedOperation","pressedKey","lookupForOperation","fromStatemachineToCalculatorSupportedOperation","isDigitKey","Renderer","valueComponents","splitValue","fractionalPart","targetDigitsCount","calculateTargetDigitCount","exponentPart","_Renderer$roundFracti","roundFractionalDigits","reducedFractionalDigits","digits","roundingOverflow","integralPart","sign","_value$split","_value$split2","beforeDecimalPart","postDecimalPart","withExponent","roundedValue","toPrecision","overflowOccured","padEnd","msg","nroot","trailingDot","valueWithoutTrailingDot","shortenedResult","shortenValue","addTrailingDecimalSeparator","parts","limitFractionalDigits","valAbs","toExponential","HistoryRenderer","historyEntries","pushToHistory","recalculateHistoryString","pushToHistoryAC","pushToHistoryC","isKeyOneOperatorAfterAnotherOperator","pushToHistoryOneOperatorAfterAnotherOperator","isKeyBackspace","pushToHistoryBackspace","isKeyEquals","pushKeyToHistoryEquals","isKeyUsingOperand","pushToHistoryKey","prevKey","lastPopped","handleCaseOfEqualsFollowedByAnOperationOrByAnOperand","historyString","brackets","betweenOperatorsStack","recalculateHistoryForStackBetweenOperators","formatAllNumbers","getOperandValue","numberDetectorRegEx","CbaCalculatorEngine","evaluator","historyRenderer","displayingValue","historyDisplayingValue","baseOrExponentOrMemIdx","iMax","calcEngineParams","renderHistory","setDisplayValueInState","triggerHistoryRendering","getTaskPath","CalculatorsManager","currentCalculator","calculatorsStateList","getHistoryDisplayingValue","safeCall","getDisplayingValue","saveState","calculatorTaskPath","newCalculatorState","ActionRegister","actionsMap","has","delete","focusMap","layerStyles","pointerEvents","zIndex","getItemStyles","initialOffset","currentOffset","WebkitTransform","CustomDragLayer","_useDragLayer","useDragLayer","getInitialSourceClientOffset","getSourceClientOffset","clippedStyle","augmentedWidth","augmentedHeight","augmentedFontSize","augmentedStyle","renderItem","RecordingBuffer","recordingNumber","blobUrl","responseType","reader","FileReader","readAsDataURL","onloadend","recordingInfo","sourceComponent","nbOfRecordingOnComponentInstance","recordingStartTime","recordingList","RecordingUploader","buildRecordingPostContent","recordingEntriesList","LibraryManager","librariesUsedMap","itemLibraries","checkLibraryPaths","library","addMathJax","libraryPath","scriptTag","setAttribute","appendChild","VariableManager","variableMap","variablesArray","variableObservers","entryIndex","entryList","clearAllChangeObservers","tracing","variablesConfig","withTrace","variableConfig","getFullData","variableEntry","oldVariable","checkType","traceVariableChangeAttempt","variableType","newValueType","operationStatus","variableValuesMap","ReplayRunner","setNowProvider","nowProvider","setDelayProcessor","delayProcessor","finishedAction","replayFromTaskStartingPoint","fromIndex","appSettings","initializingTriple","grabInitializingTriple","taskSwitchEntry","fullStateEntry","tasksViewVisibleEntry","stateChangeEntries","nextIndex","_step$details","processStateChangeStep","_taskSwitchEntry$deta","initialReplayTick","replayTick","initialTimestamp","continueStoryExecution","nextStepIndex","executeNextReplayStep","stepAction","doneAction","currentStepIndex","currentStep","delayMillis","calculateDelayMillisByNow","dummyEvent","_currentStep$details","closeMenuItemTree","_currentStep$details2","htmlElement","getComputedStyle","parentElement","calculateDelayMillis","stepReplayTick","nowTimestamp","tripleStartFound","nextEntry","ReplayStepMonitor","currentReplayStepId","TaskPlayer","apiState","runtimer","getWaitingMessageTexts","DndProvider","backend","TouchBackend","HTML5Backend","enableMouseEvents","getElementById","sendPlayerReady","checkNotRunning","checkNotLoggedInOrNoTaskRunning","setWaitingMessageTexts","itemConfigVersion","runtimeCompatibilityVersion","isCompatibleVersion","libraryManager","addLibrariesForItem","scalingModes","alignmentHorizontalModes","alignmentVerticalModes","preloadItemResources","checkNoTaskRunningOrTaskRunning","dumpMessageToTraceLog","setCallbackTraceTransmission","checkNotLoggedIn","setConsoleTraceTransmission","_traceLogUploader$get","setCallbackRecordingTransmission","setConsoleRecordingTransmission","_recordingUploader$ge","traceSessionId","recordingSessionId","dumpLoginToTraceLog","checkNoTaskRunning","fieldValueCallback","checkTaskRunning","pauseOrResume","_this$runtime4","dumpStatemachineEventToTraceLog","score","normalizeHotKeySpecification","checkApiState","acceptedList","imagesPromise","videoPromise","audioPromise","preloadResources","buildRuntime","EventEmitter","FocusRegister","hotKeySpecification","windowNameForErrorMessage","withoutCtrl","user","runtimeVersion","webClientUserAgent","enter","versionNumber","getCbaVersionNumber","dumpPauseResumeToTraceLog","_taskManager$getCurre2","startTaskPlayer","eventReceiverConfiguration","getEventReceiverConfiguration","useExternalController","shouldActivateInternalController","startUp"],"mappings":"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","file":"static/js/main.5b8acc86.chunk.js","sourcesContent":["// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\r\n(() => {\r\n  if (typeof window.CustomEvent === \"function\") return false;\r\n\r\n  function CustomEvent(event, params) {\r\n    params = params || {\r\n      bubbles: false, cancelable: false, detail: undefined\r\n    };\r\n    const evt = document.createEvent('CustomEvent');\r\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n    return evt;\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype;\r\n\r\n  window.CustomEvent = CustomEvent;\r\n  return undefined;\r\n})();\r\n\r\n/**\r\n * IE11 doesn't support yet <b>.startsWith</b> that is why we need to \r\n * define it ourselves in order to make the project run on IE.\r\n * \r\n */\r\nif (!String.prototype.startsWith) {\r\n  // eslint-disable-next-line no-extend-native\r\n  String.prototype.startsWith = (searchString, position) => {\r\n    position = position || 0;\r\n    return this.indexOf(searchString, position) === position;\r\n  };\r\n}\r\n","import UrlLib from 'url';\r\nimport packageJson from '../../package.json';\r\n\r\n/**\r\n * Basic helper methods used by various components.\r\n */\r\nexport default class Utils {\r\n\r\n\r\n  // --------- Java objects, arrays etc. ---------------------------------------------------\r\n\r\n  /**\r\n   * Return the given value if it is defined, return the default value otherwise.\r\n   * \r\n   * @param {*} valueMightBeUndefined The value that might be undefined.\r\n   * @param {*} defaultValue The default value to use as replacement for an undefined value.\r\n   */\r\n  static withDefault(valueMightBeUndefined, defaultValue) {\r\n    return valueMightBeUndefined === undefined ? defaultValue : valueMightBeUndefined;\r\n  }\r\n\r\n  /**\r\n   * Get the value of the given property of the given base object and return the default value \r\n   * if the object is undefined. \r\n   * \r\n   * The method will return undefined if the base object is not undefined but does not bear a property of the given name.\r\n   * \r\n   * @param {*} baseObject The base object bearing the property. This object might be undefined. We will return the given default value in that case.\r\n   * @param {String} propertyName The property of the base object.\r\n   * @param {*} defaultValue The default value to use if the base object is undefined.\r\n   */\r\n  static getPropUndefinedSafe(baseObject, propertyName, defaultValue) {\r\n    return baseObject === undefined ? defaultValue : baseObject[propertyName];\r\n  }\r\n\r\n\r\n  /**\r\n   * Is the given value a 'falsy' value (i.e. null, undefined, empty string, false, 0, NaN) or \r\n   * an Object that does not have any attributes (i.e. properties or methods)?\r\n   * \r\n   * @param {} candidate The value to check.\r\n   */\r\n  static isEmptyObject(candidate) {\r\n    return !!candidate && candidate.constructor === Object && Object.keys(candidate).length === 0;\r\n  }\r\n\r\n  /**\r\n   * Does the given array contain any 'non-empty' value \r\n   * (i.e. something that returns a non-empty string as toString() result)?\r\n   * \r\n   * @param {*} array The array to check; might be undefined or null but must be an array otherwise.\r\n   */\r\n  static isNonEmptyArray(array) {\r\n    return array !== undefined && array !== null && array.length !== 0 && Utils.arrayContainsNonEmptyEntry(array);\r\n  }\r\n\r\n  /**\r\n   * Does the given array contain any 'non-empty' value \r\n   * (i.e. something that returns a non-empty string as toString() result)?\r\n   * \r\n   * @param {*} array The array to check. The array must not be undefined or null.\r\n   */\r\n  static arrayContainsNonEmptyEntry(array) {\r\n    return array.some(value => value !== undefined && value !== null && value.toString() !== '');\r\n  }\r\n\r\n  /**\r\n   * Does the given array contain an 'empty' value \r\n   * (i.e. something that returns an empty string as toString() result)?\r\n   * \r\n   * @param {*} array The array to check. The array must not be undefined or null.\r\n   */\r\n  static arrayContainsEmptyEntry(array) {\r\n    return array.some(value => value === undefined || value === null || value.toString() === '');\r\n  }\r\n\r\n  /**\r\n   * Return a 'deep' copy of the given object.\r\n   * \r\n   * The method uses JSON parse - stringify to create the copy.\r\n   * \r\n   * @param {*} object The object to copy. This must be JSON 'stringifyable'. \r\n   */\r\n  static deepCopy = object => JSON.parse(JSON.stringify(object));\r\n\r\n  /**\r\n   * Return a 'deep' copy of the given object.\r\n   * \r\n   * The method uses JSON parse - stringify to create the copy.\r\n   * If the given object is undefined/null it simply returns undefined/null.\r\n   * \r\n   * @param {*} object The object to copy. This may be undefined or null. \r\n   */\r\n  static safeDeepCopy = (object) => {\r\n    if (object === undefined) {\r\n      return undefined;\r\n    }\r\n    return Utils.deepCopy(object);\r\n  }\r\n\r\n\r\n  /**\r\n   * Extends 'from' object with members from 'to'. If 'to' is null, a deep clone of 'from' is returned.\r\n   * \r\n   * TODO: CKI: The method behavior seems to be more complex than described above: No adding is done if the\r\n   * from value is not an Object or Array. -> Properly describe and test it or try to drop it. \r\n   * Currently there is no call with a to value given!\r\n   */\r\n  static safeDeepCopyObjects = (from, to) => {\r\n    if (from == null || typeof from !== \"object\") return from;\r\n    if (from.constructor !== Object && from.constructor !== Array) return from;\r\n    if (from.constructor === Date\r\n      || from.constructor === RegExp\r\n      || from.constructor === Function\r\n      || from.constructor === String\r\n      || from.constructor === Number\r\n      || from.constructor === Boolean) {\r\n      return new from.constructor(from);\r\n    }\r\n\r\n    to = to || new from.constructor();\r\n\r\n    Object.keys(from).forEach((name) => {\r\n      to[name] = typeof to[name] === \"undefined\" ? Utils.safeDeepCopyObjects(from[name], null) : to[name];\r\n    });\r\n\r\n    return to;\r\n  }\r\n\r\n  // --------- Mode and feature decisions ------------------------------------------------\r\n\r\n  /**\r\n   * Get a version number string.\r\n   */\r\n  static getCbaVersionNumber() {\r\n    return `${packageJson.version}`;\r\n  }\r\n\r\n  /**\r\n   * Get a version string.\r\n   */\r\n  static getCbaVersion() {\r\n    return `${packageJson.name} ${packageJson.version}`;\r\n  }\r\n\r\n  /**\r\n   * Print the version string to the browser console.\r\n   */\r\n  static printCbaVersion() {\r\n    console.info(`Running ${Utils.getCbaVersion()}`);\r\n  }\r\n\r\n  /**\r\n   * Should we run in 'mobile mode' ?\r\n   * \r\n   * We check an optional epxlicit flag in our calling URL \r\n   * and try some heuristic to find out ourselves.\r\n   */\r\n  static isMobile = () => {\r\n    let check = Utils.isMobileModeSetAsParameter();\r\n    // eslint-disable-next-line\r\n    (function (a) { if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);\r\n    return check;\r\n  };\r\n\r\n  /**\r\n   * Private helper: Is there a parameter in our URL that forces 'mobile mode'?\r\n   */\r\n  static isMobileModeSetAsParameter() {\r\n    const isMobileForced = Utils.getQueryParam('forceMobileMode');\r\n    return (`${isMobileForced}` === 'true');\r\n  }\r\n\r\n  /**\r\n   * Does the device use a touch screen?\r\n   */\r\n  static isTouchDevice() {\r\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\r\n  }\r\n\r\n  /**\r\n   * Internal helper: If the requested field in the given settings object exists return it's value, \r\n   * return an empty string otherwise.\r\n   * \r\n   * @param {*} settings Object to investigate.\r\n   * @param {*} settingName Field to look for.\r\n   */\r\n  static getSettingsValueByNameSafe(settings, settingName) {\r\n    if (settings && settings[settingName] !== undefined) {\r\n      return settings[settingName];\r\n    }\r\n    return '';\r\n  }\r\n\r\n\r\n  /**\r\n   * Determine the controller to use and its operation mode.\r\n   * \r\n   * The method returns on of three values:\r\n   *  - preview: Run with the internal controller; use the simplified server interactions (see class comments in ServerCalls and Controller for details).\r\n   *  - rest-api: Run with the internal controller; use the REST API server interactions (see class comments in ServerCalls and Controller for details).\r\n   *  - external-controller: Do not run the internal controller - wait for an external controller to take over.\r\n   */\r\n  static getControllerMode() {\r\n    const defaultMode = 'external-controller';\r\n    const configFromWindowGlobal = window.cba_runtime_config;\r\n    if (configFromWindowGlobal === undefined || configFromWindowGlobal === null) {\r\n      return defaultMode;\r\n    }\r\n    const modeFromWindowGlobal = configFromWindowGlobal.mode;\r\n    if (modeFromWindowGlobal === undefined || modeFromWindowGlobal === null) {\r\n      return defaultMode;\r\n    }\r\n    if ((typeof modeFromWindowGlobal) !== 'string') {\r\n      console.warn(`Invalid controller mode ignored, switching to external-controller mode.`, modeFromWindowGlobal);\r\n      return defaultMode;\r\n    }\r\n\r\n    const trimmedMode = modeFromWindowGlobal.trim();\r\n    switch (trimmedMode) {\r\n      case 'preview':\r\n        return 'preview';\r\n      case 'rest-api':\r\n        return 'rest-api';\r\n      case 'external-controller':\r\n        return 'external-controller';\r\n      default:\r\n        return defaultMode;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Get configuration details for the TaskPlayer's post message API.\r\n   */\r\n  static getEventReceiverConfiguration() {\r\n    return Utils.getEventReceiverConfigurationInternal(window.cba_runtime_config, window.location.href);\r\n  }\r\n\r\n  /**\r\n   * Internal helper: Kernel of getEventReceiverConfiguration providing a test entry point.\r\n   */\r\n  static getEventReceiverConfigurationInternal(configFromWindowGlobal, urlString) {\r\n    return {\r\n      eventTargetWindow: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'eventTargetWindow', undefined),\r\n      eventDomainUri: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'eventDomainUri', undefined),\r\n      startTaskPlayerEvent: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'startTaskPlayerEvent', undefined),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the initial texts for the 'We are waiting for an item configuration...' page\r\n   * displayed by our app while waiting for configurations coming in via the TaskPlayer API.\r\n   * \r\n   * These texts can be given in the window.cba_runtime_config structure (prevailing)\r\n   * or as URL parameters (if config structure does not specify them). \r\n   */\r\n  static getWaitingMessageTexts() {\r\n    return Utils.getWaitingMessageTextsInternal(window.cba_runtime_config, window.location.href)\r\n  }\r\n\r\n\r\n  /**\r\n   * Internal helper: Kernel of getWaitingMessageTexts providing a test entry point.\r\n   */\r\n  static getWaitingMessageTextsInternal(configFromWindowGlobal, urlString) {\r\n    return {\r\n      primary: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'initialWaitingMessagePrimary', 'We are waiting to receive the test configuration...'),\r\n      secondary: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'initialWaitingMessageSecondary', 'If this waiting takes more than a few seconds inform your test administrator.'),\r\n    }\r\n  }\r\n\r\n  static getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, parameterName, defaultValue) {\r\n    // try configuration structure first:\r\n    if (configFromWindowGlobal !== undefined && configFromWindowGlobal !== null\r\n      && configFromWindowGlobal[parameterName] !== undefined) {\r\n      return configFromWindowGlobal[parameterName];\r\n    }\r\n\r\n    // look for configuration parameter in the URL calling our code:\r\n    const urlQuery = UrlLib.parse(urlString, true).query;\r\n    if (urlQuery !== undefined && urlQuery !== null && urlQuery[parameterName] !== undefined) {\r\n      return urlQuery[parameterName];\r\n    }\r\n\r\n    // fall back to default value\r\n    return defaultValue;\r\n  }\r\n\r\n\r\n  // --------- calling URL details -------------------------------------------------------\r\n\r\n  /**\r\n   * Get the protocol + hostname + port of the URL that called our code.\r\n   * \r\n   * The method supports the protocols http, https, file and atom. For other \r\n   * protocols it logs an error and returns undefined.\r\n   * \r\n   * The method does not include the path and parameters given in the URL.\r\n   * \r\n   * Examples: \r\n   *  http://www.example.com:8080/some/path?withParameter=value is trimmed to\r\n   *  http://www.example.com:8080\r\n   * \r\n   *  file:///D:/develop/directory is trimmed to\r\n   *  file:\r\n   * \r\n   *  atom://... is trimmed to \r\n   *  atom:\r\n   * \r\n   */\r\n  static getCallingUrlWithoutPath() {\r\n    return this.getUrlWithoutPathFromLocation(window.location)\r\n  }\r\n\r\n  static getUrlWithoutPathFromLocation(location) {\r\n    switch (location.protocol) {\r\n      case 'http:':\r\n      case 'https:': {\r\n        const portAddOn = location.port ? `:${location.port}` : '';\r\n        return `${location.protocol}//${location.hostname}${portAddOn}`;\r\n      }\r\n      case 'file:':\r\n        return location.protocol;\r\n      case 'atom:':\r\n        return location.protocol;\r\n      default:\r\n        console.error('Unknown protocol', location.protocol);\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the value of the specified parameter given in the URL calling our code.\r\n   * \r\n   * The method returns undefined if there is no parameter with the specified name. \r\n   *\r\n   * @param {*} paramName The name of the parameter to find a value for.\r\n   */\r\n  static getQueryParam(paramName) {\r\n    const query = Utils.getQueryParams();\r\n    return query[paramName];\r\n  }\r\n\r\n  /**\r\n   * Build an object representing all parameters given in the URL calling our code.\r\n   * \r\n   * Parameter names and values are properly URL-decoded.\r\n   */\r\n  static getQueryParams() {\r\n    return Utils.getQueryParamsFromUrlString(window.location.href);\r\n  }\r\n\r\n  /**\r\n   * Build an object representing all parameters in the given URL string.\r\n   * \r\n   * Parameter names and values are properly URL-decoded.\r\n   */\r\n  static getQueryParamsFromUrlString(urlString) {\r\n    return UrlLib.parse(urlString, true).query;\r\n  }\r\n\r\n  /**\r\n   * Makes a request to the browser to set the element to fullscreen mode\r\n   * \r\n   * @param {*} elem the element requested to go fullscreen\r\n   * \r\n   */\r\n  static openFullScreen(elem) {\r\n    const fullscreenEnabled = document.fullscreenEnabled /* Standard syntax */\r\n      || document.mozFullScreenEnabled /* Firefox */\r\n      || document.webkitFullscreenEnabled /* Chrome, Safari and Opera */\r\n      || document.msFullscreenEnabled /* IE/Edge */\r\n\r\n    if (fullscreenEnabled) {\r\n      if (elem.requestFullscreen) { /* Standard syntax */\r\n        elem.requestFullscreen();\r\n      } else if (elem.mozRequestFullScreen) { /* Firefox */\r\n        elem.mozRequestFullScreen();\r\n      } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\r\n        elem.webkitRequestFullscreen();\r\n      } else if (elem.msRequestFullscreen) { /* IE/Edge */\r\n        elem.msRequestFullscreen();\r\n      }\r\n    } else {\r\n      console.warn(\"Current browser does not allow for fullscreen\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Makes a request to the browser to exit fullscreen mode\r\n   */\r\n  static closeFullScreen() {\r\n    if (document.fullscreenElement) {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n      } else if (document.mozCancelFullScreen) { /* Firefox */\r\n        document.mozCancelFullScreen();\r\n      } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\r\n        document.webkitExitFullscreen();\r\n      } else if (document.msExitFullscreen) { /* IE/Edge */\r\n        document.msExitFullscreen();\r\n      }\r\n    }\r\n  }\r\n\r\n  static keyCodes = {\r\n    Backspace: 8,\r\n    Tab: 9,\r\n    Enter: 13,\r\n    Shift: 16,\r\n    Ctrl: 17,\r\n    Alt: 18,\r\n    Escape: 27\r\n  }\r\n\r\n  static mapResourcePath(resources, path, isExternal) {\r\n    return resources.map((resource) => {\r\n      const resourceCopy = Utils.safeDeepCopy(resource);\r\n      resourceCopy.path = `${path}/${resourceCopy.name}`;\r\n      resourceCopy.isExternal = isExternal;\r\n      return resourceCopy;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * check the type of a variable to match a certain type.\r\n   * @param {*} value \r\n   * @param {*} expectedType \r\n   */\r\n  static checkType(value, expectedType) {\r\n    const valueType = typeof value;\r\n\r\n    if (expectedType === \"integer\" && valueType === \"number\") {\r\n      return Number.isInteger(value);\r\n    } else {\r\n      return expectedType === valueType;\r\n    }\r\n  }\r\n\r\n  static doScrollOnHTMLElement(x, y, sizerElement, scrollingElement, iframe) {\r\n    const { scrollHeight, scrollWidth } = sizerElement;\r\n\r\n    const clientHeight = iframe ? iframe.clientHeight : scrollingElement.clientHeight;\r\n    const clientWidth = iframe ? iframe.clientWidth : scrollingElement.clientWidth;\r\n\r\n    const scrollableHeight = scrollHeight - clientHeight;\r\n    const scrollableWidth = scrollWidth - clientWidth;\r\n\r\n    const { finalX, finalY } = Utils.calculateFinalScrollValue(x, y, scrollableHeight, scrollableWidth);\r\n\r\n    Utils.doScroll(finalY, finalX, scrollingElement);\r\n  }\r\n\r\n  /**\r\n   * Do scroll on an HTML element\r\n   * @param {*} top \r\n   * @param {*} left \r\n   * @param {*} element \r\n   */\r\n  static doScroll(top, left, element) {\r\n    if (!element) {\r\n      return;\r\n    }\r\n    element.scroll({\r\n      top,\r\n      left,\r\n      behavior: 'smooth'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Computes the percentage if necessary on a scrollable container\r\n   * @param {*} x px/% value\r\n   * @param {*} y px/% value\r\n   * @param {*} scrollableHeight \r\n   * @param {*} scrollableWidth \r\n   * @returns { finalX, finalY }\r\n   */\r\n  static calculateFinalScrollValue(x, y, scrollableHeight, scrollableWidth) {\r\n    let finalX = x ? parseInt(x, 10) : undefined;\r\n    let finalY = y ? parseInt(y, 10) : undefined;\r\n\r\n    if (x && x.includes(\"%\")) {\r\n      finalX = Utils.computePercentage(scrollableWidth, parseFloat(x))\r\n    }\r\n\r\n    if (y && y.includes(\"%\")) {\r\n      finalY = Utils.computePercentage(scrollableHeight, parseFloat(y))\r\n    }\r\n\r\n    return {\r\n      finalX,\r\n      finalY\r\n    }\r\n  }\r\n\r\n  /**\r\n   * finds the percentage value of a number \r\n   * @param {Number} num \r\n   * @param {Number} percentage \r\n   * @returns {Number} value\r\n   */\r\n  static computePercentage(num, percentage) {\r\n    return num * (percentage / 100);\r\n  }\r\n\r\n}\r\n","import axios from 'axios';\r\nimport Utils from '../utils/Utils';\r\n\r\n/**\r\n * Interaction with the server providing configuration data and resources.\r\n * \r\n * We support two running modes:\r\n *  - The standard mode expecting a REST API on the server to obtain configuration data.\r\n *  - A simplified mode expecting a plain static content server. This mode is meant to \r\n *  support item authoring tools that do not embed a dynamic content server. \r\n * \r\n *   Action              | Preview mode                                      | Rest-API mode\r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Config file         | <WindowURLWithPath>/courses/previewcourse.json    | <WindowURLNoPath>/ee4cba-api/courses?userId=<username>&<URLParams>\r\n *   retrieval           | <WindowURLWithPath>/tests/<testname>.json         | <WindowURLNoPath>/ee4cba-api/tests/<testname>/?<URLParams>\r\n *                       | <WindowURLWithPath>/items/<itemname>.json         | <WindowURLNoPath>/ee4cba-api/items/<itemname>/?<URLParams>\r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Resource            | ./resources                                       | <WindowURLNoPath>/ee4cba_assets/<itemname>/resources\r\n *   retrieval           | ./external-resources                              | <WindowURLNoPath>/ee4cba_assets/<itemname>/external-resources\r\n *                       |                                                   |\r\n */\r\nexport default class ServerCalls {\r\n\r\n  // --------- public API --------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * The URL path components used to access the server's API.\r\n   */\r\n  static restApiTargets = {\r\n    CONFIGURATION_API: 'ee4cba-api',\r\n    ASSETS_API: 'ee4cba_assets',\r\n    TRACE_ENDPOINT: 'trace',\r\n    RECORDING_ENDPOINT: 'recording'\r\n  }\r\n\r\n  /**\r\n   * Do we run with a simplified server interactions protocol\r\n   * specifically designed to support a preview in an item authoring tool?\r\n   * \r\n   * See class comment for more details.\r\n   */\r\n  static runWithSimplifiedPreviewServer() {\r\n    const controllerMode = Utils.getControllerMode();\r\n    switch (controllerMode) {\r\n      case 'preview':\r\n        return true;\r\n      case 'rest-api':\r\n        return false;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the complete configuration (i.e. test course, tests and items) from the server.\r\n   */\r\n  static getJsonsData(username) {\r\n    console.log(`Getting configuration data in ${ServerCalls.runWithSimplifiedPreviewServer() ? \"preview\" : \"rest-api\"} mode.`);\r\n    return (ServerCalls.doGetCourseConfigurationStep(ServerCalls.getFirstCourse(), username)\r\n      .then(courseStepResult => ServerCalls.doGetTestConfigurationsStep(courseStepResult))\r\n      .then(testsStepResult => ServerCalls.doGetItemConfigurationsStep(testsStepResult))\r\n      .then(itemsStepResult => ServerCalls.doBuildConfigurationStep(itemsStepResult))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Build a promise that puts the given assets to the CBA cache.\r\n   * \r\n   * This is used by the ServiceWorker to cache assets.\r\n   * \r\n   * @param {*} assets \r\n   */\r\n  static cacheAssets(assets = []) {\r\n    console.log(assets);\r\n  }\r\n\r\n  static preloadResources(resources, type) {\r\n    const resourcePromises = resources.map(resource => new Promise((resolve, reject) => {\r\n      const linkTag = document.createElement('link');\r\n      linkTag.as = type;\r\n      linkTag.href = resource.path;\r\n      linkTag.rel = \"preload\";\r\n\r\n\r\n      if (type === \"video\" || type === \"audio\") {\r\n        linkTag.type = \"media\";\r\n        linkTag.rel = \"prefetch\";\r\n      }\r\n\r\n\r\n      if (resource.size > 5 * (10 ** 6) && (type === \"video\" || type === \"audio\")) {\r\n        linkTag.as = \"fetch\";\r\n      }\r\n\r\n      linkTag.onload = () => {\r\n        resource.hadErrors = false;\r\n        resolve(resource);\r\n      }\r\n\r\n      linkTag.onerror = () => {\r\n        console.error(\"Error while loading resource: \", resource);\r\n        resource.hadErrors = true;\r\n        resolve(resource);\r\n      }\r\n      document.head.append(linkTag);\r\n    }));\r\n\r\n\r\n    return Promise.all(resourcePromises);\r\n\r\n  }\r\n\r\n  // --------- private stuff ----------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Create the axios instance that we will use to fetch data from the server.\r\n   */\r\n  static instance = axios.create({\r\n    baseURL: ServerCalls.getServerPath(),\r\n    timeout: 30000,\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Build the base of the URLs that we use to access the server to obtain data.\r\n   * \r\n   * We use the origin of our window as a starting point and modify the URL as follows:\r\n   * If we do not run in a simplifying preview context we return our origin URL but replace the path \r\n   * (and all parameters) with the plain REST API endpoint. \r\n   *   Example: For the origin URL http://127.0.0.1/app?param=value we return http://127.0.0.1/ee4cba-api\r\n   * If we run in a simplifying preview context we return the origin URL but drop all parameters. \r\n   *   Example: For the origin URL http://127.0.0.1/app?param=value we return http://127.0.0.1/app\r\n   */\r\n  static getServerPath() {\r\n    return ServerCalls.runWithSimplifiedPreviewServer()\r\n      ? ServerCalls.getCallingUrlWithoutParams()\r\n      : `${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.CONFIGURATION_API}/`;\r\n  }\r\n\r\n  /**\r\n   * Get the URL that called our code and strip all params.\r\n   * \r\n   * The method retains the path part of the URL.\r\n   */\r\n  static getCallingUrlWithoutParams() {\r\n    const href = window.location.href.split('?')[0];\r\n    return `${href.substring(0, href.lastIndexOf('/'))}/`;\r\n  }\r\n\r\n  /**\r\n   * Get the path of the initial course configuration.\r\n   * \r\n   *  In a simplifying preview mode we return 'previewcourses' as file name. (Another method \r\n   *  will append the .json extension later.)\r\n   *  In full REST API mode we don't specify a specific file name: A username parameter\r\n   *  will be added in this case by another method.\r\n   */\r\n  static getFirstCourse() {\r\n    return ServerCalls.runWithSimplifiedPreviewServer() ? 'previewcourses' : '';\r\n  }\r\n\r\n\r\n  static doGetCourseConfigurationStep(courseName, username) {\r\n    return ServerCalls.getCourse(courseName, username);\r\n  }\r\n\r\n  static doGetTestConfigurationsStep(courseStepResult) {\r\n    const { settings, headerButtons, sessionId, courses } = courseStepResult;\r\n\r\n    // Remove all duplicates from the array of test names: \r\n    // Don't retrieve the same test configuration more than once.\r\n    const testsToRetrieve = ServerCalls.buildArrayWithoutDuplicates(courses);\r\n\r\n    // Get the array of promises that retrieve all tests \r\n    const promisesForTests = testsToRetrieve.map(testName => ServerCalls.getTest(testName));\r\n\r\n    // Return a promise that will execute all test retrieval promises and return the results together with the courses step result\r\n    return ServerCalls.axiosAllWrapper(\r\n      {\r\n        settings,\r\n        headerButtons,\r\n        sessionId,\r\n        courses,\r\n        testsToRetrieve\r\n      },\r\n      promisesForTests\r\n    );\r\n  }\r\n\r\n  static isEmptyRetrievedValue(value) {\r\n    return value === undefined || value === null || value.toString() === '';\r\n  }\r\n\r\n  static doGetItemConfigurationsStep(testsStepResult) {\r\n    const { settings, headerButtons, sessionId, courses, testsToRetrieve } = testsStepResult.contextData;\r\n    const tests = testsStepResult.response;\r\n\r\n    const flaggedErrors = [];\r\n    if (tests.length === 0) {\r\n      flaggedErrors.push('no tests to execute found in course configuration');\r\n    }\r\n    tests.forEach((value, index) => { if (this.isEmptyRetrievedValue(value)) flaggedErrors.push(`could not retrieve test ${testsToRetrieve[index]}`); });\r\n\r\n    // get all item names mentioned in the tests\r\n    const collectedItemNames = tests\r\n      .filter(value => !this.isEmptyRetrievedValue(value))\r\n      .reduce((itemNamesArray, test) => itemNamesArray.concat(test.items), []);\r\n\r\n    // remove duplicates from item names\r\n    const itemsToRetrieve = ServerCalls.buildArrayWithoutDuplicates(collectedItemNames);\r\n\r\n    // get array of item promises\r\n    const promisesForItems = itemsToRetrieve.map(itemName => ServerCalls.getItem(itemName));\r\n\r\n    // get all items data\r\n    return ServerCalls.axiosAllWrapper(\r\n      {\r\n        settings,\r\n        headerButtons,\r\n        sessionId,\r\n        courses,\r\n        tests,\r\n        itemsToRetrieve,\r\n        flaggedErrors\r\n      },\r\n      promisesForItems\r\n    );\r\n\r\n  }\r\n\r\n  static doBuildConfigurationStep(itemsStepResult) {\r\n    const { settings, headerButtons, sessionId, courses, tests, itemsToRetrieve, flaggedErrors } = itemsStepResult.contextData;\r\n    const items = itemsStepResult.response;\r\n\r\n    if (items.length === 0) {\r\n      flaggedErrors.push('no required items found in test specifications')\r\n    }\r\n    items.forEach((value, index) => { if (this.isEmptyRetrievedValue(value)) flaggedErrors.push(`could not retrieve item ${itemsToRetrieve[index]}`); });\r\n\r\n    return (ServerCalls.validateJsonResults(flaggedErrors, courses, tests, items.filter(value => !this.isEmptyRetrievedValue(value)))\r\n      ? {\r\n        success: true,\r\n        payload: {\r\n          settings,\r\n          headerButtons,\r\n          sessionId,\r\n          courses,\r\n          tests,\r\n          items,\r\n        }\r\n      }\r\n      : {\r\n        success: false\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a promise that runs an array of promises and returns an array of results.\r\n   * \r\n   *  @param {*} contextData Some arbitrary context data that we will include in the result.\r\n   *  @param {[*]} promisesArray The promises to run.\r\n   * \r\n   *  @returns A promise that will return an object with two fields: \r\n   *    - contextData: the given context data\r\n   *    - response: the array of promise results\r\n   */\r\n  static axiosAllWrapper(contextData, promisesArray) {\r\n    return axios.all(promisesArray)\r\n      .then((response) => {\r\n        const result = {\r\n          contextData,\r\n          response\r\n        };\r\n        return result;\r\n      })\r\n      .catch((error) => {\r\n        console.info(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Build an array that contains the entries of the given array\r\n   * but drops all duplicates.\r\n   */\r\n  static buildArrayWithoutDuplicates(array) {\r\n    return [...new Set(array)];\r\n  }\r\n\r\n  /**\r\n   * Validate the configuration obtained from the server\r\n   * \r\n   * @param {*} flaggedErrors An array of errors that were detected during data retrieval.\r\n   * @param {*} course The list of the names of the tests to be executed.\r\n   * @param {*} tests An array of test configurations.\r\n   * @param {*} items An array of item configurations.\r\n   */\r\n  static validateJsonResults(flaggedErrors, course, tests, items) {\r\n    if (flaggedErrors.length !== 0) {\r\n      console.info('Errors during data retrieval:', flaggedErrors);\r\n      console.info('loaded course:', course);\r\n      console.info('loaded tests:', tests);\r\n      console.info('loaded items:', items);\r\n    }\r\n    return flaggedErrors.length === 0\r\n      && (course !== undefined || course.length > 0)\r\n      && (tests !== undefined || tests.length > 0)\r\n      && (items !== undefined || items.length > 0)\r\n  }\r\n\r\n  /**\r\n   * Get a test course configuration from the server.\r\n   * \r\n   * @param {*} courseName \r\n   */\r\n  static getCourse(courseName, username) {\r\n    return ServerCalls.getDataFromServer('courses', courseName, username);\r\n  }\r\n\r\n  /**\r\n   * Get a test configuration from the server.\r\n   * \r\n   * @param {*} testName\r\n   */\r\n  static getTest(testName) {\r\n    return ServerCalls.getDataFromServer('tests', testName, undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get an item configuration from the server.\r\n   * \r\n   * @param itemName \r\n   */\r\n  static getItem(itemName) {\r\n    return ServerCalls.getDataFromServer('items', itemName, undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get configuration data from the server.\r\n   * \r\n   * - If we run in the simplifying preview mode we add a file extension .json at the end of the request URL path. \r\n   *   This assumes a static content server serving static configuration data files from the file system.\r\n   * - If we run in in full REST-API mode we don't append a file extension since we assume a service API to respond.\r\n   * \r\n   * The method log a message and returns an empty array if any error occurs.\r\n   * \r\n   * @param {String} typeOfData The type of configuration data to retrieve: 'courses', 'tests', 'items'.\r\n   * @param {String} nameOfValue The name of the data item to retrieve, e.g. the test name of the test to retrieve or the item name of the item to retrieve.\r\n   * @param {String} username The name of the user for whom we retrieve configuration data. We add this as query parameter to the request URL.\r\n   */\r\n  static getDataFromServer(typeOfData, nameOfValue, username) {\r\n    const urlPathExtension = `/${typeOfData}/${nameOfValue}${ServerCalls.runWithSimplifiedPreviewServer() ? '.json' : ''}`;\r\n    const params = (\r\n      ServerCalls.runWithSimplifiedPreviewServer()\r\n        ? {}\r\n        : {\r\n          params: ServerCalls.addAsParam(Utils.getQueryParams(), username)\r\n        }\r\n    );\r\n    return ServerCalls.instance.get(urlPathExtension, params)\r\n      .then(response => response.data)\r\n      .catch((error) => {\r\n        console.info(error);\r\n        return [];\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Add a userId parameter to the query parameter object.\r\n   */\r\n  static addAsParam(params, username) {\r\n    if (username !== undefined) {\r\n      params.userId = username;\r\n    }\r\n    return params;\r\n  }\r\n\r\n}\r\n","/**\r\n * Provide the 'standard' sequence for a given list of tests.\r\n */\r\nexport default class StandardTaskSequencer {\r\n\r\n  constructor(course, tests) {\r\n    this.course = course;\r\n    this.tests = tests;\r\n    this.taskList = StandardTaskSequencer.buildTaskList(course, tests);\r\n\r\n    const initialTask = this.taskList[0];\r\n    if (initialTask === undefined) {\r\n      console.error(\"No task found in standard task sequencer.\");\r\n      this.activeTestName = undefined;\r\n      this.activeItemName = undefined;\r\n      this.activeTaskName = undefined;\r\n    } else {\r\n      const { testName, itemName, taskName } = initialTask;\r\n      this.activeTestName = testName;\r\n      this.activeItemName = itemName;\r\n      this.activeTaskName = taskName;\r\n    }\r\n  }\r\n\r\n  // ---------- public API -----------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Find the first task with the given name inside a specific test (i.e. we ignore the source item).\r\n   * \r\n   * We return undefined if no matching task is available. \r\n   * We log the reason for not finding a task as error if the error log flag is set.\r\n   */\r\n  findFirstMatchingTaskInTest = (newTestName, newTaskName, withErrorLog) => {\r\n    const newTest = StandardTaskSequencer.getTestForName(this.tests, newTestName);\r\n    if (newTest === undefined) {\r\n      if (withErrorLog) {\r\n        console.error(`Test ${newTestName} is not defined in the test course`);\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    const newTaskEntry = newTest.taskCourse.find((value, index, theArray) => value.task === newTaskName);\r\n\r\n    if (newTaskEntry === undefined) {\r\n      if (withErrorLog) {\r\n        console.error(`Task ${newTaskName} is not defined in test ${newTestName}`);\r\n      }\r\n      return undefined;\r\n    }\r\n    return ({\r\n      testName: newTestName,\r\n      itemName: newTaskEntry.item,\r\n      taskName: newTaskEntry.task\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the task info for the next task in our task sequence.\r\n   * \r\n   * The method silently returns undefined if not next taskk is available.\r\n   */\r\n  getNextTaskInfo = () => (this.nextTaskAvailable() ? this.taskList[this.getCurrentTaskIndex() + 1] : undefined);\r\n\r\n  /**\r\n   * Get the task info for the previous task in our task sequence.\r\n   * \r\n   * The method silently returns undefined if not previous taskk is available.\r\n   */\r\n  getPreviousTaskInfo = () => (this.previousTaskAvailable() ? this.taskList[this.getCurrentTaskIndex() - 1] : undefined);\r\n\r\n  /**\r\n   * Could we currently perform a switch to the next task?\r\n   */\r\n  nextTaskAvailable = () => this.taskList.length > this.getCurrentTaskIndex() + 1;\r\n\r\n  /**\r\n   * Could we currently perform a switch to the previous task?\r\n   */\r\n  previousTaskAvailable = () => this.getCurrentTaskIndex() > 0;\r\n\r\n  /**\r\n   * Switch the current task in our internal structures.\r\n   */\r\n  switchCurrentTask = (test, item, task) => {\r\n    this.activeTestName = test;\r\n    this.activeItemName = item;\r\n    this.activeTaskName = task;\r\n  }\r\n\r\n  /**\r\n   * Get info about the currently active task. \r\n   */\r\n  getCurrentTaskInfo = () => ({\r\n    testName: this.activeTestName,\r\n    itemName: this.activeItemName,\r\n    taskName: this.activeTaskName\r\n  });\r\n\r\n  /**\r\n   * Get the course/tests configuration.\r\n   */\r\n  getConfigurationInfo = () => ({\r\n    course: this.course,\r\n    tests: this.tests\r\n  });\r\n\r\n  // -------------- private stuff ----------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the index of the currently active task in our task list.\r\n   */\r\n  getCurrentTaskIndex = () => {\r\n    const result = StandardTaskSequencer.getIndexForTask(this.taskList, this.activeTestName, this.activeItemName, this.activeTaskName);\r\n    if (result < 0) {\r\n      console.error(\"Cannot find task in task list\");\r\n      return undefined;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the index of the specified task in the given task list.\r\n   */\r\n  static getIndexForTask(taskList, testName, itemName, taskName) {\r\n    return taskList.findIndex((entry, index, all) => entry.testName === testName && entry.itemName === itemName && entry.taskName === taskName);\r\n  }\r\n\r\n  /**\r\n   * Get the test configuration object for the specified test.\r\n   * \r\n   * The method returns the test configuration object, i.e. an object with attributes \r\n   *  - name\r\n   *  - items\r\n   *  - taskCourse\r\n   */\r\n  static getTestForName(tests, testName) {\r\n    const result = tests.find((value, index, theArray) => value.name === testName);\r\n    if (result === undefined) {\r\n      console.error(`Could not find test ${testName}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Build a list of all tasks in the given tests course.\r\n   * \r\n   * The method returns an array of objects where each object describes one task:\r\n   * - testName\r\n   * - itemName\r\n   * - taskName\r\n   */\r\n  static buildTaskList(testsCourse, tests) {\r\n    const result = [];\r\n    testsCourse.forEach((testName) => {\r\n      const test = StandardTaskSequencer.getTestForName(tests, testName);\r\n      test.taskCourse.forEach((taskEntry) => {\r\n        result.push({\r\n          testName,\r\n          itemName: taskEntry.item,\r\n          taskName: taskEntry.task\r\n        })\r\n      })\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n}\r\n","import ServerCalls from './ServerCalls';\r\nimport Utils from '../utils/Utils';\r\nimport StandardTaskSequencer from './StandardTaskSequencer';\r\n\r\n/**\r\n * Implementation of controller layer.\r\n * \r\n * This implementation uses the 'direct JavaScript' TaskPlayer API.\r\n * \r\n * We support two running modes:\r\n *  - The standard mode expecting a REST API on the server to obtain configuration data.\r\n *  - A simplified mode expecting a plain static content server. This mode is meant to \r\n *  support item authoring tools that do not embed a dynamic content server. \r\n * \r\n *   Action              | Preview mode                                      | Rest-API mode\r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Trace log target    | console.log                                       | <WindowURLNoPath>/ee4cba-api/trace\r\n *                       |                                                   | \r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Show Login Box      | no                                                | yes\r\n *                       |                                                   | \r\n * \r\n */\r\nexport default class Controller {\r\n\r\n  constructor() {\r\n    this.taskPlayer = undefined;\r\n    this.taskSequencer = undefined;\r\n\r\n    this.items = [];\r\n\r\n    this.settings = [];\r\n    this.headerButtons = [];\r\n\r\n    this.sessionId = undefined;\r\n    this.userId = undefined;\r\n\r\n    this.activeTestName = undefined;\r\n    this.activeItemName = undefined;\r\n    this.activeTaskName = undefined;\r\n  }\r\n\r\n  // ---------- public API -----------------------------------------------------------------\r\n\r\n  /**\r\n   * Let the controller drive the given task player. \r\n   */\r\n  runController = (taskPlayer) => {\r\n\r\n    this.taskPlayer = taskPlayer;\r\n\r\n    taskPlayer.runPlayer();\r\n\r\n    // Redirect the trace log stream to the trace endpoint of the server REST-API.\r\n    // If running as preview in an item authoring tool we let the trace logger write to the console instead.\r\n    if (!ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      taskPlayer.setHttpTraceTransmission(`${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.CONFIGURATION_API}/${ServerCalls.restApiTargets.TRACE_ENDPOINT}`, 20000, 10000);\r\n      taskPlayer.setHttpRecordingTransmission(`${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.CONFIGURATION_API}/${ServerCalls.restApiTargets.RECORDING_ENDPOINT}`);\r\n    }\r\n\r\n    // Do not show a login box if running as preview in an item authoring tool:\r\n    if (ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      const startWithLogin = Utils.getQueryParam('showLogin');\r\n      if (startWithLogin === 'true') {\r\n        this.showLogin();\r\n      } else {\r\n        this.obtainConfigurationAndRunFirstTask('PreviewUser');\r\n      }\r\n    } else {\r\n      this.showLogin();\r\n    }\r\n  }\r\n\r\n  // ---------- private stuff -----------------------------------------------------------------\r\n\r\n  /**\r\n   * Show the login dialog via the task player.\r\n   */\r\n  showLogin = () => {\r\n    this.taskPlayer.showLogin('Login', 'Username: ', 'Ok', this.loginDialogClosedCallback);\r\n  }\r\n\r\n  /**\r\n   * Callback for the task player to run once the user filled in the login dialog.\r\n   * \r\n   * We don't authenticate the user. The server will pick an appropriate test configuration\r\n   * for the given user.\r\n   */\r\n  loginDialogClosedCallback = (username) => {\r\n    this.obtainConfigurationAndRunFirstTask(username);\r\n  }\r\n\r\n  /**\r\n   * Obtain the full configuration for the given user from the server \r\n   * and start the first task in the task player.\r\n   */\r\n  obtainConfigurationAndRunFirstTask = (username) => {\r\n    ServerCalls.getJsonsData(username)\r\n      .then((data) => {\r\n        this.processConfigurationAndRunFirstTask(username, data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failure during task start in task player.', error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Process the full configuration given by the server for the given user\r\n   * and start the first task in the task player.\r\n   */\r\n  processConfigurationAndRunFirstTask = (username, configurationData) => {\r\n    this.userId = username;\r\n    if (configurationData.success) {\r\n      this.digestConfigurationResponse(configurationData.payload);\r\n      this.startFirstTaskInTaskPlayer();\r\n    } else {\r\n      console.error(`Server failed to send test configuration for user ${username}`);\r\n    }\r\n\r\n  }\r\n\r\n  startFirstTaskInTaskPlayer = () => {\r\n    this.sendItemConfigurationToTaskPlayer();\r\n\r\n    this.taskPlayer.setTraceContextId(this.sessionId);\r\n    this.taskPlayer.setRecordingContextId(this.sessionId);\r\n    this.taskPlayer.setUserId(this.userId);\r\n    this.taskPlayer.setTaskSequencer(this.taskSwitchCallback, this.taskAvailableCallback);\r\n    this.taskPlayer.setHeaderButtons(this.headerButtons);\r\n    const { course, tests } = this.taskSequencer.getConfigurationInfo();\r\n\r\n    if (this.settings.ShowTaskNavigationBars === true) {\r\n      this.taskPlayer.setMenuCarousels(course, tests.map(test => ({\r\n        // TODO: CKI clean up these attribute name inconsistencies in config files\r\n        name: test.name,\r\n        tasks: test.taskCourse\r\n      })));\r\n    } else {\r\n      this.taskPlayer.setMenuCarousels([], []);\r\n    }\r\n\r\n    this.taskPlayer.activateDebuggingWindows(\r\n      this.settings.scoreDebugging.hotKey,\r\n      this.settings.traceDebugging.hotKey,\r\n      this.settings.statemachineDebugging.hotKey\r\n    );\r\n    const initialTask = this.taskSequencer.getCurrentTaskInfo();\r\n    if (initialTask.taskName === undefined) {\r\n      console.error(\"No task found.\");\r\n    } else {\r\n      this.taskSequencer.switchCurrentTask(initialTask.testName, initialTask.itemName, initialTask.taskName);\r\n      this.taskPlayer.startTask(initialTask.testName, initialTask.itemName, initialTask.taskName);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Digest the configuration data that we got from the server.\r\n   */\r\n  digestConfigurationResponse = (receivedData) => {\r\n    this.taskSequencer = new StandardTaskSequencer(receivedData.courses, receivedData.tests);\r\n    this.items = receivedData.items;\r\n    this.settings = receivedData.settings;\r\n    this.headerButtons = receivedData.headerButtons;\r\n    this.sessionId = receivedData.sessionId;\r\n    console.log(\"courses:\", this.taskSequencer.getConfigurationInfo().course);\r\n    console.log(\"tests\", this.taskSequencer.getConfigurationInfo().tests);\r\n    console.log(\"items\", this.items);\r\n    console.log(\"settings\", this.settings);\r\n    console.log(\"headerButtons\", this.headerButtons);\r\n    console.log(\"sessionId\", this.sessionId);\r\n  }\r\n\r\n  /**\r\n   * Send all item configurations to the task player.\r\n   */\r\n  sendItemConfigurationToTaskPlayer = () => {\r\n    const dependenciesUrl = {\r\n      MathJax: \"./MathJax-local-server/mathjax@3.1.2-tex-mml-chtml.js\"\r\n    };\r\n\r\n    this.items.forEach((item) => {\r\n      const prefix = ServerCalls.runWithSimplifiedPreviewServer()\r\n        ? './'\r\n        : `${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.ASSETS_API}/${item.name}/`;\r\n      const libraryPathsMap = {};\r\n\r\n      if (item.dependencies && item.dependencies.length > 0) {\r\n        item.dependencies.forEach((dependency) => {\r\n          libraryPathsMap[dependency.name] = dependenciesUrl[dependency.name]\r\n        })\r\n      }\r\n\r\n      this.taskPlayer.addItem(item, `${prefix}resources`, `${prefix}external-resources`, libraryPathsMap);\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch the task player to the given task\r\n   * and update our internal structures accordingly.\r\n   * \r\n   * The method assumes that the task player is running another task already. \r\n   */\r\n  stopOldTaskAndStartNewTask = (test, item, task) => {\r\n    this.taskSequencer.switchCurrentTask(test, item, task);\r\n    this.taskPlayer.stopTask();\r\n    this.taskPlayer.startTask(test, item, task);\r\n  }\r\n\r\n\r\n  /**\r\n   * Stop the currently running task and return to the login dialog.\r\n   */\r\n  stopOldTaskLogoutAndShowLogin = () => {\r\n    this.taskPlayer.stopTask();\r\n    this.taskPlayer.logout();\r\n    this.taskPlayer.clearItems();\r\n    if (ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      // eslint-disable-next-line no-alert\r\n      alert(\"Session finished.\");\r\n    }\r\n    this.showLogin();\r\n  }\r\n\r\n  /**\r\n   * Callback for task player to trigger a task switch.\r\n   * \r\n   * @param {String} request The type of switch request. Valid types are: 'nextTask', 'previousTask', 'cancelTask' and 'goToTask'.\r\n   * @param {String} scope For request type 'goToTask' only: The scope (i.e. test) of the task to switch to.\r\n   * @param {String} item For request type 'goToTask' only: The item of the task to switch to. If no item is given we will switch to the first task with matching name in the given scope.\r\n   * @param {String} task For request type 'goToTask' only: The the task to switch to. \r\n   */\r\n  taskSwitchCallback = (request, scope, item, task) => {\r\n    switch (request) {\r\n      case 'nextTask':\r\n        this.switchTaskNext();\r\n        break;\r\n      case 'previousTask':\r\n        this.switchTaskPrevious();\r\n        break;\r\n      case 'cancelTask':\r\n        this.stopOldTaskLogoutAndShowLogin();\r\n        break;\r\n      case 'goToTask':\r\n        if (item === undefined) {\r\n          this.switchFirstMatchingTaskInterTest(scope, task);\r\n        } else {\r\n          this.stopOldTaskAndStartNewTask(scope, item, task);\r\n        }\r\n        break;\r\n      default:\r\n        console.error(`Unknown switch task callback type: ${request}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback for task player to ask for the availability of a task switch.\r\n   * \r\n   * @param {String} request The type of switch request. Valid types are: 'nextTask', 'previousTask', 'cancelTask' and 'goToTask'.\r\n   * @param {String} scope For request type 'goToTask' only: The scope (i.e. test) of the task to switch to.\r\n   * @param {String} item For request type 'goToTask' only: The item of the task to switch to. If no item is given we will switch to the first task with matching name in the given scope.\r\n   * @param {String} task For request type 'goToTask' only: The the task to switch to. \r\n   */\r\n  taskAvailableCallback = (request, scope, item, task) => {\r\n    switch (request) {\r\n      case 'nextTask':\r\n        return this.taskSequencer.nextTaskAvailable();\r\n      case 'previousTask':\r\n        return this.taskSequencer.previousTaskAvailable();\r\n      case 'goToTask':\r\n        if (item === undefined) {\r\n          return this.taskSequencer.findFirstMatchingTaskInTest(scope, task, false) !== undefined;\r\n        } else {\r\n          return true;\r\n        }\r\n      default:\r\n        console.error(`Unknown switch task callback type: ${request}`);\r\n        return false;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to the first task with the given name inside a specific test (i.e. we ignore the source item).\r\n   */\r\n  switchFirstMatchingTaskInterTest = (newTestName, newTaskName) => {\r\n    const newTaskEntry = this.taskSequencer.findFirstMatchingTaskInTest(newTestName, newTaskName, true);\r\n    if (newTaskEntry !== undefined) {\r\n      this.stopOldTaskAndStartNewTask(newTaskEntry.testName, newTaskEntry.itemName, newTaskEntry.taskName);\r\n    } else {\r\n      this.missingTaskErrorFeedback(`Task ${newTaskName} in test ${newTestName} is unknown. We are in ${this.buildCurrentTaskLogString()}`, newTestName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch to the next task in our test course.\r\n   */\r\n  switchTaskNext = () => {\r\n    const newTaskInfo = this.taskSequencer.getNextTaskInfo();\r\n    if (newTaskInfo !== undefined) {\r\n      this.stopOldTaskAndStartNewTask(newTaskInfo.testName, newTaskInfo.itemName, newTaskInfo.taskName, false);\r\n    } else {\r\n      this.missingTaskErrorFeedback(`There is no next task. We are in ${this.buildCurrentTaskLogString()}`, undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch to the previous task in our test course.\r\n   */\r\n  switchTaskPrevious = () => {\r\n    const newTaskInfo = this.taskSequencer.getPreviousTaskInfo();\r\n    if (newTaskInfo !== undefined) {\r\n      this.stopOldTaskAndStartNewTask(newTaskInfo.testName, newTaskInfo.itemName, newTaskInfo.taskName);\r\n    } else {\r\n      this.missingTaskErrorFeedback(`There is no previous task. We are in ${this.buildCurrentTaskLogString()}`, undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Give feedback on missing task errors:\r\n   *  - If we are in 'preview' controller mode raise an alert box with the message. \r\n   *  - In any case write a warning to the console.\r\n   */\r\n  missingTaskErrorFeedback = (message, newTestName) => {\r\n    if (ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      const isTestSwitch = newTestName !== undefined && this.taskSequencer.getCurrentTaskInfo().testName !== newTestName;\r\n      // eslint-disable-next-line no-alert\r\n      alert(`The preview failed to do a task switch for this reason: ${message} ${isTestSwitch ? \". Task switches with explicit test names are not supported by the preview.\" : \". If the missing task exists in your item consider running a project preview.\"}`);\r\n    }\r\n    console.warn(message);\r\n  }\r\n\r\n\r\n  /**\r\n   * Build a string describing our current task.\r\n   */\r\n  buildCurrentTaskLogString = () => Controller.buildLogString(this.taskSequencer.getCurrentTaskInfo());\r\n\r\n  /**\r\n   * Build a string representation of the task described by the given task info.\r\n   * \r\n   * @param { test, item, task} currentTaskInfo \r\n   */\r\n  static buildLogString(currentTaskInfo) {\r\n    return (ServerCalls.runWithSimplifiedPreviewServer()\r\n      ? `task ${currentTaskInfo.taskName}`\r\n      : `task ${currentTaskInfo.taskName} from item ${currentTaskInfo.itemName} in test ${currentTaskInfo.testName}`);\r\n  }\r\n\r\n}\r\n","/**\r\n * Helper methods to work with index paths.\r\n * \r\n * See PathTranslationHelper for translation between user defined ID path and index path.\r\n */\r\nexport default class IndexPathHelper {\r\n\r\n  /**\r\n   * Build an index path root, i.e. test and item and task.\r\n   */\r\n  static buildPathRoot(testName, itemName, taskName) {\r\n    return `/test=${testName}/item=${itemName}/task=${taskName}`;\r\n  }\r\n\r\n  /**\r\n   * Build a page segment from a bare page name, i.e. without any navigation into a children list.\r\n   * \r\n   * Use the appendIndexToPageSegment method to add navigations into children lists.\r\n   */\r\n  static buildPageSegment(pageName) {\r\n    return `/page=${pageName}`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the page name from the given page segment.\r\n   */\r\n  static getPageNameFromPageSegment(pageSegment) {\r\n    if (!pageSegment.startsWith(\"/page=\")) {\r\n      console.warn(`Cannot get page name from invalid page segment: ${pageSegment}`);\r\n      return undefined;\r\n    }\r\n    const withNameInFront = pageSegment.substring(6);\r\n    const endIndex = withNameInFront.indexOf('/');\r\n    return endIndex === -1 ? withNameInFront : withNameInFront.substring(0, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Get the page name from the given path.\r\n   * @param path - path of the component\r\n   */\r\n  static getPageNameFromPath(path) {\r\n    const segmentIndex = path.indexOf(\"/page=\");\r\n    const hasValidPageSegment = segmentIndex !== -1;\r\n    if (!hasValidPageSegment) {\r\n      console.warn(`Cannot get page segment from invalid path: ${path}`);\r\n      return undefined;\r\n    }\r\n\r\n    return IndexPathHelper.getPageNameFromPageSegment(path.slice(segmentIndex));\r\n  }\r\n\r\n  /**\r\n   * Append the top level page segment to a path root.\r\n   *\r\n   * \r\n   * @param {*} pathRoot The path root (i.e. test/item/task) to be extended. \r\n   * @param {*} pageAreaType The type of page area (main, dialog or modal) to attach the page to.\r\n   * @param {*} pageAreaName The name of the page area (standard or Xpage for main type, an arbitrary name for dialog/modal types) to attach the page to.\r\n   * @param {*} pageSegment The page segment to attach to the page area.\r\n   */\r\n  static appendPageSegmentToPathRoot(pathRoot, pageAreaType, pageAreaName, pageSegment) {\r\n    return `${pathRoot}/pageAreaType=${pageAreaType}/pageAreaName=${pageAreaName}${pageSegment}`;\r\n  }\r\n\r\n  /**\r\n   * Append a string of page segments to the given path.\r\n   * \r\n   * @param {*} path The path to be extended.\r\n   * @param {*} pageSegments The string containing one or more page segments to be appended.\r\n   */\r\n  static appendPageSegmentsToPath(path, pageSegments) {\r\n    return path + pageSegments;\r\n  }\r\n\r\n  /**\r\n   * Drop the last page segment from a path.\r\n   * \r\n   * The method returns 'undefined' if the path does not contain any page segment.\r\n   */\r\n  static dropPageSegmentFromPath(path) {\r\n    const lastPageSlashIndex = path.lastIndexOf('/page=');\r\n    return lastPageSlashIndex === -1 ? undefined : path.substring(0, lastPageSlashIndex);\r\n  }\r\n\r\n  /**\r\n   * Drop all page segments from a path.\r\n   * \r\n   * The method returns the path if it does not contain any page segment.\r\n   */\r\n  static dropAllPageSegments(path) {\r\n    const firstPageSlashIndex = path.indexOf('/page=');\r\n    return firstPageSlashIndex === -1 ? path : path.substring(0, firstPageSlashIndex);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the last page segment from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain any page segment.\r\n   */\r\n  static getLastPageSegmentFromPath(path) {\r\n    const lastPageSlashIndex = path.lastIndexOf('/page=');\r\n    return lastPageSlashIndex === -1 ? undefined : path.substring(lastPageSlashIndex);\r\n  }\r\n\r\n  /**\r\n   * Get an array of all page segments in a path.\r\n   * \r\n   * The top level page segment is the first element in the array. \r\n   */\r\n  static getPageSegmentArray(path) {\r\n    const result = [];\r\n    let remainingPath = path;\r\n    let pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\r\n    while (pageSegment !== undefined) {\r\n      result.splice(0, 0, pageSegment);\r\n      remainingPath = IndexPathHelper.dropPageSegmentFromPath(remainingPath);\r\n      pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get a reversed array of all page segments in a path.\r\n   * \r\n   * The top level page segment is the last element in the array. \r\n   */\r\n  static getReversedPageSegmentArray(path) {\r\n    const result = [];\r\n    let remainingPath = path;\r\n    let pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\r\n    while (pageSegment !== undefined) {\r\n      result.push(pageSegment);\r\n      remainingPath = IndexPathHelper.dropPageSegmentFromPath(remainingPath);\r\n      pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Append the index of a child in a children array to a page segment. \r\n   */\r\n  static appendIndexToPageSegment(pageSegment, index) {\r\n    return `${pageSegment}/index=${index}`;\r\n  }\r\n\r\n  /**\r\n   * Drop the last index of a child from a page segment. \r\n   */\r\n  static dropIndexFromPageSegment(pageSegment) {\r\n    const lastSlashIndex = pageSegment.lastIndexOf('/index=');\r\n    return lastSlashIndex === -1 ? undefined : pageSegment.substring(0, lastSlashIndex);\r\n  }\r\n\r\n  /**\r\n   * Get the index of the last child from a page segment. \r\n   * \r\n   * The method returns the bare index as a number. \r\n   */\r\n  static getLastIndexFromPageSegment(pageSegment) {\r\n    const lastSlashIndex = pageSegment.lastIndexOf('/index=');\r\n    return lastSlashIndex === -1 ? undefined : pageSegment.substring(lastSlashIndex + 7);\r\n  }\r\n\r\n\r\n  /**\r\n   * Trim the leading test specification from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain an item specification.\r\n   * Otherwise it returns a path fragment starting with the item specification.\r\n   */\r\n  static trimTestFromPath(path) {\r\n    const slashIndex = path.indexOf('/item=');\r\n    return slashIndex === -1 ? undefined : path.substring(slashIndex);\r\n  }\r\n\r\n  /**\r\n   * Trim the path root (i.e. the test/item/task) and page area specification (i.e. pageAreaType/pageAreaName) from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain a page segment.\r\n   * Otherwise it returns the page segments string from the path.\r\n   */\r\n  static trimRootAndPageAreaFromPath(path) {\r\n    const slashIndex = path.indexOf('/page=');\r\n    return slashIndex === -1 ? undefined : path.substring(slashIndex);\r\n  }\r\n\r\n  /**\r\n   * Extract the path root (i.e. the test/item/task) from a path (without page type specification).\r\n   * \r\n   * The method returns the full path if the path does not contain a pageType specification.\r\n   * Otherwise it returns the path root up to (but not including) the pageType specification.\r\n   */\r\n  static getRootFromPath(path) {\r\n    const endIndex = path.indexOf('/pageAreaType=');\r\n    return endIndex === -1 ? path : path.substring(0, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Extract the path of a tree node inside a tree from the full index path of the tree node and the index path of the tree.\r\n   * \r\n   * The method returns the 'inner' path of the tree node given (leading from the tree to the node) \r\n   * if the given node path contains the given index path of the tree. \r\n   * Otherwise it returns null\r\n   */\r\n  static extractTreeChildPathFromTreePath(treePath, childPath) {\r\n    const endIndex = childPath.indexOf(treePath);\r\n    return endIndex === -1 ? null : childPath.substr(treePath.length);\r\n  }\r\n\r\n  /**\r\n   * Extract the page area type from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain a page area type specification.\r\n   */\r\n  static getPageAreaTypeFromPath(path) {\r\n    const typeKeyIndex = path.indexOf('/pageAreaType=');\r\n    const endIndex = path.indexOf('/pageAreaName=');\r\n    return (typeKeyIndex === -1 || endIndex === -1) ? undefined : path.substring(typeKeyIndex + 14, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Extract the page area name from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain a page area name specification.\r\n   */\r\n  static getPageAreaNameFromPath(path) {\r\n    const typeKeyIndex = path.indexOf('/pageAreaName=');\r\n    if (typeKeyIndex === -1) return undefined;\r\n\r\n    const endIndex = path.indexOf('/page=');\r\n    if (endIndex === -1) return path.substring(typeKeyIndex + 14);\r\n\r\n    return path.substring(typeKeyIndex + 14, endIndex);\r\n  }\r\n\r\n\r\n  /**\r\n   * Find the index path of the CbaPageArea that is the first CbaPageArea ancestor of the given component.\r\n   * \r\n   * @param {String} path The index path of the child component of the CbaPageArea.\r\n   */\r\n  static findPageAreaAncestorPath(path) {\r\n    const trimmedPath = IndexPathHelper.dropPageSegmentFromPath(path);\r\n    if (IndexPathHelper.getLastPageSegmentFromPath(trimmedPath) === undefined) {\r\n      return undefined;\r\n    }\r\n    return trimmedPath;\r\n  }\r\n\r\n  /**\r\n   * Extract the page path from a component path.\r\n   * @param {String} path The index path of the child component of the page.\r\n   */\r\n  static getPagePath(path) {\r\n    const rootPath = IndexPathHelper.dropAllPageSegments(path);\r\n    const pageName = IndexPathHelper.getPageNameFromPath(path);\r\n    return IndexPathHelper.appendPageSegmentsToPath(rootPath, IndexPathHelper.buildPageSegment(pageName));\r\n  }\r\n\r\n  /**\r\n   * Replaces al special characters from an index path so it can be used as a valid css id or selector\r\n   * \r\n   * @param {String} path The index path\r\n   */\r\n\r\n  static getValidCssIdFromPath(path) {\r\n    return path.replace(/[&/\\\\#, +()$~%.'\":*?<>{}=]/g, '');\r\n  }\r\n\r\n\r\n}\r\n","import PropTypes from 'prop-types';\r\n\r\nclass PropertyMissingException {\r\n\r\n  constructor(message) {\r\n    this.name = 'PropertyMissingException';\r\n    this.message = message;\r\n  }\r\n\r\n  toString = () => `${this.name}: ${this.message}`;\r\n\r\n}\r\n\r\nexport default class PropTypesHelper {\r\n\r\n  static asOptional(propTypesRequirement) {\r\n    return (props, propName, componentName) => {\r\n      if (props[propName] === undefined) return undefined;\r\n      return PropTypes.checkPropTypes(propTypesRequirement, props[propName], propName, componentName);\r\n    }\r\n  }\r\n\r\n\r\n  static raiseError(message) {\r\n    const exception = new PropertyMissingException(message);\r\n    console.error(exception.toString());\r\n  }\r\n\r\n  static addPropTypes(propTypes, toAdd) {\r\n    Object.keys(toAdd).forEach((key) => {\r\n      propTypes[key] = toAdd[key]\r\n    });\r\n    return propTypes;\r\n  }\r\n\r\n  // common config property checking\r\n\r\n  static getStandardRuntimePropTypes() {\r\n    const result = {\r\n      componentStateManager: PropTypes.object.isRequired,\r\n      componentDirectory: PropTypes.object.isRequired,\r\n      incidentsAccumulator: PropTypes.object.isRequired,\r\n      taskResultsManager: PropTypes.object.isRequired,\r\n      statemachinesManager: PropTypes.object.isRequired,\r\n      presenterStateManager: PropTypes.object.isRequired,\r\n      taskNavigatorStateManager: PropTypes.object.isRequired,\r\n      traceLogBuffer: PropTypes.object.isRequired,\r\n      traceLogUploader: PropTypes.object.isRequired,\r\n      recordingBuffer: PropTypes.object.isRequired,\r\n      recordingUploader: PropTypes.object.isRequired,\r\n      clipboardManager: PropTypes.object.isRequired,\r\n      pageConfigurationsManager: PropTypes.object.isRequired,\r\n      taskManager: PropTypes.object.isRequired,\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  static positionPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n      width: PropTypes.number.isRequired,\r\n      height: PropTypes.number.isRequired,\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static fontPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      name: PropTypes.string.isRequired,\r\n      size: PropTypes.number.isRequired,\r\n      alignmentHorizontal: PropTypes.oneOf(['left', 'center', 'right']).isRequired,\r\n      bold: PropTypes.bool.isRequired,\r\n      italic: PropTypes.bool.isRequired,\r\n      underlined: PropTypes.bool.isRequired,\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static getColorVariantsPropTypes() {\r\n    return {\r\n      // Note: manage transparency with rgba(..., ..., ..., 0) for the background color\r\n      default: PropTypes.string.isRequired,\r\n      // An empty object as value will not fall back to default color but display no color at all:\r\n      disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      visited: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      selected: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    };\r\n  }\r\n\r\n  static colorPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      text: PropTypesHelper.asOptional(PropTypesHelper.getColorVariantsPropTypes()),\r\n      background: PropTypesHelper.asOptional(PropTypesHelper.getColorVariantsPropTypes())\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static borderPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      style: PropTypes.oneOf(['none', 'solid', 'outset', 'inset']).isRequired,\r\n      width: PropTypes.number,\r\n      radius: PropTypes.number,\r\n      color: PropTypesHelper.asOptional(PropTypesHelper.getColorVariantsPropTypes())\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static getTransformOriginPropTypes() {\r\n    return {\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired\r\n    };\r\n  }\r\n\r\n  static transformPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      rotate: PropTypes.number,\r\n      transformOrigin: PropTypesHelper.asOptional(PropTypesHelper.getTransformOriginPropTypes())\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static statePropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      disabled: PropTypes.bool.isRequired,\r\n      selected: PropTypes.bool.isRequired,\r\n      hidden: PropTypes.bool.isRequired,\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static textPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      // TODO: maybe we should drop the number type here as it may lead to unexpected situation \r\n      label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n      mouseOver: PropTypes.string,\r\n      dynamic: PropTypes.shape({\r\n        variable: PropTypes.string.isRequired,\r\n        valueMap: PropTypes.string\r\n      })\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static imagePropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      displayMode: PropTypes.oneOf(['none', 'left', 'right', 'initial', 'overlay']).isRequired,\r\n      overlayType: PropTypes.oneOf(['stretch', 'center', 'default', 'left']),\r\n      default: PropTypes.string,\r\n      // An empty object as value will not fall back to default image but display no image at all:\r\n      disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      visited: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      selected: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      dynamic: PropTypes.shape({\r\n        variable: PropTypes.string.isRequired,\r\n        valueMap: PropTypes.string\r\n      })\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static eventPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      standard: PropTypes.string,\r\n      alternate: PropTypes.string,\r\n      onFocusIn: PropTypes.string,\r\n      onFocusOut: PropTypes.string\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static linkPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      page: PropTypes.string,\r\n      pageUrl: PropTypes.string,\r\n      conditional: PropTypes.object,\r\n      pageAreaType: PropTypes.oneOf(['main', 'dialog', 'modal']),\r\n      pageAreaName: PropTypes.string,\r\n      receiver: PropTypes.string,\r\n      receiverTab: PropTypes.object,\r\n      historyMove: PropTypes.oneOf(['home', 'forward', 'back']),\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static tracePropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      type: PropTypes.string.isRequired,\r\n      addOn: PropTypes.object,\r\n      skipTrace: PropTypes.bool.isRequired\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static cursorPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      standard: PropTypes.string,\r\n      image: PropTypes.string\r\n    }\r\n\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static getStandardConfigPropTypes(withChildren) {\r\n    const result = {\r\n      position: PropTypesHelper.positionPropsCheck,\r\n      font: PropTypesHelper.fontPropsCheck,\r\n      color: PropTypesHelper.colorPropsCheck,\r\n      border: PropTypesHelper.borderPropsCheck,\r\n      transform: PropTypesHelper.transformPropsCheck,\r\n      state: PropTypesHelper.statePropsCheck,\r\n      text: PropTypesHelper.textPropsCheck,\r\n      image: PropTypesHelper.imagePropsCheck,\r\n      cursor: PropTypesHelper.cursorPropsCheck,\r\n      event: PropTypesHelper.eventPropsCheck,\r\n      classifiers: PropTypes.array.isRequired,\r\n      link: PropTypesHelper.linkPropsCheck,\r\n      userDefinedId: PropTypes.string,\r\n      pageEditId: PropTypes.string,\r\n      trace: PropTypesHelper.tracePropsCheck,\r\n    };\r\n    if (withChildren) {\r\n      result.cbaChildren = PropTypes.array.isRequired;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Add prop checking for controller configuration.\r\n   */\r\n  static addSelectGroupControllerConfigPropTypes(propTypes) {\r\n    propTypes.selectGroups = PropTypes.arrayOf(PropTypes.shape({\r\n      blockSelectionChanges: PropTypes.bool.isRequired,\r\n      enforceSingleSelect: PropTypes.bool.isRequired,\r\n      allowDeselect: PropTypes.bool.isRequired,\r\n      initiallySelected: PropTypes.string,\r\n      deselectTarget: PropTypes.string\r\n    }));\r\n    return propTypes;\r\n  }\r\n\r\n  /**\r\n   * Add prop checking for possibly controlled component configuration.\r\n   */\r\n  static addSelectGroupMemberConfigPropTypes(propTypes) {\r\n    propTypes.selectGroupMember = PropTypes.shape({\r\n      controllerPathId: PropTypes.string.isRequired,\r\n      groupName: PropTypes.string.isRequired,\r\n      selectGroupMemberName: PropTypes.string\r\n    });\r\n    return propTypes;\r\n  }\r\n\r\n  static getCbaTreeColumnConfig() {\r\n    return {\r\n      mouseOver: PropTypes.string,\r\n      label: PropTypes.string,\r\n      moveable: PropTypes.bool,\r\n      resizable: PropTypes.bool,\r\n      width: PropTypes.number\r\n    }\r\n  }\r\n\r\n  static getCbaTreeRowConfig() {\r\n    return {\r\n      cells: PropTypes.array.isRequired,\r\n      expanded: PropTypes.bool.isRequired,\r\n      nodes: PropTypes.array.isRequired,\r\n      imagePath: PropTypes.string,\r\n      depth: PropTypes.number.isRequired,\r\n      onRowExpandClick: PropTypes.func,\r\n      onRowSelect: PropTypes.func.isRequired,\r\n      path: PropTypes.string.isRequired\r\n    }\r\n  }\r\n\r\n  /**\r\n   * gets the standard radio/checkbox label config proptypes\r\n   */\r\n  static getInputLabelConfig() {\r\n    return PropTypes.shape({\r\n      distance: PropTypes.number.isRequired,\r\n      position: PropTypes.string.isRequired\r\n    })\r\n\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * Helper methods to work with user defined ID paths.\r\n * \r\n * See PathTranslationHelper for translation between user defined ID path and index path.\r\n */\r\nexport default class UserDefPathHelper {\r\n\r\n  static forEachUserDefIdInPath(path, processor) {\r\n    if (path === undefined || path.lastIndexOf('/id=') === -1) return;\r\n    UserDefPathHelper.forEachUserDefIdInPath(UserDefPathHelper.dropUserDefIdFromPath(path), processor);\r\n    const lastId = UserDefPathHelper.getLastUserDefIdFromPath(path);\r\n    if (lastId !== undefined) {\r\n      processor(lastId);\r\n    }\r\n  }\r\n\r\n  static dropUserDefIdFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const lastSlashIndex = path.lastIndexOf('/id=');\r\n    if (lastSlashIndex === -1) {\r\n      return undefined;\r\n    }\r\n    return path.substring(0, lastSlashIndex);\r\n  }\r\n\r\n  static getLastUserDefIdFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const lastSlashIndex = path.lastIndexOf('/id=');\r\n    if (lastSlashIndex === -1) {\r\n      return undefined;\r\n    }\r\n    return path.substring(lastSlashIndex + 4);\r\n  }\r\n\r\n  static getPageAreaTypeFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const pageAreaNameSlashIndex = path.indexOf('/pageAreaName=');\r\n    return path.substring(14, pageAreaNameSlashIndex);\r\n  }\r\n\r\n  static getPageAreaNameFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const pageAreaNameStartIndex = path.indexOf('/pageAreaName=') + 14;\r\n    const firstIdSlashIndex = path.indexOf('/id=');\r\n    if (firstIdSlashIndex === -1) {\r\n      return path.substring(pageAreaNameStartIndex);\r\n    }\r\n    return path.substring(pageAreaNameStartIndex, firstIdSlashIndex);\r\n  }\r\n\r\n  static buildUserDefIdPath(pageAreaType, pageAreaName, firstUserDefId) {\r\n    if (pageAreaType === undefined || pageAreaName === undefined || firstUserDefId === undefined) {\r\n      return undefined;\r\n    }\r\n    return `/pageAreaType=${pageAreaType}/pageAreaName=${pageAreaName}/id=${firstUserDefId}`;\r\n  }\r\n\r\n  static appendUserDefIdToPath(path, userDefId) {\r\n    if (path === undefined || userDefId === undefined) {\r\n      return undefined;\r\n    }\r\n    return `${path}/id=${userDefId}`;\r\n  }\r\n\r\n  static simplifyUserDefIdPath(userDefIdPath) {\r\n    if (userDefIdPath === \"\" || userDefIdPath === undefined) return \"\";\r\n    // Split the userDefIdPath string into segments\r\n    const segments = userDefIdPath.split('/').filter(Boolean);\r\n\r\n    // Extract pageAreaType and pageAreaName values\r\n    let pageAreaType = '';\r\n    let pageAreaName = '';\r\n    segments.forEach((segment) => {\r\n      const [key, value] = segment.split('=');\r\n      if (key === 'pageAreaType') {\r\n        pageAreaType = value;\r\n      } else if (key === 'pageAreaName') {\r\n        pageAreaName = value;\r\n      }\r\n    });\r\n\r\n    // Construct the output based on pageAreaType and pageAreaName values\r\n    let output = '';\r\n    if (pageAreaType === 'main' && pageAreaName === 'standard') {\r\n      // If pageAreaType is main and pageAreaName is standard, provide only the ids separated by dots\r\n      const ids = segments.filter(segment => segment.startsWith('id=')).map(segment => segment.split('=')[1]).join('.');\r\n      output = ids;\r\n    } else {\r\n      // Otherwise, provide the [pageAreaType.pageAreaName].ids separated by dots\r\n      output = `[${pageAreaType}.${pageAreaName}]${segments.filter(segment => segment.startsWith('id=')).map(segment => segment.split('=')[1]).join('.')}`;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n}\r\n","/**\r\n * Encapsulate the structure of the 'common' area in the component's registered state.\r\n * Be carefully to name the getter/setter as you the attribute \r\n * e.g. attribute name: myData \r\n * getter name: extractMyData\r\n * setter name: setMyData\r\n * We have a test covering this in StateAttributeAccess.test.js; \r\n * When adding new methods please add the property name in the array of the test\r\n*/\r\nexport default class StateAttributeAccess {\r\n\r\n  // generic methods (for internal use mostly) ------------------------------------\r\n  static getStateAttribute(state, name) {\r\n    if (state === undefined) return undefined;\r\n    return state[name];\r\n  }\r\n\r\n  static setStateAttribute(state, name, value) {\r\n    state[name] = value;\r\n  }\r\n\r\n\r\n  // direct state access methods: --------------------------------------------------\r\n\r\n  // deep copy decision for state storing/retrieving operations\r\n  static extractDeepCopy(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"deepCopy\");\r\n  }\r\n\r\n  static setDeepCopy(state, deepCopy) {\r\n    StateAttributeAccess.setStateAttribute(state, \"deepCopy\", deepCopy);\r\n  }\r\n\r\n  // volatile marker for state storing/retrieving operations\r\n  static extractVolatile(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"volatile\");\r\n  }\r\n\r\n  static setVolatile(state, deepCopy) {\r\n    StateAttributeAccess.setStateAttribute(state, \"volatile\", deepCopy);\r\n  }\r\n\r\n  // component class name (for snapshot transformer method access)\r\n  static extractComponentClassName(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"componentClassName\");\r\n  }\r\n\r\n  static setComponentClassName(state, componentClassName) {\r\n    StateAttributeAccess.setStateAttribute(state, \"componentClassName\", componentClassName);\r\n  }\r\n\r\n  // disabled state of any component\r\n  static extractDisabled(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"disabled\");\r\n  }\r\n\r\n  static setDisabled(state, disabled) {\r\n    StateAttributeAccess.setStateAttribute(state, \"disabled\", disabled);\r\n  }\r\n\r\n  // hidden state of any component\r\n  static extractHidden(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"hidden\");\r\n  }\r\n\r\n  static setHidden(state, hidden) {\r\n    StateAttributeAccess.setStateAttribute(state, \"hidden\", hidden);\r\n  }\r\n\r\n  // visited state of any component\r\n  static extractVisited(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"visited\");\r\n  }\r\n\r\n  static setVisited(state, visited) {\r\n    StateAttributeAccess.setStateAttribute(state, \"visited\", visited);\r\n  }\r\n\r\n  // position of any component\r\n  static extractPosition(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"position\");\r\n  }\r\n\r\n  static setPosition(state, position) {\r\n    StateAttributeAccess.setStateAttribute(state, \"position\", position);\r\n  }\r\n\r\n\r\n  // default link receiver of any component\r\n  static extractDefaultLinkReceiver(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"defaultLinkReceiver\");\r\n  }\r\n\r\n  static setDefaultLinkReceiver(state, pageSegments) {\r\n    StateAttributeAccess.setStateAttribute(state, \"defaultLinkReceiver\", pageSegments);\r\n  }\r\n\r\n  // selectable state for table components\r\n  static extractSelectable(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectable\");\r\n  }\r\n\r\n  static setSelectable(state, selectable) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectable\", selectable);\r\n  }\r\n\r\n  // select state for components that are not controlled by a select-group controller in single-select mode\r\n  static extractSelected(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selected\");\r\n  }\r\n\r\n  static setSelected(state, selected) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selected\", selected);\r\n  }\r\n\r\n  // membership info for components that are under control of a select-group controller\r\n  static extractSelectGroupMemberInfo(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectGroupMemberInfo\");\r\n  }\r\n\r\n  static setSelectGroupMemberInfo(state, singleSelectStructure) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectGroupMemberInfo\", singleSelectStructure);\r\n  }\r\n\r\n  // select-group controller state in a select-group controller\r\n  static extractSelectGroupControllerState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectGroupControllerState\");\r\n  }\r\n\r\n  static setSelectGroupControllerState(state, controllerState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectGroupControllerState\", controllerState);\r\n  }\r\n\r\n\r\n  // propagation-group controller state in a propagation-group controller\r\n  static extractPropagationGroupControllerState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"propagationGroupControllerState\");\r\n  }\r\n\r\n  static setPropagationGroupControllerState(state, controllerState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"propagationGroupControllerState\", controllerState);\r\n  }\r\n\r\n\r\n  // text value of any component\r\n  static extractTextValue(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"textValue\");\r\n  }\r\n\r\n  static setTextValue(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"textValue\", value);\r\n  }\r\n\r\n  // highlightable state of any component\r\n  static extractHighlightable(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"highlightable\");\r\n  }\r\n\r\n  static setHighlightable(state, highlightable) {\r\n    StateAttributeAccess.setStateAttribute(state, \"highlightable\", highlightable);\r\n  }\r\n\r\n  // media player // invalid naming convention. refactor ?\r\n  static extractMediaVolume(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"volume\");\r\n  }\r\n\r\n  // invalid naming convention. refactor ?\r\n  static setMediaVolume(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"volume\", value);\r\n  }\r\n\r\n  static extractLastOperation(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"lastOperation\");\r\n  }\r\n\r\n  static setLastOperation(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"lastOperation\", value);\r\n  }\r\n\r\n  static extractCurrentTime(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"currentTime\");\r\n  }\r\n\r\n  static setCurrentTime(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"currentTime\", value);\r\n  }\r\n\r\n  static extractPlayNumber(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"playNumber\");\r\n  }\r\n\r\n  static setPlayNumber(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"playNumber\", value);\r\n  }\r\n\r\n  static extractMaxPlay(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"maxPlay\");\r\n  }\r\n\r\n  static setMaxPlay(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"maxPlay\", value);\r\n  }\r\n\r\n  static extractRecordNumber(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"recordNumber\");\r\n  }\r\n\r\n  static setRecordNumber(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"recordNumber\", value);\r\n  }\r\n\r\n  static extractMaxRecord(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"maxRecord\");\r\n  }\r\n\r\n  static setMaxRecord(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"maxRecord\", value);\r\n  }\r\n\r\n  static extractHideControls(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"hideControls\");\r\n  }\r\n\r\n  static setHideControls(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"hideControls\", value);\r\n  }\r\n\r\n  static extractAutomaticStart(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"automaticStart\");\r\n  }\r\n\r\n  static setAutomaticStart(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"automaticStart\", value);\r\n  }\r\n\r\n  static extractMediaBlob(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"mediaBlob\");\r\n  }\r\n\r\n  static setMediaBlob(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"mediaBlob\", value);\r\n  }\r\n\r\n  // external page frame\r\n  static extractExternalContentState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"externalContentState\");\r\n  }\r\n\r\n  static setExternalContentState(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"externalContentState\", value);\r\n  }\r\n\r\n  // selected cell for the table\r\n  static extractSelectedCell(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectedCell\");\r\n  }\r\n\r\n  static setSelectedCell(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectedCell\", value);\r\n  }\r\n\r\n  static extractOldSelectedCell(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"oldSelectedCell\");\r\n  }\r\n\r\n  static setOldSelectedCell(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"oldSelectedCell\", value);\r\n  }\r\n\r\n  static extractTableData(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"tableData\");\r\n  }\r\n\r\n  static setTableData(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"tableData\", value);\r\n  }\r\n\r\n  // table cell value, hadFocus,\r\n  static extractFormula(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"formula\");\r\n  }\r\n\r\n  static setFormula(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"formula\", value);\r\n  }\r\n\r\n  static extractCellHadFocus(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellHadFocus\");\r\n  }\r\n\r\n  static setCellHadFocus(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellHadFocus\", value);\r\n  }\r\n\r\n  static extractCellTitle(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellTitle\");\r\n  }\r\n\r\n  static setCellTitle(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellTitle\", value);\r\n  }\r\n\r\n  static extractCellHasError(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellHasError\");\r\n  }\r\n\r\n  static setCellHasError(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellHasError\", value);\r\n  }\r\n\r\n  static extractCellType(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellType\");\r\n  }\r\n\r\n  static setCellType(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellType\", value);\r\n  }\r\n\r\n  // address and content for the table cell editor \r\n  static extractCellEditorAddress(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorAddress\");\r\n  }\r\n\r\n  static setCellEditorAddress(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorAddress\", value);\r\n  }\r\n\r\n  static extractCellEditorContent(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorContent\");\r\n  }\r\n\r\n  static setCellEditorContent(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorContent\", value);\r\n  }\r\n\r\n  static extractCellEditorIsNotValid(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorIsNotValid\");\r\n  }\r\n\r\n  static setCellEditorIsNotValid(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorIsNotValid\", value);\r\n  }\r\n\r\n  static extractCellEditorContentIsReadOnly(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorContentIsReadOnly\");\r\n  }\r\n\r\n  static setCellEditorContentIsReadOnly(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorContentIsReadOnly\", value);\r\n  }\r\n\r\n  static extractCellEditorErrorMessage(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorErrorMessage\");\r\n  }\r\n\r\n  static setCellEditorErrorMessage(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorErrorMessage\", value);\r\n  }\r\n\r\n  // drag and drop\r\n  static extractDragAndDrop(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"dragAndDrop\");\r\n  }\r\n\r\n  static setDragAndDrop(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"dragAndDrop\", value);\r\n  }\r\n\r\n  // stopWatch\r\n  static extractCounterValue(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"counterValue\");\r\n  }\r\n\r\n  static setCounterValue(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"counterValue\", value);\r\n  }\r\n\r\n\r\n  // Tree\r\n  static extractTreeNodes(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeNodes\");\r\n  }\r\n\r\n  static setTreeNodes(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeNodes\", value);\r\n  }\r\n\r\n  static extractTreeColumns(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeColumns\");\r\n  }\r\n\r\n  static setTreeColumns(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeColumns\", value);\r\n  }\r\n\r\n  static extractTreeState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeState\");\r\n  }\r\n\r\n  static setTreeState(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeState\", value);\r\n  }\r\n\r\n  static extractNodeTypes(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"nodeTypes\");\r\n  }\r\n\r\n  static setNodeTypes(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"nodeTypes\", value);\r\n  }\r\n\r\n  static extractTreeReadOnly(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeReadOnly\");\r\n  }\r\n\r\n  static setTreeReadOnly(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeReadOnly\", value);\r\n  }\r\n\r\n  // Tree View\r\n  static extractTreeViewSort(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeViewSort\");\r\n  }\r\n\r\n  static setTreeViewSort(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeViewSort\", value);\r\n  }\r\n\r\n  static extractSelectedIds(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectedIds\");\r\n  }\r\n\r\n  static setSelectedIds(state, selectedIds) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectedIds\", selectedIds);\r\n  }\r\n\r\n  static extractDefaultHighlightColor(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"defaultHighlightColor\");\r\n  }\r\n\r\n  static setDefaultHighlightColor(state, defaultHighlightColor) {\r\n    StateAttributeAccess.setStateAttribute(state, \"defaultHighlightColor\", defaultHighlightColor);\r\n  }\r\n\r\n  static extractEditorState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"editorState\");\r\n  }\r\n\r\n  static setEditorState(state, editorState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"editorState\", editorState);\r\n  }\r\n\r\n  static extractSelections(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selections\");\r\n  }\r\n\r\n  static setSelections(state, selections) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selections\", selections);\r\n  }\r\n\r\n  static extractModifiersInEditorState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"modifiersInEditorState\");\r\n  }\r\n\r\n  static setModifiersInEditorState(state, modifiersInEditorState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"modifiersInEditorState\", modifiersInEditorState);\r\n  }\r\n\r\n  // input components\r\n  static extractLastCaretPosition(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"lastCaretPosition\");\r\n  }\r\n\r\n  static setLastCaretPosition(state, lastCaretPosition) {\r\n    StateAttributeAccess.setStateAttribute(state, \"lastCaretPosition\", lastCaretPosition);\r\n  }\r\n\r\n}\r\n","export default class StateManagerHelper {\r\n\r\n  static deepCopy(state) {\r\n    if (state === undefined) return undefined;\r\n    return JSON.parse(JSON.stringify(state));\r\n  }\r\n\r\n}\r\n","import StateAttributeAccess from './StateAttributeAccess';\r\nimport ComponentStateHelper from './ComponentStateHelper';\r\nimport CommonActionsHelper from '../components/CommonActionsHelper';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\n/**\r\n * Coordinate processing of recommendations, e.g. \r\n * - highlight the test in the TaskNavigator, \r\n * - jump to the recommended task once the recommended test is selected, \r\n * - activate the recommended control once the recommended task is selected\r\n */\r\nexport default class RecommendationsManager {\r\n\r\n  constructor(runtime) {\r\n    this.runtime = runtime;\r\n\r\n    this.recommendations = [];\r\n    this.taskNavigator = undefined;\r\n  }\r\n\r\n  // public API -------------------------------------------------------------------\r\n\r\n  /**\r\n   * The method expects an array of recommendation objects. \r\n   * Each recommendation object has the attributes\r\n   *  - testName\r\n   *  - taskName\r\n   *  - absoluteUserDefId (a UserDefinedIDPath like /pageType=standard/id=myPageAreaId/id=myComponentId)\r\n   */\r\n  setRecommendations = (recommendations) => {\r\n    const oldRecommendations = this.recommendations;\r\n    this.recommendations = StateManagerHelper.deepCopy(recommendations);\r\n\r\n    RecommendationsManager.traceRecommendationChange(oldRecommendations, this.recommendations, this.runtime);\r\n\r\n    if (this.taskNavigator !== undefined) {\r\n      this.taskNavigator.highlightRecommendations(this.recommendations);\r\n    }\r\n\r\n    // refresh display components affected by dropping the old recommendations \r\n    // and by setting the new recommendations.\r\n    // Note: Do this after setting the new recommendations to our this.recommendations member!\r\n    RecommendationsManager.refreshRecommendedComponents(oldRecommendations, this.runtime)\r\n    RecommendationsManager.refreshRecommendedComponents(this.recommendations, this.runtime)\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Initialize our reference to the TaskNavigator. \r\n   */\r\n  setTaskNavigator = (taskNavigator) => {\r\n    this.taskNavigator = taskNavigator;\r\n  }\r\n\r\n  /**\r\n   * Is the given display component instance (which must belong to the current running task)\r\n   * recommended currently?\r\n   * \r\n   * The method obtains the currently running test/task from the task manager.\r\n   * It translates the given index path to a userDefID path via PathTranslationHelper\r\n   * (which works for the currently running task only).\r\n   * \r\n   * For each recommendation the method checks the test/task match and the existence of a userDefIdPath specification \r\n   * first and only for a successful match it will run the path translation. \r\n   * Since we expect short recommendation lists the effort for checking the recommendations for each \r\n   * display component instance all the time should be small.\r\n   */\r\n  isRecommended = (indexPath) => {\r\n    const { runtime } = this;\r\n    const currentTaskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\r\n    let result = false;\r\n    this.recommendations.forEach((value, index, array) => {\r\n      if (value.testName === currentTaskInfo.test && value.taskName === currentTaskInfo.task && value.absoluteUserDefId !== undefined) {\r\n        const userDefIDPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n        if (userDefIDPath !== undefined && value.absoluteUserDefId === userDefIDPath) {\r\n          result = true;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Do further processing for a task that was chosen by the\r\n   * user in the task navigator.\r\n   * \r\n   * The method will look for recommendations on this task and\r\n   *  - for each recommendation it will set the background color of the display component instance specified to the 'recommendation' color.\r\n   *  - for the display component instance specified in the first matching recommendation it will\r\n   *    + set the selected state to true and\r\n   *    + do the page switch according to the display component's configuration. \r\n   */\r\n  processTaskSelected = (testName, itemName, taskName) => {\r\n    const { runtime } = this;\r\n    const firstRecommendation = RecommendationsManager.findFirstRecommendationForTask(this.recommendations, testName, taskName);\r\n    RecommendationsManager.setSelectedOnRecommendedComponent(firstRecommendation, runtime);\r\n    RecommendationsManager.doRecommendedPageSwitch(firstRecommendation, runtime);\r\n  }\r\n\r\n  /**\r\n   * Find the first recommendation that applies to the given test name.\r\n   */\r\n  static findFirstRecommendationForTest(recommendations, testName) {\r\n    return recommendations.find((value, index, theArray) => value.testName === testName);\r\n  }\r\n\r\n  /**\r\n   * Find the first recommendation that applies to the given test name and task name.\r\n   */\r\n  static findFirstRecommendationForTask(recommendations, testName, taskName) {\r\n    return recommendations.find((value, index, theArray) => (value.testName === testName) && (value.taskName === taskName));\r\n  }\r\n\r\n  /**\r\n   * Get the standard background color for recommended items.\r\n   */\r\n  static getRecommendationColor() {\r\n    return \"rgba(206, 239, 253, 1)\";\r\n  }\r\n\r\n  // private stuff --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Report a recommendations change in the trace log.\r\n   */\r\n  static traceRecommendationChange(oldRecommendations, newRecommendations, runtime) {\r\n    const { traceLogBuffer } = runtime;\r\n    traceLogBuffer.reportEvent('Recommend', new Date(), {\r\n      oldRecommendations: RecommendationsManager.buildRecommendationListForTrace(oldRecommendations),\r\n      newRecommendations: RecommendationsManager.buildRecommendationListForTrace(newRecommendations),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Transform the recommendations objects in the recommendations list \r\n   * to the form used in the trace log.\r\n   */\r\n  static buildRecommendationListForTrace(recommendations) {\r\n    return recommendations.map(recommendation => (\r\n      {\r\n        testName: recommendation.testName,\r\n        taskName: recommendation.taskName,\r\n        userDefIdPath: recommendation.absoluteUserDefId,\r\n        userDefId: UserDefPathHelper.getLastUserDefIdFromPath(recommendation.absoluteUserDefId)\r\n      }\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * Set the selected status of the display component specified in the given recommendation to true. \r\n   */\r\n  static setSelectedOnRecommendedComponent(recommendation, runtime) {\r\n    if (recommendation !== undefined && recommendation.absoluteUserDefId !== undefined) {\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractSelected, StateAttributeAccess.setSelected, true, recommendation.absoluteUserDefId, runtime, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the page switch specified in the link configuration of the display component \r\n   * \r\n   */\r\n  static doRecommendedPageSwitch(recommendation, runtime) {\r\n    if (recommendation !== undefined && recommendation.absoluteUserDefId !== undefined) {\r\n      const { pageConfigurationsManager } = runtime;\r\n      const userDefinedId = UserDefPathHelper.getLastUserDefIdFromPath(recommendation.absoluteUserDefId);\r\n      const targetPageSegment = pageConfigurationsManager.findPageSegmentForUserDefId(userDefinedId);\r\n      if (targetPageSegment === undefined) {\r\n        console.warn(`Recommendation switch could not find page segment for user defined ID ${userDefinedId}`);\r\n        return;\r\n      }\r\n      const targetComponentConfig = pageConfigurationsManager.findConfigurationForPageSegment(targetPageSegment);\r\n      const pathState = runtime.componentStateManager.findOrBuildStateByUserDefPath(recommendation.absoluteUserDefId, runtime);\r\n      const defaultLinkReceiver = StateAttributeAccess.extractDefaultLinkReceiver(pathState);\r\n      CommonActionsHelper.doPageSwitch(targetComponentConfig.config.link, runtime, defaultLinkReceiver, undefined);\r\n    }\r\n  }\r\n\r\n  static refreshRecommendedComponents(recommendations, runtime) {\r\n    const currentTaskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\r\n    recommendations.forEach((value, index, array) => {\r\n      if (value.testName === currentTaskInfo.test && value.taskName === currentTaskInfo.task && value.absoluteUserDefId !== undefined) {\r\n        RenderingHelper.triggerRenderingViaUserDefPath(value.absoluteUserDefId, runtime);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import PropTypesHelper from '../components/PropTypesHelper';\r\nimport CommonConfigHelper from './CommonConfigHelper';\r\n\r\n// TODO: add constant values for attributes\r\n\r\nexport default class AutoLayoutHelper {\r\n\r\n  static buildStyleForAutoLayout(configProps, orientation, pathState) {\r\n\r\n    const { autoLayoutLayer } = configProps;\r\n\r\n    // split after the autoLayout keywords\r\n    let result = {};\r\n\r\n    switch (autoLayoutLayer) {\r\n      case \"panel\": result = Object.assign(\r\n        CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState),\r\n        AutoLayoutHelper.buildStyleForAutoLayoutPanel(configProps, orientation, pathState)\r\n      );\r\n        break;\r\n      case \"cell\": result = AutoLayoutHelper.buildStyleForAutoLayoutCell(configProps);\r\n        break;\r\n      case \"element\": result = AutoLayoutHelper.buildStyleForAutoLayoutElement(configProps, orientation, pathState);\r\n        break;\r\n      case \"panel-element\": result = Object.assign(\r\n        AutoLayoutHelper.buildStyleForAutoLayoutPanel(configProps, orientation, pathState),\r\n        AutoLayoutHelper.buildStyleForAutoLayoutElement(configProps, orientation, pathState)\r\n      );\r\n        break;\r\n      case \"none\":\r\n        result = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n        break;\r\n      default:\r\n        // missing autoLayout value, probably using old/manual config. Using \"none\" case;\r\n        result = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n        PropTypesHelper.raiseError(\"autoLayoutLayer value missing\");\r\n        break;\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  static transformTemplateKeywords(keywords) {\r\n    return keywords.map((keyword) => {\r\n\r\n      if (keyword === \"fill\") return \"auto\";\r\n      if (keyword.endsWith(\"%\") || keyword.endsWith(\"px\")) return keyword;\r\n      if (keyword === \"auto\") return \"min-content\";\r\n\r\n      return null;\r\n    }).join(\" \");\r\n  }\r\n\r\n  static buildStyleForAutoLayoutPanel(configProps, orientation, pathState) {\r\n\r\n    const { rows, columns, blockAlignVertically, blockAlignHorizontally, gap } = configProps.autoLayout;\r\n\r\n    return {\r\n      display: \"grid\",\r\n      gridTemplateRows: AutoLayoutHelper.transformTemplateKeywords(rows),\r\n      gridTemplateColumns: AutoLayoutHelper.transformTemplateKeywords(columns),\r\n      alignContent: blockAlignVertically,\r\n      justifyContent: blockAlignHorizontally,\r\n      rowGap: gap.row,\r\n      columnGap: gap.column,\r\n      // border: \"1px solid tomato\"\r\n    };\r\n  }\r\n\r\n  static buildStyleForAutoLayoutCell(configProps) {\r\n\r\n    const { columnStart, rowStart, columnSpan, rowSpan, alignVertically, alignHorizontally } = configProps.autoLayout;\r\n\r\n    return {\r\n      position: \"relative\",\r\n      gridColumnStart: columnStart,\r\n      gridRowStart: rowStart,\r\n      gridColumnEnd: `span ${columnSpan}`,\r\n      gridRowEnd: `span ${rowSpan}`,\r\n      alignItems: AutoLayoutHelper.transformFlexAlignmentKeyword(alignVertically),\r\n      justifyContent: AutoLayoutHelper.transformFlexAlignmentKeyword(alignHorizontally),\r\n      display: \"flex\",\r\n      // border: \"1px dashed blue\"\r\n    }\r\n  }\r\n\r\n  static transformFlexAlignmentKeyword(alignment) {\r\n    switch (alignment) {\r\n      case \"start\": return \"flex-start\";\r\n      case \"end\": return \"flex-end\";\r\n      case \"center\":\r\n      case \"none\":\r\n      case \"stretch\":\r\n        return alignment;\r\n      default: return PropTypesHelper.raiseError(\"autoLayoutLayer -> cell alignment value invalid\");\r\n    }\r\n  }\r\n\r\n  static addHorizontalElementValues(resultStyle, configProps, useElementPosition, orientation, pathState) {\r\n    const positionFromState = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n\r\n    if (useElementPosition) {\r\n      resultStyle.left = positionFromState.left;\r\n      resultStyle.right = positionFromState.right;\r\n    }\r\n\r\n    resultStyle.width = positionFromState.width;\r\n  }\r\n\r\n  static addVerticalElementValues(resultStyle, configProps, useElementPosition, orientation, pathState) {\r\n    const positionFromState = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n\r\n    if (useElementPosition) {\r\n      resultStyle.top = positionFromState.top;\r\n    }\r\n\r\n    resultStyle.height = positionFromState.height;\r\n  }\r\n\r\n  static buildStyleForAutoLayoutElement(configProps, orientation, pathState) {\r\n\r\n    const { alignVertically, alignHorizontally } = configProps.autoLayout;\r\n\r\n    const result = {\r\n      position: \"relative\"\r\n    };\r\n\r\n    switch (alignVertically) {\r\n      case \"start\":\r\n      case \"center\":\r\n      case \"end\": AutoLayoutHelper.addVerticalElementValues(result, configProps, false, orientation, pathState);\r\n        break;\r\n      case \"none\": AutoLayoutHelper.addVerticalElementValues(result, configProps, true, orientation, pathState);\r\n        break;\r\n      case \"stretch\": result.height = \"100%\";\r\n        break;\r\n      default: PropTypesHelper.raiseError(\"autoLayoutLayer -> alignVertically value invalid\")\r\n\r\n    }\r\n\r\n    switch (alignHorizontally) {\r\n      case \"start\":\r\n      case \"center\":\r\n      case \"end\": AutoLayoutHelper.addHorizontalElementValues(result, configProps, false, orientation, pathState);\r\n        break;\r\n      case \"none\": AutoLayoutHelper.addHorizontalElementValues(result, configProps, true, orientation, pathState);\r\n        result.position = \"relative\";\r\n        break;\r\n      case \"stretch\": result.width = \"100%\";\r\n        break;\r\n      default: PropTypesHelper.raiseError(\"autoLayoutLayer -> alignHorizontally value invalid\")\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport PropTypesHelper from '../components/PropTypesHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport RecommendationsManager from '../state/RecommendationsManager';\r\nimport Utils from \"../utils/Utils\";\r\nimport AutoLayoutHelper from './AutoLayoutHelper';\r\n\r\nexport default class CommonConfigHelper {\r\n\r\n\r\n  // property checking ----------------------------------------------------------------------\r\n\r\n  static checkPosition(position) {\r\n    const message = (\r\n      (position.x === undefined ? 'x value missing' : '')\r\n      + (position.y === undefined ? 'y value missing' : '')\r\n      + (position.width === undefined ? 'width value missing' : '')\r\n      + (position.height === undefined ? 'height value missing' : '')\r\n    );\r\n    if (message !== '') {\r\n      PropTypesHelper.raiseError(message);\r\n    }\r\n  }\r\n\r\n  static checkFont(font) {\r\n    const message = (\r\n      (font.name === undefined ? 'font name missing' : '')\r\n      + (font.size === undefined ? 'font size missing' : '')\r\n    );\r\n    if (message !== '') {\r\n      PropTypesHelper.raiseError(message);\r\n    }\r\n  }\r\n\r\n  static checkState(state) {\r\n    const message = (\r\n      (state.disabled === undefined ? 'disabled status missing' : '')\r\n      + (state.selected === undefined ? 'selected status missing' : '')\r\n      + (state.hidden === undefined ? 'hidden status missing' : '')\r\n    );\r\n    if (message !== '') {\r\n      PropTypesHelper.raiseError(message);\r\n    }\r\n  }\r\n\r\n\r\n  // methods to access common config values: -----------------------------\r\n\r\n  static getDisabled(configProps) {\r\n    return configProps.state.disabled;\r\n  }\r\n\r\n  static getSelected(configProps) {\r\n    return configProps.state.selected;\r\n  }\r\n\r\n  static getHidden(configProps) {\r\n    return configProps.state.hidden;\r\n  }\r\n\r\n  static getPosition(configProps) {\r\n    return configProps.position;\r\n  }\r\n\r\n  static getUserDefinedId(configProps) {\r\n    return configProps.userDefinedId;\r\n  }\r\n\r\n  static getDragAndDrop(configProps) {\r\n    return configProps.dragAndDrop;\r\n  }\r\n\r\n  static getIdentifyingInfoForLogMessage(configProps) {\r\n    const userDefinedId = CommonConfigHelper.getUserDefinedId(configProps);\r\n    const positionString = `at (${configProps.position.x},${configProps.position.y})`;\r\n    return (userDefinedId !== undefined ? `${userDefinedId} ` : \"\") + positionString;\r\n  }\r\n\r\n  static getObservedStatemachineVariableNames(configProps) {\r\n    const result = [];\r\n    if (configProps.text !== undefined\r\n      && configProps.text.dynamic !== undefined\r\n      && !result.includes(configProps.text.dynamic.variable)) {\r\n      result.push(configProps.text.dynamic.variable);\r\n    }\r\n    if (configProps.image !== undefined\r\n      && configProps.image.dynamic !== undefined\r\n      && !result.includes(configProps.image.dynamic.variable)) {\r\n      result.push(configProps.image.dynamic.variable);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // helper methods for rendering step -------------------------------------------------------\r\n\r\n  /**\r\n   * Calculate the text to be displayed as main content of a component. \r\n   * \r\n   * The method considers (with decreasing priority):\r\n   *  - a 'dynamic' text setting in the configProps that binds the component to a state machine variable\r\n   *  - the textValue attribute in the dynamic state of the component\r\n   *  - the default value text.label given in the configProps as text.label\r\n   *  - the empty string as default value if everything else fails\r\n   * \r\n   * @param {*} configProps The standard component config properties (i.e. sibling to the type attribute).\r\n   * @param {*} state The state of the component instance in the ComponentStateManager\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static buildDisplayText(configProps, state, runtime) {\r\n\r\n    if (configProps.text !== undefined && configProps.text.dynamic !== undefined) {\r\n      const textFromVariable = CommonConfigHelper.getDynamicValueFromStatemachineAndMapper(configProps.text.dynamic, runtime);\r\n      if (textFromVariable !== undefined) {\r\n        return textFromVariable;\r\n      }\r\n    }\r\n\r\n    const textFromState = StateAttributeAccess.extractTextValue(state);\r\n    if (textFromState !== undefined) {\r\n      return textFromState;\r\n    }\r\n\r\n    if (configProps.text !== undefined && configProps.text.label !== undefined) {\r\n      return configProps.text.label;\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  static buildTitle(props) {\r\n    return props.text && props.text.mouseOver !== undefined ? props.text.mouseOver : '';\r\n  }\r\n\r\n  static getImageTag(pathState, configProps, selected, runtime, extraStyle = {}) {\r\n    const { displayMode } = configProps.image;\r\n    if (displayMode !== 'left' && displayMode !== 'right' && displayMode !== 'initial') {\r\n      return undefined;\r\n    }\r\n\r\n    const disabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const visited = StateAttributeAccess.extractVisited(pathState);\r\n    const imageResource = CommonConfigHelper.getProperResourcePath(CommonConfigHelper.chooseImageOrColorVariant(configProps.image, disabled, selected, visited), runtime);\r\n    if (imageResource === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const imageStyle = Object.assign({\r\n      float: displayMode,\r\n      opacity: disabled ? 0.3 : 1\r\n    }, extraStyle);\r\n    return <img src={imageResource} alt=\"\" style={imageStyle} />;\r\n  }\r\n\r\n  static buildStyleByIndexPath(indexPath, configProps, selected, orientation, runtime) {\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const recommended = runtime.recommendationsManager.isRecommended(indexPath);\r\n    return CommonConfigHelper.buildStyleByState(pathState, configProps, selected, orientation, recommended, runtime);\r\n  }\r\n\r\n  static buildAbsoluteStyleFromConfig(configProps, orientation, pathState) {\r\n    const { position: positionInConfig } = configProps;\r\n    const positionInState = StateAttributeAccess.extractPosition(pathState);\r\n    const orientationValue = orientation || \"left\";\r\n\r\n    return {\r\n      position: 'absolute',\r\n      [orientationValue]: `${positionInState.x}px`,\r\n      top: `${positionInState.y}px`,\r\n      width: `${positionInConfig.width}px`,\r\n      height: `${positionInConfig.height}px`,\r\n    }\r\n  }\r\n\r\n  static buildStyleByState(pathState, configProps, selected, orientation, recommended, runtime) {\r\n\r\n    // set strictly required attributes:\r\n    const { position: positionInConfig, font, state, cursor } = configProps;\r\n    const paddingValue = positionInConfig.padding === undefined ? undefined : \"padding\"\r\n\r\n    CommonConfigHelper.checkPosition(positionInConfig);\r\n    CommonConfigHelper.checkFont(font);\r\n    CommonConfigHelper.checkState(state);\r\n\r\n    const result = Object.assign(\r\n      AutoLayoutHelper.buildStyleForAutoLayout(configProps, orientation, pathState),\r\n      {\r\n        [paddingValue]: `${positionInConfig.padding}px`,\r\n        outline: 'none',\r\n        visibility: StateAttributeAccess.extractHidden(pathState) ? 'hidden' : 'visible',\r\n        fontFamily: `'${font.name}', Geneva, sans-serif`,\r\n        fontSize: font.size,\r\n        fontWeight: font.bold ? 'bold' : 'normal',\r\n        fontStyle: font.italic ? 'italic' : 'normal',\r\n        textDecoration: font.underlined ? 'underline' : 'none',\r\n        textAlign: font.alignmentHorizontal\r\n      }\r\n    );\r\n\r\n    // set optional attributes\r\n    const disabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const visited = StateAttributeAccess.extractVisited(pathState);\r\n\r\n    CommonConfigHelper.setStyleAttribute(result, \"color\", CommonConfigHelper.chooseImageOrColorVariant(configProps.color.text, disabled, selected, visited));\r\n\r\n    CommonConfigHelper.setStyleAttribute(result, \"cursor\", CommonConfigHelper.getCursorValue(cursor, runtime));\r\n\r\n    CommonConfigHelper.setBorderStyleAttributes(result, configProps.border, disabled, selected, visited);\r\n\r\n    CommonConfigHelper.setBackgroundStyleAttributes(result, configProps, disabled, selected, visited, recommended, runtime);\r\n\r\n    const rotateDegrees = configProps.transform.rotate;\r\n    const translateX = configProps.transform.translateX !== undefined ? configProps.transform.translateX : 0;\r\n    const translateY = configProps.transform.translateY !== undefined ? configProps.transform.translateY : 0;\r\n\r\n    if (rotateDegrees !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(result, \"transform\", `translate( ${translateX}px, ${translateY}px) rotate(  ${rotateDegrees}deg)`)\r\n    }\r\n\r\n    const { transformOrigin } = configProps.transform;\r\n    if (transformOrigin !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(result, \"transformOrigin\", `${transformOrigin.x}% ${transformOrigin.y}%`)\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // builds CSS required in order for the custom web fonts to work \r\n  static buildCustomFontsCss(fontMappingsArray, runtime) {\r\n    let css = '';\r\n\r\n    fontMappingsArray.forEach((font) => {\r\n      css += `@font-face {\r\n                font-family: '${font.fontFamilyName}';\r\n                src: url('${CommonConfigHelper.getProperResourcePath(font.fontFileName, runtime)}');\r\n      }`;\r\n    });\r\n\r\n    return css; \r\n  }\r\n\r\n  // helper methods for SVG \r\n  static buildStyleSvg(pathState, configProps, selected) {\r\n    const disabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const visited = StateAttributeAccess.extractVisited(pathState);\r\n    const result = {};\r\n    CommonConfigHelper.setStyleAttribute(result, \"fill\", CommonConfigHelper.chooseImageOrColorVariant(configProps.color.background, disabled, selected, visited));\r\n    CommonConfigHelper.setStyleAttribute(result, \"stroke\", CommonConfigHelper.chooseImageOrColorVariant(configProps.border.color, disabled, selected, visited));\r\n    CommonConfigHelper.setStyleAttributeWithUnits(result, \"strokeWidth\", configProps.border.width, 'px');\r\n    return result;\r\n  }\r\n\r\n  static buildPointsString(pointsArray) {\r\n    return pointsArray.reduce((accumulated, child, index) => `${accumulated} ${child.x},${child.y}`, \"\");\r\n  }\r\n\r\n\r\n\r\n\r\n  // internal helper methods ------------------------------------------------------------------------------------------------------\r\n\r\n  static getDynamicValueFromStatemachineAndMapper(dynamicConfig, runtime) {\r\n    const { taskManager, variableManager, valueMapper } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n    const variableValue = variableManager.getVariable(currentTaskId, dynamicConfig.variable);\r\n\r\n    if (variableValue === undefined) {\r\n      return undefined;\r\n    }\r\n    if (dynamicConfig.valueMap === undefined) {\r\n      return `${variableValue}`;\r\n    }\r\n    return valueMapper.getMappedValue(dynamicConfig.valueMap, variableValue);\r\n  }\r\n\r\n  static combine(pathState, propsState, defaultValue) {\r\n    if (pathState !== undefined) return pathState;\r\n    if (propsState !== undefined) return propsState;\r\n    return defaultValue;\r\n  }\r\n\r\n  static setStyleAttribute(attributes, attributeName, valueOrUndefined) {\r\n    if (valueOrUndefined !== undefined) {\r\n      attributes[attributeName] = valueOrUndefined;\r\n    }\r\n  }\r\n\r\n  static setBorderStyleAttributes(attributes, borderProps, disabled, selected, visited) {\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"borderStyle\", borderProps.style);\r\n    CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderWidth\", borderProps.width, 'px');\r\n    CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderRadius\", borderProps.radius, 'px');\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"borderColor\", CommonConfigHelper.chooseImageOrColorVariant(borderProps.color, disabled, selected, visited));\r\n\r\n    if (borderProps.north !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderTopStyle\", borderProps.north.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderTopColor\", borderProps.north.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderTopWidth\", borderProps.north.width, 'px');\r\n    }\r\n    if (borderProps.south !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderBottomStyle\", borderProps.south.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderBottomColor\", borderProps.south.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderBottomWidth\", borderProps.south.width, 'px');\r\n    }\r\n    if (borderProps.west !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderLeftStyle\", borderProps.west.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderLeftColor\", borderProps.west.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderLeftWidth\", borderProps.west.width, 'px');\r\n    }\r\n    if (borderProps.east !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderRightStyle\", borderProps.east.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderRightColor\", borderProps.east.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderRightWidth\", borderProps.east.width, 'px');\r\n    }\r\n  }\r\n\r\n  static setBackgroundStyleAttributes(attributes, configProps, disabled, selected, visited, recommended, runtime) {\r\n    const { displayMode } = configProps.image;\r\n\r\n    const imageFromVariable = (configProps.image !== undefined && configProps.image.dynamic !== undefined)\r\n      ? CommonConfigHelper.getDynamicValueFromStatemachineAndMapper(configProps.image.dynamic, runtime)\r\n      : undefined;\r\n\r\n    const imageVariant = (imageFromVariable === undefined || imageFromVariable.length === 0)\r\n      ? CommonConfigHelper.chooseImageOrColorVariant(configProps.image, disabled, selected, visited)\r\n      : imageFromVariable;\r\n\r\n    let backgroundImageUrl;\r\n    if (displayMode === 'overlay') {\r\n      backgroundImageUrl = (imageVariant === undefined) ? \"none\" : `url(${CommonConfigHelper.getProperResourcePath(imageVariant, runtime)})`;\r\n    }\r\n    const overlayType = backgroundImageUrl ? configProps.image.overlayType : undefined;\r\n\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"backgroundColor\",\r\n      ((recommended === true) ? RecommendationsManager.getRecommendationColor() : CommonConfigHelper.chooseImageOrColorVariant(configProps.color.background, disabled, selected, visited)));\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"backgroundImage\", backgroundImageUrl);\r\n\r\n    if (!backgroundImageUrl && !overlayType) return;\r\n\r\n    switch (overlayType) {\r\n      case \"stretch\":\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundRepeat\", \"no-repeat\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundPosition\", \"center\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundSize\", \"100% 100%\");\r\n        break;\r\n      case \"center\":\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundRepeat\", \"no-repeat\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundPosition\", \"center\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundSize\", \"contain\");\r\n        break;\r\n      case \"left\":\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundRepeat\", \"no-repeat\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundPosition\", \"left\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundSize\", \"contain\");\r\n        break;\r\n      default: break;\r\n    }\r\n\r\n  }\r\n\r\n  static setStyleAttributeWithUnits(attributes, attributeName, valueOrUndefined, units) {\r\n    if (valueOrUndefined !== undefined) {\r\n      attributes[attributeName] = valueOrUndefined + units;\r\n    }\r\n  }\r\n\r\n  static chooseImageOrColorVariant(variantsEntry, disabled, selected, visited) {\r\n    if (variantsEntry === undefined) return undefined;\r\n    const chosenVariant = CommonConfigHelper.pickVariantPropertyFromEntry(variantsEntry, disabled, selected, visited);\r\n    return CommonConfigHelper.isBlockDefaultValue(chosenVariant) ? undefined : Utils.withDefault(chosenVariant, variantsEntry.default);\r\n  }\r\n\r\n  static pickVariantPropertyFromEntry(variantsEntry, disabled, selected, visited) {\r\n    if (disabled) return variantsEntry.disabled;\r\n    if (selected) return variantsEntry.selected;\r\n    if (visited) return variantsEntry.visited;\r\n    return variantsEntry.default;\r\n  }\r\n\r\n  static isBlockDefaultValue(variant) {\r\n    return variant !== undefined && Utils.isEmptyObject(variant);\r\n  }\r\n\r\n  static getCursorValue(cursor, runtime) {\r\n    if (cursor === undefined) return undefined;\r\n    if (cursor.standard !== undefined) return cursor.standard;\r\n    if (cursor.image !== undefined) return `url(${this.getProperResourcePath(cursor.image, runtime)}), auto`;\r\n    return undefined;\r\n  }\r\n\r\n\r\n  static getProperResourcePath(resourceFromConfig, runtime) {\r\n    return CommonConfigHelper.getProperResourcePathWithFlag(resourceFromConfig, 'resource', runtime);\r\n  }\r\n\r\n  static getProperResourcePathWithFlag(resourceFromConfig, flag, runtime) {\r\n    if (resourceFromConfig === undefined || resourceFromConfig.length === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    const { taskManager } = runtime;\r\n    let resourceFolder = '';\r\n    switch (flag) {\r\n      case 'resource':\r\n        resourceFolder = taskManager.getResourcePath();\r\n        break;\r\n      case 'external':\r\n        resourceFolder = taskManager.getExternalResourcePath();\r\n        break;\r\n      default:\r\n        console.error(`Unknown resource path flag ${flag}, defaulting to 'resource'`);\r\n        resourceFolder = taskManager.getResourcePath();\r\n        break;\r\n    }\r\n\r\n    return `${resourceFolder}/${resourceFromConfig}`;\r\n  }\r\n\r\n  /**\r\n   * Add a local path for an external resource so that an iframe can use it as internal or external url.\r\n   * \r\n   * @param {*} resourceFromConfig \r\n   */\r\n  static getProperResourcePathExternalResources(resourceFromConfig, runtime) {\r\n    if (resourceFromConfig === undefined) {\r\n      return undefined;\r\n    } else if (resourceFromConfig.toLowerCase().startsWith(\"http\")) {\r\n      return resourceFromConfig;\r\n    } else {\r\n      return CommonConfigHelper.getProperResourcePathWithFlag(resourceFromConfig, 'external', runtime);\r\n    }\r\n  }\r\n\r\n  static getCssClassNamesValue(config, aditionalClasses) {\r\n    const configClassNames = config.cssClassNames || [];\r\n    return [...configClassNames, aditionalClasses].join(\" \");\r\n  }\r\n\r\n  static buildStyleForMask = (wrapperStyle) => {\r\n    const { width, height, top, left, right } = wrapperStyle;\r\n    return {\r\n      position: \"absolute\",\r\n      width,\r\n      height,\r\n      top,\r\n      left,\r\n      right\r\n    }\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from \"./IndexPathHelper\";\r\nimport UserDefPathHelper from \"./UserDefPathHelper\";\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\n\r\n/**\r\n * Helper methods to work translate user defined ID paths to index paths and vice versa.\r\n */\r\nexport default class PathTranslationHelper {\r\n\r\n  // ----- public API --------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the userDefPath for an index path. \r\n   * \r\n   * The method obtains the necessary userDefPathID from the currently loaded item configuration.\r\n   * If there are CbaPageAreas in the index path without a user defined ID the method returns undefined.\r\n   */\r\n  static getUserDefPathForIndexPath(indexPath, runtime) {\r\n    if (indexPath === undefined) {\r\n      return undefined;\r\n    }\r\n    const pageSegments = IndexPathHelper.getPageSegmentArray(indexPath);\r\n    if (pageSegments.length === 0) {\r\n      return undefined;\r\n    }\r\n    const firstUserDefId = PathTranslationHelper.getUserDefIdForPageSegment(pageSegments[0], runtime);\r\n\r\n    let userDefIdPath = UserDefPathHelper.buildUserDefIdPath(\r\n      IndexPathHelper.getPageAreaTypeFromPath(indexPath),\r\n      IndexPathHelper.getPageAreaNameFromPath(indexPath),\r\n      firstUserDefId\r\n    );\r\n\r\n    for (let index = 1; index < pageSegments.length; index += 1) {\r\n      const userDefinedId = PathTranslationHelper.getUserDefIdForPageSegment(pageSegments[index], runtime);\r\n      if (userDefinedId === undefined) {\r\n        return undefined;\r\n      }\r\n      userDefIdPath = UserDefPathHelper.appendUserDefIdToPath(userDefIdPath, userDefinedId);\r\n    }\r\n\r\n    return userDefIdPath;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the index path for a userDefPath.\r\n   * A userDefPath consists of the UserDefIds of the page areas leading to a page instance and the \r\n   * userDefId of a component that is part of the page. \r\n   * The method will use the path root currently loaded in the given runtime.\r\n   */\r\n  static getIndexPathForUserDefPath(userDefPath, runtime) {\r\n    let pathId = IndexPathHelper.appendPageSegmentToPathRoot(\r\n      runtime.taskManager.getCurrentStatePathRoot(),\r\n      UserDefPathHelper.getPageAreaTypeFromPath(userDefPath), UserDefPathHelper.getPageAreaNameFromPath(userDefPath),\r\n      ''\r\n    );\r\n    UserDefPathHelper.forEachUserDefIdInPath(userDefPath, (userDefId) => {\r\n      const pageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(userDefId);\r\n      pathId = IndexPathHelper.appendPageSegmentsToPath(pathId, pageSegment);\r\n    });\r\n    return pathId;\r\n  }\r\n\r\n  /**\r\n   * Get the index path for textBlockNamePath (i.e. the index path of the component owning the text block).\r\n   * A textBlockNamePath consists of the UserDefIds of the page areas leading to a page instance and the \r\n   * name of a text block in a rich text field that is part of the page. \r\n   * The method will use the path root currently loaded in the given runtime.\r\n   */\r\n  static getIndexPathForTextBlockPath(textBlockNamePath, runtime) {\r\n    let pathId = IndexPathHelper.appendPageSegmentToPathRoot(\r\n      runtime.taskManager.getCurrentStatePathRoot(),\r\n      UserDefPathHelper.getPageAreaTypeFromPath(textBlockNamePath), UserDefPathHelper.getPageAreaNameFromPath(textBlockNamePath),\r\n      ''\r\n    );\r\n\r\n\r\n    // drop last id from path and process this after the loop\r\n    const pageAreasPath = UserDefPathHelper.dropUserDefIdFromPath(textBlockNamePath);\r\n    const textBlockName = UserDefPathHelper.getLastUserDefIdFromPath(textBlockNamePath);\r\n\r\n    const textBlockOwnerPageSegment = runtime.pageConfigurationsManager.findPageSegmentForTextBlockOwner(textBlockName);\r\n    if (textBlockOwnerPageSegment === undefined) {\r\n      // the block name path does not match any block name \r\n      return undefined;\r\n    }\r\n\r\n    if (pageAreasPath !== undefined) {\r\n      UserDefPathHelper.forEachUserDefIdInPath(pageAreasPath, (userDefId) => {\r\n        const pageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(userDefId);\r\n        pathId = IndexPathHelper.appendPageSegmentsToPath(pathId, pageSegment);\r\n      });\r\n    }\r\n    pathId = IndexPathHelper.appendPageSegmentsToPath(pathId, textBlockOwnerPageSegment);\r\n    return pathId;\r\n  }\r\n\r\n\r\n  // ----- private stuff --------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the user defined ID from the component specified by the given page segment.\r\n   * \r\n   * The method returns undefined if it cannot find a matching component or the matching component\r\n   * does not have a user defined ID.\r\n   * \r\n   * @param {*} pageSegment A page segments from an index path specifying the display component.\r\n   * @param {*} runtime  The common runtime\r\n   */\r\n  static getUserDefIdForPageSegment(pageSegment, runtime) {\r\n    const componentConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (componentConfig === undefined) {\r\n      return undefined;\r\n    }\r\n    return CommonConfigHelper.getUserDefinedId(componentConfig.config);\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from \"../../state/IndexPathHelper\";\r\nimport ComponentStateHelper from \"../../state/ComponentStateHelper\";\r\nimport StateAttributeAccess from \"../../state/StateAttributeAccess\";\r\n\r\n/**\r\n * Helper methods for table specific actions.\r\n */\r\nexport default class TableHelper {\r\n\r\n  /**\r\n   * This method will be used to handle table navigation via arrows. \r\n   * More specific will trigger table cell auto focus events.\r\n   * \r\n   * @param {*} e The keyboard event received.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {Object} config The common config structure.\r\n   * @param {boolean} isInEditMode Flag to know that we are in a table cell.\r\n   */\r\n  static handleKeyDown(e, runtime, config, tablePath, isInEditMode) {\r\n    e = e || window.event;\r\n    const keyCode = e.keyCode || e.which;\r\n    const arrow = {\r\n      left: 37,\r\n      up: 38,\r\n      right: 39,\r\n      down: 40\r\n    };\r\n\r\n    if (isInEditMode) {\r\n      const { row, column } = config;\r\n      if (e.ctrlKey) {\r\n        switch (keyCode) {\r\n          case arrow.left:\r\n            // TODO: extract this in a method to avoid redundance \r\n            TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row, column - 1, e);\r\n            break;\r\n          case arrow.right:\r\n            TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row, column + 1, e);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      switch (keyCode) {\r\n        case arrow.up:\r\n          TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row - 1, column, e);\r\n          break;\r\n        case arrow.down:\r\n          TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row + 1, column, e);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method will emit an autoFocus event and stop propagation.\r\n   * \r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {*} parentTableUserDefId The user defined id of the table.\r\n   * @param {*} row Row to focus\r\n   * @param {*} column Columns to focus\r\n   * @param {*} e \r\n   */\r\n  static emitAutoFocusAndPreventDefault(runtime, tablePath, row, column, e) {\r\n    runtime.eventEmitter.emit(`${tablePath}-autoFocus`, row, column);\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * This method will be used to cleanup the last selection when a new cell get focus.\r\n   * \r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {*} config The common config structure.\r\n   * @param {*} isInEditMode Flag to know that we are in a table cell.\r\n   */\r\n  static handleCellFocus(runtime, tablePath, isInEditMode) {\r\n    if (isInEditMode) {\r\n      runtime.eventEmitter.emit(`${tablePath}-removeOldSelection`);\r\n    }\r\n  }\r\n\r\n  static isInt(n) {\r\n    return Number(n) === n && n % 1 === 0;\r\n  }\r\n\r\n  static isFloat(n) {\r\n    n = Number.parseFloat(n);\r\n    if (n === undefined || Number.isNaN(n)) {\r\n      return false;\r\n    }\r\n    return Number(n) === n && n % 1 !== 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the table index path.\r\n   * @param {*} componentPath The path for edit mode component of a spreadsheet table cell \r\n   * or the path of a RichTextField child for standard table cell.\r\n   *      \r\n   */\r\n  static buildTablePath(componentPath) {\r\n    const tableCellPath = IndexPathHelper.dropIndexFromPageSegment(componentPath);\r\n    return IndexPathHelper.dropIndexFromPageSegment(tableCellPath);\r\n  }\r\n\r\n  static isFormula(value) {\r\n    return value !== undefined && value.slice(0, 1) === '=';\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current selected cell has same row/column as the old selected one.\r\n   * @param {*} tableUserDefIdPath The user defined id path of the table.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static isOldSelected(tableUserDefIdPath, runtime) {\r\n    const currentSelected = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractSelectedCell, tableUserDefIdPath, runtime);\r\n    const oldSelected = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractOldSelectedCell, tableUserDefIdPath, runtime);\r\n    return (currentSelected.row === oldSelected.row && currentSelected.column === oldSelected.column);\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Select from \"react-select\";\r\nimport PropTypesHelper from './PropTypesHelper';\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport StateManagerHelper from '../state/StateManagerHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport RenderingHelper from './RenderingHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess'\r\nimport SelectGroupHelper from './SelectGroupHelper';\r\nimport CommonActionsHelper from './CommonActionsHelper';\r\nimport TableHelper from './table/TableHelper';\r\n\r\n/**\r\n * A display component that displays a combo box.\r\n * \r\n * This component manages the items in the combo box as children of its own \r\n * in the display component instances tree.\r\n */\r\nexport default class CbaComboBox extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.comboRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { isInEditMode } = this.props;\r\n    if (isInEditMode) {\r\n      this.focus();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  // basic state management --------------------------------------------------------------\r\n\r\n  static getItemType() {\r\n    return 'ComboBoxItem';\r\n  }\r\n\r\n  /**\r\n   * Build an array of 'standard' configuration structures for the items in the items list.\r\n   * The page configurations manager expects a structure with the attributes 'type' and 'config'. \r\n   * When accessing this structure the state manager expects a config.state object as a minimum. \r\n   */\r\n  static buildComboBoxItemsArray(itemsInConfig) {\r\n    return itemsInConfig.map((itemInConfig, index, all) => {\r\n      const configOnPathSegment = StateManagerHelper.deepCopy(itemInConfig);\r\n      const additionalState = {}\r\n      StateAttributeAccess.setSelected(additionalState, parseInt(index, 10) === 0);\r\n      StateAttributeAccess.setDisabled(additionalState, false);\r\n      StateAttributeAccess.setHidden(additionalState, false);\r\n      configOnPathSegment.state = additionalState;\r\n      return {\r\n        type: CbaComboBox.getItemType(),\r\n        config: configOnPathSegment\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Calculate the index of the currently selected item by looking at the state \r\n   * of all items in the state manager:\r\n   */\r\n  getSelectedIdFromState = () => {\r\n    const { runtime, path: comboBoxPath, config } = this.props;\r\n    const stateManager = runtime.componentStateManager;\r\n    let foundSelectedId;\r\n    config.items.forEach((itemConfig, index, all) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(comboBoxPath, index);\r\n      const itemState = stateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n      if (SelectGroupHelper.extractSelectedState(itemState, itemPath, runtime)) {\r\n        // in case of multiple selections we display the first selected item in the closed combo box:\r\n        if (foundSelectedId === undefined) {\r\n          foundSelectedId = parseInt(index, 10);\r\n        } else {\r\n          console.warn(\"Multiple selections in a combo box are not supported yet!\");\r\n        }\r\n      }\r\n    })\r\n    return foundSelectedId;\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the selected setting for all combo box items to reflect\r\n   * the currently selected item. \r\n   */\r\n  setSelectedIdInState = (newSelectedId) => {\r\n    const { runtime, path: comboBoxPath } = this.props;\r\n    const stateManager = runtime.componentStateManager;\r\n    const comboBoxState = ComponentStateHelper.getState(this);\r\n    const selectGroupControllerState = StateAttributeAccess.extractSelectGroupControllerState(comboBoxState);\r\n    const itemPath = IndexPathHelper.appendIndexToPageSegment(comboBoxPath, newSelectedId);\r\n    const itemState = stateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n    if (selectGroupControllerState === undefined) {\r\n      console.warn(\"Multiple select combo boxes are not supported yet!\");\r\n      // just set the selected state of the additionally selected item:\r\n      StateAttributeAccess.setSelected(itemState, true);\r\n      stateManager.registerStateByPathId(itemPath, itemState, runtime);\r\n    } else {\r\n      SelectGroupHelper.delegateSetSelectedToController(true, SelectGroupHelper.comboBoxGroup(), comboBoxPath, itemPath, itemState, true, false, runtime);\r\n    }\r\n  }\r\n\r\n  // handle user triggered events ----------------------------------------------------------------\r\n\r\n  onChangeHandler = (event) => {\r\n    const { runtime, config, path, isInEditMode } = this.props;\r\n    const oldSelectedId = this.getSelectedIdFromState();\r\n    const newSelectedId = parseInt(this.hasVisibleItemCount() ? event.value : event.target.value, 10);\r\n    const oldSelectedItem = config.items[oldSelectedId];\r\n    const newSelectedItem = config.items[newSelectedId];\r\n\r\n    this.updateStateAndTriggerRendering(newSelectedId);\r\n\r\n    // CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    if (!isInEditMode) {\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, CbaComboBox.buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId), event, runtime);\r\n    }\r\n    CommonActionsHelper.sendStandardEvent(newSelectedItem, runtime);\r\n    const defaultLinkReceiver = CommonActionsHelper.getDefaultLinkReceiver(this);\r\n    CommonActionsHelper.doPageSwitch(newSelectedItem.link, runtime, defaultLinkReceiver, path);\r\n\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    // Catch on click events to avoid trace logs on the container of the combo box.\r\n    const { runtime, path } = this.props;\r\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    this.scrollCurrentOptionIntoViewIfVisibleItemCountOne();\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    this.scrollCurrentOptionIntoViewIfVisibleItemCountOne();\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  // ------------- Table specific handlers -------------------------------------//\r\n  onKeyDownHandler = (e) => {\r\n    const { config, path, runtime, isInEditMode } = this.props;\r\n    TableHelper.handleKeyDown(e, runtime, config, TableHelper.buildTablePath(path), isInEditMode);\r\n  }\r\n\r\n  onFocusHandler = () => {\r\n    const { path, runtime, isInEditMode } = this.props;\r\n    TableHelper.handleCellFocus(runtime, TableHelper.buildTablePath(path), isInEditMode);\r\n  }\r\n\r\n  static buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId) {\r\n    return {\r\n      oldSelected: oldSelectedId,\r\n      oldSelectedUserDefId: oldSelectedItem.userDefinedId,\r\n      newSelected: newSelectedId,\r\n      newSelectedUserDefId: newSelectedItem.userDefinedId\r\n    };\r\n  }\r\n\r\n  updateStateAndTriggerRendering = (newSelectedId) => {\r\n    const { runtime, config, path: comboBoxPath, isInEditMode, onBlur } = this.props;\r\n\r\n    this.setSelectedIdInState(newSelectedId);\r\n\r\n    // specific behavior for table cell usage of this component\r\n    if (isInEditMode) {\r\n      const { row, column } = config;\r\n      runtime.eventEmitter.emit(`${TableHelper.buildTablePath(comboBoxPath)}-contentUpdate`, config.items[newSelectedId].text, row, column, true);\r\n      onBlur();\r\n    }\r\n\r\n    // trigger rendering of the combo box itself:\r\n    RenderingHelper.triggerRenderingViaPath(comboBoxPath, runtime);\r\n  }\r\n\r\n\r\n  // rendering ---------------------------------------------------------------------------------------\r\n\r\n  checkForInvalidItems = () => {\r\n    const { config } = this.props;\r\n    const { items } = config;\r\n    return !Array.isArray(items) || (Array.isArray(items) && items.length === 0);\r\n  }\r\n\r\n  generateOptions = itemsConfig => (\r\n    // disabled because we don't have a unique id to use as key and also the array does not change.\r\n    // eslint-disable-next-line react/no-array-index-key\r\n    itemsConfig.map((itemConfig, i) => (<option key={i} value={i}>{itemConfig.text}</option>))\r\n  )\r\n\r\n  generateOptionsForSelect = (itemsConfig) => {\r\n    // disabled because we don't have a unique id to use as key and also the array does not change.\r\n    // eslint-disable-next-line react/no-array-index-key\r\n    const options = [];\r\n    itemsConfig.map((itemConfig, i) => (options.push({\r\n      value: i, label: itemConfig.text\r\n    })));\r\n    return options;\r\n  }\r\n\r\n  focus = () => {\r\n    this.comboRef.current.focus();\r\n  }\r\n\r\n  hasVisibleItemCount = () => {\r\n    const { config } = this.props;\r\n    const { visibleItemCount, items } = config;\r\n\r\n    return visibleItemCount !== undefined && visibleItemCount > 0 && visibleItemCount < items.length\r\n  }\r\n\r\n  /**\r\n   * Specific fix for issue #5394\r\n   */\r\n  scrollCurrentOptionIntoViewIfVisibleItemCountOne = () => {\r\n    const { config } = this.props;\r\n    const { visibleItemCount } = config;\r\n\r\n    if (visibleItemCount !== 1) return;\r\n\r\n    try {\r\n      const currentlySelectedId = this.getSelectedIdFromState();\r\n      const allPotentialElementsList = [...document.querySelectorAll('[class^=\"css-\"]')].filter(el => el.localName === 'div');\r\n      const portalMenuContainerElement = allPotentialElementsList.find(el => el.firstChild.className.includes('-menu'));\r\n\r\n      if (portalMenuContainerElement.firstChild.className.includes('-menu')) {\r\n\r\n        const portalMenuElement = portalMenuContainerElement.firstChild.firstChild;\r\n\r\n        if (portalMenuElement) {\r\n          portalMenuElement.children[currentlySelectedId].scrollIntoView()\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log('Something went wrong on CBAComboBox', error)\r\n    }\r\n  }\r\n\r\n  onClickFrozenHandler = (event) => {\r\n    const { runtime, path } = this.props;\r\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, 'ComboBox');\r\n    event.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    if (this.checkForInvalidItems()) {\r\n      return React.createElement(\r\n        'div',\r\n        null,\r\n        `Invalid item configuration in combo box.`\r\n      );\r\n    }\r\n\r\n\r\n    const { config, path, runtime, orientation, onBlur, isInEditMode } = this.props;\r\n    const { visibleItemCount, position } = config;\r\n    const wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n\r\n    const selectedId = this.getSelectedIdFromState();\r\n    let options = this.generateOptions(config.items);\r\n\r\n    if (isInEditMode) {\r\n      Object.assign(wrapperStyle, {\r\n        boxShadow: \"inset rgb(79, 124, 177) 0px 0px 4px\"\r\n      })\r\n    }\r\n\r\n    // do this only when visible item count was set properly\r\n    if (this.hasVisibleItemCount()) {\r\n      options = this.generateOptionsForSelect(config.items);\r\n      const maxHeightSize = visibleItemCount * position.height;\r\n\r\n      const customStyles = {\r\n        menu: provided => ({\r\n          ...provided,\r\n          marginTop: 2\r\n        }),\r\n        menuList: provided => ({\r\n          ...provided,\r\n          padding: 0,\r\n          width: wrapperStyle.width,\r\n          backgroundColor: wrapperStyle.backgroundColor\r\n        }),\r\n        option: (provided, state) => {\r\n          let backgroundColor\r\n          if (state.isSelected) {\r\n            backgroundColor = 'blue';\r\n          } else if (state.isFocused) {\r\n            backgroundColor = 'grey';\r\n          } else {\r\n            backgroundColor = 'inherit';\r\n          }\r\n\r\n          return {\r\n            ...provided,\r\n            width: 'auto',\r\n            height: wrapperStyle.height,\r\n            padding: 0,\r\n            lineHeight: wrapperStyle.height,\r\n            color: state.isSelected ? 'white' : wrapperStyle.color,\r\n            fontSize: wrapperStyle.fontSize,\r\n            fontFamily: wrapperStyle.fontFamily,\r\n            whiteSpace: 'nowrap',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            backgroundColor,\r\n          }\r\n        },\r\n        control: (provided, state) => ({\r\n          ...provided,\r\n          // none of react-select's styles are passed to <Control />\r\n          backgroundColor: wrapperStyle.backgroundColor,\r\n          minHeight: \"auto\",\r\n          boxShadow: 'rgb(79, 124, 177) 0px 0px 0px',\r\n          // draw the border around the control:\r\n          borderColor: wrapperStyle.borderColor,\r\n          borderWidth: wrapperStyle.borderWidth,\r\n          borderRadius: wrapperStyle.borderRadius,\r\n          borderStyle: wrapperStyle.borderStyle,\r\n          // extend the control to the full size of the container\r\n          height: wrapperStyle.height,\r\n          cursor: wrapperStyle.cursor\r\n        }),\r\n        container: (provided, s) => ({\r\n          ...provided,\r\n          ...wrapperStyle,\r\n          // we draw the border around the control -> don't draw a border around the container \r\n          borderWidth: \"0px\",\r\n        }),\r\n        valueContainer: provided => ({\r\n          ...provided,\r\n          padding: \"0 3px\",\r\n          height: \"100%\",\r\n          position: \"static\"\r\n        }),\r\n        singleValue: (provided, state) => ({\r\n          ...provided,\r\n          maxWidth: \"calc(100% - 21px)\",\r\n          width: \"100%\",\r\n          textAlign: wrapperStyle.textAlign,\r\n          color: wrapperStyle.color\r\n        }),\r\n        indicatorsContainer: provided => ({\r\n          ...provided,\r\n          height: \"100%\",\r\n        }),\r\n        dropdownIndicator: provided => ({\r\n          ...provided,\r\n          color: \"#808080\",\r\n          \":hover\": {\r\n            color: \"#000\"\r\n          },\r\n          padding: 0,\r\n        }),\r\n        indicatorSeparator: provided => ({\r\n          ...provided,\r\n          display: \"none\"\r\n        })\r\n      }\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <div onClick={this.onClickHandler} onContextMenu={this.onContextMenuHandler} className=\"overflow-hidden\">\r\n            <Select\r\n              styles={customStyles}\r\n              title={CommonConfigHelper.buildTitle(config)}\r\n              value={options[selectedId]}\r\n              isDisabled={StateAttributeAccess.extractDisabled(pathState)}\r\n              onChange={this.onChangeHandler}\r\n              onBlur={e => onBlur(e, config.items[selectedId].text, true)}\r\n              onKeyDown={this.onKeyDownHandler}\r\n              onFocus={this.onFocusHandler}\r\n              options={options}\r\n              maxMenuHeight={maxHeightSize}\r\n              menuPortalTarget={document.body}\r\n              tabIndex={config.tabIndex}\r\n              className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaComboBox overflow-hidden\")}\r\n            />\r\n          </div>\r\n          {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaCombobox-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(wrapperStyle)} />}\r\n        </React.Fragment>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <select\r\n          ref={this.comboRef}\r\n          style={wrapperStyle}\r\n          data-cba-id={config.pageEditId}\r\n          title={CommonConfigHelper.buildTitle(config)}\r\n          value={selectedId}\r\n          disabled={StateAttributeAccess.extractDisabled(pathState)}\r\n          onChange={this.onChangeHandler}\r\n          onBlur={e => onBlur(e, config.items[selectedId].text, true)}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          onKeyDown={this.onKeyDownHandler}\r\n          onFocus={this.onFocusHandler}\r\n          onClick={this.onClickHandler}\r\n          tabIndex={config.tabIndex}\r\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaComboBox\")}\r\n        >\r\n          {options}\r\n        </select>\r\n        {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaCombobox-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(wrapperStyle)} />}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nCbaComboBox.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\r\n      {\r\n        items: PropTypes.array.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  isInEditMode: PropTypes.bool,\r\n  orientation: PropTypes.string.isRequired,\r\n  onBlur: PropTypes.func\r\n}\r\n\r\nCbaComboBox.defaultProps = {\r\n  isInEditMode: false,\r\n  onBlur: () => { }\r\n}\r\n","import StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\n\r\n/**\r\n * Helper methods to implement the 'propagation group' mechanism.\r\n * \r\n * A component can carry a list of 'propagation groups':\r\n *  - Each group is identified by a group name and contains a list of index paths to components that are members of the group.\r\n * \r\n * Some operators in the TermEvaluator support an optional group name parameter.\r\n * Specifying such a group name will propagate the operator call to all members of the specified group then:\r\n *  - The absoluteUserDefinedId in the parameters identifies the component bearing the propagation group list.\r\n *  - The groupName parameter selects the group from the list of propagation groups. \r\n *  - The operator's action is applied to all members of the selected group instead of the component bearing the group list.\r\n *  - The operator's action is not applied to the component bearing the group list itself. \r\n * \r\n */\r\n\r\nexport default class PropagationHelper {\r\n\r\n  /**\r\n   * Build the select-group controller settings for a potential propagation-group controller component.\r\n   */\r\n  static addPropagationGroupControllerState(pathState, configProps) {\r\n    const config = configProps.propagationGroups;\r\n    if (config !== undefined) {\r\n      const controllerState = config.map((value, index, all) => ({\r\n        name: value.name,\r\n        memberIndexPaths: value.memberIndexPaths === undefined ? [] : [...value.memberIndexPaths]\r\n      }));\r\n      StateAttributeAccess.setPropagationGroupControllerState(pathState, controllerState);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply the given action to the members of the given propagation group of the given propagation group controller component.\r\n   * \r\n   * The action must accept one parameter: the index path of the component to apply the action to.\r\n   */\r\n  static applyToPropagationGroup(controllerIndexPath, groupName, appliedAction, runtime) {\r\n    const matchingGroups = PropagationHelper.getMatchingPropagationGroups(controllerIndexPath, groupName, runtime);\r\n    matchingGroups.forEach((group) => {\r\n      PropagationHelper.applyActionToGroupMembers(controllerIndexPath, group, appliedAction);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Convenience method: Apply an attribute setting to the component itself or to the propagation group members if a group name is given.\r\n   */\r\n  static applySimpleSetter(controllerUserDefPath, groupName, getter, setter, value, triggerRendering, runtime) {\r\n    if (groupName === undefined) {\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(getter, setter, value, controllerUserDefPath, runtime, true);\r\n    } else {\r\n      const controllerPathId = PathTranslationHelper.getIndexPathForUserDefPath(controllerUserDefPath, runtime);\r\n      PropagationHelper.applyToPropagationGroup(controllerPathId, groupName,\r\n        (componentPath) => {\r\n          ComponentStateHelper.updateStateAttribute(getter, setter, value, componentPath, runtime, triggerRendering)\r\n        },\r\n        runtime);\r\n    }\r\n  }\r\n\r\n  // --------------- private stuff ----------------------------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Private helper method: Get matching propagation group configuration for given propagation group controller and group name.\r\n   */\r\n  static getMatchingPropagationGroups(controllerIndexPath, groupName, runtime) {\r\n    const { componentStateManager } = runtime;\r\n    const fullControllerState = componentStateManager.findOrBuildStateForPathId(controllerIndexPath, runtime);\r\n    const propagationsGroupsState = StateAttributeAccess.extractPropagationGroupControllerState(fullControllerState);\r\n    if (propagationsGroupsState === undefined) {\r\n      console.log(`Ignored request to propagate some action for a component that isn't a propagation-group controller: ${controllerIndexPath}`);\r\n      return [];\r\n    }\r\n    return propagationsGroupsState.filter(group => group.name === groupName);\r\n  }\r\n\r\n  /** \r\n   * Private helper method: Apply the given action to the member paths in the given group configuration.\r\n  */\r\n  static applyActionToGroupMembers(controllerIndexPath, groupConfiguration, action) {\r\n    groupConfiguration.memberIndexPaths.forEach((memberPathPageSegment) => {\r\n      const memberIndexPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(controllerIndexPath), memberPathPageSegment);\r\n      action(memberIndexPath);\r\n    })\r\n  }\r\n\r\n}\r\n","import StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport CommonActionsHelper from './CommonActionsHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport RenderingHelper from './RenderingHelper';\r\nimport CbaComboBox from './CbaComboBox';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\nimport Utils from '../utils/Utils';\r\nimport PropagationHelper from '../eval/PropagationHelper';\r\n\r\n/**\r\n * Helper methods to implement the 'select-group' mechanism.\r\n * \r\n * The select-group mechanism is based on two state structures kept in the index path state in the ComponentStateManager:\r\n * \r\n * A container managing select-groups for its descendants (the 'controller') keeps an array of structures configuring these select-groups:\r\n * selectGroupControllerState: [\r\n *  {\r\n *    name: String (The name of the select-group, unique among all select-groups of this controller)\r\n *    selectionChangesBlocked: bool (Do we block changes to the selection state of our group members currently?)\r\n *    singleSelectActive: bool (Is the single-select restriction active, i.e. do we enforce a single select behavior for participating members?)\r\n *    allowDeselect: bool (Do we allow the currently selected member to be deselected by a click? If not the selected member can change only by clicking on a currently not selected member.)\r\n *    currentlySelected: string (The last page segment of the index path of the currently selected member of the select-group.)\r\n *    deselectTarget: string (The last page segment of the index path of the member to select if the currently selected member is deselected.)\r\n *  },\r\n *  ...\r\n * ]\r\n * \r\n * \r\n * Each descendant participating in the select-group keeps this structure:\r\n * selectGroupMemberInfo: {\r\n *  contollerPathId: String (The full index path of the controller managing the select-group.)\r\n *  groupName: String (The name of the select-group.)\r\n * }\r\n * \r\n * For children participating in a select-group in 'single-select-mode' the 'selected' attribute in the index path state is not relevant. \r\n * It is 'shadowed' by the data kept in the selectGroupControllerState structure. \r\n * \r\n * For components participating in a select-group in 'single-select' mode the 'select-group' mechanism runs the following actions on behalf of the onClick handler of the component:\r\n *  - Set the 'selected' status of the component: The controller might decide to select another component than the one that runs the onClick handler.\r\n *  - Do the appropriate page switch: The controller will execute the page switch specified for the component that becomes actually selected.\r\n * \r\n * For components participating in a select-group in 'single-select' mode the setSelected operator in the TermEvaluator will trigger the page switch configured for the actually selected component. \r\n * (For other components the operator will not trigger a page switch configured for the component.) \r\n * \r\n */\r\nexport default class SelectGroupHelper {\r\n\r\n  // methods for select group members:  ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Calculate the select flag for a member component by investigating the path state.\r\n   * \r\n   * The method uses the select-group structures to determine the select status if the member component is controlled by a select-group controller in 'single-select' mode. \r\n   * Otherwise it falls back to the plain 'selected' flag in the path state of the child component. \r\n   */\r\n  static extractSelectedState(pathState, controlledPathId, runtime) {\r\n    const selectGroupMemberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(pathState);\r\n    if (selectGroupMemberInfo === undefined) {\r\n      return StateAttributeAccess.extractSelected(pathState);\r\n    }\r\n\r\n    const controllerState = StateAttributeAccess.extractSelectGroupControllerState(runtime.componentStateManager.findOrBuildStateForPathId(selectGroupMemberInfo.controllerPathId, runtime));\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(controllerState, selectGroupMemberInfo.groupName);\r\n    if (groupState === undefined || !groupState.singleSelectActive) {\r\n      return StateAttributeAccess.extractSelected(pathState);\r\n    }\r\n\r\n    return IndexPathHelper.getLastPageSegmentFromPath(controlledPathId) === groupState.currentlySelected;\r\n  }\r\n\r\n\r\n  /**\r\n   * Is the component member of a select-group (i.e. it is controlled by a select-group controller)?\r\n   */\r\n  static isSelectGroupMember(pathState) {\r\n    return StateAttributeAccess.extractSelectGroupMemberInfo(pathState) !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Is the component controlled by a select-group controller in 'single-select' mode?\r\n   */\r\n  static isSingleSelectControlled(pathState, runtime) {\r\n    const selectGroupMemberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(pathState);\r\n    if (selectGroupMemberInfo === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const controllerState = StateAttributeAccess.extractSelectGroupControllerState(runtime.componentStateManager.findOrBuildStateForPathId(selectGroupMemberInfo.controllerPathId, runtime));\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(controllerState, selectGroupMemberInfo.groupName);\r\n    return groupState !== undefined && groupState.singleSelectActive;\r\n  }\r\n\r\n\r\n  /**\r\n   * Handle a request to set the 'selected' status for a component that might be controlled by a select-group controller in 'single-select' mode: \r\n   * Update the controller's state and the component's state in the ComponentStateManager and trigger rendering on an appropriate scope.\r\n   * \r\n   * For components that are in fact controlled by a select-group controller in 'single-select' mode\r\n   * the method also does the page switch for the actually selected component if the 'singleSelectWithPageSwitch' parameter is set to true.\r\n   * \r\n   * Components control themselves which page switch they do if they happen to be not controlled by a select-group controller in 'single-select' mode: \r\n   * They should use doPageSwitchOrLetTheContainerDoIt(...) to trigger a page switch.\r\n   * \r\n   * @param {boolean} requestedSelectState The 'selected' state that is requested for the component that might be controlled by a select-group controller in 'single-select' mode.\r\n   * @param {*} controlledPathId The index path of the component that might be controlled by a select-group controller in 'single-select' mode.\r\n   * @param {*} controlledPathState The path state of the component that might be controlled by a select-group controller in 'single-select' mode.\r\n   * @param {boolean} singleSelectWithPageSwitch Should we do the page switches of the actually selected component (for single-select mode case only)?\r\n   * @param {boolean} overrideNoDeselect Should we override a allowDeselect=false setting when trying to deselect the currently selected component?\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static setSelectedForPossiblyControlledComponent(requestedSelectState, controlledPathId, controlledPathState, singleSelectWithPageSwitch, overrideNoDeselect, runtime) {\r\n    const selectGroupMemberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(controlledPathState);\r\n    if (selectGroupMemberInfo === undefined) {\r\n      // do standard selection flag setting for non-members:\r\n      SelectGroupHelper.doStandardSelectFlagSetting(requestedSelectState, controlledPathId, controlledPathState, runtime);\r\n    } else {\r\n      const controllerState = StateAttributeAccess.extractSelectGroupControllerState(runtime.componentStateManager.findOrBuildStateForPathId(selectGroupMemberInfo.controllerPathId, runtime));\r\n      const groupState = SelectGroupHelper.extractMatchingGroupState(controllerState, selectGroupMemberInfo.groupName);\r\n      // do nothing for members of a blocked group:\r\n      if (groupState !== undefined && !groupState.selectionChangesBlocked) {\r\n        if (SelectGroupHelper.isSingleSelectControlled(controlledPathState, runtime)) {\r\n          // notify parent container and let it trigger the new rendering:\r\n          const { controllerPathId, groupName } = selectGroupMemberInfo;\r\n          SelectGroupHelper.delegateSetSelectedToController(\r\n            requestedSelectState,\r\n            groupName,\r\n            controllerPathId,\r\n            controlledPathId,\r\n            controlledPathState,\r\n            singleSelectWithPageSwitch,\r\n            overrideNoDeselect,\r\n            runtime\r\n          );\r\n        } else {\r\n          // do standard selection flag setting for members in a non-blocked multiple-select mode group:\r\n          SelectGroupHelper.doStandardSelectFlagSetting(requestedSelectState, controlledPathId, controlledPathState, runtime);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the currently selected component in a select-group in 'single-select' mode.\r\n   * \r\n   * The method manages the controller's state in the ComponentStateManager and registers the given state for the controlled component in the ComponentStateManager.\r\n   * Finally it triggers a rendering on the controller level. \r\n   */\r\n  static delegateSetSelectedToController(requestedSelectState, groupName, controllerPathId, controlledPathId, controlledPathState, withPageSwitch, overrideNoDeselect, runtime) {\r\n\r\n    const controllerState = runtime.componentStateManager.findOrBuildStateForPathId(controllerPathId, runtime);\r\n\r\n    SelectGroupHelper.handleSelectedChildChanges(requestedSelectState, groupName, controlledPathId, controllerState, controllerPathId, withPageSwitch, overrideNoDeselect, runtime);\r\n\r\n    runtime.componentStateManager.registerStateByPathId(controllerPathId, controllerState, runtime);\r\n    // We should register the given controlled state in any case to have a consistent contract with the caller:\r\n    if (controlledPathId !== undefined && controlledPathState !== undefined) {\r\n      runtime.componentStateManager.registerStateByPathId(controlledPathId, controlledPathState, runtime);\r\n    }\r\n    RenderingHelper.triggerRenderingViaPath(controllerPathId, runtime);\r\n\r\n  }\r\n\r\n  /**\r\n   * Do the standard page switch for a component if the component is not controlled by a select-group controller in 'single-select' mode. \r\n   */\r\n  static doPageSwitchOrLetTheContainerDoIt(component, pathState) {\r\n    if (!SelectGroupHelper.isSingleSelectControlled(pathState, component.props.runtime)) {\r\n      CommonActionsHelper.doPageSwitchForComponent(component);\r\n    }\r\n  }\r\n\r\n  // methods for state initialization ------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build the select settings in the initial state for a possibly controlled component. \r\n   */\r\n  static addSelectGroupMemberInfo(pathState, componentType, pathId, runtime) {\r\n\r\n    const selectGroupMemberConfig = SelectGroupHelper.getSelectGroupMemberPerConfig(pathId, runtime);\r\n\r\n    if (\r\n      (SelectGroupHelper.isControlledType(componentType) && selectGroupMemberConfig !== undefined)\r\n    ) {\r\n\r\n      const containerPageSegment = selectGroupMemberConfig.controllerPathId;\r\n      const containerConfiguration = runtime.pageConfigurationsManager.findConfigurationForPageSegment(containerPageSegment).config;\r\n      if (containerConfiguration.selectGroups !== undefined) {\r\n        const containerPathId = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(pathId), containerPageSegment);\r\n        const selectGroupMemberInfo = {\r\n          controllerPathId: containerPathId,\r\n          groupName: selectGroupMemberConfig.groupName,\r\n          selectGroupMemberName: selectGroupMemberConfig.selectGroupMemberName\r\n        };\r\n        StateAttributeAccess.setSelectGroupMemberInfo(pathState, selectGroupMemberInfo);\r\n      }\r\n    } else if (SelectGroupHelper.isComboBoxItem(componentType)) {\r\n      // combo box is pseudo select group controller -> use immediate parent (= combo box) if we are not a member of a real select-group\r\n      const controlledPageSegment = IndexPathHelper.getLastPageSegmentFromPath(pathId);\r\n      const containerPageSegment = IndexPathHelper.dropIndexFromPageSegment(controlledPageSegment);\r\n      const containerPathId = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(pathId), containerPageSegment);\r\n      const selectGroupMemberInfo = {\r\n        controllerPathId: containerPathId,\r\n        groupName: SelectGroupHelper.comboBoxGroup()\r\n      };\r\n      StateAttributeAccess.setSelectGroupMemberInfo(pathState, selectGroupMemberInfo);\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build the select-group controller settings for a potential select-group controller component.\r\n   */\r\n  static addSelectGroupControllerState(pathState, componentType, pathId, configProps) {\r\n    const config = configProps.selectGroups;\r\n    if (config !== undefined) {\r\n      const controllerState = config.map((value, index, all) => ({\r\n        name: value.name,\r\n        selectionChangesBlocked: value.blockSelectionChanges,\r\n        singleSelectActive: value.enforceSingleSelect,\r\n        currentlySelected: value.initiallySelected,\r\n        allowDeselect: value.allowDeselect,\r\n        deselectTarget: value.deselectTarget\r\n      }));\r\n      StateAttributeAccess.setSelectGroupControllerState(pathState, controllerState);\r\n    } else if (SelectGroupHelper.isComboBox(componentType)) {\r\n      const initiallySelectedIndex = configProps.selectedEntry === undefined ? 0 : configProps.selectedEntry;\r\n      const firstItemPath = IndexPathHelper.appendIndexToPageSegment(IndexPathHelper.getLastPageSegmentFromPath(pathId), initiallySelectedIndex);\r\n      const controllerState = [{\r\n        name: SelectGroupHelper.comboBoxGroup(),\r\n        selectionChangesBlocked: false,\r\n        singleSelectActive: true,\r\n        currentlySelected: firstItemPath,\r\n        allowDeselect: true,\r\n        deselectTarget: firstItemPath\r\n      }]\r\n      StateAttributeAccess.setSelectGroupControllerState(pathState, controllerState);\r\n    }\r\n  }\r\n\r\n  // methods for term evaluator ----------------------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Set the 'blockSelectionChanges' attribute in the select-group configuration for the group controller specified by the user defined id path.\r\n   */\r\n  static setSelectionChangesBlockedForController(controllerUserDefPath, groupName, value, runtime) {\r\n    SelectGroupHelper.setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, (groupState) => { groupState.selectionChangesBlocked = value; }, runtime);\r\n  }\r\n\r\n  /**\r\n   * Set the 'singleSelectActive' attribute in the select-group configuration for the group controller specified by the user defined id path.\r\n   */\r\n  static setSingleSelectActiveForController(controllerUserDefPath, groupName, value, runtime) {\r\n    SelectGroupHelper.setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, (groupState) => { groupState.singleSelectActive = value; }, runtime);\r\n  }\r\n\r\n  /**\r\n   * Set the 'allowDeselect' attribute in the select-group configuration for the group controller specified by the user defined id path.\r\n   */\r\n  static setAllowDeselectForController(controllerUserDefPath, groupName, value, runtime) {\r\n    SelectGroupHelper.setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, (groupState) => { groupState.allowDeselect = value; }, runtime);\r\n  }\r\n\r\n  /**\r\n   * Computes the selected item from a combobox component identified by the given indexPath.\r\n   */\r\n  static getComboboxSelectedItem(indexPath, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const comboItems = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config.items;\r\n    let selectedItemUdi = '';\r\n    comboItems.forEach((childConfig, index) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(indexPath, index);\r\n      const itemState = runtime.componentStateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n      if (SelectGroupHelper.extractSelectedState(itemState, itemPath, runtime)) {\r\n        const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(itemPath, runtime);\r\n        selectedItemUdi = UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath);\r\n      }\r\n    });\r\n    return selectedItemUdi;\r\n  }\r\n\r\n  /**\r\n   * Computes the combobox item index identified by the given combobox indexPath and item udi.\r\n   */\r\n  static getComboboxItemIndexByUdi(indexPath, udi, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const comboItems = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config.items;\r\n    let itemIndex = -1;\r\n    comboItems.forEach((childConfig, index) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(indexPath, index);\r\n      const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(itemPath, runtime);\r\n      if (UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath) === udi) itemIndex = index;\r\n    });\r\n    return itemIndex;\r\n  }\r\n\r\n  /**\r\n   * Computes a comma separated String with the selected items from a list component identified by the given indexPath.\r\n   */\r\n  static getListSelectedItems(indexPath, runtime) {\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const selectedItemsIndexes = StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n    const selectedListItems = [];\r\n    selectedItemsIndexes.forEach((itemIndex) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(indexPath, itemIndex);\r\n      const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(itemPath, runtime);\r\n      selectedListItems.push(UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath));\r\n    });\r\n    return selectedListItems.join(',');\r\n  }\r\n\r\n  /**\r\n   * Computes a comma separated String with the selected items from a radio group component identified by the given containerIndexPath.\r\n   * A selected item in the list is represented by its memberName if defined or the user defined id if not.\r\n   */\r\n  static getNonSelectGroupSelectedChildren(containerIndexPath, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const matchingChildrenPaths = [];\r\n    const containerChildrenArray = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(containerIndexPath)).config.cbaChildren;\r\n    if (containerChildrenArray !== undefined) {\r\n      containerChildrenArray.forEach((childConfig, index) => {\r\n        const childIndexPath = IndexPathHelper.appendIndexToPageSegment(containerIndexPath, index);\r\n        const selectionIdentification = SelectGroupHelper.getSelectionIdentificationWhenSelected(childIndexPath, runtime);\r\n        if (selectionIdentification !== '' && !matchingChildrenPaths.includes(selectionIdentification)) {\r\n          matchingChildrenPaths.push(selectionIdentification);\r\n        }\r\n      });\r\n    }\r\n    return matchingChildrenPaths.join(',');\r\n  }\r\n\r\n  /**\r\n   * Computes a comma separated String with the selected items from a frame select group component identified by the given containerIndexPath and the groupName.\r\n   * A selected item in the list is represented by its memberName if defined or the user defined id if not.\r\n   */\r\n  static getSelectGroupSelectedChildren(containerIndexPath, groupName, runtime) {\r\n    const matchingChildrenPaths = [];\r\n    const matchingGroups = PropagationHelper.getMatchingPropagationGroups(containerIndexPath, groupName, runtime);\r\n    matchingGroups.forEach((group) => {\r\n      group.memberIndexPaths.forEach((memberPathPageSegment) => {\r\n        const childIndexPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(containerIndexPath), memberPathPageSegment);\r\n        const selectionIdentification = SelectGroupHelper.getSelectionIdentificationWhenSelected(childIndexPath, runtime);\r\n        if (selectionIdentification !== '' && !matchingChildrenPaths.includes(selectionIdentification)) {\r\n          matchingChildrenPaths.push(selectionIdentification);\r\n        }\r\n      })\r\n    });\r\n    return matchingChildrenPaths.join(',');\r\n  }\r\n\r\n  /**\r\n  * Computes a collection of objects with the following structure: list item UDI / selected state. \r\n  * Used to compile ResultVariables for scoring result structure -> 'per member'.\r\n  */\r\n  static getListItemsPerMemberState(indexPath, runtime) {\r\n    const ret = [];\r\n    const { pageConfigurationsManager } = runtime;\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const selectedItemsIndexes = StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n    const containerChildrenArray = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config.items;\r\n    if (containerChildrenArray !== undefined) {\r\n      containerChildrenArray.forEach((childConfig, index) => {\r\n        ret.push({\r\n          userDefIdPath: childConfig.userDefinedId,\r\n          selected: selectedItemsIndexes.includes(index).toString()\r\n        })\r\n      });\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n  * Computes a collection of objects with the following structure: (here radio) item UDI / selected state. \r\n  * Used to compile ResultVariables for scoring result structure when 'scoringResultPerMember' attribute is enabled.\r\n  */\r\n  static getNonSelectGroupSelectedChildrenPerMember(containerIndexPath, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const ret = [];\r\n    const containerChildrenArray = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(containerIndexPath)).config.cbaChildren;\r\n    if (containerChildrenArray !== undefined) {\r\n      containerChildrenArray.forEach((childConfig, index) => {\r\n        const childIndexPath = IndexPathHelper.appendIndexToPageSegment(containerIndexPath, index);\r\n        const pathState = runtime.componentStateManager.findOrBuildStateForPathId(childIndexPath, runtime);\r\n        ret.push({\r\n          userDefIdPath: UserDefPathHelper.getLastUserDefIdFromPath(PathTranslationHelper.getUserDefPathForIndexPath(childIndexPath, runtime)),\r\n          selected: SelectGroupHelper.extractSelectedState(pathState, childIndexPath, runtime).toString()\r\n        })\r\n      });\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n  * Computes a collection of objects with the following structure: select group member UDI / selected state. \r\n  * Used to compile ResultVariables for scoring result structure when 'scoringResultPerMember' attribute is enabled.\r\n  */\r\n  static getSelectGroupSelectedChildrenPerMember(containerIndexPath, groupName, runtime) {\r\n    const ret = [];\r\n    const matchingGroups = PropagationHelper.getMatchingPropagationGroups(containerIndexPath, groupName, runtime);\r\n    matchingGroups.forEach((group) => {\r\n      group.memberIndexPaths.forEach((memberPathPageSegment) => {\r\n        const childIndexPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(containerIndexPath), memberPathPageSegment);\r\n        const pathState = runtime.componentStateManager.findOrBuildStateForPathId(childIndexPath, runtime);\r\n        ret.push({\r\n          userDefIdPath: UserDefPathHelper.getLastUserDefIdFromPath(PathTranslationHelper.getUserDefPathForIndexPath(childIndexPath, runtime)),\r\n          selected: SelectGroupHelper.extractSelectedState(pathState, childIndexPath, runtime).toString()\r\n        })\r\n      })\r\n    });\r\n    return ret;\r\n  }\r\n\r\n\r\n  // private stuff ----------------------------------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Helper method to retrieve the selection identification: memberName if defined or the userDefinedId.\r\n   */\r\n  static getSelectionIdentificationWhenSelected(indexPath, runtime) {\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    if (SelectGroupHelper.extractSelectedState(pathState, indexPath, runtime)) {\r\n      if (SelectGroupHelper.isSelectGroupMember(pathState)) {\r\n        const selectGroupMemberConfig = SelectGroupHelper.getSelectGroupMemberPerConfig(indexPath, runtime);\r\n        const selectGroupMemberName = Utils.withDefault(selectGroupMemberConfig.selectGroupMemberName, '');\r\n        if (selectGroupMemberName !== '') return selectGroupMemberName;\r\n      }\r\n      return UserDefPathHelper.getLastUserDefIdFromPath(PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime));\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Helper method to find the select-group configuration for the group with the given name.\r\n   */\r\n  static extractMatchingGroupState(controllerState, groupName) {\r\n    const matchingGroups = controllerState.filter(value => (value.name === groupName));\r\n    return matchingGroups.length > 0 ? matchingGroups[0] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, controllerAttributeSetter, runtime) {\r\n    const controllerIndexPath = PathTranslationHelper.getIndexPathForUserDefPath(controllerUserDefPath, runtime);\r\n    SelectGroupHelper.setStateAttributeForControllerByIndexPath(controllerIndexPath, groupName, controllerAttributeSetter, runtime);\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static setStateAttributeForControllerByIndexPath(controllerIndexPath, groupName, controllerAttributeSetter, runtime) {\r\n    const { componentStateManager } = runtime;\r\n    const fullControllerState = componentStateManager.findOrBuildStateForPathId(controllerIndexPath, runtime);\r\n    const controllerSelectGroupsState = StateAttributeAccess.extractSelectGroupControllerState(fullControllerState);\r\n    if (controllerSelectGroupsState === undefined) {\r\n      console.log(`Ignored request to set controller mode for a component that isn't a select-group controller: ${controllerIndexPath}`);\r\n      return;\r\n    }\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(controllerSelectGroupsState, groupName);\r\n    const oldSingleSelectActive = groupState.singleSelectActive;\r\n    const oldSelectedPageSegment = groupState.currentlySelected;\r\n\r\n    controllerAttributeSetter(groupState);\r\n\r\n    // Rearrange select flags of members and currentlySelected index in controller if we switch between single-select and multi-select mode:\r\n    const newSingleSelectActive = groupState.singleSelectActive;\r\n    if (newSingleSelectActive !== oldSingleSelectActive) {\r\n      if (newSingleSelectActive === false) {\r\n        // Set select flags to false for all members except the currently selected one according to the old selected page segment.\r\n        SelectGroupHelper.applyToMembers(\r\n          controllerIndexPath,\r\n          (fullMemberState, memberPageSegment) => {\r\n            StateAttributeAccess.setSelected(fullMemberState, oldSelectedPageSegment === memberPageSegment);\r\n          },\r\n          runtime\r\n        );\r\n      } else {\r\n        // Set selected flags to false for all members.\r\n        groupState.currentlySelected = undefined;\r\n        SelectGroupHelper.applyToMembers(\r\n          controllerIndexPath,\r\n          (fullMemberState, memberPageSegment) => {\r\n            StateAttributeAccess.setSelected(fullMemberState, false);\r\n          },\r\n          runtime\r\n        );\r\n      }\r\n    }\r\n    componentStateManager.registerStateByPathId(controllerIndexPath, fullControllerState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static applyToMembers(controllerIndexPath, methodToApply, runtime) {\r\n    const { componentStateManager } = runtime;\r\n    const memberPaths = ComponentStateHelper.findIndexPathsOfDescendants(controllerIndexPath, runtime);\r\n    memberPaths\r\n      .forEach((memberPath) => {\r\n        const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(memberPath);\r\n        const { pageConfigurationsManager } = runtime;\r\n        const memberConfiguration = pageConfigurationsManager.findConfigurationForPageSegment(pageSegment, true);\r\n\r\n        if (memberConfiguration !== undefined) {\r\n          const fullMemberState = componentStateManager.findOrBuildStateForPathId(memberPath, runtime);\r\n          const memberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(fullMemberState);\r\n          if (memberInfo !== undefined && memberInfo.controllerPathId === controllerIndexPath) {\r\n            methodToApply(fullMemberState, pageSegment);\r\n            componentStateManager.registerStateByPathId(memberPath, fullMemberState, runtime);\r\n          }\r\n        }\r\n\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Private helper method.\r\n   * \r\n   */\r\n  static handleSelectedChildChanges(requestedSelectState, groupName, clickSelectedPathId, controllerState, controllerPath, withPageSwitch, overrideNoDeselect, runtime) {\r\n    const selectGroupControllerState = StateAttributeAccess.extractSelectGroupControllerState(controllerState);\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(selectGroupControllerState, groupName);\r\n    const newIndexResult = SelectGroupHelper.calculateNewSelectedIndex(requestedSelectState, groupState, IndexPathHelper.getLastPageSegmentFromPath(clickSelectedPathId), overrideNoDeselect);\r\n\r\n    if (newIndexResult.noChange === false) {\r\n      groupState.currentlySelected = newIndexResult.newMember;\r\n      StateAttributeAccess.setSelectGroupControllerState(controllerState, selectGroupControllerState);\r\n    }\r\n\r\n    // We have to do the page switches since we sometimes select another button \r\n    // than the one clicked on by the user. In such a case the button's onClick handler \r\n    // would do the wrong page switch.\r\n    if (groupState.currentlySelected !== undefined && withPageSwitch) {\r\n      SelectGroupHelper.doPageSwitchForSelectedSwitcher(controllerPath, groupState.currentlySelected, runtime);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   * \r\n   * Calculate the page segment of the currently selected component. \r\n   * The method returns 'undefined' if the currently selected component does not change.\r\n   */\r\n  static calculateNewSelectedIndex(requestedSelectState, groupState, clickedSelectedPageSegment, overrideNoDeselect) {\r\n    if (requestedSelectState === true) {\r\n      if (groupState.currentlySelected === clickedSelectedPageSegment) {\r\n        // Component was selected and selected is requested -> signal no change:\r\n        return {\r\n          noChange: true\r\n        }\r\n      } else {\r\n        // Switching selection to another component is always possible:\r\n        return {\r\n          noChange: false,\r\n          newMember: clickedSelectedPageSegment\r\n        };\r\n      }\r\n    } else if (groupState.currentlySelected !== clickedSelectedPageSegment) {\r\n      // Component was not selected and not selected is requested -> signal no change:\r\n      return {\r\n        noChange: true\r\n      };\r\n    } else {\r\n      // Component was selected and not selected is requested.\r\n      const { allowDeselect, deselectTarget } = groupState;\r\n      if (!allowDeselect && !overrideNoDeselect) {\r\n        // Deselect is not allowed -> signal no change:\r\n        return {\r\n          noChange: true\r\n        };\r\n      } else if (deselectTarget !== undefined) {\r\n        // Jump to deselect target if we aren't there anyhow:\r\n        if (deselectTarget === clickedSelectedPageSegment) {\r\n          return {\r\n            noChange: true\r\n          }\r\n        } else {\r\n          return {\r\n            noChange: false,\r\n            newMember: deselectTarget\r\n          }\r\n        }\r\n      } else {\r\n        // No deselect target defined -> set currently selected to undefined\r\n        return {\r\n          noChange: false,\r\n          newMember: undefined\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static doPageSwitchForSelectedSwitcher(controllerPath, selectedSwitcherPageSegment, runtime) {\r\n    // We don't do any switch if no switcher is selected:\r\n    if (selectedSwitcherPageSegment !== undefined) {\r\n      const selectedSwitcherPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(controllerPath), selectedSwitcherPageSegment);\r\n\r\n      const pathState = runtime.componentStateManager.findOrBuildStateForPathId(selectedSwitcherPath, runtime);\r\n      const defaultLinkReceiver = StateAttributeAccess.extractDefaultLinkReceiver(pathState);\r\n      const selectedSwitcherConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(selectedSwitcherPageSegment);\r\n\r\n      CommonActionsHelper.doPageSwitch(selectedSwitcherConfig.config.link, runtime, defaultLinkReceiver, controllerPath);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static doStandardSelectFlagSetting(requestedSelectState, controlledPathId, controlledPathState, runtime) {\r\n    StateAttributeAccess.setSelected(controlledPathState, requestedSelectState);\r\n    runtime.componentStateManager.registerStateByPathId(controlledPathId, controlledPathState, runtime);\r\n    RenderingHelper.triggerRenderingViaPath(controlledPathId, runtime);\r\n  }\r\n\r\n  static isControlledType(componentType) {\r\n    return componentType === 'CbaRadioButton'\r\n      || componentType === 'CbaCheckbox'\r\n      || componentType === 'CbaButton'\r\n      || componentType === 'CbaLink'\r\n      || componentType === 'CbaRichTextField'\r\n      || componentType === 'CbaPolygon'\r\n      || componentType === 'CbaRegionMap';\r\n  }\r\n\r\n  static isComboBoxItem(componentType) {\r\n    return componentType === CbaComboBox.getItemType();\r\n  }\r\n\r\n  static isComboBox(componentType) {\r\n    return componentType === 'CbaComboBox';\r\n  }\r\n\r\n  static comboBoxGroup() {\r\n    return 'comboGroup';\r\n  }\r\n\r\n  static getSelectGroupMemberPerConfig(pathId, runtime) {\r\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(pathId);\r\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    return config.selectGroupMember;\r\n  }\r\n\r\n}\r\n","import CommonActionsHelper from '../components/CommonActionsHelper';\r\nimport SelectGroupHelper from '../components/SelectGroupHelper';\r\nimport ComponentStateHelper from './ComponentStateHelper';\r\nimport IndexPathHelper from './IndexPathHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\n\r\n/**\r\n * Helper methods to create trace log entries.\r\n*/\r\nexport default class TraceLogHelper {\r\n\r\n  /**\r\n   * Dump the state stored in all relevant state managers (ComponentStateManager, PresenterStateManager, IncidentsAccumulator etc.) to the trace log.\r\n   * \r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static dumpSnapshotToTrace(runtime) {\r\n    const {\r\n      taskManager,\r\n      presenterStateManager,\r\n      incidentsAccumulator,\r\n      clipboardManager,\r\n      statemachinesManager,\r\n      calculatorsManager,\r\n      variableManager\r\n    } = runtime;\r\n    const { test, item, task } = taskManager.getCurrentTestTaskItemNames();\r\n    const currentStatePathRoot = taskManager.getCurrentStatePathRoot();\r\n\r\n    const now = new Date();\r\n    runtime.traceLogBuffer.reportEvent('Snapshot', now, {\r\n      components: ComponentStateHelper.buildComponentsSnapshot(test, item, task, runtime),\r\n      presentation: presenterStateManager.getTaskState(currentStatePathRoot),\r\n      incidents: incidentsAccumulator.getAllValuesForTask(currentStatePathRoot, now.getTime()),\r\n      clipboard: clipboardManager.getStateForTracing(),\r\n      statemachine: {\r\n        current: {\r\n          states: statemachinesManager.getCurrentStateMachineLeafStates()\r\n        },\r\n        history: statemachinesManager.getHistoryStatemachineData()\r\n      },\r\n      calculator: calculatorsManager.getStateForTask(currentStatePathRoot),\r\n      variables: variableManager.buildVariablesInfoArrayForTask(currentStatePathRoot)\r\n    });\r\n\r\n    // return the time of the dump for testing purposes:\r\n    return now;\r\n  }\r\n\r\n  /**\r\n   * Dump our full state (i.e. all state from all our state memories) wrapped in trace log entry \r\n   * to the trace log. \r\n   */\r\n  static dumpFullStateToTrace(runtime) {\r\n    const { taskManager, traceLogBuffer } = runtime;\r\n    traceLogBuffer.reportEvent('FullState', new Date(), taskManager.getAllTasksState());\r\n  }\r\n\r\n  /**\r\n   * Dump a state change to the trace log.\r\n   */\r\n  static dumpStateChangeToTrace(stateType, stateDelta, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('StateChange', new Date(), {\r\n      stateType,\r\n      stateDelta\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dump a render call to the trace log.\r\n   */\r\n  static dumpRenderTriggeredToTrace(indexPath, traceLogBuffer, replayStepMonitor) {\r\n    traceLogBuffer.reportEvent('RenderTriggered', new Date(), {\r\n      indexPath,\r\n      replayStepId: replayStepMonitor.getCurrentReplayStepId()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dump a context menu open/close call to the trace log.\r\n   */\r\n  static dumpContextMenuTriggeredToTrace(menuConfig, shouldOpen, traceLogBuffer, replayStepMonitor) {\r\n    const entries = shouldOpen ? menuConfig.entries : undefined;\r\n    const event = shouldOpen ? {\r\n      clientX: menuConfig.event.clientX,\r\n      clientY: menuConfig.event.clientY,\r\n      type: menuConfig.event.type\r\n    } : undefined;\r\n\r\n    traceLogBuffer.reportEvent('ContextMenu', new Date(), {\r\n      event,\r\n      entries,\r\n      shouldOpen,\r\n      replayStepId: replayStepMonitor.getCurrentReplayStepId()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dump a scroll triggered call to the tracelog\r\n   * @param {*} path \r\n   * @param {*} scrollLeft \r\n   * @param {*} scrollTop \r\n   * @param {*} traceLogBuffer \r\n   */\r\n  static dumpScrollTriggeredToTrace(path, scrollLeft, scrollTop, traceLogBuffer, replayStepMonitor) {\r\n    traceLogBuffer.reportEvent('ScrollTriggered', new Date(), {\r\n      path,\r\n      scrollLeft,\r\n      scrollTop,\r\n      replayStepId: replayStepMonitor.getCurrentReplayStepId()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wrapper function for throttling/debouncing \r\n   * \r\n   * \r\n   * @returns {Function(currentScrollValue, currentOrientationValue, path, runtime)}\r\n   */\r\n  static traceScrollWrap() {\r\n    return (currentScrollValue, currentOrientationValue, path, runtime) => {\r\n      TraceLogHelper.traceScroll(path, runtime, currentScrollValue, currentOrientationValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traces the scroll interaction\r\n   * \r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} currentOrientationValue The current orientation of the scrolling component\r\n   * \r\n   */\r\n  static traceScroll(path, runtime, currentScrollValue, currentOrientationValue) {\r\n    const scrollTraceDetails = TraceLogHelper.buildScrollTraceDetails(currentScrollValue, currentOrientationValue);\r\n    if (scrollTraceDetails) {\r\n      CommonActionsHelper.traceUserInteraction(\"ScrollbarMove\", path, scrollTraceDetails, undefined, undefined, runtime);\r\n      runtime.replayStepMonitor.incrementReplayStep();\r\n      TraceLogHelper.dumpScrollTriggeredToTrace(path, currentScrollValue.scrollLeft, currentScrollValue.scrollTop, runtime.traceLogBuffer, runtime.replayStepMonitor);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that builds the trace details needed for scrolling\r\n   * \r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} currentOrientationValue The current orientation of the scrolling component\r\n   * \r\n   * @returns {Object} the trace log details\r\n   */\r\n  static buildScrollTraceDetails(currentScrollValue, currentOrientationValue) {\r\n    const { horizontal, vertical } = TraceLogHelper.computeScrollPosition(currentScrollValue);\r\n    const traceDetails = {\r\n      orientation: currentOrientationValue.orientation,\r\n      direction: currentOrientationValue.direction\r\n    }\r\n\r\n    if (horizontal || horizontal === 0) {\r\n      traceDetails.horizontalScroll = horizontal;\r\n    }\r\n\r\n    if (vertical || vertical === 0) {\r\n      traceDetails.verticalScroll = vertical;\r\n    }\r\n\r\n    if (currentOrientationValue.orientation || currentOrientationValue.direction) {\r\n      return traceDetails;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Helper function that computs the scroll orientation\r\n   * \r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} lastScrollValue The last known scroll values of the component\r\n   * \r\n   * @returns {Object} the scroll orientation\r\n   */\r\n  static computeScrollOrientation(currentScrollValue, lastScrollValue) {\r\n    if (!currentScrollValue || !lastScrollValue) {\r\n      return {\r\n        direction: null,\r\n        orientation: null\r\n      };\r\n    }\r\n\r\n    const isVerticalOrientation = currentScrollValue.scrollTop !== lastScrollValue.scrollTop;\r\n    const orientation = isVerticalOrientation ? \"vertical\" : \"horizontal\";\r\n    let direction;\r\n\r\n    if (isVerticalOrientation) {\r\n      direction = currentScrollValue.scrollTop < lastScrollValue.scrollTop ? \"up\" : \"down\";\r\n    } else {\r\n      direction = currentScrollValue.scrollLeft < lastScrollValue.scrollLeft ? \"left\" : \"right\";\r\n    }\r\n\r\n    return {\r\n      direction,\r\n      orientation\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that computs the scroll position\r\n   * \r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} lastScrollValue The last known scroll values of the component\r\n   * \r\n   * @returns {Object} the scroll position\r\n   */\r\n  static computeScrollPosition(currentScrollValue) {\r\n    const { scrollTop, scrollLeft, scrollHeight, scrollWidth, clientHeight, clientWidth } = currentScrollValue;\r\n\r\n    return {\r\n      vertical: Math.round(100 * (scrollTop / (scrollHeight - clientHeight))),\r\n      horizontal: Math.round(100 * (scrollLeft / (scrollWidth - clientWidth))),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that gets scroll information from a browser event\r\n   * \r\n   * @param {*} event The browser event\r\n   * \r\n   * @returns {Object} the scroll data\r\n   */\r\n  static getScrollDataFromEvent(event) {\r\n    const { scrollTop, scrollLeft, scrollHeight, scrollWidth, clientHeight, clientWidth } = event.target;\r\n\r\n    return {\r\n      scrollTop,\r\n      scrollLeft,\r\n      scrollHeight,\r\n      scrollWidth,\r\n      clientHeight,\r\n      clientWidth\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that retrieves useful trace information before the setActive operator is applied.\r\n   * \r\n   * @param {string} absoluteUserDefId The UDI of the component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * \r\n   * @returns {Object} \r\n   *    oldSelectedValue: if the component is in a selected state\r\n   *    oldComboSelectedId: the current combo selection\r\n   */\r\n  static getTraceDataBeforeSetSelection(absoluteUserDefId, runtime) {\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n    return {\r\n      oldSelectedValue: SelectGroupHelper.extractSelectedState(pathState, indexPath, runtime),\r\n      oldComboSelectedId:\r\n        (componentType === 'ComboBoxItem') ? SelectGroupHelper.getComboboxSelectedItem(IndexPathHelper.dropIndexFromPageSegment(indexPath), runtime) : ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that generates state change specific component traces for setActive operator.\r\n   * \r\n   * @param {string} absoluteUserDefId The UDI of the component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {Object} \r\n   *    oldSelectedValue: if the component is in a selected state\r\n   *    oldComboSelectedId: the current combo selection\r\n   */\r\n  static traceChangesAfterSetSelection(absoluteUserDefId, runtime, dataBeforeSelection) {\r\n    const { oldSelectedValue } = dataBeforeSelection;\r\n    let indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const newSelectedValue = SelectGroupHelper.extractSelectedState(pathState, indexPath, runtime);\r\n\r\n    // state change\r\n    if (oldSelectedValue !== newSelectedValue) {\r\n      const { pageConfigurationsManager } = runtime;\r\n      const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n      let { config } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath));\r\n      if (componentType === 'ComboBoxItem') {\r\n        indexPath = IndexPathHelper.dropIndexFromPageSegment(indexPath);\r\n        ({ config } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)));\r\n      }\r\n\r\n      const traceDetails = TraceLogHelper.buildTraceDetailsStructure(absoluteUserDefId, runtime, dataBeforeSelection);\r\n      if (traceDetails !== undefined) {\r\n        const traceConfig = config.trace;\r\n        if (traceConfig.skipTrace === undefined || traceConfig.skipTrace !== true) {\r\n          const extendedValues = {};\r\n          CommonActionsHelper.extendTraceDetailsObject(extendedValues, traceConfig.addOn);\r\n          CommonActionsHelper.extendTraceDetailsObject(extendedValues, traceDetails);\r\n\r\n          const details = CommonActionsHelper.buildTraceLogDetails(indexPath, extendedValues, undefined, runtime);\r\n          const timestamp = new Date();\r\n          runtime.traceLogBuffer.reportEvent(traceConfig.type, timestamp, details);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that generates specific component trace details for setActive operator.\r\n   * \r\n   * @param {string} absoluteUserDefId The UDI of the component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {Object} \r\n   *    oldSelectedValue: if the component is in a selected state\r\n   *    oldComboSelectedId: the current combo selection\r\n   */\r\n  static buildTraceDetailsStructure(absoluteUserDefId, runtime, dataBeforeSelection) {\r\n    const { oldSelectedValue, oldComboSelectedId } = dataBeforeSelection;\r\n    const { pageConfigurationsManager } = runtime;\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n    switch (componentType) {\r\n      case 'CbaCheckbox':\r\n      case 'CbaRadioButton':\r\n      case 'CbaPolygon':\r\n      case 'CbaRichTextField':\r\n      case 'CbaLink':\r\n        return CommonActionsHelper.buildOldSelectedTraceLogValueObject(oldSelectedValue);\r\n      case 'CbaButton': {\r\n        const traceDetails = CommonActionsHelper.buildOldSelectedTraceLogValueObject(oldSelectedValue);\r\n        const { config } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath));\r\n        if (config.subtype !== undefined) {\r\n          traceDetails.subtype = config.subtype;\r\n        }\r\n        return traceDetails;\r\n      }\r\n      case 'ComboBoxItem': {\r\n        const oldSelectedIndex = SelectGroupHelper.getComboboxItemIndexByUdi(IndexPathHelper.dropIndexFromPageSegment(indexPath), oldComboSelectedId, runtime);\r\n        const newSelectedId = SelectGroupHelper.getComboboxSelectedItem(IndexPathHelper.dropIndexFromPageSegment(indexPath), runtime);\r\n        const newSelectedIndex = SelectGroupHelper.getComboboxItemIndexByUdi(IndexPathHelper.dropIndexFromPageSegment(indexPath), newSelectedId, runtime);\r\n        return {\r\n          oldSelected: oldSelectedIndex,\r\n          oldSelectedUserDefId: oldComboSelectedId,\r\n          newSelected: newSelectedIndex,\r\n          newSelectedUserDefId: newSelectedId\r\n        }\r\n      }\r\n      case 'CbaTableCell': {\r\n        const tableIndexPath = IndexPathHelper.dropIndexFromPageSegment(indexPath);\r\n        const { row, column } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config;\r\n        const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tableIndexPath, runtime);\r\n        return {\r\n          tableUserDefIdPath,\r\n          tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n          row,\r\n          column,\r\n          oldSelectedValue\r\n        }\r\n      }\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\n/**\r\n * Helper methods to manage the currently rendered components and trigger them to render.\r\n*/\r\nexport default class RenderingHelper {\r\n\r\n  // registration of currently rendered components ----------------------------------------------------\r\n\r\n  /* not used methods work done for #5249\r\n  static initialiseStateForComponents(aditionalState = {}) {\r\n    return Object.assign(aditionalState, {\r\n      componentPath: \"\"\r\n    })\r\n  }\r\n  */\r\n\r\n  static onMount(component) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot register component without index path', component.props);\r\n      return;\r\n    }\r\n    RenderingHelper.doRegistrations(component, component.props.path);\r\n  }\r\n\r\n  static onUnmount(component) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot deregister component without index path', component.props);\r\n      return;\r\n    }\r\n    RenderingHelper.doDeregistrations(component, component.props.path);\r\n  }\r\n\r\n  /* Depracted see #5249 */\r\n  static onReceiveProps(component, nextProps) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot update from props without index path', component.props);\r\n      return;\r\n    }\r\n    if (nextProps.path === undefined) {\r\n      console.warn('Rendering helper cannot update to props without index path', nextProps);\r\n      return;\r\n    }\r\n    if (!(component.props.path === nextProps.path)) {\r\n      // component.props.runtime.componentDirectory.deregisterComponent(component.props.path);\r\n      RenderingHelper.doDeregistrations(component, component.props.path);\r\n      RenderingHelper.doRegistrations(component, nextProps.path);\r\n    }\r\n  }\r\n\r\n  /* not used methods work done for #5249\r\n  static onGetDerivedStateFromProps(nextProps, prevState) {\r\n    if (prevState && prevState.componentPath !== \"\" && nextProps.path !== prevState.componentPath) {\r\n      console.log(\"in get derived state from props\", prevState)\r\n\r\n      const { runtime } = nextProps;\r\n      const component = runtime.componentDirectory.findComponent(prevState.componentPath);\r\n\r\n      if (prevState.componentPath) {\r\n        console.warn('Rendering helper cannot update to props without index path', prevState.componentPath);\r\n        return null;\r\n      }\r\n\r\n      if (nextProps.path) {\r\n        console.warn('Rendering helper cannot update to props without index path', nextProps.path);\r\n        return null;\r\n      }\r\n\r\n      RenderingHelper.deregisterComponent(prevState.componentPath);\r\n      RenderingHelper.registerComponent(nextProps.path, component);\r\n\r\n      return Object.assign({}, prevState, {\r\n        componentPath: nextProps.path\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static onComponentDidUpdate(component, prevProps, prevState) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot update from props without index path', component.props);\r\n      return;\r\n    }\r\n    if (prevProps.path === undefined) {\r\n      console.warn('Rendering helper cannot update to props without index path', prevProps);\r\n      return;\r\n    }\r\n\r\n    if (prevProps.path !== component.props.path) {\r\n      console.log(\"in update\");\r\n      component.setState({\r\n        componentPath: component.props.path,\r\n      });\r\n    }\r\n  }\r\n  */\r\n\r\n  static doRegistrations(component, path) {\r\n    const { runtime, config } = component.props;\r\n    runtime.componentDirectory.registerComponent(path, component);\r\n    CommonConfigHelper.getObservedStatemachineVariableNames(config).forEach((variableName) => {\r\n      runtime.variableManager.addVariableChangeObserver(path, variableName);\r\n    })\r\n    RenderingHelper.applyRegisteredActions(component, path, runtime);\r\n  }\r\n\r\n  static doDeregistrations(component, path) {\r\n    const { runtime } = component.props;\r\n    runtime.componentDirectory.deregisterComponent(path);\r\n    runtime.variableManager.dropChangeObserverForPath(path);\r\n  }\r\n\r\n  // trigger rendering mechanism using the React state ----------------------------------------------------\r\n  static triggerRenderingViaUserDefPath(userDefPath, runtime) {\r\n    RenderingHelper.triggerRenderingViaPath(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime), runtime);\r\n  }\r\n\r\n  static triggerRenderingViaPath(path, runtime) {\r\n    const receiverComponent = runtime.componentDirectory.findComponent(path);\r\n    if (receiverComponent !== undefined) {\r\n      RenderingHelper.triggerRendering(receiverComponent);\r\n    } else {\r\n      console.log(`Receiver not mounted: ${path}`);\r\n    }\r\n  }\r\n\r\n  static triggerRendering(component) {\r\n    const { path, runtime } = component.props;\r\n    TraceLogHelper.dumpRenderTriggeredToTrace(path, runtime.traceLogBuffer, runtime.replayStepMonitor);\r\n    component.setState(previousState => RenderingHelper.buildCounterState(previousState));\r\n  }\r\n\r\n  static buildCounterState(previousState) {\r\n    const oldUpdateCount = previousState === null ? 0 : previousState.updateCount;\r\n    return {\r\n      updateCount: RenderingHelper.incrementCount(oldUpdateCount)\r\n    };\r\n  }\r\n\r\n  static incrementCount(oldCount) {\r\n    return oldCount === undefined || oldCount > 10000 ? 1 : (oldCount + 1);\r\n  }\r\n\r\n  /**\r\n   * Split a text containing line breaks into an array of spans separated with breaks.\r\n   * \r\n   * @param {*} text Text containing line breaks.\r\n   */\r\n  static extractMultilineText(text) {\r\n    return text.split('\\r\\n').map((line, index) => (\r\n      // Use the index plus the text of the line to be displayed as key. If the text is too long just use the index and and a hash of the line.\r\n      <span key={line.length > 32 ? `${index}_${RenderingHelper.hash64(line)}` : `${index}_${line}`}>\r\n        {line}\r\n        <br />\r\n      </span>\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * Calculate a 32 bit FNV-1a hash\r\n   * Found here: https://gist.github.com/vaiorabbit/5657561\r\n   * Ref.: http://isthe.com/chongo/tech/comp/fnv/\r\n   *\r\n   * @param {string} str the input value\r\n   * @returns {string}\r\n  */\r\n  static hashFnv32a(str) {\r\n    let hval = 0x811c9dc5;\r\n\r\n    for (let i = 0; i < str.length; i += 1) {\r\n      // eslint-disable-next-line no-bitwise\r\n      hval ^= str.charCodeAt(i);\r\n      // eslint-disable-next-line no-bitwise\r\n      hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);\r\n    }\r\n    // Convert to 8 digit hex string\r\n    // eslint-disable-next-line no-bitwise\r\n    return (`0000000${(hval >>> 0).toString(16)}`).substr(-8);\r\n  }\r\n\r\n  /**\r\n   * Calculate a simple 64 bit hash to reduce collision probability.\r\n   * \r\n   * @param {String} string to be hashed \r\n   */\r\n  static hash64(str) {\r\n    const shortHash = RenderingHelper.hashFnv32a(str);\r\n    return shortHash + RenderingHelper.hashFnv32a(shortHash + str);\r\n  }\r\n\r\n  /**\r\n   * Checks for registered actions and applies them to the component.\r\n   * Once the actions were applied we clear them from the register.\r\n   * @param {*} component the component instance \r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure\r\n   */\r\n  static applyRegisteredActions(component, indexPath, runtime) {\r\n    if (runtime.actionRegister.hasActionsRegisteredForPath(indexPath)) {\r\n      runtime.actionRegister.getRegisteredActionsForPath(indexPath).forEach(action => component[action].call());\r\n      runtime.actionRegister.clearRegisteredActionsForPath(indexPath);\r\n    }\r\n  }\r\n\r\n}\r\n","import RenderingHelper from '../components/RenderingHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport IndexPathHelper from './IndexPathHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\n\r\n/**\r\n * General helper methods to manage the component's registered state.\r\n*/\r\nexport default class ComponentStateHelper {\r\n\r\n  // ----------- public API ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the 'path' state of the given component.\r\n   */\r\n  static getState(component) {\r\n    return component.props.runtime.componentStateManager.findOrBuildStateForPathId(component.props.path, component.props.runtime);\r\n  }\r\n\r\n  /**\r\n   * Register the 'path' state for the given component.\r\n   */\r\n  static registerState(component, fullState) {\r\n    const { runtime } = component.props;\r\n    runtime.componentStateManager.registerStateByPathId(component.props.path, fullState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Get an attribute from the 'path' state of the component specified by a user defined path (without path root).\r\n   */\r\n  static getStateAttributeByUserDefPath(getter, userDefPath, runtime) {\r\n    const fullState = runtime.componentStateManager.findOrBuildStateByUserDefPath(userDefPath, runtime);\r\n    return getter(fullState);\r\n  }\r\n\r\n  /**\r\n   * Get an attribute from the 'path' state of the component specified by a  path id.\r\n   */\r\n  static getStateAttributeByPathId(getter, indexPath, runtime) {\r\n    const fullState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    return getter(fullState);\r\n  }\r\n\r\n  /**\r\n   * Update an attribute in the 'path' state of the component specified by a path (with path root).\r\n   */\r\n  static updateStateAttribute(getter, setter, newValue, pathId, runtime, triggerRendering) {\r\n    const stateManager = runtime.componentStateManager;\r\n    const fullState = stateManager.findOrBuildStateForPathId(pathId, runtime);\r\n    const oldValue = getter(fullState);\r\n    if (oldValue !== newValue) {\r\n      setter(fullState, newValue);\r\n      stateManager.registerStateByPathId(pathId, fullState, runtime);\r\n      if (triggerRendering) {\r\n        RenderingHelper.triggerRenderingViaPath(pathId, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an attribute in the 'path' state of the component specified by a user defined path (without path root).\r\n   */\r\n  static updateStateAttributeByUserDefPath(getter, setter, newValue, userDefPath, runtime, triggerRendering) {\r\n    const stateManager = runtime.componentStateManager;\r\n    const fullState = stateManager.findOrBuildStateByUserDefPath(userDefPath, runtime);\r\n    const oldValue = getter(fullState);\r\n    if (oldValue !== newValue) {\r\n      setter(fullState, newValue);\r\n      stateManager.registerStateByUserDefPath(userDefPath, fullState, runtime);\r\n      if (triggerRendering) {\r\n        RenderingHelper.triggerRenderingViaUserDefPath(userDefPath, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build an array describing the state of all components in the specified task.\r\n   */\r\n  static buildComponentsSnapshot(test, item, task, runtime) {\r\n    const { componentStateManager, componentDirectory } = runtime;\r\n    return ComponentStateHelper.formatSnapshotDump(componentStateManager.getTaskSnapshot(test, item, task, componentDirectory), runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Return all indexPath keys in the current task that already exist in the ComponentStateManager\r\n   * and belong to a component instance that has the given component type.\r\n   * \r\n   * @param {String} componentType : The component type that must match.\r\n   * @param {*} runtime The common runtime context structure. \r\n   * @return {[String]} The matching indexPath keys.\r\n   */\r\n  static findIndexPathsInCurrentTaskOfComponentWithType(componentType, runtime) {\r\n    const { componentStateManager, taskManager } = runtime;\r\n    const rootInRuntime = taskManager.getCurrentStatePathRoot();\r\n    return componentStateManager.filterExistingPathIds(id => IndexPathHelper.getRootFromPath(id) === rootInRuntime\r\n      && ComponentStateHelper.getComponentTypeForIndexPath(id, runtime) === componentType);\r\n  }\r\n\r\n  /**\r\n   * Return all indexPath keys that already exist in the ComponentStateManager \r\n   * and are descendants of the given parent index path key.\r\n   * \r\n   * @param {String} parentIndexPath The indexPath key of the parent component.\r\n   * @param {*} runtime The common runtime context structure. \r\n   * @return {[String]} The matching indexPath keys.\r\n   */\r\n  static findIndexPathsOfDescendants(parentIndexPath, runtime) {\r\n    const parentPrefix = `${parentIndexPath}/`;\r\n    return runtime.componentStateManager.filterExistingPathIds(id => id.startsWith(parentPrefix));\r\n  }\r\n\r\n  // ----------- private stuff ----------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Enrich and restructure the data from the component state manager to be useful in the trace log. \r\n   * \r\n   * @param {*} taskData The task's data from the component state manager to be 'formatted' for dumping it to the trace log.\r\n   */\r\n  static formatSnapshotDump(taskData, runtime) {\r\n    return Object.entries(taskData).map(entry => ComponentStateHelper.formatEntryForSnapshotDump(entry, runtime));\r\n  }\r\n\r\n  static formatEntryForSnapshotDump(entry, runtime) {\r\n    const [indexPath, componentState] = entry;\r\n\r\n    // drop deepCopy state\r\n    componentState.deepCopy = undefined;\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n\r\n    return {\r\n      indexPath,\r\n      userDefIdPath,\r\n      userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\r\n      componentType: ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime),\r\n      componentState\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the display component type of the component specified by the given index path.\r\n   * \r\n   * The method assumes that the index path belongs to the currently loaded task (and therefore to the currently loaded item).\r\n   * Otherwise it will match the page segment with a wrong page in the page configurations manager. \r\n   * \r\n   * We return the type name specified in the item configuration \r\n   * (i.e. not necessarily the component's class name).\r\n   */\r\n  static getComponentTypeForIndexPath(indexPath, runtime) {\r\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(indexPath);\r\n    if (pageSegment === undefined) {\r\n      return undefined;\r\n    }\r\n    const componentConfiguration = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    return componentConfiguration === undefined ? undefined : componentConfiguration.type;\r\n  }\r\n\r\n}\r\n","export default class PageHistoryHelper {\r\n\r\n  static goBack(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.currentCanGoBack(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      pagesState.current -= 1;\r\n      PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n    }\r\n  }\r\n\r\n  static goForward(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.currentCanGoForward(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      pagesState.current += 1;\r\n      PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n    }\r\n  }\r\n\r\n  static canGoBack(path, runtime) {\r\n    return PageHistoryHelper.currentCanGoBack(PageHistoryHelper.getHistoryState(path, runtime));\r\n  }\r\n\r\n  static canGoForward(path, runtime) {\r\n    return PageHistoryHelper.currentCanGoForward(PageHistoryHelper.getHistoryState(path, runtime));\r\n  }\r\n\r\n  static currentCanGoBack(historyState) {\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      return pagesState !== undefined && pagesState.current !== undefined && PageHistoryHelper.getRelevantPagesState(historyState).current > 0;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static currentCanGoForward(historyState) {\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      return pagesState !== undefined && pagesState.current !== undefined && pagesState.current < pagesState.pages.length -1;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static goHome(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      if (pagesState !== undefined && pagesState.current !== undefined) {\r\n        pagesState.current = 0;\r\n        PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  static getPage(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      return PageHistoryHelper.getCurrentPageFromPagesState(PageHistoryHelper.getRelevantPagesState(historyState));\r\n    } else if (PageHistoryHelper.isHistoryModeSinglePage(historyState)) {\r\n      return historyState.history.page;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  static getCurrentPageFromPagesState(pagesState) {\r\n    return (pagesState === undefined || pagesState.current === undefined) ? undefined : pagesState.pages[pagesState.current];\r\n  }\r\n\r\n  static getRelevantPagesState(historyState) {\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      const tabName = historyState.history.currentTab;\r\n      if (tabName === undefined) {\r\n        return undefined;\r\n      } else {\r\n        return historyState.history.withTabs[tabName];\r\n      }\r\n    } else if (PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      return historyState.history.noTabs;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  static getTab(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    return PageHistoryHelper.isHistoryModeWithTabs(historyState) ? historyState.history.currentTab : undefined;\r\n  }\r\n\r\n  static getAllTabs(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    return PageHistoryHelper.isHistoryModeWithTabs(historyState) ? historyState.history.allTabs : [];\r\n  }\r\n\r\n  static getImageForTab(tabName, path, runtime) {\r\n    const pageInfo = PageHistoryHelper.getCurrentPageInfoForTab(tabName, path, runtime);\r\n    return pageInfo === undefined ? undefined : pageInfo.image;\r\n  }\r\n\r\n  static switchTab(tabName, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      if (historyState.history.withTabs[tabName] !== undefined) {\r\n        historyState.history.currentTab = tabName;\r\n        PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  static closeTab(tabName, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      if (historyState.history.withTabs[tabName] !== undefined) {\r\n        const currentIndex = historyState.history.allTabs.indexOf(tabName);\r\n        if (currentIndex !== 0) {\r\n          const currentTab = PageHistoryHelper.getTab(path, runtime);\r\n          if (currentTab === tabName) {\r\n            historyState.history.currentTab = historyState.history.allTabs[currentIndex - 1];\r\n          }\r\n\r\n          historyState.history.allTabs.splice(currentIndex, 1);\r\n          delete historyState.history.withTabs[tabName];\r\n          PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n        } else {\r\n          console.log(\"Closing first tab not possible\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static addPage(pageName, pageUrl, tabConfig, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    const { image: pageImage } = tabConfig;\r\n    if (historyState === undefined) {\r\n      console.error(`History state missing when trying to add page ${pageName} to state of ${path}`);\r\n    }\r\n    switch (historyState.historyMode) {\r\n      case PageHistoryHelper.Modes.withTabsMode:\r\n        PageHistoryHelper.addPageToWithTabsHistory(pageName, pageUrl, tabConfig, historyState);\r\n        break;\r\n      case PageHistoryHelper.Modes.noTabsMode:\r\n        PageHistoryHelper.addPageToNoTabsHistory(pageName, pageUrl, pageImage, historyState);\r\n        break;\r\n      case PageHistoryHelper.Modes.singlePageMode:\r\n        historyState.history.page = {\r\n          name: pageName,\r\n          url: pageUrl,\r\n          image: pageImage\r\n        };\r\n        break;\r\n      default:\r\n        console.error(`Invalid mode type ${historyState.historyMode}`);\r\n        break;\r\n    }\r\n\r\n    PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n  }\r\n\r\n  static addPageToWithTabsHistory(pageName, pageUrl, tabConfig, historyState) {\r\n    const { history } = historyState;\r\n    const { name: tabName, image: pageImage, closable, width: tabWidth } = tabConfig;\r\n    history.currentTab = tabName;\r\n    if (history.withTabs === undefined) {\r\n      history.withTabs = {};\r\n    }\r\n    if (history.allTabs === undefined) {\r\n      history.allTabs = [];\r\n    }\r\n    const { withTabs } = history;\r\n    if (withTabs[tabName] === undefined) {\r\n      withTabs[tabName] = PageHistoryHelper.createPagesState(pageName, pageUrl, pageImage, closable, tabWidth);\r\n      history.allTabs.push(tabName);\r\n    } else {\r\n      withTabs[tabName].closable = closable;\r\n      withTabs[tabName].tabWidth = tabWidth;\r\n      PageHistoryHelper.addPageToPagesState(pageName, pageUrl, pageImage, withTabs[tabName]);\r\n    }\r\n  }\r\n\r\n  static addPageToNoTabsHistory(pageName, pageUrl, pageImage, historyState) {\r\n    if (historyState.history.noTabs === undefined) {\r\n      historyState.history.noTabs = PageHistoryHelper.createPagesState(pageName, pageUrl, pageImage, false, 0);\r\n    } else {\r\n      PageHistoryHelper.addPageToPagesState(pageName, pageUrl, pageImage, historyState.history.noTabs);\r\n    }\r\n  }\r\n\r\n  static createPagesState(pageName, pageUrl, pageImage, closable = true, tabWidth = 100) {\r\n    return {\r\n      current: 0,\r\n      closable,\r\n      tabWidth,\r\n      pages: [{\r\n        name: pageName,\r\n        url: pageUrl,\r\n        image: pageImage\r\n      }]\r\n    }\r\n  }\r\n\r\n  static addPageToPagesState(pageName, pageUrl, pageImage, pagesState) {\r\n\r\n    // do not change our history if the currently selected page is to be added once more\r\n    const currentPage = PageHistoryHelper.getCurrentPageFromPagesState(pagesState);\r\n    if (currentPage !== undefined\r\n      && currentPage.name === pageName\r\n      && currentPage.url === pageUrl\r\n      && currentPage.image === pageImage) {\r\n      return;\r\n    }\r\n\r\n    if (pagesState.current === undefined) {\r\n      pagesState.current = -1;\r\n    }\r\n    if (pagesState.pages === undefined) {\r\n      pagesState.pages = [];\r\n    }\r\n\r\n    pagesState.current += 1;\r\n    pagesState.pages[pagesState.current] = {\r\n      name: pageName,\r\n      url: pageUrl,\r\n      image: pageImage\r\n    };\r\n\r\n    let pageIndex;\r\n    for (pageIndex = pagesState.pages.length - 1; pageIndex > pagesState.current; pageIndex -= 1) {\r\n      pagesState.pages.pop();\r\n    }\r\n  }\r\n\r\n  static getInfoForTab(tabName, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n\r\n    if (!PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      return undefined;\r\n    }\r\n\r\n    return historyState.history.withTabs[tabName];\r\n  }\r\n\r\n  static getCurrentPageInfoForTab(tabName, path, runtime) {\r\n    const tabInfo = PageHistoryHelper.getInfoForTab(tabName, path, runtime);\r\n    return tabInfo === undefined ? undefined : tabInfo.pages[tabInfo.current];\r\n  }\r\n\r\n  static isHistoryModeSinglePage(historyState) {\r\n    return historyState !== undefined && historyState.historyMode === PageHistoryHelper.Modes.singlePageMode;\r\n  }\r\n\r\n  static isHistoryModeNoTabs(historyState) {\r\n    return historyState !== undefined && historyState.historyMode === PageHistoryHelper.Modes.noTabsMode;\r\n  }\r\n\r\n  static isHistoryModeWithTabs(historyState) {\r\n    return historyState !== undefined && historyState.historyMode === PageHistoryHelper.Modes.withTabsMode;\r\n  }\r\n\r\n  static hasStateWithoutPageHistory(path, runtime) {\r\n    const fullState = runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n    return fullState !== undefined && fullState.pageHistory === undefined;\r\n  }\r\n\r\n  static getHistoryState(path, runtime) {\r\n    const fullState = PageHistoryHelper.getFullState(path, runtime);\r\n    return fullState.pageHistory\r\n  }\r\n\r\n  static initializeHistoryState(withHistory, withTabs, fullState) {\r\n    const historyMode = PageHistoryHelper.getHistoryModeKey(withHistory, withTabs);\r\n    const pageHistory = {\r\n      historyMode,\r\n    }\r\n\r\n    switch (historyMode) {\r\n      case PageHistoryHelper.Modes.withTabsMode:\r\n        pageHistory.history = {\r\n          currentTab: undefined,\r\n          allTabs: [],\r\n          withTabs: {}\r\n        };\r\n        break;\r\n      case PageHistoryHelper.Modes.noTabsMode:\r\n        pageHistory.history = {\r\n          noTabs: {}\r\n        };\r\n        break;\r\n      case PageHistoryHelper.Modes.singlePageMode:\r\n        pageHistory.history = {\r\n          page: undefined,\r\n        };\r\n        break;\r\n      default:\r\n        console.error(`Invalid mode type ${historyMode}`);\r\n    }\r\n\r\n    fullState.pageHistory = pageHistory;\r\n  }\r\n\r\n  static getHistoryModeKey(withHistory, withTabs) {\r\n    if (withHistory) {\r\n      return withTabs ? PageHistoryHelper.Modes.withTabsMode : PageHistoryHelper.Modes.noTabsMode;\r\n    }\r\n    return PageHistoryHelper.Modes.singlePageMode;\r\n  }\r\n\r\n  static Modes = {\r\n    withTabsMode: 'withTabs',\r\n    noTabsMode: 'noTabs',\r\n    singlePageMode: 'singlePage',\r\n  }\r\n\r\n  static setHistoryState(state, path, runtime) {\r\n    const fullState = PageHistoryHelper.getFullState(path, runtime);\r\n    fullState.pageHistory = state;\r\n    PageHistoryHelper.setFullState(fullState, path, runtime);\r\n  }\r\n\r\n\r\n  static getFullState(path, runtime) {\r\n    return runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n  }\r\n\r\n  static setFullState(state, path, runtime) {\r\n    return runtime.componentStateManager.registerStateByPathId(path, state, runtime);\r\n  }\r\n\r\n}\r\n","import PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\n\r\n/**\r\n * Manage the list of bookmarks maintained by a CbaPageArea display component instance.\r\n */\r\nexport default class BookmarkHelper {\r\n\r\n  // ------- public API ------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Add a page as bookmark to the list of bookmarks maintained by a CbaPageArea.\r\n   * \r\n   * The method will silently ignore the call if a bookmark with the given page name already exists.\r\n   * \r\n   * @param {String} path The index path of the CbaPageArea hosting the bookmarks list.\r\n   * @param {String} pageName The name of the page to add to the bookmarks list.\r\n   * @param {String} pageUrl The URL of the page to add to the bookmarks list.\r\n   * @param {String} pageTab The tab of the page to add to the bookmarks list.\r\n   * @param {String} pageImage The image of the page to add to the bookmarks list.\r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the component requesting to add the bookmark (for tracing purposes).\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static addBookmark(path, pageName, pageUrl, pageTab, pageImage, triggeringType, requestingComponentPath, runtime) {\r\n    const bookmarkState = BookmarkHelper.getBookmarkState(path, runtime);\r\n    const bookmarks = bookmarkState.bookmarkEntries;\r\n    if (bookmarks.find(value => value.pageName === pageName) === undefined) {\r\n      bookmarks.push({\r\n        pageName,\r\n        pageUrl,\r\n        pageTab,\r\n        pageImage\r\n      });\r\n      BookmarkHelper.setBookmarkState(bookmarkState, path, runtime);\r\n      BookmarkHelper.trace(triggeringType, 'add', requestingComponentPath, path, pageName, pageUrl, pageTab, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop a bookmark from the list of bookmarks maintained by a CbaPageArea.\r\n   * \r\n   * The method will silently ignore the call if no bookmark with the given page name exists.\r\n   * \r\n   * @param {*} path The index path of the CbaPageArea hosting the bookmarks list.\r\n   * @param {*} pageName The name of the page to drop from the bookmarks list.\r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {*} requestingComponentPath The index path of the component requesting to drop the bookmark (for tracing purposes).\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static dropBookmark(path, pageName, triggeringType, requestingComponentPath, runtime) {\r\n    const bookmarkState = BookmarkHelper.getBookmarkState(path, runtime);\r\n    const { bookmarkEntries } = bookmarkState;\r\n    const indexToDrop = bookmarkEntries.findIndex(entry => entry.pageName === pageName);\r\n    if (indexToDrop !== -1) {\r\n      const pageToDrop = bookmarkEntries[indexToDrop];\r\n      bookmarkEntries.splice(indexToDrop, 1);\r\n      BookmarkHelper.setBookmarkState(bookmarkState, path, runtime);\r\n      BookmarkHelper.trace(triggeringType, 'drop', requestingComponentPath, path, pageToDrop.pageName, pageToDrop.pageUrl, pageToDrop.pageTab, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the list of bookmarks maintained by a CbaPageArea.\r\n   * \r\n   * @param {*} path The index path of the CbaPageArea hosting the bookmarks list.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @return {[*]} A copy of the list of bookmarks maintained by CbaPageArea.\r\n   */\r\n  static getBookmarks(path, runtime) {\r\n    const bookmarkState = BookmarkHelper.getBookmarkState(path, runtime);\r\n    return bookmarkState.bookmarkEntries.map(entry => entry);\r\n  }\r\n\r\n  // ------- internal stuff ------------------------------------------------------------------------\r\n\r\n  static getBookmarkState(path, runtime) {\r\n    const fullState = BookmarkHelper.getFullState(path, runtime);\r\n    if (fullState.bookmarkState === undefined) {\r\n      BookmarkHelper.initializeBookmarkState(fullState);\r\n    }\r\n    return fullState.bookmarkState;\r\n  }\r\n\r\n  static initializeBookmarkState(fullState) {\r\n    fullState.bookmarkState = {\r\n      bookmarkEntries: []\r\n    }\r\n  }\r\n\r\n  static setBookmarkState(state, path, runtime) {\r\n    const fullState = BookmarkHelper.getFullState(path, runtime);\r\n    fullState.bookmarkState = state;\r\n    BookmarkHelper.setFullState(fullState, path, runtime);\r\n  }\r\n\r\n  static getFullState(path, runtime) {\r\n    return runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n  }\r\n\r\n  static setFullState(state, path, runtime) {\r\n    return runtime.componentStateManager.registerStateByPathId(path, state, runtime);\r\n  }\r\n\r\n  /**\r\n   * Create a trace log entry.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu'\r\n   * @param {String} operationType The operation type to trace: add, drop\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance.\r\n   * @param {String} ownerIndexPath The index path of the display component owining the bookmarks.\r\n   * @param {String} pageName The name pf the page of the bookmark.\r\n   * @param {String} pageUrl The URL pf the page of the bookmark.\r\n   * @param {String} tab The browser tab the bookmark operates on.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static trace(triggeringType, operationType, triggeringIndexPath, ownerIndexPath, pageName, pageUrl, tab, runtime) {\r\n    const triggeringUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(triggeringIndexPath, runtime);\r\n    const ownerUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(ownerIndexPath, runtime);\r\n    runtime.traceLogBuffer.reportEvent(\r\n      'Bookmark',\r\n      new Date(),\r\n      {\r\n        triggerType: triggeringType,\r\n        triggerIndexPath: triggeringIndexPath,\r\n        triggerUserDefIdPath: triggeringUserDefPath,\r\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggeringUserDefPath),\r\n        operation: operationType,\r\n        ownerIndexPath,\r\n        ownerUserDefIdPath: ownerUserDefPath,\r\n        ownerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(ownerUserDefPath),\r\n        pageName,\r\n        pageUrl,\r\n        tab\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './WebTab.css';\r\n\r\nconst WebTab = (props) => {\r\n  const { tabName, closeTab, isActive, onClick, icon, width, closable } = props;\r\n\r\n  const webTabClass = `webTab ${isActive ? \"active\" : \"\"}`;\r\n  const webTabStyle = {\r\n    width\r\n  };\r\n\r\n  return (\r\n    <div title={tabName} className={webTabClass} onClick={onClick} style={webTabStyle}>\r\n      {icon === undefined ? undefined : <img src={icon} alt=\"\" height=\"100%\" width=\"auto\" />}\r\n      <span>{tabName}</span>\r\n      <i className={closable ? \"show\" : \"hide\"} onClick={closeTab} />\r\n    </div>\r\n  )\r\n}\r\n\r\nWebTab.propTypes = {\r\n  tabName: PropTypes.string.isRequired,\r\n  closeTab: PropTypes.func.isRequired,\r\n  isActive: PropTypes.bool.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  closable: PropTypes.bool.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  icon: PropTypes.string,\r\n}\r\n\r\nWebTab.defaultProps = {\r\n  icon: undefined\r\n};\r\n\r\nexport default WebTab;\r\n","import PageHistoryHelper from \"../PageHistoryHelper\";\r\n\r\nexport default class WebToolbarHelper {\r\n\r\n  static showMoreButtonWidth = 40;\r\n\r\n  static containerMarginWidth = 10;\r\n\r\n  /**\r\n   * Method continaing logic for top up, returns the next hidden tab to be displayed\r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String[]} displayTabs All tabs being displayed \r\n   * @param {Boolean} isInFirstHalf The fact that the tab is in the first half\r\n   * \r\n   * @returns {String} Tab name\r\n   */\r\n  static getNextTopUpTab(allTabs, displayTabs, isInFirstHalf) {\r\n    const leftVisibleTab = displayTabs[0];\r\n    const leftHiddenIndex = allTabs.indexOf(leftVisibleTab) - 1;\r\n    const leftTab = leftHiddenIndex !== -1 ? allTabs[leftHiddenIndex] : undefined;\r\n\r\n    const rightVisibleTab = displayTabs[displayTabs.length - 1];\r\n    const rightHiddenIndex = allTabs.indexOf(rightVisibleTab) + 1;\r\n    const rightTab = rightHiddenIndex === 0 ? undefined : allTabs[rightHiddenIndex];\r\n\r\n    const tab = isInFirstHalf\r\n      ? (leftTab || rightTab)\r\n      : (rightTab || leftTab);\r\n\r\n    return tab || null;\r\n  }\r\n\r\n  /**\r\n   * Method determining if the current tab is in the first part of the spectrum\r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String} currentTab Current tab of the toolbar\r\n   * \r\n   * @returns {Boolean} true/false\r\n   */\r\n  static isCurrentInFirstHalf(allTabs, currentTab) {\r\n    const indexOfCurrentTab = allTabs.indexOf(currentTab);\r\n    return indexOfCurrentTab < allTabs.length / 2;\r\n  }\r\n\r\n  /**\r\n   * Method implementing the top up operation\r\n   * @param {String[]} displayTabs All tabs being displayed \r\n   * @param {String[]} hiddenTabs All tabs being hidden \r\n   * @param {String} newTab The new tab to be topped up\r\n   * @param {Number} tabWidth The new tab width\r\n   * @param {Number} displayTabsWidth Width of display tabs\r\n   * @param {String} operation Operation to be implemented on the array (unshift/push)\r\n   * \r\n   * @returns {Number} New width of the display tabs\r\n   */\r\n  static topUpTabs(displayTabs, hiddenTabs, newTab, tabWidth, displayTabsWidth, operation) {\r\n    const newWidth = displayTabsWidth + tabWidth;\r\n\r\n    hiddenTabs.splice(hiddenTabs.indexOf(newTab), 1);\r\n    displayTabs[operation](newTab);\r\n\r\n    return newWidth;\r\n  }\r\n\r\n  /**\r\n   * Method handling overflow of tabs\r\n   * @param {String[]} allTabsInfo All toolbar tabs\r\n   * @param {Number} totalWidth Total width of the rendered toolbar\r\n   * \r\n   * @returns {Boolean} true/false\r\n   */\r\n  static exceedsMaxTabsWidth(allTabsInfo, totalWidth) {\r\n    const totalTabsWidth = allTabsInfo.reduce((accum, reducer) => reducer.tabWidth + accum, 0);\r\n\r\n    return totalTabsWidth > totalWidth;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {String[]} displayTabs All tabs being displayed \r\n   * @param {String[]} hiddenTabs All tabs being hidden \r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String} currentTab Current tab of the toolbar\r\n   * @param {Object} tabDict The current tab dictionary\r\n   * @param {Number} totalWidth Total width of the rendered toolbar\r\n   * \r\n   * \r\n   * @returns {Object} Object of the form { displayTabs, hiddenTabs }\r\n   */\r\n  static topUpDisplayTabs(displayTabs, hiddenTabs, allTabs, currentTab, tabDict, totalWidth) {\r\n    let displayTabsWidth = displayTabs.reduce((accum, reducer) => accum + tabDict[reducer].width, 0);\r\n    const isInFirstHalf = WebToolbarHelper.isCurrentInFirstHalf(allTabs, currentTab);\r\n\r\n    while (totalWidth > displayTabsWidth && hiddenTabs.length > 0) {\r\n      const nextTab = WebToolbarHelper.getNextTopUpTab(allTabs, displayTabs, isInFirstHalf);\r\n      const tabWidth = nextTab && tabDict[nextTab].width;\r\n\r\n      if (nextTab && hiddenTabs.indexOf(nextTab) !== -1 && totalWidth > tabWidth + displayTabsWidth) {\r\n        const operation = allTabs.indexOf(nextTab) < allTabs.indexOf(displayTabs[0]) ? \"unshift\" : \"push\";\r\n        displayTabsWidth = WebToolbarHelper.topUpTabs(displayTabs, hiddenTabs, nextTab, tabWidth, displayTabsWidth, operation);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return {\r\n      displayTabs,\r\n      hiddenTabs\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String} currentTab Current tab of the toolbar\r\n   * @param {Object} tabDict The current tab dictionary\r\n   * @param {Number} totalTabsMaxWidth Total width of the rendered toolbar\r\n   * \r\n   * @returns {Object} Object of the form { displayTabs, hiddenTabs }\r\n   */\r\n  static buildDisplayTabs(allTabs, currentTab, tabDict, totalTabsMaxWidth) {\r\n    const displayTabs = [];\r\n    const hiddenTabs = [];\r\n    const scoreArray = [];\r\n    const indexOfCurrentTab = allTabs.indexOf(currentTab);\r\n\r\n    // build score array representing the total width accumulated until the end of the tab\r\n    allTabs.reduce((accum, reducer) => {\r\n      const accumulatedWidth = accum + tabDict[reducer].width;\r\n      scoreArray.push(accumulatedWidth);\r\n      return accumulatedWidth;\r\n    }, 0);\r\n\r\n    let lowerLimit;\r\n    let upperLimit;\r\n    const currentTabScore = scoreArray[indexOfCurrentTab];\r\n\r\n    if (WebToolbarHelper.isCurrentInFirstHalf(allTabs, currentTab)) {\r\n      lowerLimit = currentTabScore - tabDict[currentTab].width;\r\n      upperLimit = lowerLimit + totalTabsMaxWidth;\r\n    } else {\r\n      upperLimit = currentTabScore;\r\n      lowerLimit = currentTabScore - totalTabsMaxWidth;\r\n    }\r\n\r\n    scoreArray.forEach((tabScore, index) => {\r\n      const tabWidth = tabDict[allTabs[index]].width;\r\n      if (tabScore - tabWidth < lowerLimit || tabScore > upperLimit) {\r\n        hiddenTabs.push(allTabs[index]);\r\n      } else {\r\n        displayTabs.push(allTabs[index]);\r\n      }\r\n    });\r\n\r\n    return {\r\n      hiddenTabs,\r\n      displayTabs\r\n    };\r\n  }\r\n\r\n  static buildTabDictionary = (allTabs, allTabsInfo) => {\r\n    const tabDict = {};\r\n    allTabs.forEach((tabName, idx) => {\r\n      tabDict[tabName] = {\r\n        width: allTabsInfo[idx].tabWidth,\r\n        index: idx\r\n      }\r\n    });\r\n\r\n    return tabDict;\r\n  }\r\n\r\n  static getAllTabsInfo = (allTabs, parentPath, runtime) => allTabs.map(tabName => PageHistoryHelper.getInfoForTab(tabName, parentPath, runtime));\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ContextMenuTrigger, ContextMenu, MenuItem, SubMenu, hideMenu } from 'react-contextmenu';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\n\nimport './MenuItemTree.css';\nimport TraceLogHelper from '../state/TraceLogHelper';\n\n/**\n * Display a context menu with optional sub menues.\n * \n * Other components will create instances of this component explicitly by calling one of the static factory methods.\n * We don't use this component as component type in the page config structure, it is not known to the CbaInterpreter etc.\n * \n * The component does not keep state in the ComponentStateManager and does not register in the ComponentDirectory.\n * The component is registered by the LoggedInView as a runtime global component beacuase it is a singleton and is available with different configurations throughout the app\n */\nexport default class MenuItemTree extends Component {\n\n  constructor() {\n    super();\n    this.contextTrigger = React.createRef();\n  }\n\n  // ----- public API ----------------------------------------------------------------------\n\n  /**\n   * Logic for getting the bounding element of the menu trigger\n   * \n   * @param {*} event The event which triggers the menu \n   */\n  static buildTriggerBoundingRect(event) {\n    const buttonElement = event.target.nodeName === \"SPAN\" ? event.target.parentNode : event.target;\n    return buttonElement.getBoundingClientRect();\n  }\n\n  /**\n   * closes the context menu if it is open.\n   */\n  static closeMenuItemTree() {\n    hideMenu();\n  }\n\n  /**\n   * Open a menu item tree instance for a static menu configuration. \n   * \n   * @param {*} staticMenuConfig The configuration for the menu item tree.\n   */\n  openMenuItemTree(staticMenuConfig) {\n    const { runtime } = this.props;\n\n    this.setState({\n      entries: staticMenuConfig.entries\n    }, () => {\n      this.contextTrigger.current.handleContextClick(staticMenuConfig.event);\n    });\n\n    TraceLogHelper.dumpContextMenuTriggeredToTrace(staticMenuConfig, true, runtime.traceLogBuffer, runtime.replayStepMonitor);\n  }\n\n  /**\n   * Open a menu item tree instance for a menu configuration that might\n   * contain entries with type 'dynamicItems'. \n   * \n   * @param {*} staticMenuConfig The configuration for the menu item tree.\n   */\n  openMenuItemTreeWithDynamicConfig(dynamicMenuConfig) {\n    dynamicMenuConfig.event.persist();\n    const staticConfig = {\n      event: dynamicMenuConfig.event,\n      entries: MenuItemTree.transformDynamicEntries(dynamicMenuConfig.entries)\n    }\n    this.openMenuItemTree(staticConfig);\n  }\n\n  // ----- private stuff --------------------------------------------------------------------\n  /**\n   * Transform a list of item entries by expanding each entry of type 'dynamicItems'\n   * in a list of entry items without type 'dynmicItems'.\n   */\n  static transformDynamicEntries(dynamicEntries) {\n    const result = [];\n    dynamicEntries.forEach((entry) => {\n      switch (entry.type) {\n        case 'dynamicItems':\n          MenuItemTree.expandDynamicEntry(entry).forEach((replacementEntry) => { result.push(replacementEntry) });\n          break;\n        case 'submenu':\n        {\n          const transformedCopy = {};\n          Object.keys(entry).forEach((attribute) => {\n            transformedCopy[attribute] = entry[attribute];\n          })\n          transformedCopy.submenu = MenuItemTree.transformDynamicEntries(entry.submenu);\n          result.push(transformedCopy);\n          break;\n        }\n        default:\n          result.push(entry);\n      }\n    });\n    return result;\n  }\n\n\n  /**\n   * Transform an entry of type 'dynamicItems' in a list of entries that are not\n   * of type 'dynamicItems'.\n   */\n  static expandDynamicEntry(entry) {\n    return entry.provider(entry.providerParam);\n  }\n\n  state = {\n    entries: []\n  }\n\n  handleItemClick(entry, event) {\n    const { runtime } = this.props;\n    entry.action(event);\n    CommonActionsHelper.sendEvent(entry.event, runtime);\n  }\n\n  buildEntries(entries) {\n    const { runtime } = this.props;\n    return entries.map((entry, i) => {\n      const key = `${entry.type}-${entry.label}-${i}`;\n      const wrapStyle = {\n        display: \"flex\",\n        alignItems: \"center\",\n        minHeight: \"15px\"\n      };\n      const itemAttributes = {\n        title: entry.mouseOver,\n        style: wrapStyle\n      };\n      const imagePath = entry.icon ? CommonConfigHelper.getProperResourcePath(entry.icon, runtime) : null;\n\n      switch (entry.type) {\n        case \"action\":\n          return (\n            <MenuItem key={key} onClick={event => this.handleItemClick(entry, event)} attributes={itemAttributes} disabled={entry.disabled}>\n              <MenuItemTreeIcon disabled={entry.disabled} imagePath={imagePath} altText={`${entry.label}-icon`} />\n              {entry.label}\n            </MenuItem>\n          );\n        case \"separator\":\n          return <MenuItem key={key} divider />;\n        case \"submenu\":\n          return (\n            <SubMenu key={key} title={entry.label} disabled={entry.disabled}>\n              {this.buildEntries(entry.submenu)}\n            </SubMenu>\n          )\n        default: return null;\n      }\n    })\n  }\n\n  onMenuHide = () => {\n    const { runtime } = this.props;\n    runtime.replayStepMonitor.incrementReplayStep();\n    TraceLogHelper.dumpContextMenuTriggeredToTrace({}, false, runtime.traceLogBuffer, runtime.replayStepMonitor);\n  }\n\n  render() {\n    const { entries } = this.state;\n\n    return (\n      <div className={`contextMenu ${entries.length === 0 ? 'hidden' : ''}`}>\n        <ContextMenuTrigger id=\"contextMenu\" ref={this.contextTrigger}>\n          <div />\n        </ContextMenuTrigger>\n        <ContextMenu id=\"contextMenu\" onHide={this.onMenuHide}>\n          {this.buildEntries(entries)}\n        </ContextMenu>\n      </div>\n    );\n  }\n\n}\n\nMenuItemTree.propTypes = {\n  runtime: PropTypes.object.isRequired\n}\n\nfunction MenuItemTreeIcon(props) {\n  const { imagePath, disabled, altText } = props;\n\n  if (!imagePath) return null;\n\n  const imageWrapStyle = {\n    width: \"25px\",\n    height: \"25px\",\n    marginRight: \"5px\",\n    display: \"flex\",\n    alignItems: \"center\"\n  };\n  const imageStyle = {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n    margin: \"auto\",\n    opacity: disabled ? 0.5 : 1\n  };\n\n  return (\n    <div style={imageWrapStyle}>\n      <img src={imagePath} style={imageStyle} alt={altText} />\n    </div>\n  );\n}\n\nMenuItemTreeIcon.propTypes = {\n  imagePath: PropTypes.string,\n  disabled: PropTypes.bool.isRequired,\n  altText: PropTypes.string.isRequired\n}\n\nMenuItemTreeIcon.defaultProps = {\n  imagePath: \"\"\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WebTab from './WebTab';\r\n\r\nimport './WebToolbar.css';\r\nimport PageHistoryHelper from '../PageHistoryHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport WebToolbarHelper from './WebToolbarHelper';\r\nimport MenuItemTree from '../MenuItemTree';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport CbaPageArea from '../CbaPageArea';\r\n\r\nexport default class WebToolbar extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.displayTabs = [];\r\n    this.hiddenTabs = [];\r\n  }\r\n\r\n  closeTab = (event, tabName) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const { parentPath, runtime, parentWidth } = this.props;\r\n    PageHistoryHelper.closeTab(tabName, parentPath, runtime);\r\n\r\n    const toolbarWidth = parentWidth - WebToolbarHelper.containerMarginWidth;\r\n    const currentTab = PageHistoryHelper.getTab(parentPath, runtime);\r\n    const allTabs = PageHistoryHelper.getAllTabs(parentPath, runtime);\r\n    const allTabsInfo = WebToolbarHelper.getAllTabsInfo(allTabs, parentPath, runtime);\r\n    const tabDict = WebToolbarHelper.buildTabDictionary(allTabs, allTabsInfo);\r\n\r\n\r\n    this.displayTabs.splice(this.displayTabs.indexOf(tabName), 1);\r\n    WebToolbarHelper.topUpDisplayTabs(this.displayTabs, this.hiddenTabs, allTabs, currentTab, tabDict, toolbarWidth);\r\n    this.triggerRendering();\r\n  }\r\n\r\n  switchTab = (event, tabName) => {\r\n    const { parentPath, runtime } = this.props;\r\n    const currentTab = PageHistoryHelper.getTab(parentPath, runtime);\r\n\r\n    if (currentTab !== tabName) {\r\n      CbaPageArea.switchTab(parentPath, tabName, event, runtime);\r\n      this.triggerRendering();\r\n    }\r\n  }\r\n\r\n  switchHiddenTab = (showMoreClickEvent, tab) => (tabClickEvent) => {\r\n    this.switchTab(tabClickEvent, tab);\r\n  }\r\n\r\n  handleShowMoreTabs = (event) => {\r\n    const { runtime, parentPath } = this.props;\r\n    const buttonBoundingRect = MenuItemTree.buildTriggerBoundingRect(event);\r\n\r\n    const menuItems = this.hiddenTabs.map(tab => ({\r\n      type: 'action',\r\n      label: tab,\r\n      action: this.switchHiddenTab(event, tab),\r\n      disabled: false,\r\n      icon: PageHistoryHelper.getImageForTab(tab, parentPath, runtime)\r\n    }));\r\n\r\n    event.clientX = buttonBoundingRect.left;\r\n    event.clientY = buttonBoundingRect.bottom;\r\n\r\n    runtime.contextMenu.openMenuItemTreeWithDynamicConfig({\r\n      entries: menuItems,\r\n      event\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper function to trigger rendering on both this component and it's parent (content update)\r\n   */\r\n  triggerRendering = () => {\r\n    const { parentPath, runtime } = this.props;\r\n    RenderingHelper.triggerRendering(this);\r\n    RenderingHelper.triggerRenderingViaPath(parentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Get the optional icon resource to be displayed on the tab.\r\n   */\r\n  getTabIconResource = (tabName) => {\r\n    const { parentPath, runtime } = this.props;\r\n    const iconForTab = PageHistoryHelper.getImageForTab(tabName, parentPath, runtime);\r\n    return CommonConfigHelper.getProperResourcePath(iconForTab, runtime);\r\n  }\r\n\r\n  renderTabs = (currentTab, renderTabs) => {\r\n    const { parentPath, runtime } = this.props;\r\n    const allTabs = PageHistoryHelper.getAllTabs(parentPath, runtime);\r\n    const firstTab = allTabs[0];\r\n\r\n    return renderTabs.map((tab) => {\r\n      const tabInfo = PageHistoryHelper.getInfoForTab(tab, parentPath, runtime);\r\n      const { tabWidth } = tabInfo;\r\n      let { closable } = tabInfo;\r\n\r\n      if (tab === firstTab) {\r\n        closable = false;\r\n      }\r\n\r\n      return (\r\n        <WebTab\r\n          key={tab}\r\n          tabName={tab}\r\n          isActive={tab === currentTab}\r\n          closeTab={event => this.closeTab(event, tab)}\r\n          onClick={event => this.switchTab(event, tab)}\r\n          icon={this.getTabIconResource(tab)}\r\n          closable={closable}\r\n          width={tabWidth}\r\n        />\r\n      );\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { parentPath, runtime, parentWidth } = this.props;\r\n    const currentTab = PageHistoryHelper.getTab(parentPath, runtime);\r\n    const allTabs = PageHistoryHelper.getAllTabs(parentPath, runtime);\r\n    const allTabsInfo = WebToolbarHelper.getAllTabsInfo(allTabs, parentPath, runtime);\r\n    const toolbarWidth = parentWidth - WebToolbarHelper.containerMarginWidth;\r\n    const showMoreTabs = WebToolbarHelper.exceedsMaxTabsWidth(allTabsInfo, toolbarWidth);\r\n    const tabDict = WebToolbarHelper.buildTabDictionary(allTabs, allTabsInfo);\r\n\r\n    if (showMoreTabs) {\r\n      if (!this.displayTabs.includes(currentTab)) {\r\n        const containerWidthWithShowMore = toolbarWidth - WebToolbarHelper.showMoreButtonWidth;\r\n        ({\r\n          displayTabs: this.displayTabs,\r\n          hiddenTabs: this.hiddenTabs\r\n        } = WebToolbarHelper.buildDisplayTabs(allTabs, currentTab, tabDict, containerWidthWithShowMore));\r\n\r\n        WebToolbarHelper.topUpDisplayTabs(this.displayTabs, this.hiddenTabs, allTabs, currentTab, tabDict, containerWidthWithShowMore);\r\n      }\r\n    } else {\r\n      this.displayTabs = allTabs;\r\n    }\r\n\r\n    return (\r\n      <div className=\"webtoolbar-wrap\">\r\n        <div className=\"webtoolbar-inner\">\r\n          <div ref={this.tabContainerRef} className=\"webtoolbar-tab-container\">\r\n            {this.renderTabs(currentTab, this.displayTabs)}\r\n            <div className=\"webtoolbar-show-more\">\r\n              <i className={showMoreTabs ? \"show\" : \"\"} onClick={this.handleShowMoreTabs} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nWebToolbar.propTypes = {\r\n  parentPath: PropTypes.string.isRequired,\r\n  runtime: PropTypes.object.isRequired,\r\n  parentWidth: PropTypes.number.isRequired\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaInterpreter from './CbaInterpreter';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\n\nexport function isExcessivePageNesting(pagePath) {\n  return IndexPathHelper.getPageSegmentArray(pagePath).length >= 15;\n}\n\nexport default function PageAreaRenderer({\n  onClick,\n  onContextMenu,\n  orientation,\n  embeddedPageName,\n  hasTabs,\n  tabsBar,\n  position,\n  config,\n  scrollableAreaRef,\n  path,\n  runtime\n}) {\n\n  // get the page configuration:\n  const page = runtime.pageConfigurationsManager.findPage(embeddedPageName);\n  if (page === undefined) {\n    return (\n      <div\n        style={CommonConfigHelper.buildStyleByState(position, config, false, orientation, false, runtime)}\n      >\n        {`Cannot find page with name ${embeddedPageName}`}\n      </div>\n    );\n  }\n\n  // bail out if we nest too deep:\n  if (isExcessivePageNesting(path)) {\n    return (\n      <div\n        style={CommonConfigHelper.buildStyleByState(position, config, false, orientation, false, runtime)}\n      >\n        Page nesting exceeds maximum nesting depth.\n      </div>\n    );\n  }\n\n\n  const childAreaStyle = {\n    position: \"absolute\",\n    [orientation]: 0,\n    top: (hasTabs ? 30 : 0),\n    width: \"100%\",\n    height: \"100%\",\n    overflow: \"auto\"\n  }\n\n  const pagePath = IndexPathHelper.appendPageSegmentsToPath(path, IndexPathHelper.buildPageSegment(embeddedPageName));\n\n  return (\n    <div\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      title={CommonConfigHelper.buildTitle(config)}\n      style={CommonConfigHelper.buildStyleByState(position, config, false, orientation, false, runtime)}\n      data-cba-id={config.pageEditId}\n      role=\"presentation\"\n      className={CommonConfigHelper.getCssClassNamesValue(config)}\n    >\n      {hasTabs && tabsBar}\n      <div\n        style={childAreaStyle}\n        onScroll={CommonActionsHelper.traceUserScroll(pagePath, runtime)}\n        ref={scrollableAreaRef}\n      >\n        <CbaInterpreter config={page.content} path={pagePath} runtime={runtime} orientation={orientation} />\n      </div>\n    </div>\n  );\n\n}\n\nPageAreaRenderer.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  onContextMenu: PropTypes.func.isRequired,\n  orientation: PropTypes.string.isRequired,\n  embeddedPageName: PropTypes.string.isRequired,\n  hasTabs: PropTypes.bool.isRequired,\n  tabsBar: PropTypes.object.isRequired,\n  path: PropTypes.string.isRequired,\n  position: PropTypes.object.isRequired,\n  config: PropTypes.shape(PropTypesHelper.getStandardConfigPropTypes(false)).isRequired,\n  scrollableAreaRef: PropTypes.object.isRequired,\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport PageHistoryHelper from './PageHistoryHelper';\nimport BookmarkHelper from './BookmarkHelper';\nimport RenderingHelper from './RenderingHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport WebToolbar from './WebToolbar/WebToolbar';\nimport Utils from '../utils/Utils';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport UserDefPathHelper from '../state/UserDefPathHelper';\nimport PageAreaRenderer from './PageAreaRenderer';\n\nexport default class CbaPageArea extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.scrollableAreaRef = React.createRef();\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n\n  onClickHandler(event) {\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  static addAttributesToInitialState(initialState, configProps) {\n    const { historyMode, page } = configProps;\n    initialState.pageName = page;\n    PageHistoryHelper.initializeHistoryState(historyMode !== \"singlePage\", historyMode === \"withTabs\", initialState);\n  }\n\n  static setPageName(path, receiverTab, pageName, pageUrl, runtime) {\n    if (PageHistoryHelper.hasStateWithoutPageHistory(path, runtime)) {\n      // The component for the path seems not to be a CbaPageArea....\n      console.warn(`Set page name call for a component that is not a CbaPageArea: ${path}`);\n      return;\n    }\n\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n\n    const currentEmbeddedPage = PageHistoryHelper.getPage(path, runtime);\n\n    if (currentEmbeddedPage === undefined || currentEmbeddedPage.name !== pageName) {\n\n      // update the component's state in state manager:\n      const safeReceiverTab = CbaPageArea.getSafeReceiverTabDetails(receiverTab);\n      PageHistoryHelper.addPage(pageName, pageUrl, safeReceiverTab, path, runtime);\n\n      // update the button (i.e. tab or taskbar button) that is linked to the new page:\n      CbaPageArea.updatePageIndicators(path, config, pageName, runtime);\n\n      // update the browser toolbar components that depend on the page history (i.e. forward/back buttons and URL display):\n      CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n    }\n\n  }\n\n  static buildIndicatorIndexPath(embeddingIndexPath, indicator) {\n    return IndexPathHelper.appendPageSegmentsToPath(embeddingIndexPath, indicator.indicatorPath);\n  }\n\n  static getSafeReceiverTabDetails(receiverTab) {\n    if (receiverTab === undefined) {\n      return {\n        name: '',\n        image: undefined,\n        width: 100,\n        closable: true\n      }\n    }\n    return {\n      name: receiverTab.name === undefined ? '' : receiverTab.name,\n      width: receiverTab.width === undefined ? 100 : receiverTab.width,\n      image: receiverTab.image,\n      closable: !!receiverTab.closable\n    }\n  }\n\n\n  /**\n   * Get the 'hidden' state of the component specified by the given indicator info. \n   * \n   * @param {{ pageName: String, indicatorPath: String}} indicator The indicator info entry from the config structure. The path is a single plain page segment without path root.\n   * @param {*} embeddingIndexPath The index path where we append the indicatorPath to obatin the full component index path.\n   * @param {*} runtime The common runtime structure. \n   */\n  static isIndicatorNotHidden(indicator, embeddingIndexPath, runtime) {\n    const indicatorIndexPath = CbaPageArea.buildIndicatorIndexPath(embeddingIndexPath, indicator);\n    const indicatorState = runtime.componentStateManager.findOrBuildStateForPathId(indicatorIndexPath, runtime);\n    return StateAttributeAccess.extractHidden(indicatorState) === false;\n  }\n\n  /**\n   * Select a 'best matching' page indicator from the given candidates list. \n   * \n   * The method selects the first page indicator that is linked to the given page\n   * and is currently not hidden. If there is no such indicator it choses the first \n   * indicator linked to the given page. If there is no indicator linked to \n   * the given page it silently returns undefined.\n   * \n   * @param {*} pageName The page name that the page indicator must be linked to.\n   * @param {[*]} pageIndicators The list of page indicator candidates.\n   * @param {String} embeddingIndexPath The path that we will prepend to the path given by the candidate entry to obtain the indicator's full index path.\n   * @param {*} runtime The common runtime structure.\n   */\n  static findPreferredIndicator(pageName, pageIndicators, embeddingIndexPath, runtime) {\n    if (pageIndicators === undefined) {\n      return undefined;\n    }\n    const pageMatchingIndicators = pageIndicators.filter(indicator => indicator.pageName === pageName);\n    if (pageMatchingIndicators.length === 0) {\n      return undefined;\n    }\n    if (pageMatchingIndicators.length === 1) {\n      return pageMatchingIndicators[0];\n    }\n    const firstVisibleCandidate = pageMatchingIndicators.find(indicator => CbaPageArea.isIndicatorNotHidden(indicator, embeddingIndexPath, runtime));\n    return firstVisibleCandidate === undefined ? pageMatchingIndicators[0] : firstVisibleCandidate;\n  }\n\n  /**\n   * Switch the 'selected' status to true for the 'page indicating' button component that links to the given page.\n   * \n   * We have to do this explicitly since the page switch might be triggered by a state machine operator or a button \n   * that is not member of our 'page indicating' buttons set. \n   * \n   * Examples for 'page indicating' buttons are the 'tabs' in a tabfolder page or the taskbar buttons in a taskbar page. \n   * \n   * \n   * @param {*} path The full index path of the CbaPageArea component that switches the embedded page.\n   * @param {*} config The configuration structure for the CbaPageArea that contains the list of info pairs for the 'page indicating' components. \n   * @param {*} pageName The name of the page we switch to. \n   * @param {*} runtime The common runtime structure.\n   */\n  static updatePageIndicators(path, config, pageName, runtime) {\n    const { currentPageIndicators } = config;\n    const indicatorPathRoot = IndexPathHelper.dropPageSegmentFromPath(path);\n    const chosenIndicator = CbaPageArea.findPreferredIndicator(pageName, currentPageIndicators, indicatorPathRoot, runtime);\n    if (chosenIndicator !== undefined) {\n      const indicatorIndexPath = CbaPageArea.buildIndicatorIndexPath(indicatorPathRoot, chosenIndicator);\n      const indicatorState = runtime.componentStateManager.findOrBuildStateForPathId(indicatorIndexPath, runtime);\n      SelectGroupHelper.setSelectedForPossiblyControlledComponent(true, indicatorIndexPath, indicatorState, false, false, runtime);\n    }\n  }\n\n\n  static doHistoryMove(path, move, runtime) {\n    if (PageHistoryHelper.hasStateWithoutPageHistory(path, runtime)) {\n      // The component for the path seems not to be a CbaPageArea....\n      console.warn(`Do history move call for a component that is not a CbaPageArea: ${path}`);\n      return;\n    }\n\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime)\n\n    // update the component's state in state manager:\n    switch (move) {\n      case 'home':\n        PageHistoryHelper.goHome(path, runtime);\n        CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n        break;\n      case 'forward':\n        PageHistoryHelper.goForward(path, runtime);\n        CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n        break;\n      case 'back':\n        PageHistoryHelper.goBack(path, runtime);\n        CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n        break;\n      default:\n        console.warn(`Unknown type of history move : ${move} for component path ${path}`);\n        break;\n    }\n\n    runtime.traceLogBuffer.reportEvent('PageSwitchEmbedded', new Date(),\n      {\n        indexPath: path,\n        userDefIdPath,\n        userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\n        newPageName: PageHistoryHelper.getPage(path, runtime).name,\n        tab: PageHistoryHelper.getTab(path, runtime),\n        historyMove: move\n      });\n\n  }\n\n  static historyMoveEnabled(path, move, runtime) {\n    if (PageHistoryHelper.hasStateWithoutPageHistory(path, runtime)) {\n      // The component for the path seems not to be a CbaPageArea....\n      console.warn(`Enabled history move inquiry for a component that is not a CbaPageArea: ${path}`);\n      return false;\n    }\n\n    switch (move) {\n      case 'home':\n        return true;\n      case 'forward':\n        return PageHistoryHelper.canGoForward(path, runtime);\n      case 'back':\n        return PageHistoryHelper.canGoBack(path, runtime);\n      default:\n        console.warn(`Unknown type of history move : ${move} for component path ${path}`);\n        return false;\n    }\n\n  }\n\n  static switchTab(path, newTab, event, runtime) {\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n    event.stopPropagation();\n    PageHistoryHelper.switchTab(newTab, path, runtime);\n    CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n\n    CommonActionsHelper.traceUserInteraction(\n      'BrowserTab',\n      path,\n      {\n        page: PageHistoryHelper.getPage(path, runtime).name,\n        tab: PageHistoryHelper.getTab(path, runtime)\n      },\n      event,\n      null,\n      runtime\n    );\n\n  }\n\n  scroll(x, y) {\n    const scrollElement = this.scrollableAreaRef.current;\n    if (!scrollElement) return;\n    Utils.doScrollOnHTMLElement(x, y, scrollElement, scrollElement);\n  }\n\n  static updatePageHistoryDependents(path, config, runtime) {\n    const { forwardSwitchers, backwardSwitchers, locationDisplays } = config;\n    const myPathWithoutMyPageSegment = IndexPathHelper.dropPageSegmentFromPath(path);\n\n    if (forwardSwitchers !== undefined) {\n      const canGoForward = PageHistoryHelper.canGoForward(path, runtime);\n      forwardSwitchers.forEach((switcher) => {\n        const pathId = IndexPathHelper.appendPageSegmentsToPath(myPathWithoutMyPageSegment, switcher);\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractDisabled, StateAttributeAccess.setDisabled, !canGoForward, pathId, runtime, true);\n      });\n    }\n    if (backwardSwitchers !== undefined) {\n      const canGoBack = PageHistoryHelper.canGoBack(path, runtime);\n      backwardSwitchers.forEach((switcher) => {\n        const pathId = IndexPathHelper.appendPageSegmentsToPath(myPathWithoutMyPageSegment, switcher);\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractDisabled, StateAttributeAccess.setDisabled, !canGoBack, pathId, runtime, true);\n      });\n    }\n    if (locationDisplays !== undefined) {\n      const pageEntry = PageHistoryHelper.getPage(path, runtime);\n      const newValue = Utils.getPropUndefinedSafe(pageEntry, 'url', '');\n      locationDisplays.forEach((locationDisplay) => {\n        const pathId = IndexPathHelper.appendPageSegmentsToPath(myPathWithoutMyPageSegment, locationDisplay);\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractTextValue, StateAttributeAccess.setTextValue, newValue, pathId, runtime, true);\n      });\n    }\n  }\n\n\n  /**\n   * Add the page currently embedded as bookmark to our bookmarks list.\n   * \n   * @param {String} path The index path of the CbaPageArea to operate on.\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\n   * @param {String} requestingComponentPath The index path of the component requesting to add the bookmark (for tracing purposes).\n   * @param {*} runtime The common runtime context structure.\n   */\n  static addBookmark(path, triggeringType, requestingComponentPath, runtime) {\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n    const currentPageEntry = CbaPageArea.getEmbeddedPageEntry(path, config, runtime);\n    if (currentPageEntry !== undefined) {\n      const currentTab = PageHistoryHelper.getTab(path, runtime);\n      BookmarkHelper.addBookmark(path, currentPageEntry.name, currentPageEntry.url, currentTab, currentPageEntry.image, triggeringType, requestingComponentPath, runtime);\n    }\n  }\n\n  /**\n   * Drop the specified page from our bookmarks list.\n   * \n   * @param {String} path The index path of the CbaPageArea to operate on.\n   * @param {String} pageName The name of the page to drop from the bookmarks list.\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\n   * @param {String} requestingComponentPath The index path of the component requesting to drop the bookmark (for tracing purposes).\n   * @param {*} runtime The common runtime context structure.\n   */\n  static dropBookmark(path, pageName, triggeringType, requestingComponentPath, runtime) {\n    BookmarkHelper.dropBookmark(path, pageName, triggeringType, requestingComponentPath, runtime);\n  }\n\n  /**\n   * Get the list of page names in our bookmarks list.\n   */\n  static getBookmarks(path, runtime) {\n    return BookmarkHelper.getBookmarks(path, runtime);\n  }\n\n  static getEmbeddedPageName(path, config, runtime) {\n    const pageEntry = CbaPageArea.getEmbeddedPageEntry(path, config, runtime);\n    return pageEntry === undefined ? undefined : pageEntry.name;\n  }\n\n  static getEmbeddedPageEntry(path, config, runtime) {\n    const { historyMode } = config;\n    // fail fast if config param is invalid (don't mess up initialization of history structure!)\n    if (historyMode === undefined) {\n      console.error(`Invalid config structure for CbaPageArea: ${path}`, config);\n      return undefined;\n    }\n\n    let pageEntry = PageHistoryHelper.getPage(path, runtime);\n\n    // Use initial page from my config if nobody did set another page yet.\n    // Don't forget to set it in the page history helper. Otherwise goHome will not work properly!\n    if (pageEntry === undefined) {\n      const initialPageName = config.page;\n      const initialPageUrl = config.pageUrl;\n      const initialTabConfig = CbaPageArea.getSafeReceiverTabDetails(config.initialTab);\n      PageHistoryHelper.addPage(initialPageName, initialPageUrl, initialTabConfig, path, runtime);\n      pageEntry = PageHistoryHelper.getPage(path, runtime);\n    }\n    return pageEntry;\n  }\n\n  render() {\n    const { config, runtime, path: myPath, orientation } = this.props;\n\n    // get the page configuration:\n    const pageName = CbaPageArea.getEmbeddedPageName(myPath, config, runtime);\n\n    const pathState = ComponentStateHelper.getState(this);\n    const positionOnlyState = {};\n    StateAttributeAccess.setPosition(positionOnlyState, StateAttributeAccess.extractPosition(pathState));\n\n    const { historyMode } = config;\n    const hasTabs = historyMode === \"withTabs\";\n\n    return (\n      <PageAreaRenderer\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        orientation={orientation}\n        embeddedPageName={pageName}\n        hasTabs={hasTabs}\n        tabsBar={<WebToolbar parentPath={myPath} runtime={runtime} parentWidth={config.position.width} />}\n        path={myPath}\n        position={positionOnlyState}\n        config={config}\n        scrollableAreaRef={this.scrollableAreaRef}\n        runtime={runtime}\n      />\n    );\n  }\n\n}\n\n\nCbaPageArea.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        page: PropTypes.string.isRequired,\n        pageUrl: PropTypes.string.isRequired,\n        catchLinks: PropTypes.bool.isRequired,\n        historyMode: PropTypes.oneOf([\"singlePage\", \"noTabs\", \"withTabs\"]),\n        initialTab: PropTypes.object,\n        currentPageIndicators: PropTypes.arrayOf(PropTypes.shape({\n          pageName: PropTypes.string.isRequired,\n          indicatorPath: PropTypes.string.isRequired,\n        })),\n        forwardSwitchers: PropTypes.arrayOf(PropTypes.string),\n        backwardSwitchers: PropTypes.arrayOf(PropTypes.string),\n        locationDisplays: PropTypes.arrayOf(PropTypes.string),\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction buildBooleanResultString(result) {\r\n  if (result === undefined) return \"\";\r\n  return result ? \"true\" : \"false\";\r\n}\r\n\r\nfunction compareClassEntryByName(left, right) {\r\n  if (left.name < right.name) return -1;\r\n  if (left.name > right.name) return 1;\r\n  return 0;\r\n}\r\n\r\nfunction sortClassEntriesByName(entries) {\r\n  return entries.sort((left, right) => compareClassEntryByName(left, right));\r\n}\r\n\r\nfunction buildClassMemberCountMap(resultsList) {\r\n  const classToMemberCount = new Map();\r\n  resultsList.forEach((member) => {\r\n    const oldEntry = classToMemberCount.get(member.class);\r\n    const newValue = oldEntry === undefined ? 1 : oldEntry + 1;\r\n    classToMemberCount.set(member.class, newValue);\r\n  });\r\n  return classToMemberCount;\r\n}\r\n\r\nfunction buildAlertStyle(alert) {\r\n  return alert ? {\r\n    color: 'red'\r\n  } : {}\r\n}\r\n\r\nfunction renderHitMissTable(title, resultsList, firstActiveMode) {\r\n  const classToMemberCount = buildClassMemberCountMap(resultsList);\r\n\r\n  if (firstActiveMode || resultsList.length === 0) return \"\";\r\n  return (\r\n    <div>\r\n      {title}\r\n      <table className=\"details\">\r\n        <thead>\r\n          <tr>\r\n            <th>!</th>\r\n            <th>Name</th>\r\n            <th>Weight</th>\r\n            <th>Class</th>\r\n            <th>Result text</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {resultsList.map((row, i) => {\r\n            const hasActiveSiblings = classToMemberCount.get(row.class) > 1;\r\n            return (\r\n              <tr key={row.name} style={buildAlertStyle(hasActiveSiblings)}>\r\n                <td className=\"cbaColWidth05\">{ hasActiveSiblings ? \"!\" : \"\"}</td>\r\n                <td className=\"cbaColWidth25\">{row.name}</td>\r\n                <td className=\"cbaColWidth05\">{row.weight}</td>\r\n                <td className=\"cbaColWidth30\">{row.class}</td>\r\n                <td className=\"cbaColWidth35\">{row.resultText}</td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getResultTextForHitMissByName(hitMissName, hitMissResultsList) {\r\n  console.log(`hitMissName is ${hitMissName}, hitMissResultsList contains names ${hitMissResultsList.map(hitMiss => hitMiss.name).join()}`)\r\n  const matchingResult = hitMissResultsList.find(hitMiss => hitMiss.name === hitMissName);\r\n  return matchingResult === undefined ? '' : matchingResult.resultText;\r\n}\r\n\r\nfunction renderClassTableBody(classResultsList, hitMissResultsList, firstActiveMode) {\r\n  return sortClassEntriesByName(classResultsList).map((row, i) => (\r\n    <tr key={row.name}>\r\n      <td className=\"cbaColWidth25\">{row.name}</td>\r\n      <td className={firstActiveMode ? \"cbaColWidth30\" : \"cbaColWidth05\"}>{row.value}</td>\r\n      { !firstActiveMode && <td className=\"cbaColWidth05\">{buildBooleanResultString(row.result)}</td> }\r\n      { firstActiveMode && <td className=\"cbaColWidth30\">{getResultTextForHitMissByName(row.value, hitMissResultsList)}</td> }\r\n      <td className=\"cbaColWidth30\">{row.comment}</td>\r\n    </tr>\r\n  ));\r\n}\r\n\r\n\r\nfunction renderClassTable(title, classResultsList, hitMissResultsList, firstActiveMode) {\r\n  if (classResultsList.length === 0) return \"\";\r\n  return (\r\n    <div>\r\n      {`${title} (${firstActiveMode ? \"first active member\" : \"accumulated weights\"}):`}\r\n      <table className=\"details\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>{ firstActiveMode ? 'First Active' : 'Weight'}</th>\r\n            <th>{ firstActiveMode ? 'Result Text' : 'Result'}</th>\r\n            <th>Comment</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {renderClassTableBody(classResultsList, hitMissResultsList, firstActiveMode)}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction renderResultVariablesTableBody(resultVariablesList) {\r\n  return resultVariablesList.map((row, i) => (\r\n    <tr key={row.name}>\r\n      <td className=\"cbaColWidth25\">{row.name}</td>\r\n      <td className=\"cbaColWidth25\">{row.value}</td>\r\n      <td className=\"cbaColWidth25\">{row.valueHit}</td>\r\n      <td className=\"cbaColWidth25\">{row.valueLabel}</td>\r\n    </tr>\r\n  ));\r\n}\r\n\r\nfunction renderResultVariablesTable(title, resultVariablesList) {\r\n  if (resultVariablesList.length === 0) return \"\";\r\n  return (\r\n    <div>\r\n      {`${title}:`}\r\n      <table className=\"details\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Value</th>\r\n            <th>Value Hit</th>\r\n            <th>Value Label</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {renderResultVariablesTableBody(resultVariablesList)}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ScoringModalData = (props) => {\r\n  const { currentModalContent: scoringDetails } = props;\r\n  const hitClassFirstActive = scoringDetails.classScoringModeHit === 'firstActive';\r\n  const missClassFirstActive = scoringDetails.classScoringModeMiss === 'firstActive';\r\n\r\n  return (\r\n    <div className=\"cba-modal-content\">\r\n      <table className=\"summary\">\r\n        <thead>\r\n          <tr>\r\n            <th>Score result:</th>\r\n            <td>{scoringDetails.result ? 'true' : 'false'}</td>\r\n            <th>Execution Time:</th>\r\n            <td>{scoringDetails.execTime}</td>\r\n            <th>Total hits/Total Weight:</th>\r\n            <td>{`${scoringDetails.nbHits}/${scoringDetails.hitWeight}`}</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th>Credit Class:</th>\r\n            <td>{scoringDetails.creditClass}</td>\r\n            <th>Reaction Time:</th>\r\n            <td>{scoringDetails.reactionTime}</td>\r\n            <th>Total misses/Total Weight:</th>\r\n            <td>{`${scoringDetails.nbMisses}/${scoringDetails.missWeight}`}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Credit Weight:</th>\r\n            <td>{scoringDetails.creditWeight}</td>\r\n            <th>Nb. of Interactions:</th>\r\n            <td>{scoringDetails.nbInteractions}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Result text:</th>\r\n            <td>{scoringDetails.resultText}</td>\r\n            <th />\r\n            <td />\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <br />\r\n      <div className=\"detailsWrapper\">\r\n        {renderHitMissTable(\"Hits:\", scoringDetails.hitRows, hitClassFirstActive)}\r\n        {renderHitMissTable(\"Misses:\", scoringDetails.missRows, missClassFirstActive)}\r\n        {renderClassTable(\"Hit Classes\", scoringDetails.hitClassRows, scoringDetails.hitRows, hitClassFirstActive)}\r\n        {renderClassTable(\"Miss Classes\", scoringDetails.missClassRows, scoringDetails.missRows, missClassFirstActive)}\r\n        {renderResultVariablesTable(\"Result Variables\", scoringDetails.resultVariables)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nScoringModalData.propTypes = {\r\n  currentModalContent: PropTypes.object.isRequired\r\n}\r\n\r\nexport default ScoringModalData;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst StatemachineModalData = (props) => {\r\n\r\n  const { currentModalContent: statemachineDetails } = props;\r\n  return (\r\n    <div className=\"cba-modal-content\">\r\n      <div className=\"detailsWrapper\">\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Variable Name</th>\r\n              <th>Current Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.variables.map(row => (\r\n              <tr key={row.name}>\r\n                <td>{row.name}</td>\r\n                <td>{row.value}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <p />\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Current State Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.states.map(row => (\r\n              <tr key={row}>\r\n                <td>{row}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <p />\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Visited State Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.visitedStates.map(row => (\r\n              <tr key={row}>\r\n                <td>{row}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <p />\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Raised Event Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.raisedEvents.map(row => (\r\n              <tr key={row}>\r\n                <td>{row}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatemachineModalData.propTypes = {\r\n  currentModalContent: PropTypes.shape(\r\n    {\r\n      variables: PropTypes.array.isRequired,\r\n      states: PropTypes.array.isRequired,\r\n      visitedStates: PropTypes.array.isRequired,\r\n      raisedEvents: PropTypes.array.isRequired,\r\n    }\r\n  ).isRequired\r\n}\r\n\r\nexport default StatemachineModalData;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class TracingModalData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { currentModalContent: traceLogBuffer } = this.props;\r\n    this.state = {\r\n      tracingDetails: traceLogBuffer.peekEntries()\r\n    };\r\n  }\r\n\r\n  static dumpAsStringAndTruncate(object) {\r\n    const maxLen = 1000;\r\n    const fullString = JSON.stringify(object);\r\n    return fullString.length > maxLen ? `${fullString.substring(0, maxLen)}...` : fullString;\r\n  }\r\n\r\n  /**\r\n   * Clean logs from traceLogBuffer and updates the tracing details accordingly\r\n   */\r\n  truncateTraceLog = () => {\r\n    const { currentModalContent: traceLogBuffer } = this.props;\r\n    traceLogBuffer.popEntries();\r\n    this.updateTraceLogState();\r\n  }\r\n\r\n  /**\r\n   * Updates the tracing details with data from the source of truth\r\n   */\r\n  updateTraceLogState = () => {\r\n    const { currentModalContent: traceLogBuffer } = this.props;\r\n    this.setState({\r\n      tracingDetails: traceLogBuffer.peekEntries()\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const { tracingDetails } = this.state;\r\n    return (\r\n      <div className=\"cba-modal-content\">\r\n        Tracing data not transferred to server yet:\r\n        <div className=\"detailsWrapper\">\r\n          <table className=\"details\">\r\n            <thead />\r\n            <tbody>\r\n              {[...tracingDetails].map(row => (\r\n                <tr key={`${row.entryId} - ${row.timestamp}`}>\r\n                  <td>{row.entryId}</td>\r\n                  <td>{row.timestamp}</td>\r\n                  <td>{row.type}</td>\r\n                  {Object.keys(row.details).map((key, rowIndex) => (\r\n                    <td key={key}>\r\n                      {`${key}:${TracingModalData.dumpAsStringAndTruncate(row.details[key])}`}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"cba-trace-modal-buttons\">\r\n          <button type=\"button\" onClick={this.truncateTraceLog}> Truncate Log </button>\r\n          <button type=\"button\" onClick={this.updateTraceLogState}> Refresh </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nTracingModalData.propTypes = {\r\n  currentModalContent: PropTypes.object.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\n\r\n\r\nexport default class ManageBookmarksData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.toBeDeleted = [];\r\n  }\r\n\r\n  okButtonClicked = () => {\r\n    const { content } = this.props;\r\n    const { pageAreaIndexPath, requestingComponentPath, testPresenter, runtime } = content;\r\n    console.info(`delete called for bookmarks ${this.toBeDeleted.join()}`)\r\n    this.toBeDeleted.forEach((value) => { CbaPageArea.dropBookmark(pageAreaIndexPath, value, 'contextMenu', requestingComponentPath, runtime); });\r\n    testPresenter.handleClose();\r\n  }\r\n\r\n  cancelButtonClicked = () => {\r\n    const { content } = this.props;\r\n    const { testPresenter } = content;\r\n    testPresenter.handleClose();\r\n  }\r\n\r\n  setBookmarkAsToBeDeleted = (bookmark) => {\r\n    this.toBeDeleted.push(bookmark);\r\n  }\r\n\r\n  render() {\r\n    const { content } = this.props;\r\n    const { pageAreaIndexPath, labelConfiguration, runtime } = content;\r\n    const { deleteColumnHeader, bookmarkColumnHeader, okButton, cancelButton } = labelConfiguration;\r\n\r\n    const bookmarks = CbaPageArea.getBookmarks(pageAreaIndexPath, runtime);\r\n    const toBeDeletedAccess = this.toBeDeleted;\r\n\r\n    const fontStyle = {\r\n      fontSize: '12px'\r\n    }\r\n\r\n    return (\r\n      <div className=\"cba-modal-content\" style={fontStyle}>\r\n        <div className=\"detailsWrapper\">\r\n          <table className=\"details\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"cbaColWidth15\">{deleteColumnHeader}</th>\r\n                <th className=\"cbaColWidth85\">{bookmarkColumnHeader}</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {bookmarks.map(bookmark => (\r\n                <tr key={bookmark.pageName}>\r\n                  <td className=\"cbaColWidth15\">\r\n                    <input\r\n                      id={bookmark.pageName}\r\n                      type=\"checkbox\"\r\n                      onChange={() => toBeDeletedAccess.push(bookmark.pageName)}\r\n                    />\r\n                  </td>\r\n                  <td className=\"cbaColWidth85\">\r\n                    {bookmark.pageUrl ? bookmark.pageUrl : \"\"}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"cba-bookmarks-modal-buttons\">\r\n          <button type=\"button\" onClick={this.okButtonClicked}>{okButton}</button>\r\n          <button type=\"button\" onClick={this.cancelButtonClicked}>{cancelButton}</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nManageBookmarksData.propTypes = {\r\n  content: PropTypes.shape(\r\n    {\r\n      pageAreaIndexPath: PropTypes.string.isRequired,\r\n      requestingComponentPath: PropTypes.string.isRequired,\r\n      runtime: PropTypes.object.isRequired,\r\n      labelConfiguration: PropTypes.shape(\r\n        {\r\n          windowTitle: PropTypes.string.isRequired,\r\n          deleteColumnHeader: PropTypes.string.isRequired,\r\n          bookmarkColumnHeader: PropTypes.string.isRequired,\r\n          okButton: PropTypes.string.isRequired,\r\n          cancelButton: PropTypes.string.isRequired,\r\n        }\r\n      ).isRequired,\r\n      testPresenter: PropTypes.object.isRequired,\r\n    }\r\n  ).isRequired\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from \"react-dialog\";\r\nimport ModalManager from \"./ModalManager\";\r\n\r\nconst ModalDialog = (props) => {\r\n  const width = 600;\r\n  const height = 500;\r\n  const centerPosition = {\r\n    x: window.innerWidth / 2 - width/2,\r\n    y: window.innerHeight / 2 - height/2\r\n  }\r\n  const { isOpen, currentModal, currentModalTitle, closeDialog } = props;\r\n  return (\r\n    <div className=\"cba-modal-container cba-modal cba-system-modal\">\r\n      {isOpen && (\r\n        <Dialog\r\n          title={currentModalTitle}\r\n          modal\r\n          isResizable\r\n          isDraggable\r\n          hasCloseIcon\r\n          closeOnEscape\r\n          width={width}\r\n          height={height}\r\n          position={centerPosition}\r\n          onClose={closeDialog}\r\n        >\r\n          <ModalManager currentModal={currentModal} {...props} />\r\n        </Dialog>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalDialog;\r\n\r\nModalDialog.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  currentModal: PropTypes.string.isRequired,\r\n  currentModalTitle: PropTypes.string.isRequired,\r\n  closeDialog: PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ScoringModalData from './ScoringModalData';\r\nimport StatemachineModalData from './StatemachineModalData';\r\nimport TracingModalData from './TracingModalData';\r\nimport ManageBookmarksData from './ManageBookmarksData';\r\nimport ModalDialog from './ModalDialog';\r\n\r\nexport { ModalDialog };\r\nexport const SCORING = 'Scoring';\r\nexport const TRACING = 'Tracing';\r\nexport const STATE_MACHINE = 'State Machine';\r\nexport const BOOKMARKS = 'ManageBookmarks';\r\n\r\nconst ModalManager = (props) => {\r\n  const { currentModalContent: content } = props;\r\n  switch (props.currentModal) {\r\n    case SCORING:\r\n      return <ScoringModalData {...props} />;\r\n    case TRACING:\r\n      return <TracingModalData {...props} />;\r\n    case STATE_MACHINE:\r\n      return <StatemachineModalData {...props} />;\r\n    case BOOKMARKS:\r\n      return <ManageBookmarksData content={content} />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default ModalManager;\r\n\r\nModalManager.propTypes = {\r\n  currentModalContent: PropTypes.object.isRequired,\r\n  currentModal: PropTypes.oneOf([SCORING, TRACING, STATE_MACHINE, BOOKMARKS]).isRequired\r\n}\r\n","import CbaPageArea from \"./CbaPageArea\";\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport { BOOKMARKS } from '../dialog/ModalManager';\r\nimport UserDefPathHelper from \"../state/UserDefPathHelper\";\r\nimport Utils from \"../utils/Utils\";\r\n\r\n/**\r\n * Helper methods to implement special actions triggered by clicks on buttons or menu items.\r\n */\r\nexport default class SpecialClickActionsHelper {\r\n\r\n  /**\r\n   * Cut the current selection to our global clipboard.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the calling display component instance.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static cut(triggeringType, requestingComponentPath, runtime) {\r\n    runtime.clipboardManager.cut(triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a cut operation currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static cutEnabled(runtime) {\r\n    return runtime.clipboardManager.cutEnabled();\r\n  }\r\n\r\n\r\n  /**\r\n   * Copy the current selection to our global clipboard.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the calling display component instance.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static copy(triggeringType, requestingComponentPath, runtime) {\r\n    runtime.clipboardManager.copy(triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a copy operation currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static copyEnabled(runtime) {\r\n    return runtime.clipboardManager.copyEnabled();\r\n  }\r\n\r\n  /**\r\n   * Paste the content of the global clipboard at the current caret position.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the calling display component instance.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static paste(triggeringType, requestingComponentPath, runtime) {\r\n    runtime.clipboardManager.paste(triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a paste operation currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static pasteEnabled(runtime) {\r\n    return runtime.clipboardManager.pasteEnabled();\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to the next task in the global test course.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static nextTask(runtime) {\r\n    runtime.taskManager.switchTaskNext();\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch to the next task currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static nextTaskEnabled(runtime) {\r\n    return runtime.taskManager.nextTaskAvailable();\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to the previous task in the global test course.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static backTask(runtime) {\r\n    runtime.taskManager.switchTaskPrevious();\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch to the previous task currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static backTaskEnabled(runtime) {\r\n    return runtime.taskManager.previousTaskAvailable();\r\n  }\r\n\r\n  /**\r\n   * Cancel the current task.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static cancelTask(runtime) {\r\n    runtime.taskManager.cancelTask();\r\n  }\r\n\r\n  /**\r\n   * Switch to fullscreen mode.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static startFullscreen(runtime) {\r\n    runtime.pageEventsObserver.handleFullScreen(true);\r\n    Utils.openFullScreen(document.documentElement);\r\n  }\r\n\r\n  /**\r\n   * Leave fullscreen mode.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static stopFullscreen(runtime) {\r\n    runtime.pageEventsObserver.handleFullScreen(false);\r\n    Utils.closeFullScreen();\r\n  }\r\n\r\n  /**\r\n   * Close the dialog window that is the parent of the given display component instance.\r\n   * \r\n   * The method silently ignores the call if the parent is not a dialog window.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the close operation.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static close(requestingComponentPath, runtime) {\r\n    const pageAreaType = IndexPathHelper.getPageAreaTypeFromPath(requestingComponentPath);\r\n    if (pageAreaType === 'main') {\r\n      console.log('Cannot close a non-dialog page area.', requestingComponentPath);\r\n      return;\r\n    }\r\n\r\n    const dialog = {\r\n      pageAreaName: IndexPathHelper.getPageAreaNameFromPath(requestingComponentPath),\r\n      type: pageAreaType\r\n    }\r\n\r\n    runtime.dialogPresenter.closeDialog(dialog);\r\n  }\r\n\r\n  /**\r\n   * Switch the parent CbaPageArea's page one page back in page history.\r\n   * \r\n   * The method silently ignores the call if there is no CbaPageArea in the component's ancestors path.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n    * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static back(requestingComponentPath, actionParam, runtime) {\r\n    SpecialClickActionsHelper.doHistoryMoveOnAncestor(requestingComponentPath, 'back', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch back in the page history currently? \r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static backEnabled(requestingComponentPath, actionParam, runtime) {\r\n    return SpecialClickActionsHelper.historyMoveEnabled(requestingComponentPath, 'back', actionParam, runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch the parent CbaPageArea's page one page forward in page history.\r\n   * \r\n   * The method silently ignores the call if there is no CbaPageArea in the component's ancestors path.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n    * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static forward(requestingComponentPath, actionParam, runtime) {\r\n    SpecialClickActionsHelper.doHistoryMoveOnAncestor(requestingComponentPath, 'forward', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch forward in the page history currently? \r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static forwardEnabled(requestingComponentPath, actionParam, runtime) {\r\n    return SpecialClickActionsHelper.historyMoveEnabled(requestingComponentPath, 'forward', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Switch the parent CbaPageArea's page to the home page in page history.\r\n   * \r\n   * The method silently ignores the call if there is no CbaPageArea in the component's ancestors path.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static home(requestingComponentPath, actionParam, runtime) {\r\n    SpecialClickActionsHelper.doHistoryMoveOnAncestor(requestingComponentPath, 'home', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Add a bookmark for the current page in the parent CbaPageArea. \r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {*} requestingComponentPath The index path of the display component requesting the operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static addBookmark(triggeringType, requestingComponentPath, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    if (pageAreaPath === undefined) {\r\n      console.log(`Cannot add bookmark: No receiving page area found. Receiver path in action: ${actionParam.receiverPath}, requesting component path: ${requestingComponentPath}`);\r\n      return;\r\n    }\r\n    CbaPageArea.addBookmark(pageAreaPath, triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Show the manage bookmark view for a CbaPageArea. \r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {*} requestingComponentPath The index path of the display component requesting the operation.\r\n   * @param {{receiverPath: String, windowTitle: String, deleteColumnHeader: String, bookmarkColumnHeader: String okButton: String, cancelButton: String}} actionParam \r\n   *  The action parameter, i.e. the optional receiver path and the labels to use in the bookmark management dialog.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static manageBookmark(triggeringType, requestingComponentPath, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    const triggerUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(requestingComponentPath, runtime);\r\n    const ownerUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(pageAreaPath, runtime)\r\n    if (pageAreaPath === undefined) {\r\n      console.log(`Cannot open manage bookmark dialog: No receiving page area found. Receiver path in action: ${actionParam.receiverPath}, requesting component path: ${requestingComponentPath}`);\r\n      return;\r\n    }\r\n\r\n    const dialogContent = {\r\n      pageAreaIndexPath: pageAreaPath,\r\n      requestingComponentPath,\r\n      runtime,\r\n      labelConfiguration: actionParam,\r\n      testPresenter: runtime.testPresenter\r\n    }\r\n\r\n    runtime.testPresenter.openDialog(BOOKMARKS, actionParam.windowTitle, dialogContent);\r\n\r\n    runtime.traceLogBuffer.reportEvent(\r\n      'Bookmark',\r\n      new Date(),\r\n      {\r\n        triggerType: triggeringType,\r\n        triggerIndexPath: requestingComponentPath,\r\n        triggerUserDefIdPath,\r\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggerUserDefIdPath),\r\n        operation: 'manage',\r\n        ownerIndexPath: pageAreaPath,\r\n        ownerUserDefIdPath,\r\n        ownerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(ownerUserDefIdPath)\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * Trigger a ScaleVariableInput increment value\r\n   * \r\n   * @param {String} attachedScale The attached ScaleVariable userDefinedId. \r\n   * @param {Number} incrementValue The value of increment.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static incrementScale(requestingComponentPath, attachedScale, incrementValue, runtime) {\r\n    const scaleValueInputPath =SpecialClickActionsHelper.buildScaleValueInput(requestingComponentPath, attachedScale);\r\n    runtime.eventEmitter.emit(`${scaleValueInputPath}-incrementScale`, incrementValue);\r\n  }\r\n\r\n  // private stuff -----------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Common kernel of the back/forward/home methods.\r\n   */\r\n  static doHistoryMoveOnAncestor(requestingComponentPath, historyMove, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    if (pageAreaPath === undefined) {\r\n      console.log(`Cannot switch ${historyMove} in page history: No receiving page area found. Receiver path in action: ${actionParam.receiverPath}, requesting component path: ${requestingComponentPath}`);\r\n      return;\r\n    }\r\n\r\n    // TODO: What about this asymmetry: Checking enablement via CbaPageArea but doing the switch via TaskManager.\r\n    //  We need the rerender call in the TaskManager.doHistoryMove method. Therefore we cannot use CbaPageArea.doHistoryMove here.\r\n    //  -> Should we add enablement checking to TaskManager? Or should we move the rendered call to CbaPageArea.soHistoryMove?\r\n    runtime.taskManager.doHistoryMove(pageAreaPath, historyMove);\r\n  }\r\n\r\n  /**\r\n   * Common kernel of the backEnabled/forwardEnabled methods.\r\n   */\r\n  static historyMoveEnabled(requestingComponentPath, historyMove, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    if (pageAreaPath === undefined) {\r\n      return false;\r\n    }\r\n    return CbaPageArea.historyMoveEnabled(pageAreaPath, historyMove, runtime);\r\n\r\n  }\r\n\r\n  /**\r\n   * Internal Helper: Calculate the path of the page area component a command refers to.\r\n   * \r\n   * @param {String} requestingComponentPath The component triggering the command. This provides a default path.\r\n   * @param {String} actionParamReceiverPath The path segment specified by the command configuration.\r\n   */\r\n  static getPageAreaPath(requestingComponentPath, actionParamReceiverPath) {\r\n    const pageAreaPath = actionParamReceiverPath === undefined\r\n      ? IndexPathHelper.findPageAreaAncestorPath(requestingComponentPath)\r\n      : IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(requestingComponentPath), actionParamReceiverPath);\r\n    return pageAreaPath;\r\n  }\r\n\r\n  static buildScaleValueInput(requestingComponentPath, attachedScale) {\r\n    const requestingComponentPathhWithoutLastPageSegment = IndexPathHelper.dropPageSegmentFromPath(requestingComponentPath);\r\n    return IndexPathHelper.appendPageSegmentsToPath(requestingComponentPathhWithoutLastPageSegment, attachedScale);\r\n  }\r\n\r\n}\r\n","import CommonActionsHelper from \"./CommonActionsHelper\";\nimport SpecialClickActionsHelper from \"./SpecialClickActionsHelper\";\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport CbaPageArea from \"./CbaPageArea\";\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport UserDefPathHelper from \"../state/UserDefPathHelper\";\n\n\n/**\n * Helper methods to transform context menu configuration structures.\n */\nexport default class MenuBuildHelper {\n\n  // ----- public API ----------------------------------------------------------------------\n\n  /**\n   * Transform the contextMenu configuration object from a display component configuration \n   * to a context menu configuration suitable for the MenuItemTree.\n   * \n   * @param {*} displayComponentContextMenuConfig The contextMenu configuration object of a display component.\n   * @param {*} event The click event that triggered the context menu.\n   * @param {String} indexPath The index path of the calling component.\n   * @param {String} defaultLinkReceiver The index path of the default link receiver (see CommaonActionsHelper.doPageSwitch()).\n   * @param {*} runtime The common runtime context structure.\n   */\n  static buildMenuTreeItemConfiguration(displayComponentContextMenuConfig, event, indexPath, defaultLinkReceiver, runtime) {\n    return {\n      entries: MenuBuildHelper.transformEntries(displayComponentContextMenuConfig.entries, indexPath, defaultLinkReceiver, runtime),\n      event\n    }\n  }\n\n\n  // ------ private stuff ------------------------------------------------------------------\n\n  static transformEntries(displayComponentEntries, indexPath, defaultLinkReceiver, runtime) {\n    const result = [];\n    displayComponentEntries.forEach((entry, index) => {\n      result.push(MenuBuildHelper.transformEntry(entry, indexPath, defaultLinkReceiver, runtime));\n    });\n    return result;\n  }\n\n  static transformEntry(displayComponentEntry, indexPath, defaultLinkReceiver, runtime) {\n    switch (displayComponentEntry.type) {\n      case 'separator':\n        return MenuBuildHelper.transformSeparatorEntry(displayComponentEntry);\n      case 'submenu':\n        return MenuBuildHelper.transformSubmenuEntry(displayComponentEntry, indexPath, defaultLinkReceiver, runtime);\n      case 'action':\n        return MenuBuildHelper.transformActionEntry(displayComponentEntry, indexPath, runtime);\n      case 'link':\n        return MenuBuildHelper.transformLinkEntry(displayComponentEntry, indexPath, defaultLinkReceiver, runtime);\n      case 'provided':\n        return MenuBuildHelper.transformProvidedEntry(displayComponentEntry, indexPath, runtime);\n      default:\n        console.error(`Invalid context menu configuration entry type: ${displayComponentEntry.type}`, displayComponentEntry);\n        return {\n          type: 'separator'\n        };\n    }\n  }\n\n  static transformSeparatorEntry(orignal) {\n    return {\n      type: 'separator'\n    };\n  }\n\n  static transformSubmenuEntry(original, indexPath, defaultLinkReceiver, runtime) {\n    return {\n      type: 'submenu',\n      label: original.label,\n      icon: original.icon,\n      disabled: false,\n      submenu: MenuBuildHelper.transformEntries(original.submenu, indexPath, defaultLinkReceiver, runtime)\n    }\n  }\n\n  static transformActionEntry(originalEntry, indexPath, runtime) {\n    return {\n      type: 'action',\n      label: originalEntry.label,\n      mouseOver: originalEntry.mouseOver,\n      icon: originalEntry.icon,\n      event: originalEntry.event,\n      action: MenuBuildHelper.buildActionMethod(originalEntry.action, originalEntry.actionParam, indexPath, runtime),\n      disabled: MenuBuildHelper.isActionDisabled(originalEntry.action, originalEntry.actionParam, indexPath, runtime, originalEntry.event)\n    }\n  }\n\n  static buildActionMethod(actionType, actionParam, indexPath, runtime) {\n    switch (actionType) {\n      case 'cut':\n        return () => { SpecialClickActionsHelper.cut('contextMenu', indexPath, runtime); };\n      case 'copy':\n        return () => { SpecialClickActionsHelper.copy('contextMenu', indexPath, runtime); };\n      case 'paste':\n        return () => { SpecialClickActionsHelper.paste('contextMenu', indexPath, runtime); };\n      case 'next_task':\n        return () => { SpecialClickActionsHelper.nextTask(runtime); };\n      case 'back_task':\n        return () => { SpecialClickActionsHelper.backTask(runtime); };\n      case 'cancel_task':\n        return () => { SpecialClickActionsHelper.cancelTask(runtime); };\n      case 'startFullscreen':\n        return () => { SpecialClickActionsHelper.startFullscreen(runtime); };\n      case 'stopFullscreen':\n        return () => { SpecialClickActionsHelper.stopFullscreen(runtime); };\n      case 'close':\n        return () => { SpecialClickActionsHelper.close(indexPath, runtime); };\n      case 'back':\n        return () => { SpecialClickActionsHelper.back(indexPath, actionParam, runtime); };\n      case 'forward':\n        return () => { SpecialClickActionsHelper.forward(indexPath, actionParam, runtime); };\n      case 'home':\n        return () => { SpecialClickActionsHelper.home(indexPath, actionParam, runtime); };\n      case 'addBookmark':\n        return () => { SpecialClickActionsHelper.addBookmark('contextMenu', indexPath, actionParam, runtime); };\n      case 'manageBookmark':\n        return () => { SpecialClickActionsHelper.manageBookmark('contextMenu', indexPath, actionParam, runtime); };\n      case 'none':\n        return () => { console.log(`Menu button without action activated: ${indexPath}`) };\n      default:\n        console.error(`Unknown action type: ${actionType}`);\n        return () => { console.error(`Cannot process unknown action type: ${actionType}`) };\n    }\n  }\n\n  static isActionDisabled(actionType, actionParam, indexPath, runtime, event) {\n    switch (actionType) {\n      case 'cut':\n        return !SpecialClickActionsHelper.cutEnabled(runtime);\n      case 'copy':\n        return !SpecialClickActionsHelper.copyEnabled(runtime);\n      case 'paste':\n        return !SpecialClickActionsHelper.pasteEnabled(runtime);\n      case 'next_task':\n        return !SpecialClickActionsHelper.nextTaskEnabled(runtime);\n      case 'back_task':\n        return !SpecialClickActionsHelper.backTaskEnabled(runtime);\n      case 'back':\n        return !SpecialClickActionsHelper.backEnabled(indexPath, actionParam, runtime);\n      case 'forward':\n        return !SpecialClickActionsHelper.forwardEnabled(indexPath, actionParam, runtime);\n      case 'none':\n        return event === undefined;\n      default:\n        return false;\n    }\n  }\n\n  static transformLinkEntry(originalEntry, indexPath, defaultLinkReceiver, runtime) {\n    return {\n      type: 'action',\n      label: originalEntry.label,\n      mouseOver: originalEntry.mouseOver,\n      icon: originalEntry.icon,\n      event: originalEntry.event,\n      action: () => { CommonActionsHelper.doPageSwitch(originalEntry.link, runtime, defaultLinkReceiver, indexPath); },\n      disabled: false\n    }\n  }\n\n  static transformProvidedEntry(originalEntry, indexPath, runtime) {\n    const pageAreaPath = originalEntry.providerParam === undefined\n      ? IndexPathHelper.findPageAreaAncestorPath(indexPath)\n      : IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(indexPath), originalEntry.providerParam);\n    const bookmarks = CbaPageArea.getBookmarks(pageAreaPath, runtime);\n    const menuEntries = bookmarks.map((pageEntry) => {\n      const pageLabel = pageEntry.pageUrl ? pageEntry.pageUrl : \"\";\n      const pageAreaTab = pageEntry.pageTab === undefined ? undefined : {\n        name: pageEntry.pageTab,\n        image: pageEntry.pageImage\n      }\n\n      return {\n        type: 'action',\n        label: pageLabel,\n        mouseOver: `Switch browser to ${pageLabel}`,\n        icon: pageEntry.pageImage,\n        disabled: false,\n        action: () => {\n          // Note: Delegating the trace operation makes sure that the trace timestamp is taken when executing the menu action: \n          MenuBuildHelper.trace(indexPath, pageAreaPath, pageEntry.pageName, pageEntry.pageUrl, pageEntry.pageTab, runtime);\n          runtime.taskManager.switchEmbeddedPage(pageAreaPath, pageEntry.pageName, pageEntry.pageUrl, pageAreaTab);\n        }\n      }\n    });\n\n    return {\n      type: 'dynamicItems',\n      provider: () => menuEntries,\n      providerParam: undefined\n    }\n  }\n\n  /**\n * Create a trace log entry for a bookmark select action\n * \n * @param {String} triggeringIndexPath The index path of the triggering display component instance.\n * @param {String} ownerIndexPath The index path of the display component owining the bookmarks.\n * @param {String} pageName The name pf the page of the bookmark.\n * @param {String} pageUrl The URL pf the page of the bookmark.\n * @param {String} tab The browser tab the bookmark operates on.\n * @param {*} runtime The common runtime context structure.\n */\n  static trace(triggeringIndexPath, ownerIndexPath, pageName, pageUrl, tab, runtime) {\n    const triggeringUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(triggeringIndexPath, runtime);\n    const ownerUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(ownerIndexPath, runtime);\n\n    runtime.traceLogBuffer.reportEvent(\n      'Bookmark',\n      new Date(),\n      {\n        triggerType: 'contextMenu',\n        triggerIndexPath: triggeringIndexPath,\n        triggerUserDefIdPath: triggeringUserDefPath,\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggeringUserDefPath),\n        operation: 'select',\n        ownerIndexPath,\n        ownerUserDefIdPath: ownerUserDefPath,\n        ownerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(ownerUserDefPath),\n        pageName,\n        pageUrl,\n        tab\n      }\n    );\n  }\n\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Dialog from 'react-dialog';\nimport CbaInterpreter from '../components/CbaInterpreter';\nimport RenderingHelper from '../components/RenderingHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\n\nexport default class DialogPresenter extends Component {\n\n  // NOTE: The DialogPresenter has no index path. Therefore it cannot register at the RenderingHelper\n  // via onMount, onUnmount, onReceiveProps. You cannot use RenderingHelper.triggerRenderingViaPath(...) either.\n  static buildDialogIndexPath(taskPath, dialog) {\n    return IndexPathHelper.appendPageSegmentToPathRoot(taskPath, dialog.type, dialog.pageAreaName, IndexPathHelper.buildPageSegment(dialog.pageName));\n  }\n\n  static buildDialogRefKey(dialog) {\n    const { pageAreaType, pageAreaName, pageName } = dialog;\n    return `/type=${pageAreaType}/areaName=${pageAreaName}/pageName=${pageName}`;\n  }\n\n  static isDialogParentInPath(path) {\n    if (path !== undefined) {\n      const currentPageAreaType = IndexPathHelper.getPageAreaTypeFromPath(path);\n      return currentPageAreaType !== undefined && (currentPageAreaType === \"dialog\" || currentPageAreaType === \"modal\");\n    }\n\n    return false;\n  }\n\n  static closeParentDialogFromPath(runtime, path) {\n    if (DialogPresenter.isDialogParentInPath(path)) {\n      const currentPageAreaType = IndexPathHelper.getPageAreaTypeFromPath(path);\n      const currentPageAreaName = IndexPathHelper.getPageAreaNameFromPath(path);\n      const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n      runtime.presenterStateManager.hideDialog(currentPageAreaName, currentPageAreaType, currentTaskPath, runtime);\n    } else {\n      console.warn(\"Dialog is not in path - \", path);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    // TODO: CKI Is the self registering a good idea? Why don't we use self registering for other global components?\n    props.runtime.dialogPresenter = this;\n  }\n\n  /*\n  * function to get all dialogs from the presenter state manager\n  */\n  getDialogsFromPresenterStateManager = () => {\n    const { runtime, findPageForPageName } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n    const taskState = runtime.presenterStateManager.getTaskState(currentTaskPath);\n    const filteredDialogs = taskState.dialogs.filter(d => d.visible)\n    const dialogs = this.checkAndSetFocus(filteredDialogs);\n\n    return dialogs.map((dialog) => {\n      const page = findPageForPageName(dialog.pageName, runtime);\n      const { width: pageWidth, height: pageHeight } = page.content.config.position;\n\n      // if no position center object\n      if (!dialog.position) {\n        dialog.position = {\n          x: window.innerWidth / 2 - pageWidth / 2,\n          y: window.innerHeight / 2 - pageHeight / 2,\n        }\n      }\n\n      return {\n        type: dialog.type,\n        position: dialog.position,\n        focused: dialog.focused,\n        pageAreaName: dialog.pageAreaName,\n        pageName: dialog.pageName,\n        visible: dialog.visible\n      }\n    });\n  }\n\n  checkAndSetFocus = (dialogs) => {\n    for (let index = 0; index < dialogs.length; index += 1) {\n      if (dialogs[index].focused) return dialogs;\n      if (index === dialogs.length - 1) {\n        dialogs[index].focused = true;\n      }\n    }\n\n    return dialogs;\n  }\n\n  handleFocusAndDrag = (event, dialog) => {\n    const { runtime } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n    // get new position.\n    // TODO: support separate namespaces for dialog/modal:\n    const position = this.getCurrentDialogPosition(dialog);\n\n    // update dialog state in task state and rerender\n    runtime.presenterStateManager.updatePositionAndFocusDialog(dialog.pageAreaName, dialog.type, currentTaskPath, position, runtime);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  getCurrentDialogPosition = (dialog) => {\n    /* Dependent on the use of transform by react-dialog (3rd party library) - could break */\n    // eslint-disable-next-line\n    const dialogInstance = ReactDOM.findDOMNode(this.refs[DialogPresenter.buildDialogRefKey(dialog)]).getElementsByClassName(\"ui-dialog\")[0];\n    const rawTransform = dialogInstance.style.transform.match(/\\(([^)]+)\\)/)[1];\n    const transformValue = rawTransform.split(\",\");\n\n    const x = parseInt(transformValue[0], 10);\n    const y = parseInt(transformValue[1], 10);\n\n    return {\n      x,\n      y,\n    };\n  }\n\n  buildDialogs = () => {\n    const { runtime, findPageForPageName } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n    return this.getDialogsFromPresenterStateManager().map((dialog, index) => {\n      const isModal = dialog.type === \"modal\";\n      const page = findPageForPageName(dialog.pageName, runtime);\n      const orientation = page.orientation ? \"right\" : \"left\";\n      const { width: pageWidth, height: pageHeight } = page.content.config.position; // maybe make top level height and width accesible to page obj?\n      const dialogPath = DialogPresenter.buildDialogIndexPath(currentTaskPath, dialog);\n\n      return (\n        <div\n          key={DialogPresenter.buildDialogRefKey(dialog)}\n          className={`${isModal ? \"cba-modal\" : \"cba-dialog\"} ${dialog.focused ? \"focused\" : \"\"} ${!page.closable ? \"not-closable\" : \"\"}`}\n          onClick={(event) => { this.handleFocusAndDrag(event, dialog) }}\n        >\n          <Dialog\n            // title={props.currentModal} TODO: add title when merging with other debug modals\n            modal={isModal}\n            isResizable={false}\n            isDraggable={page.closable}\n            hasCloseIcon={page.closable}\n            closeOnEscape={page.closable}\n            width={pageWidth}\n            height={pageHeight + 25} // adding height of topbar\n            onClose={() => this.closeDialog(dialog)}\n            position={dialog.position}\n            ref={DialogPresenter.buildDialogRefKey(dialog)}\n          >\n            <div className=\"dialog-page\">\n              {/* @Dejan TODO: replace with Modal Manager and move this logic to Modal Manager when merging  */}\n              <CbaInterpreter runtime={runtime} path={dialogPath} config={page.content} orientation={orientation} />\n            </div>\n          </Dialog>\n        </div>\n      )\n    })\n  }\n\n  closeDialog = (dialog) => {\n    const { runtime } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n    runtime.presenterStateManager.hideDialog(dialog.pageAreaName, dialog.type, currentTaskPath, runtime);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  closeSpecificPageDialog = (pageName) => {\n    const { runtime } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n    runtime.presenterStateManager.hideSpecificPageDialog(pageName, currentTaskPath, runtime);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  render() {\n    return (\n      <div>\n        {this.buildDialogs()}\n      </div>\n    )\n  }\n\n}\n\n\nDialogPresenter.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  findPageForPageName: PropTypes.func.isRequired,\n}\n","import throttle from 'lodash.throttle';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport MenuBuildHelper from \"./MenuBuildHelper\";\r\nimport DialogPresenter from '../dialog/DialogPresenter';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\n\r\n/**\r\n * Helper methods that factor out code patterns commonly used by many display components.\r\n */\r\nexport default class CommonActionsHelper {\r\n\r\n  /**\r\n   * Do the usual processing of an onClick event on a display component:\r\n   *  - Trace a user interaction.\r\n   *  - Do a page switch according to the link specification.\r\n   *  - Send a standard state machine event.\r\n   * w\r\n   * @param {*} event The onClick event triggering the processing.\r\n   * @param {*} traceValues Values to add to the on click trace log (may be undefined if there is nothing to add).\r\n   * @param {*} component The diplay component instance.\r\n   */\r\n  static doStandardOnClick(event, traceValues, component) {\r\n    const { config, path, runtime } = component.props;\r\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path, traceValues, event, runtime);\r\n    CommonActionsHelper.doPageSwitchForComponent(component);\r\n    CommonActionsHelper.sendStandardEvent(config, runtime);\r\n  }\r\n\r\n  /**\r\n   * Trace user interaction of an onClick event on a frozen display component:\r\n   *\r\n   * @param {String} path The Index Path of the display component instance.\r\n   * @param {*} runtime The common runtime object.\r\n   * @param {*} componentTypeValue The component type value to be traced.\r\n   */\r\n  static doStandardOnFrozenInteraction(path, runtime, componentTypeValue) {\r\n    CommonActionsHelper.traceUserInteraction(\r\n      'FrozenComponentInteraction', path,\r\n      {\r\n        componentType: componentTypeValue,\r\n      },\r\n      undefined, undefined, runtime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Do the basic processing of an onClick event on a display component:\r\n   *  - Start a new user interaction as far as replay is concerned.\r\n   *  - Stop propagation of the event to parent components.\r\n   *  - Deregister other current selection provider and insert position at the clipboard manager.\r\n   * \r\n   * @param {*} event The onClick event triggering the processing.\r\n   * @param {String} path The Index Path of the display component instance.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static doBasicOnClick(event, path, runtime) {\r\n    runtime.replayStepMonitor.incrementReplayStep();\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n    CommonActionsHelper.signalFocusChangeToClipboardManager(path, runtime);\r\n  }\r\n\r\n  /**\r\n   * Stop the propagation of the given event.\r\n   * \r\n   * @param {*} event \r\n   */\r\n  static stopEventPropagation(event) {\r\n    if (event !== undefined) {\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deregister other components as selection provider and insert position in the clipboard manager.\r\n   * \r\n   * @param {String} path The Index Path of the component. \r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static signalFocusChangeToClipboardManager(path, runtime) {\r\n    runtime.clipboardManager.registerFocus(path);\r\n  }\r\n\r\n  /**\r\n   * Signal a user interaction to the user interaction counter and the trace log using the trace log config structure.\r\n   * \r\n   * @param {*} config The component's configuration object containing the trace config structure.\r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static traceUserInteractionPerConfig(config, path, values, browserEvent, runtime) {\r\n    CommonActionsHelper.traceUserInteractionPerTraceConfig(config.trace, path, values, browserEvent, runtime);\r\n  }\r\n\r\n  /**\r\n   * Signal a user interaction to the user interaction counter and the trace log using the trace log config structure.\r\n   * \r\n   * @param {*} traceConfig The trace configuration structure from the component's configuration object.\r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static traceUserInteractionPerTraceConfig(traceConfig, path, values, browserEvent, runtime) {\r\n    if (traceConfig.skipTrace === undefined || traceConfig.skipTrace !== true) {\r\n      const extendedValues = {};\r\n      CommonActionsHelper.extendTraceDetailsObject(extendedValues, traceConfig.addOn);\r\n      CommonActionsHelper.extendTraceDetailsObject(extendedValues, values);\r\n\r\n      CommonActionsHelper.traceUserInteraction(traceConfig.type, path, extendedValues, browserEvent, undefined, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Signal a user interaction to the user interaction counter and the trace log.\r\n   * \r\n   * @param {string} eventType The type of event to log in the trace log.\r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {{type: String, value: String}} continuingInteractionKey The key used to identify a user interaction that might trigger \r\n   *  several consecutive calls but should be counted as a single interaction only. \r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static traceUserInteraction(eventType, path, values, browserEvent, continuingInteractionKey, runtime) {\r\n    const details = CommonActionsHelper.buildTraceLogDetails(path, values, browserEvent, runtime);\r\n    const timestamp = new Date();\r\n    runtime.incidentsAccumulator.userInteraction(timestamp.getTime(), continuingInteractionKey, runtime);\r\n    runtime.traceLogBuffer.reportEvent(eventType, timestamp, details);\r\n  }\r\n\r\n  /**\r\n   * Signal a user scroll interaction to the user interaction counter and the trace log.\r\n   * Function auto throttles itself to 2 calls per second\r\n   * \r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} runtime The common runtime object.\r\n   * \r\n   * @returns {Function(event)} Function must be added to the onScroll event of a Component\r\n   */\r\n  static traceUserScroll(path, runtime, xPath, isXPageFirst) {\r\n    let lastScrollValue;\r\n    let currentScrollValue\r\n    let lastOrientationValue;\r\n    let currentOrientationValue;\r\n    const throttleOptions = {\r\n      leading: false\r\n    }\r\n\r\n    const throttleTraceScrollFunction = throttle(TraceLogHelper.traceScrollWrap(), 500, throttleOptions);\r\n\r\n    return (event) => {\r\n      event.stopPropagation();\r\n      lastScrollValue = currentScrollValue;\r\n      currentScrollValue = TraceLogHelper.getScrollDataFromEvent(event);\r\n\r\n      let tracePath;\r\n\r\n      // xpage case (cannot assign a onScroll function. on scroll is captured at a higher level and computes path based on which comes first.)\r\n      if (xPath) {\r\n        const isScrollOnPane1 = event.target.className.includes(\"Pane1\");\r\n        if (isXPageFirst) {\r\n          tracePath = isScrollOnPane1 ? xPath : path;\r\n        } else {\r\n          tracePath = isScrollOnPane1 ? path : xPath;\r\n        }\r\n      } else {\r\n        tracePath = path;\r\n      }\r\n\r\n      lastOrientationValue = currentOrientationValue;\r\n      currentOrientationValue = TraceLogHelper.computeScrollOrientation(currentScrollValue, lastScrollValue);\r\n\r\n      if (lastOrientationValue && lastOrientationValue.direction && (lastOrientationValue.direction !== currentOrientationValue.direction)) {\r\n        TraceLogHelper.traceScroll(tracePath, runtime, currentScrollValue, currentOrientationValue);\r\n      }\r\n\r\n      throttleTraceScrollFunction(currentScrollValue, currentOrientationValue, tracePath, runtime);\r\n    };\r\n\r\n  }\r\n\r\n  /**\r\n   * Build the details structure for trace log entries triggered by display components.\r\n   * \r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static buildTraceLogDetails(path, values, browserEvent, runtime) {\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime);\r\n    const details = {\r\n      indexPath: path,\r\n      userDefIdPath,\r\n      userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\r\n    };\r\n    CommonActionsHelper.addMouseEventDetails(browserEvent, details);\r\n    CommonActionsHelper.extendTraceDetailsObject(details, values);\r\n    return details;\r\n  }\r\n\r\n  /**\r\n   * Extend the given oldValues trace details object with the values given. \r\n   * \r\n   * @param {*} detailsObject The trace details object to be extended.\r\n   * @param {*} valuesToAdd The attributes to add to the trace details object.\r\n   */\r\n  static extendTraceDetailsObject(detailsObject, valuesToAdd) {\r\n    if (valuesToAdd !== undefined) {\r\n      Object.keys(valuesToAdd).forEach((attribute) => {\r\n        detailsObject[attribute] = valuesToAdd[attribute];\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add properties specific to MouseEvents to the given trace log details object.\r\n   * \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that might be a MouseEvent.\r\n   * @param {*} traceDetails The trace log details where we should add the MouseEvent attribute values to.\r\n   */\r\n  static addMouseEventDetails(browserSideEvent, traceDetails) {\r\n    if (browserSideEvent !== undefined) {\r\n      traceDetails.clientX = browserSideEvent.clientX;\r\n      traceDetails.clientY = browserSideEvent.clientY;\r\n      traceDetails.pageX = browserSideEvent.pageX;\r\n      traceDetails.pageY = browserSideEvent.pageY;\r\n      traceDetails.screenX = browserSideEvent.screenX;\r\n      traceDetails.screenY = browserSideEvent.screenY;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Build a trace log additional value object for the 'old selected' status \r\n   * to use as values parameter in the traceUserInteraction method.\r\n   * \r\n   * @param {*} pathState The component's state to extract the selected value from.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static buildOldSelectedTraceLogValueObject(selectedState) {\r\n    return {\r\n      oldSelected: selectedState\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the standard or alternate event according to the 'selected' state of the component instance. \r\n   * \r\n   * @param {*} selectedState The 'selected' state of the component instance.\r\n   * @param {*} props The component's configuration object.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static sendStandardOrAlternateEvent(selectedState, props, runtime) {\r\n    if (selectedState) {\r\n      CommonActionsHelper.sendAlternateEvent(props, runtime);\r\n    } else {\r\n      CommonActionsHelper.sendStandardEvent(props, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the standard state machine event according to the display component's configuration.\r\n   * \r\n   * @param {*} props The component's configuration object.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static sendStandardEvent(props, runtime) {\r\n    const event = props.event.standard;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a standard event using only the name of the event\r\n   * \r\n   * @param {\"String\"} name the name of the event\r\n   * @param {*} runtime the common runtime object\r\n   */\r\n  static sendEvent(name, runtime) {\r\n    if (name !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(name);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the alternate state machine event according to the display component's configuration.\r\n   * \r\n   * @param {*} props The component's configuration object.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static sendAlternateEvent(props, runtime) {\r\n    const event = props.event.alternate === undefined ? props.event.standard : props.event.alternate;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the state machine event according to the display component's configured onFocusIn event.\r\n   * \r\n   * @param {*} component The display component instance.\r\n   */\r\n  static doStandardOnFocus(component) {\r\n    const { props } = component;\r\n    const { config, runtime } = props;\r\n\r\n    const event = config.event.onFocusIn;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the state machine event according to the display component's configured onFocusOut event.\r\n   * \r\n   * @param {*} component The display component instance.\r\n   */\r\n  static doStandardOnBlur(component) {\r\n    const { props } = component;\r\n    const { config, runtime } = props;\r\n\r\n    const event = config.event.onFocusOut;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the page switch for the specified display component instance.\r\n   * @param {*} component \r\n   */\r\n  static doPageSwitchForComponent(component) {\r\n    const defaultLinkReceiver = CommonActionsHelper.getDefaultLinkReceiver(component);\r\n    CommonActionsHelper.doPageSwitch(component.props.config.link, component.props.runtime, defaultLinkReceiver, component.props.path);\r\n  }\r\n\r\n\r\n  /**\r\n   * Perform the page switch specified in the given link specification.\r\n   * \r\n   * @param {*} link The link specification object from the display component's configuration.\r\n   * @param {*} runtime The common runtime object.\r\n   * @param {*} defaultReceiver An optional receiving page area to be specified if the display component sits in a page that is embedded in a page area that catches page switches.\r\n   * @param {*} path Path of the component requesting the page switch\r\n   */\r\n  static doPageSwitch(link, runtime, defaultReceiver, path) {\r\n    const targetReceiver = CommonActionsHelper.buildTargetReceiver(link, defaultReceiver, path);\r\n    const targetPage = link.page;\r\n    const conditionalLink = link.conditional;\r\n    const { pageUrl, historyMove } = link;\r\n    if (targetPage !== undefined || conditionalLink !== undefined || (targetReceiver !== undefined && historyMove !== undefined)) {\r\n      if (path !== undefined && DialogPresenter.isDialogParentInPath(path)) {\r\n        DialogPresenter.closeParentDialogFromPath(runtime, path);\r\n      }\r\n\r\n      runtime.taskManager.switchPage(\r\n        targetPage,\r\n        conditionalLink,\r\n        pageUrl,\r\n        link.pageAreaType == null ? IndexPathHelper.getPageAreaTypeFromPath(path) : link.pageAreaType,\r\n        link.pageAreaName == null ? IndexPathHelper.getPageAreaNameFromPath(path) : link.pageAreaName,\r\n        targetReceiver,\r\n        link.receiverTab,\r\n        link.historyMove,\r\n        undefined\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal helper method: Get position of the top level component in the page given by the page's name.\r\n   */\r\n  static getTopComponentPosition(pageName, pageConfigurationsManager) {\r\n    const targetPageConfig = pageConfigurationsManager.findPage(pageName);\r\n    if (targetPageConfig === undefined) {\r\n      console.error(`Could not find configuration for page: ${pageName}`);\r\n      return undefined;\r\n    }\r\n    const { content } = targetPageConfig;\r\n    if (content === undefined) {\r\n      console.error(`Could not find content in configuration of page ${pageName}: ${targetPageConfig}`);\r\n      return undefined;\r\n    }\r\n    const { config } = content;\r\n    if (config === undefined) {\r\n      console.error(`Could not find config for content in page ${pageName}: ${content}`);\r\n      return undefined;\r\n    }\r\n    const { position } = targetPageConfig.content.config;\r\n    return {\r\n      x: position.x,\r\n      y: position.y\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the default link receiver from the state of the display component instance.\r\n   * \r\n   * @param {*} component The display component instance.\r\n   */\r\n  static getDefaultLinkReceiver(component) {\r\n    if (component.props === undefined) {\r\n      console.error(`Component without props detected: ${component}`);\r\n      return undefined;\r\n    }\r\n    const pathState = ComponentStateHelper.getState(component);\r\n    return StateAttributeAccess.extractDefaultLinkReceiver(pathState);\r\n  }\r\n\r\n\r\n  /**\r\n   * Open the context menu for the calling display component instance. \r\n   * \r\n   * @param {*} component The calling display component instance.\r\n   * @param {MouseEvent} event The mouse event opening the context menu.\r\n   */\r\n  static doContextMenuOpen(component, event) {\r\n    const { props } = component;\r\n\r\n    if (props === undefined || props.runtime === undefined\r\n      || props.config === undefined) {\r\n      console.error(\"Cannot open context menu for component.\", props);\r\n      return;\r\n    }\r\n\r\n    const { runtime, config, path: indexPath } = props;\r\n    const { contextMenu } = config;\r\n\r\n    if (contextMenu !== undefined) {\r\n      event.stopPropagation();\r\n      runtime.contextMenu.openMenuItemTreeWithDynamicConfig(\r\n        MenuBuildHelper.buildMenuTreeItemConfiguration(\r\n          contextMenu,\r\n          event,\r\n          indexPath,\r\n          CommonActionsHelper.getDefaultLinkReceiver(component),\r\n          runtime\r\n        )\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Register or deregister the current selection of a textarea or input tag for cut&paste due to a click or select event.\r\n   * \r\n   * Firefox and Chrome differ a bit with selection data in the events and events sequence when dropping a selection. \r\n   * Fortunately both send the proper selection data with the last event triggered by each selecting or deselecting action.\r\n   * Therefore we have to process the selected text in onClick and onSelection. \r\n   * \r\n   * @param {*} path The index path of the display component instance.\r\n   * @param {*} event The event that triggers the selection processing.\r\n   * @param {*} readOnly Is the component read only, i.e. it cannot do a 'cut' operation.\r\n   * @param {*} cutCallback The method to call at an actual cut operation to replace the selected text.\r\n   * @param {*} cutCallbackObj The component instance on which will be applied the 'cut' operation.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static processSelectedTextForCutAndPaste(path, event, readOnly, cutCallback, cutCallbackObj, runtime) {\r\n    const { selectionStart, selectionEnd, value } = event.target;\r\n    const selectedText = `${value.substring(selectionStart, selectionEnd)}`;\r\n    if (selectedText === undefined || selectedText.length === 0) {\r\n      runtime.clipboardManager.deregisterSelection(path);\r\n    } else {\r\n      runtime.clipboardManager.registerSelection(\r\n        path,\r\n        (drop) => {\r\n          if (drop && !readOnly && cutCallback !== undefined) {\r\n            cutCallback(cutCallbackObj, selectionStart, selectionEnd, '');\r\n          }\r\n          return selectedText;\r\n        },\r\n        () => readOnly\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------------- private stuff -------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the target receiver from link and defaultReceiver:\r\n   * \r\n   * - If no default receiver is given (i.e. no intercepting embedding page area) just use the receiver given in the link.\r\n   * - If a default receiver is given and the link specifies a different top level page area than the default receiver then \r\n   *   return the receiver of the link: The embedding page area does not intercept a page setting in a foreign top level page area.\r\n   * - If a default receiver is given and the top level page area specified by the link is the same as the top level page area\r\n   *   of the defaultReceiver (i.e. the intercepting embedding page area) concatenate receiver of intercepting page area and link:  \r\n   *   The receiver in the link becomes relative to the intercepting embedding page. (If the link specifies no specific receiver\r\n   *   just use the default receiver instead of concatenating both: The link sets the page embedded in the embedding page area itself.)\r\n   */\r\n  static buildTargetReceiver(link, defaultReceiver, pathOfLinkRequestor) {\r\n    let targetReceiver;\r\n    if (defaultReceiver === undefined) {\r\n      targetReceiver = link.receiver;\r\n    } else if (CommonActionsHelper.linkTargetsOtherPageArea(link, pathOfLinkRequestor)) {\r\n      targetReceiver = link.receiver;\r\n    } else if (link.receiver === undefined) {\r\n      targetReceiver = defaultReceiver;\r\n    } else {\r\n      targetReceiver = IndexPathHelper.appendPageSegmentsToPath(defaultReceiver, link.receiver);\r\n    }\r\n    return targetReceiver;\r\n  }\r\n\r\n  /**\r\n   * Internal helper: Does the given link target the page area of the link requesting component?\r\n   */\r\n  static linkTargetsOtherPageArea(link, pathOfLinkRequestor) {\r\n    if (link.pageAreaName === undefined || link.pageAreaType === undefined) {\r\n      // link does not specifiy a proper page area of its own -> assume page area of calling component is to be used\r\n      return false;\r\n    }\r\n    return link.pageAreaType !== IndexPathHelper.getPageAreaTypeFromPath(pathOfLinkRequestor) || link.pageAreaName !== IndexPathHelper.getPageAreaNameFromPath(pathOfLinkRequestor);\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from '../../state/IndexPathHelper';\r\n\r\n/**\r\n * Helper methods used by CbaRichTextField \r\n * to calculate positions in the Draft.js editor state \r\n * taking 'content modifiers' into account.\r\n */\r\nexport default class PositionCalculationHelper {\r\n\r\n  /**\r\n   * Positions (block key and character offset) as given in the CbaRichTextField configuration \r\n   * are valid as long a no content modifiers are applied to the editor state. \r\n   * As soon as content modifiers change the block content of the editor state one has to \r\n   * apply an offset to obtain positions that take the modifications done by the \r\n   * content modifiers into account.\r\n   * \r\n   * The method calculates the actual position for the given modifier in the given editor state.\r\n   * \r\n   * @param {*} targetModifier The static configuration (from the contentModifiers list in the static configuration of the rich text field) of the content modifier to calculate the actual target position for.\r\n   * @param {[*]} configBlocks The text blocks as specified in the static configuration of the rich text field.\r\n   * @param {{}} blockKeyToIndexMap A map from each block key to its index in the configBlocks array.\r\n   * @param {[*]} configContentModifiers The content modifiers list in the static configuration of the rich text field.\r\n   * @param {{}} contentModifiersInEditorState The extract of the modifications implanted by the content modifiers in the current editor state.\r\n   * @param {string} contentModifierParentPath The parent path used to calculate the content modifiers' path ids with.\r\n   * @param {*} editorState The current editor state in which the calculated actual target position should be valid.\r\n   */\r\n  static calculateActualPosition(\r\n    targetModifier,\r\n    configBlocks,\r\n    blockKeyToIndexMap,\r\n    configContentModifiers,\r\n    contentModifiersInEditorState,\r\n    contentModifierParentPath,\r\n    editorState\r\n  ) {\r\n    const actualPositionOffset = PositionCalculationHelper.calculateCurrentPositionOffset(\r\n      targetModifier,\r\n      configBlocks,\r\n      blockKeyToIndexMap,\r\n      configContentModifiers,\r\n      contentModifiersInEditorState,\r\n      contentModifierParentPath\r\n    );\r\n    const modifierPosition = targetModifier.config.position;\r\n    const actualBlockKey = PositionCalculationHelper.calculateBlockKey(modifierPosition.blockKey, actualPositionOffset.blockOffset, editorState);\r\n    if (actualBlockKey === undefined) {\r\n      console.error(`Actual block key undefined for ${targetModifier.config.userDefinedId}`);\r\n    }\r\n    return {\r\n      blockKey: actualBlockKey,\r\n      offset: modifierPosition.offset + actualPositionOffset.characterOffset\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * The method calculates the block key for the requested block (specified by the start block key and a block offset) \r\n   * in the given editor state. \r\n   * \r\n   * @param {*} startBlockKey The block key of the block the given block offset is applied to.\r\n   * @param {*} blockOffset The block offset to apply to the startBlockKey.\r\n   * @param {*} editorState The editor state containing the targeted block.\r\n   */\r\n  static calculateBlockKey(startBlockKey, blockOffset, editorState) {\r\n    const contentState = editorState.getCurrentContent();\r\n    let movedBlockKey = startBlockKey;\r\n    let offsetCounter;\r\n    for (offsetCounter = 0; offsetCounter < blockOffset; offsetCounter+=1) {\r\n      movedBlockKey = contentState.getKeyAfter(movedBlockKey);\r\n    }\r\n    return movedBlockKey;\r\n  }\r\n\r\n\r\n  /**\r\n   * The method calculates the necessary offset (block offset and character offset)\r\n   * to be applied to a given 'config' position to obtain the 'actual' position in the\r\n   * editor state.\r\n   * \r\n   * @param {*} targetModifier The content modifier (in the contentModifiers list) to calculate the actual target position for.\r\n   * @param {[*]} configBlocks The text blocks as specified in the configuration.\r\n   * @param {{}} blockKeyToIndexMap A map from each block key to its index in the configBlocks array.\r\n   * @param {[*]} configContentModifiers The content modifiers specified in the configuration.\r\n   * @param {{}} contentModifiersInEditorState The activation status of the content modifiers in the current editor state.\r\n   * @param {string} contentModifierParentPath The parent path used to calculate the content modifiers' path ids with.\r\n   */\r\n  static calculateCurrentPositionOffset(\r\n    targetModifier,\r\n    configBlocks,\r\n    blockKeyToIndexMap,\r\n    configContentModifiers,\r\n    contentModifiersInEditorState,\r\n    contentModifierParentPath\r\n  ) {\r\n\r\n    // Only currently activated modifiers and modifiers in the our target block and before our target position can affect our calculations:\r\n    const targetModifierBlockKey = targetModifier.config.position.blockKey;\r\n    const relevantModifiers = configContentModifiers.filter((modifier, index, all) => {\r\n      const stateInEditorState = PositionCalculationHelper.getModifierStateInEditorState(index, contentModifierParentPath, contentModifiersInEditorState);\r\n      return (PositionCalculationHelper.isEvaluatedInject(modifier) ? stateInEditorState.injectText !== \"\" : stateInEditorState.active)\r\n        && PositionCalculationHelper.inBlock(modifier, targetModifierBlockKey) && PositionCalculationHelper.beforePosition(modifier, targetModifier, blockKeyToIndexMap);\r\n    });\r\n\r\n\r\n    // The block offset is the sum of all blocks added by active dynamic fragments before our target position.\r\n    const blockShiftingModifiers = relevantModifiers.filter((modifier, index, all) => PositionCalculationHelper.hasMoreThanOneBlock(modifier));\r\n    const blockOffset = blockShiftingModifiers.reduce((total, currentBlockShifter) => total + currentBlockShifter.config.blocks.length - 1, 0);\r\n\r\n\r\n    // To calculate the character offset we have to consider the last block-creating fragment in the target block before the target position. \r\n    // If such a fragment exists, its last block replaces all characters in the target block up to the fragment's position \r\n    // and we start calculating the character offset from this position and with an initial value of (characters in replacing block - character up to fragment's position on old block).\r\n    // If no such fragment exists we start calculating the character offset with inital value 0 at the beginning of the target block.\r\n    // Now we add to the character offset the count of characters injected by all active modifiers up to the target position.\r\n\r\n    const lastBlockShifterInSameBlock = PositionCalculationHelper.getLastModifierPerOffset(blockShiftingModifiers);\r\n    const characterSwitchersStartOffset = lastBlockShifterInSameBlock === undefined ? 0 : lastBlockShifterInSameBlock.config.position.offset;\r\n    const characterSwitchersStartIndex = lastBlockShifterInSameBlock === undefined ? 0 : lastBlockShifterInSameBlock.config.position.index;\r\n    const characterOffsetStartValue = lastBlockShifterInSameBlock === undefined ? 0\r\n      : PositionCalculationHelper.getLastBlockOfFragment(lastBlockShifterInSameBlock).text.length - lastBlockShifterInSameBlock.config.position.offset;\r\n\r\n    // Note: We need the index in the array of all configModifiers to calculate the injected text for evaluating modifiers. \r\n    //       Therefore we have to map the full contentModifiers array here! \r\n    const allCharacterShifterTexts = configContentModifiers.map((modifier, index, all) => {\r\n      if (!PositionCalculationHelper.afterPositionInSameBlock(modifier, targetModifierBlockKey, characterSwitchersStartOffset, characterSwitchersStartIndex)) return \"\";\r\n      if (!PositionCalculationHelper.beforePosition(modifier, targetModifier, blockKeyToIndexMap)) return \"\";\r\n      if (PositionCalculationHelper.isDynamicFragment(modifier)) {\r\n        return PositionCalculationHelper.getModifierStateInEditorState(index, contentModifierParentPath, contentModifiersInEditorState).active ? modifier.config.blocks[0].text : \"\";\r\n      }\r\n      if (PositionCalculationHelper.isEvaluatedInject(modifier)) {\r\n        return PositionCalculationHelper.getModifierStateInEditorState(index, contentModifierParentPath, contentModifiersInEditorState).injectText;\r\n      }\r\n      return \"\";\r\n    });\r\n\r\n    const characterOffset = allCharacterShifterTexts.reduce((total, injectedText) => total + injectedText.length, characterOffsetStartValue);\r\n\r\n\r\n    return {\r\n      blockOffset,\r\n      characterOffset\r\n    }\r\n  }\r\n\r\n\r\n  static isDynamicFragment(modifier) {\r\n    return modifier.type === 'DynamicFragment';\r\n  }\r\n\r\n  static isEvaluatedInject(modifier) {\r\n    return modifier.type === 'EvaluatedInject';\r\n  }\r\n\r\n  static hasMoreThanOneBlock(modifier) {\r\n    return PositionCalculationHelper.isDynamicFragment(modifier) && modifier.config.blocks.length > 1;\r\n  }\r\n\r\n  static beforePosition(candidateModifier, compareModifier, blockKeyToIndexMap) {\r\n    const candidatePosition = candidateModifier.config.position;\r\n    const comparePosition = compareModifier.config.position;\r\n    const candidateBlockIndex = blockKeyToIndexMap[candidatePosition.blockKey];\r\n    const compareBlockIndex = blockKeyToIndexMap[comparePosition.blockKey];\r\n\r\n    // check blocks: \r\n    if (candidateBlockIndex < compareBlockIndex) return true;\r\n    if (candidateBlockIndex > compareBlockIndex) return false;\r\n\r\n    // blocks are the same, now check offsets in block:\r\n    if (candidatePosition.offset < comparePosition.offset) return true;\r\n    if (candidatePosition.offset > comparePosition.offset) return false;\r\n\r\n    // character offset are the same also, now check index:\r\n    return candidatePosition.index < comparePosition.index;\r\n  }\r\n\r\n  static afterPositionInSameBlock(candidateModifier, compareBlockKey, compareOffset, compareIndex) {\r\n    const candidatePosition = candidateModifier.config.position;\r\n    return (candidatePosition.blockKey === compareBlockKey)\r\n      && (candidatePosition.offset > compareOffset || (candidatePosition.offset === compareOffset && candidatePosition.index > compareIndex));\r\n  }\r\n\r\n  static inBlock(candidateModifier, compareBlockKey) {\r\n    return candidateModifier.config.position.blockKey === compareBlockKey;\r\n  }\r\n\r\n  static getLastBlockOfFragment(dynamicFragment) {\r\n    const { blocks } = dynamicFragment.config;\r\n    return blocks.length < 1 ? undefined : blocks[blocks.length - 1];\r\n  }\r\n\r\n  static getLastModifierPerOffset(candidateModifiers) {\r\n    let result;\r\n    candidateModifiers.forEach((candidate, index, all) => {\r\n      if (result === undefined || PositionCalculationHelper.isGreaterPositionOffset(candidate.config.position, result.config.position)) {\r\n        result = candidate;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  static isGreaterPositionOffset(left, right) {\r\n    if (left.offset > right.offset) return true;\r\n    if (right.offset > left.offset) return false;\r\n    return left.index > right.index;\r\n  }\r\n\r\n\r\n  static getModifierStateInEditorState(contentModifierIndex, contentModifierParentPath, contentModifiersInEditorState) {\r\n    const fromState = contentModifiersInEditorState[IndexPathHelper.appendIndexToPageSegment(contentModifierParentPath, contentModifierIndex)];\r\n    return fromState === undefined\r\n      ? {\r\n        injectText: \"\",\r\n        active: false\r\n      }\r\n      : fromState;\r\n  }\r\n\r\n\r\n}\r\n","import { EditorState, Modifier, SelectionState, convertFromRaw, RichUtils } from 'draft-js';\r\n\r\n/**\r\n * Helper methods to work with the Draft.js editor state.\r\n */\r\nexport default class EditorStateHelper {\r\n\r\n\r\n  static replaceTextInBlock(editorState, startBlockKey, startOffset, endBlockKey, endOffset, toBeInserted) {\r\n    return EditorState.push(editorState,\r\n      Modifier.replaceText(\r\n        editorState.getCurrentContent(),\r\n        EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset),\r\n        toBeInserted\r\n      ),\r\n      'insert-characters')\r\n  }\r\n\r\n  static replaceWithBlocks(editorState, startBlockKey, startOffset, endBlockKey, endOffset, rawBlocksArrayToInsert, entityMapToInsert) {\r\n    const rawValue = {\r\n      blocks: rawBlocksArrayToInsert,\r\n      entityMap: entityMapToInsert\r\n    };\r\n    const blockMap = convertFromRaw(rawValue).getBlockMap();\r\n    return EditorState.push(editorState,\r\n      Modifier.replaceWithFragment(\r\n        editorState.getCurrentContent(),\r\n        EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset),\r\n        blockMap\r\n      ),\r\n      'insert-fragment')\r\n  }\r\n\r\n  static removeBlocks(editorState, startBlockKey, startOffset, endBlockKey, endOffset) {\r\n    return EditorState.push(editorState,\r\n      Modifier.removeRange(\r\n        editorState.getCurrentContent(),\r\n        EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset),\r\n        'forward'\r\n      ),\r\n      'remove-range')\r\n  }\r\n\r\n  static applyInlineStyles(editorState, startBlockKey, startOffset, endBlockKey, endOffset, styleNames) {\r\n    let modifiedEditorState = editorState;\r\n    if (styleNames !== undefined) {\r\n      const targetSelection = EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset);\r\n      styleNames.forEach((styleName, index, all) => {\r\n        modifiedEditorState = EditorState.push(modifiedEditorState,\r\n          Modifier.applyInlineStyle(modifiedEditorState.getCurrentContent(), targetSelection, styleName),\r\n          'change-inline-style');\r\n      });\r\n    }\r\n    return modifiedEditorState;\r\n  }\r\n\r\n  static applyEntities(editorState, startBlockKey, startOffset, endBlockKey, endOffset, entityNames) {\r\n    let modifiedEditorState = editorState;\r\n    if (entityNames !== undefined) {\r\n      const targetSelection = EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset);\r\n      entityNames.forEach((entityName, index, all) => {\r\n        modifiedEditorState = EditorState.push(modifiedEditorState,\r\n          Modifier.applyEntity(modifiedEditorState.getCurrentContent(), targetSelection, entityName),\r\n          'apply-entity');\r\n      });\r\n    }\r\n    return modifiedEditorState;\r\n  }\r\n\r\n\r\n  static forceSelection(editorState, startBlockKey, startOffset, endBlockKey, endOffset) {\r\n    return EditorState.forceSelection(editorState, EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset))\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Toggle style on a selection in editor state\r\n   * \r\n   * @param {*} editorState \r\n   * @param {*} selection \r\n   * \r\n   * @returns {EditorState} EditorState\r\n   */\r\n  static toggleEditorStateStyleOnSelection(editorState, selection) {\r\n    const { startKey, startOffset, endKey, endOffset, highlightKey } = selection;\r\n    let newEditorState = EditorStateHelper.forceSelection(editorState, startKey, startOffset, endKey, endOffset);\r\n    newEditorState = RichUtils.toggleInlineStyle(newEditorState, highlightKey);\r\n\r\n    return newEditorState;\r\n  }\r\n\r\n  static buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset) {\r\n    return SelectionState.createEmpty('notUsed').merge({\r\n      anchorKey: startBlockKey,\r\n      anchorOffset: startOffset,\r\n      focusKey: endBlockKey,\r\n      focusOffset: endOffset\r\n    });\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CommonActionsHelper from \"../CommonActionsHelper\";\r\nimport IndexPathHelper from '../../state/IndexPathHelper'\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\n\r\n/**\r\n * A display component used by CbaRichTextField to display 'embedded links'. \r\n */\r\nclass DraftLink extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onClickHandler = this.onClickHandler.bind(this);\r\n    this.getData = this.getData.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { runtime, parentPath } = this.props;\r\n    runtime.componentDirectory.registerComponent(DraftLink.buildMyPath(parentPath, this.getData()), this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { runtime, parentPath } = this.props;\r\n    runtime.componentDirectory.deregisterComponent(DraftLink.buildMyPath(parentPath, this.getData()));\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    const { runtime, parentPath } = this.props;\r\n    if (!(parentPath === nextProps.parentPath)) {\r\n      runtime.componentDirectory.deregisterComponent(DraftLink.buildMyPath(parentPath, this.getData()));\r\n      runtime.componentDirectory.registerComponent(DraftLink.buildMyPath(nextProps.parentPath, nextProps.contentState.getEntity(nextProps.entityKey).getData()), this);\r\n    }\r\n  }\r\n\r\n  onClickHandler(event) {\r\n    const { runtime, parentPath, linkReceiver, fullRichTextPath } = this.props;\r\n    const isDisabled = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractDisabled, fullRichTextPath, runtime);\r\n\r\n    if (!isDisabled) {\r\n      const data = this.getData();\r\n      const myPath = DraftLink.buildMyPath(parentPath, data)\r\n\r\n      CommonActionsHelper.doBasicOnClick(event, myPath, runtime);\r\n      CommonActionsHelper.traceUserInteraction('EmbeddedLink', myPath, undefined, event, undefined, runtime);\r\n\r\n      // Update the 'visited' state: \r\n      const state = DraftLink.getOrBuildState(parentPath, data, runtime);\r\n      state.selected = true;\r\n      DraftLink.persistState(state, parentPath, data, runtime);\r\n\r\n      CommonActionsHelper.doPageSwitch(data.link, runtime, linkReceiver, parentPath);\r\n    }\r\n\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      this.onClickHandler(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fix for Firefox not respecting tabIndex=-1 in DraftLink \r\n   * (DraftJS may modify contentEditable attribute making the browser think it should be focus visible)\r\n   * \r\n   * @param {*} event \r\n   */\r\n  handleMouseDown(event) {\r\n    event.currentTarget.contentEditable = true;\r\n    event.currentTarget.contentEditable = false;\r\n  }\r\n\r\n  getData() {\r\n    const { contentState, entityKey } = this.props;\r\n    return contentState.getEntity(entityKey).getData();\r\n  }\r\n\r\n  static getOrBuildState(parentPath, data, runtime) {\r\n    return runtime.componentStateManager.findOrBuildStateForPathId(DraftLink.buildMyPath(parentPath, data), runtime);\r\n  }\r\n\r\n  static persistState(fullState, parentPath, data, runtime) {\r\n    runtime.componentStateManager.registerStateByPathId(DraftLink.buildMyPath(parentPath, data), fullState, runtime);\r\n  }\r\n\r\n  static buildMyPath(parentPath, data) {\r\n    return IndexPathHelper.appendIndexToPageSegment(parentPath, data.id);\r\n  }\r\n\r\n  static buildStyle(state, data) {\r\n    return {\r\n      color: state.selected ? data.color.visited : data.color.notVisited,\r\n      cursor: \"pointer\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { runtime, parentPath, children, tabIndex } = this.props;\r\n    const data = this.getData();\r\n    const state = DraftLink.getOrBuildState(parentPath, data, runtime);\r\n    const style = DraftLink.buildStyle(state, data);\r\n    CommonConfigHelper.setStyleAttribute(style, 'display', 'inline-block');\r\n    CommonConfigHelper.setStyleAttribute(style, 'lineHeight', '1');\r\n    const className = style.color !== undefined ? 'cba-link' : '';\r\n\r\n    return (\r\n      <span\r\n        className={`CbaLink ${className}`}\r\n        style={style}\r\n        onClick={this.onClickHandler}\r\n        onKeyDown={e => this.handleKeyDown(e)}\r\n        onMouseDown={e => this.handleMouseDown(e)}\r\n        tabIndex={tabIndex}\r\n      >\r\n        {children}\r\n      </span>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n/*\r\n  Function which specifies the strategy in finding link entities in DraftJS content\r\n*/\r\nconst findLinkEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n    (character) => {\r\n      const entityKey = character.getEntity();\r\n      return (\r\n        entityKey !== null && contentState.getEntity(entityKey).getType() === 'LINK'\r\n      );\r\n    },\r\n    callback\r\n  );\r\n}\r\n\r\nDraftLink.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  parentPath: PropTypes.string.isRequired,\r\n  contentState: PropTypes.object.isRequired,\r\n  entityKey: PropTypes.string.isRequired,\r\n  children: PropTypes.array.isRequired,\r\n  fullRichTextPath: PropTypes.string.isRequired,\r\n  linkReceiver: PropTypes.string,\r\n  tabIndex: PropTypes.number,\r\n}\r\n\r\nDraftLink.defaultProps = {\r\n  linkReceiver: undefined,\r\n  tabIndex: -1\r\n}\r\n\r\nexport { DraftLink, findLinkEntities }\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CommonConfigHelper from \"../../config/CommonConfigHelper\";\r\n\r\nconst Audio = (props) => {\r\n  const { src, style } = props;\r\n  return <audio><track kind=\"captions\" controls src={src} style={style} /></audio>;\r\n};\r\n\r\nconst Image = (props) => {\r\n  const { src, style } = props;\r\n  return <img src={src} style={style} alt={src} />;\r\n};\r\n\r\nconst Video = (props) => {\r\n  const { src, style } = props;\r\n  return <video><track kind=\"captions\" controls src={src} style={style} /></video>;\r\n};\r\n\r\nexport const Media = runtime => (\r\n  // Passing arguments to a JavaScript callback function\r\n  (props) => {\r\n    const entity = props.contentState.getEntity(\r\n      props.block.getEntityAt(0)\r\n    );\r\n    const { src, style } = entity.getData();\r\n    const type = entity.getType();\r\n\r\n    const relativePathSrc = CommonConfigHelper.getProperResourcePath(src, runtime);\r\n\r\n    let media;\r\n    if (type === 'audio') {\r\n      media = <Audio src={relativePathSrc} style={style} />;\r\n    } else if (type === 'image') {\r\n      media = <Image src={relativePathSrc} style={style} />;\r\n    } else if (type === 'video') {\r\n      media = <Video src={relativePathSrc} style={style} />;\r\n    }\r\n\r\n    return media;\r\n  });\r\n\r\nAudio.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  style: PropTypes.object.isRequired\r\n}\r\n\r\nImage.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  style: PropTypes.object.isRequired\r\n}\r\n\r\nVideo.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  style: PropTypes.object.isRequired\r\n}\r\n\r\nMedia.propTypes = {\r\n  doHighlight: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Media as default }\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * A react component used by the CbaRichTextField to display bulleted or numbered lists.\r\n */\r\nclass DraftBullet extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.style = this.getStyle();\r\n    this.bullet = this.getBullet();\r\n  }\r\n\r\n  getStyle = () => {\r\n    const { contentState, entityKey } = this.props;\r\n    return contentState.getEntity(entityKey).getData().style;\r\n  }\r\n\r\n  getBullet = () => {\r\n    const { children } = this.props;\r\n    const rawSymbol = children[0].props.text;\r\n    let bullet = \"\";\r\n\r\n    if (rawSymbol.indexOf(\"num-\") === 0) {\r\n      // ordered list\r\n      [, bullet] = rawSymbol.split(\"-\");\r\n    } else {\r\n      // unordered list\r\n      switch (rawSymbol) {\r\n        case \"a\": bullet = String.fromCharCode(\"0x25CF\"); break;// black circle\r\n        case \"b\": bullet = String.fromCharCode(\"0x25CB\"); break;// white circle\r\n        case \"c\": bullet = String.fromCharCode(\"0x25A0\"); break;// black square\r\n        case \"d\": bullet = String.fromCharCode(\"0x25A1\"); break;// white square\r\n        default: bullet = String.fromCharCode(\"0x25CF\"); break;// black circle\r\n      }\r\n    }\r\n\r\n    return bullet;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <span suppressContentEditableWarning=\"true\" className=\"cbaListBullet\" style={this.style} contentEditable=\"false\">\r\n        {this.bullet}\r\n      </span>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst findBulletEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n    (character) => {\r\n      const entityKey = character.getEntity();\r\n      return (\r\n        entityKey !== null && contentState.getEntity(entityKey).getType() === 'LIST-BULLET'\r\n      );\r\n    },\r\n    callback\r\n  );\r\n}\r\n\r\nDraftBullet.propTypes = {\r\n  contentState: PropTypes.object.isRequired,\r\n  entityKey: PropTypes.string.isRequired,\r\n  children: PropTypes.array.isRequired\r\n}\r\n\r\nexport { findBulletEntities, DraftBullet };\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class MathJaxTranspiler extends Component {\r\n\r\n  componentDidMount() {\r\n    if (!window.MathJax) {\r\n      this.interval = window.setInterval(() => {\r\n        const { MathJax } = window;\r\n\r\n        if (MathJax) {\r\n          this.setState(prevState => ({\r\n            // eslint-disable-next-line react/no-unused-state\r\n            update: prevState + 1\r\n          }));\r\n\r\n          clearInterval(this.interval);\r\n        }\r\n      }, 100);\r\n\r\n      // Timeout for clearing interval if no library is found\r\n      window.setTimeout(() => {\r\n        if (!window.MathJax) {\r\n          console.error(\"MathJax not found, check item dependency library\");\r\n          clearInterval(this.interval);\r\n        }\r\n      }, 10000)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const { MathJax } = window;\r\n    const { tex } = this.props;\r\n\r\n    if (!MathJax) {\r\n      return <span>MathJax Not loaded</span>\r\n    }\r\n\r\n    MathJax.texReset();\r\n\r\n    const result = MathJax.tex2chtml(tex);\r\n\r\n    MathJax.startup.document.clear();\r\n    MathJax.startup.document.updateDocument();\r\n\r\n    return (\r\n      // eslint-disable-next-line react/no-danger\r\n      <span dangerouslySetInnerHTML={{\r\n        __html: result.innerHTML\r\n      }}\r\n      />\r\n    )\r\n  }\r\n\r\n}\r\n\r\nMathJaxTranspiler.propTypes = {\r\n  tex: PropTypes.string.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MathJaxTranspiler from '../MathJax/MathJaxTranspiler'\r\n/**\r\n * A react component used by the CbaRichTextField to display Mathematical expressions via MathJax.\r\n */\r\nclass MathJaxEntity extends React.Component {\r\n\r\n  getPropertyData = (property) => {\r\n    const { contentState, entityKey } = this.props;\r\n    return contentState.getEntity(entityKey).getData()[property];\r\n  }\r\n\r\n  render() {\r\n    const fontSize = this.getPropertyData(\"fontSize\");\r\n    const color = this.getPropertyData(\"fontColor\");\r\n\r\n    const style = {\r\n      fontSize,\r\n      color\r\n    }\r\n\r\n    return (\r\n      <span style={style} suppressContentEditableWarning=\"true\" contentEditable=\"false\">\r\n        <MathJaxTranspiler tex={this.getPropertyData(\"tex\")} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst findMathJaxEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n    (character) => {\r\n      const entityKey = character.getEntity();\r\n      return (\r\n        entityKey !== null && contentState.getEntity(entityKey).getType() === 'TEX'\r\n      );\r\n    },\r\n    callback\r\n  );\r\n}\r\n\r\nMathJaxEntity.propTypes = {\r\n  contentState: PropTypes.object.isRequired,\r\n  entityKey: PropTypes.string.isRequired,\r\n}\r\n\r\nexport { findMathJaxEntities, MathJaxEntity };\r\n","import React from 'react';\r\nimport { EditorState, RichUtils, convertFromRaw, convertToRaw, DefaultDraftBlockRenderMap } from 'draft-js';\r\nimport Editor from 'draft-js-plugins-editor';\r\nimport PropTypes from 'prop-types';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport './css/Draft.css';\r\nimport './css/plugin.css';\r\nimport './css/custom.css';\r\nimport './css/repeatable.css';\r\n\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport SelectGroupHelper from '../SelectGroupHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport TermEvaluator from '../../eval/TermEvaluator';\r\nimport Utils from '../../utils/Utils';\r\nimport SelectionHelper from './SelectionHelper';\r\nimport PositionCalculationHelper from './PositionCalculationHelper';\r\nimport EditorStateHelper from './EditorStateHelper';\r\nimport { DraftLink, findLinkEntities } from './DraftLink';\r\nimport { Media } from './Media'\r\nimport { findBulletEntities, DraftBullet } from './DraftBullet'\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport TableHelper from '../table/TableHelper';\r\nimport { findMathJaxEntities, MathJaxEntity } from './MathJaxEntity';\r\n\r\n/**\r\n * A display component for rich text content.\r\n * \r\n * We use this to implement the HTMLTextField and the RichText known on the Java side.\r\n * On the long run we hope to merge HTMLTextField and RichText on the Java side.\r\n * \r\n * The component supports 'highlighting', 'embedded links' and 'content modifiers'.\r\n * \r\n * An 'embedded link' is a selectable section of the text that will trigger a page switch on selection.\r\n * \r\n * There are two types of 'content modifiers': 'EvaluatedInject' and 'DynamicFragment'. \r\n * An 'Evaluated Inject' is a text snippet that we calculate at runtime as result of an operator call\r\n * and insert into the displayed text. \r\n * A 'Dynamic Fragment' is a text snippet with a 'selected' status flag and a User Defined ID. We will display \r\n * the text snippet as long as it is in 'selected'==true state. \r\n * \r\n * The 'content modifiers' and the 'embedded links' have their own index paths: \r\n *  - embedded links append a pseudo index 1 and their own index in the list of content modifiers to the component's path, e.g.:\r\n *     <rich text field index path>/index=1/index=3 for the fourth content modifier of the component\r\n *  - content modifiers append a pseudo index 2 and their own index in the list of content modifiers to the component's path, e.g.:\r\n *     <rich text field index path>/index=2/index=7 for the eighth content modifier of the component\r\n * Lookups for these index paths in the component directory will return the rich text field component, i.e. re-rendering calls on \r\n * these index paths are delegated to the rich text field component.\r\n * The page configurations manager will return configuration data for the embedded link paths (but not for the content modifiers)\r\n * for use by the DraftLink components. \r\n * The component state manager will return state data for the embedded link index paths and the content modifier index paths. \r\n * \r\n */\r\nexport default class CbaRichTextField extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.lastUserEvent = Utils.isTouchDevice() ? \"touch\" : \"mouse\";\r\n  }\r\n\r\n\r\n  // ------------ lifecycle methods ---------------------------------------------------------------------------\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n    // In addition to registering myself I register myself as component to be re-rendered in lieu of all my content modifiers:\r\n    const { config, path, row, column, runtime } = this.props;\r\n    const editorComponent = this;\r\n    CbaRichTextField.forEachContentModifier(config, path, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.registerComponent(modifierPath, editorComponent);\r\n    });\r\n\r\n    // register for deselect event\r\n    if (row !== undefined && column !== undefined) {\r\n      runtime.eventEmitter.addListener(`${TableHelper.buildTablePath(path)}-removeLastSelection-[${row},${column}]`, this.onRemoveLastSelection.bind(this));\r\n    }\r\n\r\n    // register for flash text events\r\n    if (config.fromSecond !== undefined) {\r\n      runtime.eventEmitter.addListener(\"currentTimeUpdate\", this.onCurrentTimeUpdate.bind(this));\r\n      runtime.eventEmitter.addListener(\"clearFlashTexts\", this.onClearFlashTexts.bind(this));\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n\r\n    // Deregister myself as component to be re-rendered in lieu of all my content modifiers:\r\n    const { config, path } = this.props;\r\n    const editorComponent = this;\r\n    CbaRichTextField.forEachContentModifier(config, path, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.deregisterComponent(modifierPath);\r\n    });\r\n\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n\r\n    // In addition to my own registration I update the registration of all my content modifiers:\r\n    const editorComponent = this;\r\n\r\n    const { config: oldConfig, path: oldPath } = this.props;\r\n    CbaRichTextField.forEachContentModifier(oldConfig, oldPath, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.deregisterComponent(modifierPath);\r\n    });\r\n\r\n    const { config: newConfig, path: newPath } = nextProps;\r\n    CbaRichTextField.forEachContentModifier(newConfig, newPath, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.registerComponent(modifierPath, editorComponent);\r\n    });\r\n\r\n  }\r\n\r\n  // ------------ component state initialization ---------------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Build the initial state in the component state manager. \r\n   * \r\n   * The component state manager will call this method to initialize state for new display component instances.\r\n   */\r\n  static addAttributesToInitialState(initialState, configProps) {\r\n    const styleMap = CbaRichTextField.findStylesMapInConfig(configProps);\r\n\r\n    // deactivate deep copy in state manager since editor state cannot be cloned. \r\n    StateAttributeAccess.setDeepCopy(initialState, false);\r\n    StateAttributeAccess.setComponentClassName(initialState, \"CbaRichTextField\");\r\n\r\n    initialState.editorState = CbaRichTextField.buildInitialEditorState(configProps);\r\n\r\n    // We keep the currently 'highlighted' areas in the text as 'selections' attribute in the component state. \r\n    // (In the editor state these areas have a 'HIGHLIGHTED' style setting which is a kind of duplication of the information here.)\r\n    initialState.selections = [];\r\n\r\n    // style map is not defined for HTMLTextField without any text content -> insert default value (highlight color is never used in this case)\r\n    initialState.defaultHighlightColor = styleMap === undefined ? \"rgba(0,0,0,0)\" : styleMap.HIGHLIGHT.backgroundColor;\r\n\r\n    initialState.modifiersInEditorState = {};\r\n\r\n    // keep an unformatted representation of our text content in the component state\r\n    StateAttributeAccess.setTextValue(initialState, CbaRichTextField.calculateTextValue(initialState.editorState));\r\n\r\n    // keep highlightable flag in component state manager\r\n    StateAttributeAccess.setHighlightable(initialState, configProps.highlightText);\r\n\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Build an initial editor state for the Draft editor. \r\n   */\r\n  static buildInitialEditorState(configProps) {\r\n    const contentState = convertFromRaw(configProps.value);\r\n    return EditorState.createWithContent(contentState);\r\n  }\r\n\r\n\r\n  /**\r\n   * Add the specific pseudo index for 'embedded links' to the index path of the rich text field.  \r\n   */\r\n  static addLinkIndex(richTextFieldPageSegment) {\r\n    return IndexPathHelper.appendIndexToPageSegment(richTextFieldPageSegment, 1);\r\n  }\r\n\r\n  /**\r\n   * Add the specific pseudo index for 'content modifier children' to the index path of the rich text field.  \r\n   */\r\n  static addContentModifierIndex(richTextFieldPageSegment) {\r\n    return IndexPathHelper.appendIndexToPageSegment(richTextFieldPageSegment, 2);\r\n  }\r\n\r\n  /**\r\n   * Build an array of 'standard' configuration structures for the links defined \r\n   *  - in the editor state and\r\n   *  - in the dynamic fragment content modifiers.\r\n   * The page configurations manager expects a structure with the attributes type and config\r\n   * when it adds configuration entries for the embedded link index paths.  \r\n   */\r\n  static buildLinkConfigurationsArray(configProps) {\r\n    const result = [];\r\n    CbaRichTextField.insertLinkConfigurationsFromEntityMap(configProps.value.entityMap, result);\r\n    if (configProps.contentModifiers !== undefined) {\r\n      configProps.contentModifiers.forEach((modifier) => {\r\n        if (modifier.type === 'DynamicFragment') {\r\n          CbaRichTextField.insertLinkConfigurationsFromEntityMap(modifier.config.entityMap, result);\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * (Internal helper) Scan the given entity map from the Draft editor state and create an entry in the given \r\n   * result array for each entity of type 'LINK':\r\n   *  - the key in the array is the entity's data.id attribute -> the data.id should be a number!\r\n   *  - the value in the array is the usual config structure expected by the configurations manager: \r\n   *     { type: 'RichTextEmbeddedLink', config: { ... } }\r\n   */\r\n  static insertLinkConfigurationsFromEntityMap(entityMap, resultArray) {\r\n    Object.values(entityMap).forEach((entity) => {\r\n      if (entity.type === 'LINK') {\r\n        resultArray[entity.data.id] = {\r\n          type: 'RichTextEmbeddedLink',\r\n          config: {\r\n            state: {\r\n              disabled: false,\r\n              selected: false,\r\n              hidden: false\r\n            },\r\n          }\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Internal helper. Transforms from an 'HIGHLIGHT key to it's value\r\n   * \r\n   * HIGHLIGHT_r_g_b_a -> rgba(r,g,b,a)\r\n   * \r\n   * @param {String} key Highlight Key\r\n   * @param {String} path RichTextComponent Path \r\n   * @param {Object} runtime runtime object\r\n   * @returns {String} value\r\n   */\r\n  static convertHighlightKeyToValue(key, path, runtime) {\r\n    const defaultHighlightColor = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractDefaultHighlightColor, path, runtime);\r\n\r\n    const rgba = key.split('_').slice(1);\r\n    const convertedValue = `rgba(${rgba.join(',')})`\r\n\r\n    return key !== \"HIGHLIGHT\" ? convertedValue : defaultHighlightColor.replace(/\\s+/g, '');\r\n  }\r\n\r\n  /**\r\n   * Internal helper. Transforms from an rgba value to the HIGHLIGHT key\r\n   * \r\n   * rgba(r,g,b,a) -> HIGHLIGHT_r_g_b_a\r\n   * \r\n   * @param {String} value \r\n   * @returns {String} key\r\n   */\r\n  static convertHighlightValueToKey(value) {\r\n    const rgba = value.substring(5, value.length - 1)\r\n      .replace(/\\s+/g, '')\r\n      .split(',');\r\n\r\n    return `HIGHLIGHT_${rgba.join('_')}`;\r\n  }\r\n\r\n  // ----------- snapshot related ------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Transform the component state as stored in the component state manager into its snapshot representation.\r\n   * \r\n   * The component state manager will call this method when creating a snapshot.\r\n   */\r\n  static toSnapshot(indexPath, state) {\r\n    const result = {};\r\n    Object.entries(state).forEach((entry) => {\r\n      const [key, value] = entry;\r\n      switch (key) {\r\n        case 'editorState':\r\n          result[key] = CbaRichTextField.toSnapshotForEditorState(value);\r\n          break;\r\n        default:\r\n          result[key] = StateManagerHelper.deepCopy(value);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Transform the state in snapshot representation to the format used in the component state manager.\r\n   * \r\n   * The component state manager will call this method when preloading state from a snapshot.\r\n   */\r\n  static fromSnapshot(indexPath, state) {\r\n    const result = {};\r\n    Object.entries(state).forEach((entry) => {\r\n      const [key, value] = entry;\r\n      switch (key) {\r\n        case 'editorState':\r\n          result[key] = CbaRichTextField.fromSnapshotForEditorState(value);\r\n          break;\r\n        default:\r\n          result[key] = StateManagerHelper.deepCopy(value);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Transform the given selections state into its snapshot representation.\r\n   */\r\n  static toSnapshotForEditorState(editorState) {\r\n    return convertToRaw(editorState.getCurrentContent());\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Transform the given snapshot representation of the editor state \r\n   * into the editorState attribute value in the state used at runtime.\r\n   */\r\n  static fromSnapshotForEditorState(editorState) {\r\n    return EditorState.createWithContent(convertFromRaw(editorState));\r\n  }\r\n\r\n\r\n  // --------- table related------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * This will automatically deselect the field.\r\n   */\r\n  onRemoveLastSelection() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n\r\n    this.updateStateAndTriggerRendering(pathState, false);\r\n  }\r\n\r\n  // ----------- text flash related -------------------------------\r\n  onCurrentTimeUpdate(currentTime) {\r\n    const { config, runtime } = this.props;\r\n    const { fromSecond, toSecond } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    if (currentTime >= fromSecond && currentTime <= toSecond) {\r\n      runtime.eventEmitter.emit(\"clearFlashTexts\");\r\n      StateAttributeAccess.setHidden(pathState, false);\r\n    } else {\r\n      StateAttributeAccess.setHidden(pathState, true);\r\n    }\r\n\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onClearFlashTexts() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setHidden(pathState, true);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  // ----------- public interaction API ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Trigger a re-render after a change in the highlight background color.\r\n   * \r\n   * Due to a bug Draft will not re-render if the only change is a modification of the styles map.\r\n   * see: https://github.com/facebook/draft-js/issues/999 \r\n   * \r\n   * We 'redefine' the current selection without changing its values to force the re-render.\r\n   */\r\n  highlightColorChanged() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const editorState = StateAttributeAccess.extractEditorState(pathState);\r\n    const finalEditorState = EditorState.forceSelection(editorState, editorState.getSelection());\r\n    this.saveEditorStateInPathState(finalEditorState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * Grab the focus.\r\n   */\r\n  focus = () => {\r\n    this.editor.focus();\r\n  }\r\n\r\n\r\n  // --------------- our own event handlers -------------------------------------------------------------------------\r\n\r\n  onClickHandler = (event) => {\r\n    const { runtime, config, path, onParentClick, checkSelectable } = this.props;\r\n\r\n    // Silently forget event if we are child of a CbaTableCell that is not selectable currenty:\r\n    if (checkSelectable !== undefined && !checkSelectable()) {\r\n      CommonActionsHelper.stopEventPropagation(event);\r\n      return;\r\n    }\r\n\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\r\n    const { fromSecond, toSecond } = config;\r\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    if (fromSecond !== undefined) {\r\n      const traceDetails = {\r\n        from: fromSecond,\r\n        to: toSecond\r\n      }\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, traceDetails, event, runtime);\r\n    } else {\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path,\r\n        CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\r\n        event, runtime);\r\n    }\r\n\r\n    // Flip the selected state: 'yes' <-> 'no'\r\n    if (config.toggleType !== 'none') {\r\n      this.updateStateAndTriggerRendering(pathState);\r\n    }\r\n\r\n    // Call parent click handler if available, needed for standard table single select feature\r\n    if (onParentClick !== undefined) {\r\n      onParentClick(event);\r\n    }\r\n\r\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\r\n\r\n    // send statemachine event depending on state:\r\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\r\n\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Update our component state in the components state manager and trigger rendering.\r\n   */\r\n  updateStateAndTriggerRendering(pathState, isRemoveSelection) {\r\n    const { runtime, path } = this.props;\r\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\r\n    StateAttributeAccess.setVisited(pathState, true);\r\n\r\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\r\n  }\r\n\r\n  debouncedDoHighlightActions = debounce((editorState) => {\r\n    this.doHighlightActions(editorState);\r\n  }, 2000)\r\n\r\n\r\n  /**\r\n   * The Draft editor will call this method when the editor state\r\n   * is modified due to a user interaction in the editor.\r\n   * \r\n   * We should make sure that we update our structures to make sure that\r\n   * we will provide the modified editor state at the next \r\n   * render call to the Draft editor.\r\n   */\r\n  onChange = (editorState) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldEditorState = StateAttributeAccess.extractEditorState(pathState);\r\n    const oldSelections = StateAttributeAccess.extractSelections(pathState);\r\n    const highlightActive = StateAttributeAccess.extractHighlightable(pathState);\r\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\r\n\r\n    const { config, runtime } = this.props;\r\n    const blockKeysList = SelectionHelper.getListOfBlockKeysInBlockOrder(config.value.blocks);\r\n    let hasContentChanges = false;\r\n\r\n    // ignore content state modifications\r\n    if (!SelectionHelper.contentStateEqual(oldEditorState, editorState)) {\r\n      hasContentChanges = true;\r\n      // block modifications of the editor's text content: do not persist onChange editor state.\r\n    } else {\r\n      this.saveEditorStateInPathState(editorState);\r\n    }\r\n\r\n    // Do highlight actions if not disabled and no content changes\r\n    if (!hasContentChanges && !isDisabled && highlightActive) {\r\n      if (SelectionHelper.isSelection(editorState)) {\r\n        if (this.lastUserEvent === \"mouse\") {\r\n          this.doHighlightActions(editorState);\r\n        } else {\r\n          this.debouncedDoHighlightActions(editorState)\r\n        }\r\n      } else {\r\n        const clickedSelection = SelectionHelper.getSelectionHitByClick(editorState.getSelection(), oldSelections, blockKeysList);\r\n        if (clickedSelection !== undefined) {\r\n          editorState = this.removeClickedSelection(clickedSelection, editorState, oldSelections);\r\n        }\r\n      }\r\n    } else if (this.editor) {\r\n      // we are not in highlighting mode -> selections in our component state will not change\r\n      this.editor.blur();\r\n    }\r\n\r\n    if (this.lastUserEvent === \"touch\" && !hasContentChanges) {\r\n      this.saveEditorStateInPathState(editorState);\r\n    }\r\n\r\n    runtime.replayStepMonitor.incrementReplayStep();\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Combine the current selection in the editor state with our catalog of highlight selections in the component state.\r\n   */\r\n  doHighlightActions = (editorState) => {\r\n    const { config } = this.props;\r\n    const blockKeysList = SelectionHelper.getListOfBlockKeysInBlockOrder(config.value.blocks);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const currentHighlightKey = this.getHighlightColorKey(pathState);\r\n\r\n    this.processHighlightClick(editorState, blockKeysList, currentHighlightKey);\r\n\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * Remove the clicked selection from the editor state and from our selections\r\n   * Save the result in the pathState\r\n   * @param {*} clickedSelection \r\n   * @param {*} editorState \r\n   * @param {*} oldSelections \r\n   */\r\n  removeClickedSelection = (clickedSelection, editorState, oldSelections) => {\r\n    const { startKey, startOffset, endKey, endOffset, highlightKey } = clickedSelection;\r\n    let newEditorState = EditorStateHelper.forceSelection(editorState, startKey, startOffset, endKey, endOffset);\r\n    newEditorState = RichUtils.toggleInlineStyle(newEditorState, highlightKey);\r\n    newEditorState = EditorState.moveFocusToEnd(newEditorState);\r\n    const selections = SelectionHelper.removeSelectionFromSelectionsArray(oldSelections, clickedSelection);\r\n    this.saveEditorStateInPathState(newEditorState);\r\n    this.saveSelectionsInPathState(selections);\r\n    this.triggerHighlightEvent();\r\n\r\n    return newEditorState;\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Update the highlight style settings in the editor state to include the new selected area \r\n   * and add the new selected area to our list of highlight selections in the component state.\r\n   */\r\n  processHighlightClick = (currentEditorState, blockKeysList, currentHighlightKey) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldSelections = StateAttributeAccess.extractSelections(pathState);\r\n    const currentSelection = SelectionHelper.getSelection(currentEditorState, currentHighlightKey, blockKeysList);\r\n\r\n    // Clear old highlights from curently selected area.\r\n    const toggleOffOperationsList = [];\r\n\r\n    oldSelections.forEach((oldSelection) => {\r\n      const intersection = SelectionHelper.getIntersect(currentSelection, oldSelection, blockKeysList);\r\n      switch (intersection.type) {\r\n        case \"left\":\r\n          toggleOffOperationsList\r\n            .push(SelectionHelper.buildSelection(\r\n              oldSelection.startKey, currentSelection.endKey, oldSelection.startOffset,\r\n              currentSelection.endOffset, oldSelection.highlightKey\r\n            ));\r\n          break;\r\n        case \"right\":\r\n          toggleOffOperationsList\r\n            .push(SelectionHelper.buildSelection(\r\n              currentSelection.startKey, oldSelection.endKey, currentSelection.startOffset,\r\n              oldSelection.endOffset, oldSelection.highlightKey\r\n            ));\r\n          break;\r\n        case \"inside\":\r\n          toggleOffOperationsList\r\n            .push(Object.assign({}, currentSelection, {\r\n              highlightKey: oldSelection.highlightKey\r\n            }));\r\n          break;\r\n        case \"cover\":\r\n          toggleOffOperationsList\r\n            .push(Object.assign({}, oldSelection));\r\n          break;\r\n        case \"none\":\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    toggleOffOperationsList.forEach((operation) => {\r\n      currentEditorState = EditorStateHelper.toggleEditorStateStyleOnSelection(currentEditorState, operation);\r\n    });\r\n\r\n    // Apply the HIGHLIGHT style to the current selection -> makes newly selected area part of the currently highlighted areas.\r\n    currentEditorState = EditorStateHelper.toggleEditorStateStyleOnSelection(currentEditorState, currentSelection);\r\n\r\n    // Deduce the new highlighted areas by inspecting the HIGHLIGHT style setting in the toggled editor state.\r\n    const selections = SelectionHelper.calculateSelectionsArray(currentEditorState, blockKeysList);\r\n\r\n    // Move the focus to the end \r\n    currentEditorState = EditorState.moveFocusToEnd(currentEditorState);\r\n\r\n    // update the editor state and the highlighted selections in our component state \r\n    this.saveEditorStateInPathState(currentEditorState);\r\n    this.saveSelectionsInPathState(selections);\r\n    this.triggerHighlightEvent();\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Trigger the optional highlight click event on the current state machine. \r\n   */\r\n  triggerHighlightEvent = () => {\r\n    const { config, runtime } = this.props;\r\n    const { highlightChangeEvent } = config;\r\n    if (highlightChangeEvent !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(highlightChangeEvent);\r\n    }\r\n  }\r\n\r\n\r\n  // --------------- content modifier activities -------------------------------------------------------------------------\r\n\r\n  /**\r\n   * (Internal helper) Apply the modifications to the editor's content defined by our content modifiers.\r\n   * \r\n   * The method returns the modified editor state and a new modifier-effects-in-editor-state extract.\r\n   * \r\n   * The caller should use the new editor state for rendering the Draft editor. \r\n   * The caller should store both structures in the rich text field's component state in the component state manager\r\n   * and provide these to a future applyContentModifiers call. \r\n   * \r\n   * The concept behind this is:\r\n   * We keep an extract of the modifications applied to the edtitor's content by the content modifiers.\r\n   * This extract is stored in the modifiersInEditorState attribute of the rich text field's state.\r\n   * We use this extract to decide whether we need to update the editor state due to changes in the content modifiers.\r\n   * Example: \r\n   *  - Dynamic fragments can be 'activated' by setting their 'selected' attribute in their component manager state (e.g. by the TermEvaluator). \r\n   *    When we render the rich text field we 'apply' the content modifiers to the editor's state. There we check whether the \r\n   *    current 'selected' setting in the component state of the modifier matches the current modification implanted in the editor's state by comparing\r\n   *    with the 'active' attribute in the extract.\r\n   * Since modifying the editor state might destroy the current highlight selections we try to avoid modifying the editor state without need.\r\n   * \r\n   * \r\n   * @param editorState: The editor state that was used for the last render. We will modify this editor state and return it at the end.\r\n   * @param modifiersInEditorState: The extract of the modifications done by the content modifiers in the given editor state. \r\n   *   We will return a new version of this extract that reflects the modifications implanted the the modified editor state. \r\n   *   We need the extract representing the modifications in the old editor state to decide whether we have to modify the editor state\r\n   *   at all.\r\n   * @param editorPath: The index path of the rich text field display component instance.\r\n   * @param propsConfig: The static 'config' structure of the rich text field diplay component.\r\n   * @param runtime: The common runtime context structure.\r\n   * \r\n   */\r\n  static applyContentModifiers(editorState, modifiersInEditorState, editorPath, propsConfig, runtime) {\r\n    const { contentModifiers } = propsConfig;\r\n\r\n    let modifiedEditorState = editorState;\r\n    const newModifiersInEditorState = StateManagerHelper.deepCopy(modifiersInEditorState);\r\n\r\n    // we need the ordering of the block keys for position comparisons:\r\n    const configBlocks = propsConfig.value.blocks;\r\n    const blockKeyToIndexMap = SelectionHelper.getBlockKeysToBlockIndexMap(SelectionHelper.getListOfBlockKeysInBlockOrder(configBlocks));\r\n\r\n    CbaRichTextField.forEachContentModifier(propsConfig, editorPath, (modifierInConfig, modifierPath, modifierParentPath) => {\r\n      const modifierState = runtime.componentStateManager.findOrBuildStateForPathId(modifierPath, runtime);\r\n      if (newModifiersInEditorState[modifierPath] === undefined) {\r\n        newModifiersInEditorState[modifierPath] = CbaRichTextField.buildNonActiveModifierInEditorState(modifierInConfig.type);\r\n      }\r\n      const actualPosition = PositionCalculationHelper.calculateActualPosition(\r\n        modifierInConfig,\r\n        configBlocks,\r\n        blockKeyToIndexMap,\r\n        contentModifiers,\r\n        newModifiersInEditorState,\r\n        modifierParentPath,\r\n        modifiedEditorState\r\n      );\r\n      const modifierInEditorState = newModifiersInEditorState[modifierPath];\r\n      let newModifierInEditorState;\r\n      switch (modifierInConfig.type) {\r\n        case 'EvaluatedInject':\r\n          [modifiedEditorState, newModifierInEditorState] = CbaRichTextField.applyEvaluatedInjectModifier(modifiedEditorState, modifierState, modifierInEditorState, modifierInConfig.config, actualPosition, runtime);\r\n          break;\r\n        case 'DynamicFragment':\r\n          [modifiedEditorState, newModifierInEditorState] = CbaRichTextField.applyDynamicFragmentModifier(modifiedEditorState, modifierState, modifierInEditorState, modifierInConfig.config, actualPosition, runtime);\r\n          break;\r\n        default:\r\n          console.error(`Unknown modifier type: ${modifierInConfig.type}`);\r\n      }\r\n      newModifiersInEditorState[modifierPath] = newModifierInEditorState;\r\n    });\r\n\r\n    return [modifiedEditorState, newModifiersInEditorState];\r\n  }\r\n\r\n\r\n  /**\r\n   * (Internal helper) Build the extract of the modifications done to the editor's content by an inactive content modifier.\r\n   */\r\n  static buildNonActiveModifierInEditorState(contentModifierType) {\r\n    return (contentModifierType === 'EvaluatedInject')\r\n      ? {\r\n        injectText: \"\"\r\n      }\r\n      : {\r\n        active: false\r\n      };\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Apply a content modifier of type 'evaluated inject' to the editor's state and calculate the new extract structure\r\n   * for the content modifier.\r\n   */\r\n  static applyEvaluatedInjectModifier(editorState, modifierState, modifierInEditorState, modifierConfig, actualPosition, runtime) {\r\n    // avoid unnecessary modification of editor state\r\n    const currentInjectText = modifierState.selected === true ? `${TermEvaluator.evaluateTerm(modifierConfig.insertString, runtime, [], 'inject')}` : \"\";\r\n    const oldInjectText = modifierInEditorState.injectText;\r\n    if (oldInjectText === currentInjectText) {\r\n      return [editorState, modifierInEditorState];\r\n    }\r\n\r\n    const newModifierInEditorState = StateManagerHelper.deepCopy(modifierInEditorState);\r\n    newModifierInEditorState.injectText = currentInjectText;\r\n\r\n    // TODO: second step improvement: if a modification is necessary do a best effort to modify the selections too\r\n    let modifiedEditorState = EditorStateHelper.replaceTextInBlock(editorState,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset + oldInjectText.length,\r\n      currentInjectText);\r\n\r\n    modifiedEditorState = EditorStateHelper.applyInlineStyles(modifiedEditorState,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset + currentInjectText.length,\r\n      modifierConfig.inlineStyles);\r\n\r\n    modifiedEditorState = EditorStateHelper.applyEntities(modifiedEditorState,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset + currentInjectText.length,\r\n      modifierConfig.entities);\r\n\r\n    return [modifiedEditorState, newModifierInEditorState];\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Apply a content modifier of type 'dynamic fragment' to the editor's state and calculate the new extract structure\r\n   * for the content modifier.\r\n   */\r\n  static applyDynamicFragmentModifier(editorState, modifierState, modifierInEditorState, modifierConfig, actualPosition, runtime) {\r\n    // avoid unnecessary modification of editor state\r\n    if (modifierState.selected === modifierInEditorState.active) {\r\n      return [editorState, modifierInEditorState];\r\n    }\r\n\r\n    const newModifierInEditorState = StateManagerHelper.deepCopy(modifierInEditorState);\r\n    newModifierInEditorState.active = modifierState.selected;\r\n\r\n    // TODO: second step improvement: if a modification is necessary do a best effort to modify the selections too\r\n    let modifiedEditorState;\r\n    if (modifierState.selected === true) {\r\n      modifiedEditorState = EditorStateHelper.replaceWithBlocks(editorState,\r\n        actualPosition.blockKey,\r\n        actualPosition.offset,\r\n        actualPosition.blockKey,\r\n        actualPosition.offset,\r\n        modifierConfig.blocks,\r\n        modifierConfig.entityMap);\r\n    } else {\r\n      const numberInjectedBlocks = modifierConfig.blocks.length - 1;\r\n\r\n      modifiedEditorState = EditorStateHelper.removeBlocks(editorState,\r\n        actualPosition.blockKey,\r\n        actualPosition.offset,\r\n        PositionCalculationHelper.calculateBlockKey(actualPosition.blockKey, numberInjectedBlocks, editorState),\r\n        (numberInjectedBlocks === 0 ? actualPosition.offset : 0) + modifierConfig.blocks[numberInjectedBlocks].text.length);\r\n    }\r\n\r\n    return [modifiedEditorState, newModifierInEditorState];\r\n  }\r\n\r\n\r\n  // ------------ common helper methods ---------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Run in a loop through all content modifiers specified in our static config structure and execute the given callback for each.\r\n   * \r\n   * We will provide the following parameters to the callback\r\n   *  - modifier: The content modifier configuration from the 'contentModifiers' array in the rich text field configuration.\r\n   *  - indexPathOfModifier: The index path of the content modifier \r\n   *    (i.e. the index path of the rich text field extended with a pseudo index to discern between content-modifier and embedded-link children and the index of the content modifier itself.)\r\n   *  - indexPathOfModifierParent: The index path of the node containing all content-modifier children. \r\n   *    (i.e. the index path of the rich text field extended with a pseudo index to discern between content-modifier and embedded-link children.)\r\n   * \r\n   * @param {object} propsConfig The config structure of the rich text field that contains the content modifier definitions in the 'contentModifiers' attribute.\r\n   * @param {String} editorPath The index path of the rich text field that contains the content modifiers.\r\n   * @param { callback(modifier, indexPathOfModifier) } doForEach The method to call for each content modifier. \r\n   */\r\n  static forEachContentModifier(propsConfig, editorPath, doForEach) {\r\n    const { contentModifiers } = propsConfig;\r\n    if (contentModifiers !== undefined) {\r\n      const modifierParentPath = CbaRichTextField.addContentModifierIndex(editorPath);\r\n      contentModifiers.forEach((modifier, index, all) => {\r\n        const modifierPath = IndexPathHelper.appendIndexToPageSegment(modifierParentPath, index);\r\n        doForEach(modifier, modifierPath, modifierParentPath);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract an unformatted plain text representation from our editor state.\r\n   */\r\n  static calculateTextValue(editorState) {\r\n    // stripping white space character, including space, tab, form feed, line feed.\r\n    // The content is stripped to the plain text (i.e. all formatting is stripped, newlines are replaced by blanks).\r\n    return editorState.getCurrentContent().getPlainText('').replace(/\\s/g, ' ');\r\n  }\r\n\r\n  /**\r\n   * Save the given content modifiers state in our component state object in the components state manager.\r\n   */\r\n  saveModifiersStateInPathState = (modifiersInEditorState) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setModifiersInEditorState(pathState, modifiersInEditorState)\r\n    const { runtime, path } = this.props;\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Save the given Draft editor state in our component state object in the components state manager.\r\n   * We also keep an unformatted plain text representation of our current editor's text content in our component state object.\r\n   */\r\n  saveEditorStateInPathState = (editorState) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setEditorState(pathState, editorState);\r\n    StateAttributeAccess.setTextValue(pathState, CbaRichTextField.calculateTextValue(editorState));\r\n    const { runtime, path } = this.props;\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Save the given selections in our component state object in the components state manager\r\n   * and create a trace log entry.\r\n   */\r\n  saveSelectionsInPathState = (newSelections) => {\r\n    const { runtime, path } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const selections = StateAttributeAccess.extractSelections(pathState);\r\n\r\n    CbaRichTextField.traceHighlightChange(path, selections, newSelections, runtime);\r\n\r\n    StateAttributeAccess.setSelections(pathState, newSelections);\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Trace a change in the highlight selections.\r\n   */\r\n  static traceHighlightChange(path, oldSelectionsRaw, newSelectionsRaw, runtime) {\r\n    const oldSelections = SelectionHelper.TransformSelectionsToTraceSelectionsDTO(oldSelectionsRaw, path, runtime);\r\n    const newSelections = SelectionHelper.TransformSelectionsToTraceSelectionsDTO(newSelectionsRaw, path, runtime);\r\n    CommonActionsHelper.traceUserInteraction('RichTextHighlight', path,\r\n      {\r\n        oldSelections,\r\n        newSelections\r\n      },\r\n      undefined, undefined, runtime);\r\n  }\r\n\r\n  // ------------ rendering ---------------------------------------------------------------------------------------\r\n\r\n  myBlockStyleFn = (contentBlock) => {\r\n    const type = contentBlock.getType();\r\n    if (type.substr(0, 3) === 'cba') {\r\n      return type.replace(/_/g, \" \");\r\n    } else {\r\n      if (type === 'atomic') {\r\n        return 'cbaImageLeft'\r\n      }\r\n      if (type === 'atomic_rtl') {\r\n        return 'cbaImageRight'\r\n      }\r\n      if (type === 'empty_block') {\r\n        return 'cbaClearImage'\r\n      }\r\n\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  mediaBlockRenderer = (block) => {\r\n    const { runtime } = this.props;\r\n    if (block.getType() === 'atomic' || block.getType() === 'atomic_rtl') {\r\n      return {\r\n        component: Media(runtime),\r\n        editable: false,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Calculate the styles map to use for rendering.\r\n   * \r\n   * We start with the styles map from the fixed component configuration \r\n   * and inject the current highlight background color setting from the task state.\r\n   */\r\n  getStylesMap = () => {\r\n    const { config, runtime } = this.props;\r\n    const { highlightColors } = runtime.taskManager.getTopLevelConfiguration();\r\n    const originalStylesMap = CbaRichTextField.findStylesMapInConfig(config);\r\n\r\n    const highlightStyleMap = highlightColors.reduce((accum, rgbaColor) => {\r\n      const rgbaKey = CbaRichTextField.convertHighlightValueToKey(rgbaColor);\r\n      accum[rgbaKey] = {\r\n        backgroundColor: rgbaColor\r\n      };\r\n      return accum;\r\n    }, {});\r\n\r\n    return Object.assign({}, originalStylesMap, highlightStyleMap);\r\n  }\r\n\r\n  /**\r\n   * The generator for the RichTextField puts the styles map into the value attribute itself.\r\n   * Our test items and the generator for the HTMLTextField put the styles map besides the value attribute.\r\n   * On the long run want to have it besides the value attribute since the value attribute is used by the Editor component.\r\n   * \r\n   * This method finds the style map in both places.\r\n   * \r\n   * @param {*} config The config structure for the component given in the page description.\r\n   */\r\n  static findStylesMapInConfig(config) {\r\n    return config.stylesMap === undefined ? config.value.stylesMap : config.stylesMap;\r\n  }\r\n\r\n  /**\r\n   * Get the current highlight color. \r\n   * \r\n   * Precedence: \r\n   *  - current task state setting\r\n   *  - our static config setting\r\n   *  - undefined\r\n   */\r\n  getHighlightColor = (pathState) => {\r\n    const { runtime, config } = this.props;\r\n    const highlightable = StateAttributeAccess.extractHighlightable(pathState);\r\n    if (!highlightable) return undefined;\r\n    return (\r\n      runtime.taskManager.getTopLevelConfiguration().itemHighlightColor\r\n      || config.stylesMap.HIGHLIGHT.backgroundColor\r\n      || undefined);\r\n  }\r\n\r\n  /**\r\n   * Get the current highlight color. \r\n   * \r\n   */\r\n  getHighlightColorKey = (pathState) => {\r\n    const currentColor = this.getHighlightColor(pathState);\r\n    const currentColorKey = CbaRichTextField.convertHighlightValueToKey(currentColor);\r\n    const defaultHighlightKey = \"HIGHLIGHT\";\r\n    const styleMap = this.getStylesMap();\r\n\r\n    return styleMap[currentColorKey] ? currentColorKey : defaultHighlightKey;\r\n  }\r\n\r\n  /**\r\n   * Generate a style tag to put into our top level div tag.\r\n   * \r\n   * This is the only way we found to inject a ::selection pseudo selector.\r\n   */\r\n  generateSelectionStyle = (isHighlightActive, highlightColor, wrapperId, isDisabled) => {\r\n    const selectionColor = isHighlightActive && !isDisabled ? highlightColor : \"transparent\";\r\n\r\n    return (\r\n      /**\r\n       * Handles selection color change #5339\r\n       * Handles caret-color transparent when highlight is not active #5489\r\n       * Handles isDisabled flag inheriting color #5427\r\n       */\r\n      // eslint-disable-next-line react/no-danger\r\n      <style dangerouslySetInnerHTML={\r\n        {\r\n          __html: `\r\n            #${wrapperId} .DraftEditor-root span::selection  { background-color: ${selectionColor}; }\r\n            #${wrapperId} .DraftEditor-root span::-moz-selection  { background-color: ${selectionColor}; }\r\n            ${isHighlightActive ? \"\" : `#${wrapperId}{ caret-color: transparent }`}\r\n            ${isDisabled ? `#${wrapperId} span { color: inherit!important; }` : \"\"}\r\n            ${isDisabled ? `#${wrapperId} .cbaImageRight, #${wrapperId} .cbaImageLeft { opacity: 0.4 }` : \"\"}\r\n          `\r\n        }\r\n      }\r\n      />\r\n    );\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      this.onClickHandler(event);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { runtime, path, config, orientation } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const highlightColor = this.getHighlightColor(pathState);\r\n    const highlightActive = StateAttributeAccess.extractHighlightable(pathState);\r\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\r\n    const wrapperId = IndexPathHelper.getValidCssIdFromPath(path);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\r\n    if (config.toggleType === \"upDown\") {\r\n      CommonConfigHelper.setStyleAttribute(style, \"borderStyle\", selectedState ? \"inset\" : \"outset\");\r\n    }\r\n\r\n    const styleMap = this.getStylesMap();\r\n\r\n    const oldEditorState = StateAttributeAccess.extractEditorState(pathState);\r\n    const modifiersInEditorState = StateAttributeAccess.extractModifiersInEditorState(pathState);\r\n\r\n    const [editorState, newModifiersInEditorState] = CbaRichTextField.applyContentModifiers(oldEditorState, modifiersInEditorState, path, config, runtime);\r\n\r\n    this.saveEditorStateInPathState(editorState);\r\n    this.saveModifiersStateInPathState(newModifiersInEditorState);\r\n\r\n    const linkReceiver = CommonActionsHelper.getDefaultLinkReceiver(this);\r\n    const customDecorators = [\r\n      {\r\n        strategy: findLinkEntities,\r\n        component: DraftLink,\r\n        props: {\r\n          linkReceiver,\r\n          parentPath: CbaRichTextField.addLinkIndex(path),\r\n          runtime,\r\n          tabIndex: config.tabIndex,\r\n          fullRichTextPath: path\r\n        }\r\n      },\r\n      {\r\n        strategy: findBulletEntities,\r\n        component: DraftBullet\r\n      },\r\n      {\r\n        strategy: findMathJaxEntities,\r\n        component: MathJaxEntity\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <div\r\n        id={wrapperId}\r\n        style={style}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n        data-cba-id={config.pageEditId}\r\n        onClick={this.onClickHandler}\r\n        onKeyDown={e => this.handleKeyDown(e)}\r\n        onMouseDown={() => { this.lastUserEvent = \"mouse\" }}\r\n        onTouchStart={() => { this.lastUserEvent = \"touch\" }}\r\n      >\r\n        {this.generateSelectionStyle(highlightActive, highlightColor, wrapperId, isDisabled)}\r\n        <Editor\r\n          runtime={runtime}\r\n          blockStyleFn={this.myBlockStyleFn}\r\n          blockRendererFn={this.mediaBlockRenderer}\r\n          blockRenderMap={DefaultDraftBlockRenderMap}\r\n          handleBeforeInput={() => 'handled'}\r\n          handlePastedText={() => true}\r\n          keyBindingFn={() => 'not-handled-command'}\r\n          customStyleMap={styleMap}\r\n          editorState={editorState}\r\n          decorators={customDecorators}\r\n          onChange={this.onChange}\r\n          plugins={this.plugins}\r\n          ref={(element) => { this.editor = element; }}\r\n          tabIndex={config.tabIndex}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaRichTextField.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\r\n      {\r\n        value: PropTypes.object.isRequired,\r\n        stylesMap: PropTypes.object,\r\n        contentModifiers: PropTypes.array,\r\n        highlightText: PropTypes.bool.isRequired,\r\n        toggleType: PropTypes.oneOf(['none', 'upDown', 'colorChange']).isRequired,\r\n        highlightChangeEvent: PropTypes.string\r\n      }\r\n    )\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n  row: PropTypes.number,\r\n  column: PropTypes.number,\r\n  onParentClick: PropTypes.func,\r\n  checkSelectable: PropTypes.func,\r\n  fromSecond: PropTypes.number,\r\n  toSecond: PropTypes.number\r\n}\r\n\r\nCbaRichTextField.defaultProps = {\r\n  row: undefined,\r\n  column: undefined,\r\n  onParentClick: undefined,\r\n  checkSelectable: undefined,\r\n  fromSecond: undefined,\r\n  toSecond: undefined\r\n}\r\n","import { convertToRaw, SelectionState } from 'draft-js';\r\nimport Utils from '../../utils/Utils';\r\nimport CbaRichTextField from './CbaRichTextField';\r\n\r\n/**\r\n * Helper mehtods used for the 'highlighting' implementation\r\n * in CbaRichTextField.\r\n */\r\nexport default class SelectionHelper {\r\n\r\n  // ------------- editor state related methods ------------------------------------------------------------\r\n\r\n  /**\r\n   * Compare the texts inside the content structures of the given Draft editor states. \r\n   * The method will not take style ranges into account (e.g. highlighted areas do not matter here).\r\n   */\r\n  static contentStateEqual = (oldEditorState, newEditorState) => {\r\n    const oldContentRaw = convertToRaw(oldEditorState.getCurrentContent());\r\n    const newContentRaw = convertToRaw(newEditorState.getCurrentContent());\r\n\r\n    for (let i = 0; i < oldContentRaw.blocks.length; i += 1) {\r\n      if (oldContentRaw.blocks[i].key !== newContentRaw.blocks[i].key || oldContentRaw.blocks[i].text !== newContentRaw.blocks[i].text) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Is there a non-empty selection active in the given Draft editor state?\r\n   */\r\n  static isSelection(editorState) {\r\n    const selection = editorState.getSelection();\r\n    const startKey = selection.getStartKey();\r\n    const endKey = selection.getEndKey();\r\n    const startOffset = selection.getStartOffset();\r\n    const endOffset = selection.getEndOffset();\r\n    return startOffset !== endOffset || startKey !== endKey;\r\n  }\r\n\r\n  static areEqual(selection1, selection2) {\r\n    return selection1.startKey === selection2.startKey\r\n      && selection1.startKey === selection2.startKey\r\n      && selection1.endKey === selection2.endKey\r\n      && selection1.startOffset === selection2.startOffset\r\n      && selection1.endOffset === selection2.endOffset\r\n      && selection1.currentHighlightKey === selection2.currentHighlightKey\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Serializes the selection from the editorState object\r\n   * \r\n   * @param {EditorState} editorState \r\n   * @param {String} highlightKey \r\n   */\r\n  static getSelection(editorState, highlightKey, blockKeysList) {\r\n    const selection = editorState.getSelection();\r\n    const editorContent = editorState.getCurrentContent();\r\n    const rawContent = convertToRaw(editorContent);\r\n\r\n    const builtSelection = SelectionHelper.buildSelection(selection.getStartKey(), selection.getEndKey(),\r\n      selection.getStartOffset(), selection.getEndOffset(), highlightKey);\r\n\r\n    // Move start of selection to begining of next available block if start of selection is beyond the end of it's block\r\n    while (rawContent.blocks[builtSelection.startKey].text.length === builtSelection.startOffset) {\r\n      const startKeyIndex = blockKeysList.indexOf(builtSelection.startKey);\r\n      if (blockKeysList[startKeyIndex + 1]) {\r\n        builtSelection.startOffset = 0;\r\n        builtSelection.startKey = blockKeysList[startKeyIndex + 1];\r\n      } else break;\r\n\r\n    }\r\n\r\n    return builtSelection;\r\n  }\r\n\r\n  static buildSelection(startKey, endKey, startOffset, endOffset, highlightKey) {\r\n    return {\r\n      startKey, endKey, startOffset, endOffset, highlightKey\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} selection1 \r\n   * @param {*} selection2 \r\n   * \r\n   * @returns {Object} interesction - intersection object\r\n   * @returns {Boolean} intersection.isIntersect - \r\n   * @returns {String} intersection.type - one of [\"left\", \"right\", \"cover\", \"inside\", \"none\"]. Specifies the raport of selection 1 with selection 2\r\n   */\r\n  static getIntersect(selection1, selection2, blockKeysList) {\r\n    let type = \"\";\r\n    let isIntersect = true;\r\n\r\n    const selection1StartKeyIndex = blockKeysList.indexOf(selection1.startKey);\r\n    const selection2StartKeyIndex = blockKeysList.indexOf(selection2.startKey);\r\n    const selection1EndKeyIndex = blockKeysList.indexOf(selection1.endKey);\r\n    const selection2EndKeyIndex = blockKeysList.indexOf(selection2.endKey);\r\n\r\n    const isSameRowStart = selection1StartKeyIndex === selection2StartKeyIndex;\r\n    const isSameRowEnd = selection1EndKeyIndex === selection2EndKeyIndex;\r\n\r\n    const isS1StartSameRowAsS2End = selection1StartKeyIndex === selection2EndKeyIndex;\r\n    const isS1EndSameRowAsS2Start = selection1EndKeyIndex === selection2StartKeyIndex;\r\n\r\n    const isSel1StartToLeftOfSel2 = selection1StartKeyIndex < selection2StartKeyIndex || (isSameRowStart && selection1.startOffset < selection2.startOffset);\r\n    const isSel1EndToLeftOfSel2 = selection1EndKeyIndex < selection2StartKeyIndex || (isS1EndSameRowAsS2Start && selection1.endOffset < selection2.startOffset)\r\n    const isSel1StartToRightOfSel2 = selection1StartKeyIndex > selection2EndKeyIndex || (isS1StartSameRowAsS2End && selection1.startOffset > selection2.endOffset)\r\n    const isSel1EndToRightOfSel2 = selection1EndKeyIndex > selection2EndKeyIndex || (isSameRowEnd && selection1.endOffset > selection2.endOffset);\r\n\r\n    if (isSel1StartToLeftOfSel2 && isSel1EndToRightOfSel2) {\r\n      type = \"cover\";\r\n    }\r\n\r\n    if (!isSel1StartToLeftOfSel2 && !isSel1EndToRightOfSel2) {\r\n      type = \"inside\";\r\n    }\r\n\r\n    if (isSel1StartToLeftOfSel2 && !isSel1EndToRightOfSel2) {\r\n      type = \"left\";\r\n    }\r\n\r\n    if (!isSel1StartToLeftOfSel2 && isSel1EndToRightOfSel2) {\r\n      type = \"right\";\r\n    }\r\n\r\n    if (!type || (isSel1StartToLeftOfSel2 && isSel1EndToLeftOfSel2) || (isSel1StartToRightOfSel2 && isSel1EndToRightOfSel2)) {\r\n      type = \"none\";\r\n      isIntersect = false;\r\n    }\r\n\r\n    return {\r\n      type,\r\n      isIntersect\r\n    };\r\n  }\r\n\r\n\r\n  /*\r\n   * Build a selections array from the 'HIGHLIGHT'-styled areas in the given Draft editor state.\r\n   */\r\n  static calculateSelectionsArray = (editorState, blockKeysList) => {\r\n    const editorContent = editorState.getCurrentContent();\r\n    const rawContent = convertToRaw(editorContent);\r\n    return SelectionHelper.calculateSelectionsArrayFromContentState(rawContent, blockKeysList);\r\n  }\r\n\r\n\r\n  // -------------- selection related methods ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Create a new list of selections that contains all selections of the given list\r\n   * excluding the given selection to be removed.\r\n   * \r\n   * The method expects and returns selection objects with the four attributes startKey, startOffset, endKey, endOffset.\r\n   */\r\n  static removeSelectionFromSelectionsArray(selectionsArray, toRemove) {\r\n    const selections = selectionsArray.slice();\r\n    const filteredArray = selections.filter(item => !(\r\n      toRemove.startOffset === item.startOffset\r\n      && toRemove.endOffset === item.endOffset\r\n      && toRemove.startKey === item.startKey\r\n      && toRemove.endKey === item.endKey\r\n      && toRemove.highlightKey === item.highlightKey))\r\n\r\n    return filteredArray;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the selection from the given selections that is hit be the given click.\r\n   * \r\n   * The method expects and returns selection objects with the four attributes startKey, startOffset, endKey, endOffset.\r\n   * \r\n   * The method returns undefined if the click does not hit any selection in the given selections array.\r\n   */\r\n  static getSelectionHitByClick(click, selections, keyRowOrder) {\r\n    const clickedPosition = {\r\n      rowKey: click.getStartKey(),\r\n      pos: click.getStartOffset()\r\n    }\r\n\r\n    const filterConditions = selection => (\r\n      SelectionHelper.isMultipleRow(selection)\r\n        ? SelectionHelper.isSelectionHitByClickOnMultipleRows(clickedPosition, selection, keyRowOrder)\r\n        : (\r\n          SelectionHelper.isSelectionHitByClickInsideOneRow(clickedPosition, selection)\r\n          || SelectionHelper.isSelectionHitByClickOnOneCharacter(clickedPosition, selection)\r\n        )\r\n    );\r\n\r\n    const filteredSelections = selections.filter(selection => filterConditions(selection));\r\n\r\n    const { length } = filteredSelections;\r\n\r\n    return length > 0 ? filteredSelections[length - 1] : undefined;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the given selection object\r\n   * Selection keeps the position of the cursor\r\n   * @param {*} selection -> Given selection state object\r\n   * @returns {*} SelectionState\r\n   */\r\n  static clearSelection(selection) {\r\n\r\n    const focusKey = selection.getFocusKey();\r\n    const startOffset = selection.getStartOffset();\r\n    const endOffset = selection.getEndOffset();\r\n\r\n    const emptySelection = SelectionState.createEmpty(focusKey);\r\n\r\n    if (selection.getIsBackward()) {\r\n      return emptySelection.merge({\r\n        focusOffset: startOffset,\r\n        anchorOffset: startOffset\r\n      });\r\n    }\r\n\r\n    return emptySelection.merge({\r\n      focusOffset: endOffset,\r\n      anchorOffset: endOffset\r\n    });\r\n\r\n  }\r\n\r\n  // ---------------- blocks related methods ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the list of block keys in the the order of the blocks appearing in the given blocks list, \r\n   * e.g. [\"k0\", \"k1\"] \r\n   */\r\n  static getListOfBlockKeysInBlockOrder(blocks) {\r\n    return blocks.map(block => block.key);\r\n  }\r\n\r\n  /**\r\n   * Get a map from block-key to index-of-block for the given block keys list.\r\n   */\r\n  static getBlockKeysToBlockIndexMap(blockKeysList) {\r\n    const keyToIndexMap = {};\r\n    blockKeysList.forEach((element, index) => {\r\n      keyToIndexMap[element] = index;\r\n    });\r\n    return keyToIndexMap;\r\n  }\r\n\r\n  /**\r\n   * Transforms given Selections list to a list of DTOs for tracing\r\n   * @param {Array} selections \r\n   */\r\n  static TransformSelectionsToTraceSelectionsDTO(selections, path, runtime) {\r\n    const traceSelectionsDTO = [];\r\n\r\n    selections.forEach((selection) => {\r\n      const { startKey, endKey, startOffset, endOffset, highlightKey } = selection;\r\n      traceSelectionsDTO.push({\r\n        startKey,\r\n        endKey,\r\n        startOffset,\r\n        endOffset,\r\n        highlightColor: CbaRichTextField.convertHighlightKeyToValue(highlightKey, path, runtime)\r\n      })\r\n    });\r\n\r\n    return traceSelectionsDTO;\r\n  }\r\n\r\n\r\n  // ------------------ private stuff ----------------------------------------------------------\r\n  //\r\n  // All methods here expect and return selection objects with the four attributes startKey, startOffset, endKey, endOffset.\r\n  // \r\n\r\n  /*\r\n   * Build a selections array from the 'HIGHLIGHT'-styled areas in the given \r\n   * serializable content state (i.e. a RawDraftContentState).\r\n   * \r\n   * The returned array contains selection objects with five attributes: startKey, startOffset, endKey, endOffset, highlightKey.\r\n   */\r\n  static calculateSelectionsArrayFromContentState = (rawContent, blockKeysList) => {\r\n    const highlightSelections = {\r\n      blockTextLengths: {},\r\n      rawSelections: []\r\n    }\r\n\r\n    // Find all areas in the editor's blocks with 'HIGHLIGHT' style and collect them in the builtSelections structure:\r\n    rawContent.blocks.forEach((block, blockIndex) => {\r\n      // set block length\r\n      highlightSelections.blockTextLengths[block.key] = block.text.length;\r\n      block.inlineStyleRanges.forEach((inlineStyle) => {\r\n        if (inlineStyle.style && inlineStyle.style.includes(\"HIGHLIGHT\")) {\r\n          highlightSelections.rawSelections.push({\r\n            startKey: blockKeysList[blockIndex],\r\n            endKey: blockKeysList[blockIndex],\r\n            startOffset: inlineStyle.offset,\r\n            endOffset: inlineStyle.offset + inlineStyle.length,\r\n            highlightKey: inlineStyle.style\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    // merge all selections that overlap\r\n    return SelectionHelper.mergeRowSelections(highlightSelections.rawSelections, highlightSelections.blockTextLengths, blockKeysList);\r\n  }\r\n\r\n\r\n  /** \r\n   * Merge each group of contiguous (or even overlapping?) selections into a single selection. \r\n   * \r\n   * The method returns a new selections array with the merged selections (having attributes startKey, startOffset, endKey, endOffset).\r\n   * \r\n   * @param {[*]} selections Array of selections to be merged. Each selection must have the four attributes startKey, startOffset, endKey, endOffset.\r\n   * @param {*} blockTextLengths Map 'block key -> block's text length'\r\n   * @param {[string]} keyRowOrder List of block keys in the order of block appearance in the editor content.\r\n   */\r\n  static mergeRowSelections(selections, blockTextLengths, keyRowOrder) {\r\n    const blockKeyToIndexMap = SelectionHelper.getBlockKeysToBlockIndexMap(keyRowOrder);\r\n    const selectionsMergedStepByStep = Utils.deepCopy(selections);\r\n\r\n    for (let currentSelectionIndex = 0; currentSelectionIndex < selectionsMergedStepByStep.length - 1; currentSelectionIndex += 1) {\r\n      const currentSelection = selectionsMergedStepByStep[currentSelectionIndex];\r\n      const nextSelection = selectionsMergedStepByStep[currentSelectionIndex + 1];\r\n\r\n      const isSelectionToEndOfBlock = currentSelection.endOffset === blockTextLengths[currentSelection.endKey];\r\n      const isNextSelectionFromStart = (blockKeyToIndexMap[currentSelection.endKey] + 1) === blockKeyToIndexMap[nextSelection.startKey] && nextSelection.startOffset === 0;\r\n      const isNextSelectionSameColor = currentSelection.highlightKey === nextSelection.highlightKey;\r\n\r\n      if (isNextSelectionSameColor && isSelectionToEndOfBlock && isNextSelectionFromStart) {\r\n        const newMergedSelection = {\r\n          startKey: currentSelection.startKey,\r\n          endKey: nextSelection.endKey,\r\n          startOffset: currentSelection.startOffset,\r\n          endOffset: nextSelection.endOffset,\r\n          highlightKey: currentSelection.highlightKey\r\n        }\r\n\r\n        selectionsMergedStepByStep[currentSelectionIndex] = newMergedSelection;\r\n        selectionsMergedStepByStep.splice(currentSelectionIndex + 1, 1);\r\n        currentSelectionIndex -= 1;\r\n      }\r\n    }\r\n\r\n    return selectionsMergedStepByStep;\r\n  }\r\n\r\n  /**\r\n   * Does the given selection  span more than one row (i.e. block in the Draft's editor value model)?\r\n   */\r\n  static isMultipleRow = selection => selection.startKey !== selection.endKey\r\n\r\n  /**\r\n   * Does the given clicked position hit the given multiline selection?\r\n   */\r\n  static isSelectionHitByClickOnMultipleRows(clickedPosition, selection, keyRowOrder) {\r\n    return (\r\n      SelectionHelper.isTopRowClick(clickedPosition, selection)\r\n      || SelectionHelper.isBottomRowClick(clickedPosition, selection)\r\n      || SelectionHelper.isMiddleRowClick(clickedPosition, selection, keyRowOrder));\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit a 'middle' row of the given multiline selection?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isMiddleRowClick(clickedPosition, selection, keyRowOrder) {\r\n    const startIndex = keyRowOrder.indexOf(selection.startKey);\r\n    const endIndex = keyRowOrder.indexOf(selection.endKey);\r\n\r\n    for (let i = startIndex + 1; i < endIndex; i += 1) {\r\n      if (keyRowOrder[i] === clickedPosition.rowKey) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit the given multiline selection in its first row?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isTopRowClick(clickedPosition, selection) {\r\n    return clickedPosition.rowKey === selection.startKey && clickedPosition.pos > selection.startOffset;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit the given multiline selection in its last row?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isBottomRowClick(clickedPosition, selection) {\r\n    return clickedPosition.rowKey === selection.endKey && clickedPosition.pos < selection.endOffset;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit inside the given single row selection?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isSelectionHitByClickInsideOneRow(clickedPosition, selection) {\r\n    return clickedPosition.pos > selection.startOffset\r\n      && clickedPosition.pos < selection.endOffset\r\n      && clickedPosition.rowKey === selection.startKey;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit the given single character selection?\r\n   * \r\n   * We accept a click before and after the single character.\r\n   */\r\n  static isSelectionHitByClickOnOneCharacter(clickedPosition, selection) {\r\n    return (clickedPosition.rowKey === selection.startKey && selection.endOffset - selection.startOffset === 1)\r\n      && (clickedPosition.pos === selection.startOffset || clickedPosition.pos === selection.endOffset);\r\n  }\r\n\r\n\r\n}\r\n","import SelectionHelper from './SelectionHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport CbaRichTextField from './CbaRichTextField';\r\n\r\n\r\n/**\r\n * Helper methods to check the current 'highlight' selections\r\n * in a rich text field. These methods answer questions like:\r\n * Are there any non-blank characters selected?\r\n * Is a named 'text block' currently completely or partially selected?\r\n */\r\nexport default class TextBlockSelectHelper {\r\n\r\n  /**\r\n   * Is there any non-blank character inside the current selection of the given rich text field?\r\n   * @param {*} richTextPathState The full path state of the rich text field containing the text block.\r\n   * @param {*} richTextConfig The JSON configuration of the rich text field containing the text block.\r\n   */\r\n  static isSelectionContainsNonBlank(richTextPathState, richTextConfig, highlightColor) {\r\n    if (richTextConfig.value === undefined) {\r\n      console.warn(\"Invalid configuration found in rich text field!\");\r\n      return false;\r\n    }\r\n\r\n    const draftBlocks = richTextConfig.value.blocks;\r\n    if (draftBlocks === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const blockKeyToIndexMap = TextBlockSelectHelper.buildBlockKeyToIndexMap(richTextConfig);\r\n    const currentSelections = TextBlockSelectHelper.getSpansFromSelections(richTextPathState);\r\n\r\n    const spanArrayContainsNonBlank = TextBlockSelectHelper.spanArrayContainsNonBlank(currentSelections, draftBlocks, blockKeyToIndexMap);\r\n    const highlightedSelection = TextBlockSelectHelper.selectionsHighlighted(currentSelections, highlightColor);\r\n    return (spanArrayContainsNonBlank && highlightedSelection);\r\n  }\r\n\r\n  /**\r\n   * Is the text block identified by the given text block name (at least partially) selected by the current selection \r\n   * in the rich text field?\r\n   * @param {*} blockName The name of the text block to look at.\r\n   * @param {*} richTextPathState The full path state of the rich text field containing the text block.\r\n   * @param {*} richTextConfig The JSON configuration of the rich text field containing the text block.\r\n   * @param {*} partial Is it sufficient to have at least one non-blank character selected of do we need a full selection of all non-blank characters?\r\n   */\r\n  static isTextBlockSelected(blockName, richTextPathState, richTextConfig, partial, highlightColor) {\r\n\r\n    if (richTextConfig.value === undefined) {\r\n      console.warn(\"Invalid configuration found in rich text field!\");\r\n      return false;\r\n    }\r\n\r\n    const draftBlocks = richTextConfig.value.blocks;\r\n    if (draftBlocks === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const allBlocksConfig = richTextConfig.textBlocks;\r\n    if (allBlocksConfig === undefined) {\r\n      console.warn(`Text block with name ${blockName} not found in rich text field ${CommonConfigHelper.getIdentifyingInfoForLogMessage(richTextConfig)} (no text blocks there)`);\r\n      return false;\r\n    }\r\n\r\n    const blockConfig = TextBlockSelectHelper.findBlockConfigForBlockName(blockName, richTextConfig.textBlocks);\r\n    if (blockConfig === undefined) {\r\n      console.warn(`Text block with name ${blockName} not found in rich text field ${CommonConfigHelper.getIdentifyingInfoForLogMessage(richTextConfig)} (no such block)`);\r\n      return false;\r\n    }\r\n\r\n    const currentSelections = TextBlockSelectHelper.getSpansFromSelections(richTextPathState);\r\n\r\n    const blockKeyToIndexMap = TextBlockSelectHelper.buildBlockKeyToIndexMap(richTextConfig);\r\n\r\n    const { spans } = blockConfig;\r\n\r\n    return (partial\r\n      ? (spans.find(span => TextBlockSelectHelper.selectionsCoverANonBlankInSpanWithOptionalHighlight(currentSelections, span, draftBlocks, blockKeyToIndexMap, highlightColor)) !== undefined)\r\n      : spans.every(span => TextBlockSelectHelper.selectionsCoverNonBlanksInSpanWithOptionalHighlight(currentSelections, span, draftBlocks, blockKeyToIndexMap, highlightColor)));\r\n  }\r\n\r\n  static selectionsCoverNonBlanksInSpanWithOptionalHighlight(currentSelections, span, draftBlocks, blockKeyToIndexMap, highlightColor) {\r\n    const selectionsCoverNonBlanksInSpan = TextBlockSelectHelper.selectionsCoverNonBlanksInSpan(currentSelections, span, draftBlocks, blockKeyToIndexMap);\r\n    const selectionsCoverSpanWithGivenHighlightColor = TextBlockSelectHelper.selectionsCoverSpanWithGivenHighlightColor(currentSelections, span, draftBlocks, blockKeyToIndexMap, highlightColor);\r\n    return selectionsCoverNonBlanksInSpan && selectionsCoverSpanWithGivenHighlightColor;\r\n  }\r\n\r\n  static selectionsCoverSpanWithGivenHighlightColor(selections, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor) {\r\n    if (highlightColor === null) return true;\r\n    return selections.every((selection, index, all) => TextBlockSelectHelper.selectionCoverSpanWithGivenHighlightColor(selection, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor));\r\n  }\r\n\r\n  static selectionCoverSpanWithGivenHighlightColor(selection, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor) {\r\n    const checkSelection = TextBlockSelectHelper.selectionCoversANonBlankInSpan(selection, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor);\r\n    return checkSelection ? this.selectionHighlighted(selection, highlightColor) : true;\r\n  }\r\n\r\n  static selectionsHighlighted(currentSelections, highlightColor) {\r\n    if (highlightColor === null) return true;\r\n    return (currentSelections.find(currentSelection => TextBlockSelectHelper.selectionHighlighted(currentSelection, highlightColor)) !== undefined)\r\n  }\r\n\r\n  static selectionHighlighted(selection, highlightColor) {\r\n    if (highlightColor === null) return true;\r\n    return (highlightColor === selection.highlightColor);\r\n  }\r\n\r\n  static findBlockConfigForBlockName(blockName, allBlocksConfig) {\r\n    return allBlocksConfig.find(blockConfig => blockConfig.name === blockName)\r\n  }\r\n\r\n  static buildBlockKeyToIndexMap(richTextConfig) {\r\n    return SelectionHelper.getBlockKeysToBlockIndexMap(SelectionHelper.getListOfBlockKeysInBlockOrder(richTextConfig.value.blocks));\r\n  }\r\n\r\n\r\n  /**\r\n   * Return spans representing the current selections in the rich text field.\r\n   * @param {*} richTextPathState \r\n   */\r\n  static getSpansFromSelections(richTextPathState) {\r\n    const defaultHighlightColor = CbaRichTextField.convertHighlightValueToKey(richTextPathState.defaultHighlightColor);\r\n    return richTextPathState.selections.map(editorSelection => TextBlockSelectHelper.getSpanFromSelection(editorSelection, defaultHighlightColor));\r\n  }\r\n\r\n  /**\r\n   * Return a span representing the given current selection.\r\n   * \r\n   * @param {{startKey, startOffset, endKey, endOffset}} currentSelection A selection object representing one area of the current selections.\r\n   * @return {{start: { blockKey, offset}, end: {blockKey, offset}}}\r\n   */\r\n  static getSpanFromSelection(currentSelection, defaultHighlightColor) {\r\n    return {\r\n      start: {\r\n        blockKey: currentSelection.startKey,\r\n        offset: currentSelection.startOffset\r\n      },\r\n      end: {\r\n        blockKey: currentSelection.endKey,\r\n        offset: currentSelection.endOffset\r\n      },\r\n      highlightColor: (currentSelection.highlightKey === \"HIGHLIGHT\") ? defaultHighlightColor : currentSelection.highlightKey\r\n    };\r\n  }\r\n\r\n  static selectionsCoverANonBlankInSpanWithOptionalHighlight(selections, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor) {\r\n    return selections.find((selection, index, all) => (TextBlockSelectHelper.selectionCoversANonBlankInSpan(selection, spanToCover, draftBlocks, blockKeyToIndexMap, highlightColor) && TextBlockSelectHelper.selectionHighlighted(selection, highlightColor))) !== undefined;\r\n  }\r\n\r\n  static selectionCoversANonBlankInSpan(selection, spanToCover, draftBlocks, blockKeyToIndexMap) {\r\n    const overlap = TextBlockSelectHelper.getOverlap(selection, spanToCover, blockKeyToIndexMap);\r\n    return overlap === undefined ? false : TextBlockSelectHelper.spanContainsNonBlank(overlap, draftBlocks, blockKeyToIndexMap);\r\n  }\r\n\r\n  static selectionsCoverNonBlanksInSpan(selections, spanToCover, draftBlocks, blockKeyToIndexMap) {\r\n    //  Calculate areas in the span not covered by the selection. \r\n    const uncoveredAreas = TextBlockSelectHelper.calculateUncoveredAreas(selections, spanToCover, blockKeyToIndexMap);\r\n\r\n    //  Look for non-blanks in the uncovered areas. Result is true if no non-blanks are there, otherwise false.\r\n    return !TextBlockSelectHelper.spanArrayContainsNonBlank(uncoveredAreas, draftBlocks, blockKeyToIndexMap);\r\n  }\r\n\r\n  /**\r\n   * Calculate an array of spans not covered by the given selections.\r\n   * \r\n   * @param {*} selections \r\n   * @param {*} spanToCover \r\n   * @param {*} blockKeyToIndexMap \r\n   */\r\n  static calculateUncoveredAreas(selections, spanToCover, blockKeyToIndexMap) {\r\n    // Start with the complete span to cover as only element in a list of 'uncovered areas'. \r\n    // Loop over all selections: \r\n    //   Find the first uncovered area that is hit by the selection, punch out the part covered by the selection.\r\n    //   This may trim the uncovered area or split it in a left and a right part. Replace the original uncovered area with the rests of it \r\n    //   in the list of uncovered areas (in correct order: left first, right after that).\r\n    //  The loop keeps the list of uncovered areas sorted. Since the selections do not overlap we have to process \r\n    //  the first afflicted uncovered area only for each selection.\r\n    let uncoveredAreas = [spanToCover];\r\n    selections.forEach((currentSelection, index, all) => {\r\n      uncoveredAreas = TextBlockSelectHelper.calculateUncoveredAreasBySingleSelection(currentSelection, uncoveredAreas, blockKeyToIndexMap);\r\n    });\r\n    return uncoveredAreas;\r\n  }\r\n\r\n  /**\r\n   * Calculate an array of spans not covered by the given selection.\r\n   * \r\n   * @param {*} selection \r\n   * @param {*} spansToCover \r\n   * @param {*} blockKeyToIndexMap \r\n   */\r\n  static calculateUncoveredAreasBySingleSelection(selection, spansToCover, blockKeyToIndexMap) {\r\n    // Start with the complete span to cover as only element in a list of 'uncovered areas'. \r\n    // Loop over all selections: \r\n    //   Find the first uncovered area that is hit by the selection, punch out the part covered by the selection.\r\n    //   This may trim the uncovered area or split it in a left and a right part. Replace the original uncovered area with the rests of it \r\n    //   in the list of uncovered areas (in correct order: left first, right after that).\r\n    //  The loop keeps the list of uncovered areas sorted. Since the selections do not overlap we have to process \r\n    //  the first afflicted uncovered area only for each selection.\r\n    let uncoveredAreas = spansToCover;\r\n    let hitFound = false;\r\n    let areaIndex;\r\n    for (areaIndex = 0; !hitFound && areaIndex < uncoveredAreas.length; areaIndex += 1) {\r\n      const punchTarget = uncoveredAreas[areaIndex];\r\n      const remainingAreas = TextBlockSelectHelper.punch(selection, punchTarget, blockKeyToIndexMap);\r\n      if (remainingAreas !== undefined) {\r\n        hitFound = true;\r\n        uncoveredAreas = TextBlockSelectHelper.replaceEntryByArray(uncoveredAreas, areaIndex, remainingAreas);\r\n      }\r\n    }\r\n    return uncoveredAreas;\r\n  }\r\n\r\n  static dumpObject(object) {\r\n    return JSON.stringify(object);\r\n  }\r\n\r\n  static replaceEntryByArray(arrayToModify, indexToReplace, arrayToBeInserted) {\r\n    return arrayToModify.slice(0, indexToReplace).concat(arrayToBeInserted).concat(arrayToModify.slice(indexToReplace + 1));\r\n  }\r\n\r\n\r\n  /**\r\n   * Does the given span array contain any non-blank character?\r\n   * \r\n   * @param {[{start: { blockKey, offset}, end: {blockKey, offset}}] } spanArray An array of spans to be checked.\r\n   * @param {[{key, text}]} draftBlocks The text content blocks for the Draft editor.\r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static spanArrayContainsNonBlank(spanArray, draftBlocks, blockKeyToIndexMap) {\r\n    let nonBlankFound = false;\r\n    let spanIndex;\r\n    for (spanIndex = 0; !nonBlankFound && spanIndex < spanArray.length; spanIndex += 1) {\r\n      if (TextBlockSelectHelper.spanContainsNonBlank(spanArray[spanIndex], draftBlocks, blockKeyToIndexMap)) {\r\n        nonBlankFound = true;\r\n      }\r\n    }\r\n    return nonBlankFound;\r\n  }\r\n\r\n\r\n  /**\r\n   * Does the given span contain any non-blank character?\r\n   * \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}} } span A span to be checked.\r\n   * @param {[{key, text}]} draftBlocks The text content blocks for the Draft editor.\r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static spanContainsNonBlank(span, draftBlocks, blockKeyToIndexMap) {\r\n    const startKeyIndex = blockKeyToIndexMap[span.start.blockKey];\r\n    const endKeyIndex = blockKeyToIndexMap[span.end.blockKey];\r\n\r\n    if (startKeyIndex === endKeyIndex) {\r\n      return TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[startKeyIndex].text.substring(span.start.offset, span.end.offset));\r\n    }\r\n\r\n    let nonBlankFound = TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[startKeyIndex].text.substring(span.start.offset));\r\n    let keyIndex;\r\n    for (keyIndex = startKeyIndex + 1; !nonBlankFound && keyIndex < endKeyIndex; keyIndex += 1) {\r\n      nonBlankFound = TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[keyIndex].text);\r\n    }\r\n    if (!nonBlankFound) {\r\n      nonBlankFound = TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[endKeyIndex].text.substring(0, span.end.offset));\r\n    }\r\n\r\n    return nonBlankFound;\r\n  }\r\n\r\n  static stringContainsNonBlank(string) {\r\n    return /\\S/.test(string);\r\n  }\r\n\r\n  /**\r\n   * Punch out the given selection from the given target span. \r\n   * If they don't overlap return undefined. \r\n   * Otherwise return one or two spans that remain after punching out the given punch span from the given target span. \r\n   * \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}}} punchSpan A span to be punched from the target span. \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}} } targetSpan A span the punch is applied to.\r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   * @returns {[{start: { blockKey, offset}, end: {blockKey, offset} }]} The rest of the target span afer punching. \r\n   */\r\n  static punch(punchSpan, targetSpan, blockKeyToIndexMap) {\r\n    const leftPunchBorder = TextBlockSelectHelper.max(punchSpan.start, targetSpan.start, blockKeyToIndexMap);\r\n    const rightPunchBorder = TextBlockSelectHelper.min(punchSpan.end, targetSpan.end, blockKeyToIndexMap);\r\n    if (TextBlockSelectHelper.isLessOrEqual(leftPunchBorder, rightPunchBorder, blockKeyToIndexMap)) {\r\n      const result = [];\r\n      if (TextBlockSelectHelper.isLess(targetSpan.start, leftPunchBorder, blockKeyToIndexMap)) {\r\n        result.push({\r\n          start: targetSpan.start,\r\n          end: leftPunchBorder\r\n        });\r\n      }\r\n      if (TextBlockSelectHelper.isGreater(targetSpan.end, rightPunchBorder, blockKeyToIndexMap)) {\r\n        result.push({\r\n          start: rightPunchBorder,\r\n          end: targetSpan.end\r\n        });\r\n      }\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the overlap of two spans.\r\n   * If they don't overlap return undefined. \r\n   * \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}}} oneSpan \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}} } anotherSpan \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   * @returns {[{start: { blockKey, offset}, end: {blockKey, offset} }]} The overlap or undefined if the spans do not overlap. \r\n   */\r\n  static getOverlap(oneSpan, anotherSpan, blockKeyToIndexMap) {\r\n    const leftOverlapBorder = TextBlockSelectHelper.max(oneSpan.start, anotherSpan.start, blockKeyToIndexMap);\r\n    const rightOverlapBorder = TextBlockSelectHelper.min(oneSpan.end, anotherSpan.end, blockKeyToIndexMap);\r\n    return (TextBlockSelectHelper.isLessOrEqual(leftOverlapBorder, rightOverlapBorder, blockKeyToIndexMap)\r\n      ? {\r\n        start: leftOverlapBorder,\r\n        end: rightOverlapBorder\r\n      }\r\n      : undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Return the maximum of the given span borders.\r\n   * \r\n   * @param {{blockKey, offset}} one\r\n   * @param {{blockKey, offset}} another \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static max(one, another, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isLess(one, another, blockKeyToIndexMap) ? another : one;\r\n  }\r\n\r\n  /**\r\n   * Return the minimum of the given span borders.\r\n   * \r\n   * @param {{blockKey, offset}} one\r\n   * @param {{blockKey, offset}} another \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static min(one, another, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isLess(one, another, blockKeyToIndexMap) ? one : another;\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static isLessOrEqual(leftBorder, rightBorder, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isEqual(leftBorder, rightBorder) || TextBlockSelectHelper.isLess(leftBorder, rightBorder, blockKeyToIndexMap);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static isGreater(leftBorder, rightBorder, blockKeyToIndexMap) {\r\n    return !TextBlockSelectHelper.isLessOrEqual(leftBorder, rightBorder, blockKeyToIndexMap);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static isLess(leftBorder, rightBorder, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isLessBlockKey(leftBorder.blockKey, rightBorder.blockKey, blockKeyToIndexMap) || (leftBorder.blockKey === rightBorder.blockKey && leftBorder.offset < rightBorder.offset);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   */\r\n  static isEqual(leftBorder, rightBorder) {\r\n    return leftBorder.blockKey === rightBorder.blockKey && leftBorder.offset === rightBorder.offset;\r\n  }\r\n\r\n  static isLessBlockKey(leftKey, rightKey, blockKeyToIndexMap) {\r\n    return blockKeyToIndexMap[leftKey] < blockKeyToIndexMap[rightKey];\r\n  }\r\n\r\n}\r\n","import CommonActionsHelper from './CommonActionsHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport RenderingHelper from './RenderingHelper';\nimport TableHelper from './table/TableHelper';\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport UserDefPathHelper from '../state/UserDefPathHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\n\n/**\n * Static methods used by our input components CbaInputField and CbaSingleLineInputField. \n */\nexport default class InputComponent {\n\n  static addAttributesToInitialState(initialState, configProps) {\n    StateAttributeAccess.setTextValue(initialState, configProps.text.label === undefined ? '' : configProps.text.label);\n  }\n\n  static isValidText(text, validationPattern) {\n    if (validationPattern === undefined) {\n      return true;\n    }\n    try {\n      const expression = new RegExp(`${validationPattern}`, 'm');\n      return expression.test(text);\n    } catch (exception) {\n      console.log(`Invalid regular expression ${validationPattern} on input field -> accepting input without check.`);\n      return true;\n    }\n  }\n\n  static onChangeHandler(component, event, userInteraction, traceType) {\n    const pathState = ComponentStateHelper.getState(component);\n    const oldText = StateAttributeAccess.extractTextValue(pathState);\n    const newText = event.target.value;\n    const { path, config, runtime, isInEditMode } = component.props;\n    const { nativeEvent } = event;\n    const inputTypeValue = (nativeEvent !== undefined) ? nativeEvent.inputType : undefined;\n    let inputDataValue = (nativeEvent !== undefined && nativeEvent.data !== null) ? nativeEvent.data : undefined;\n\n    const { validationPattern, validationFailEvent, sourceInputPath } = config;\n    const newTextIsValid = InputComponent.isValidText(newText, validationPattern);\n    const newTextValue = newTextIsValid ? newText : oldText;\n\n    // compute deleted text only if it is not a table cell or value input component\n    const computeDeletedText = !(config.isVariableValueInput || isInEditMode);\n    if (computeDeletedText && (newTextValue.length < oldText.length)) {\n      const diffIndex = oldText.split('').findIndex((char, index) => char !== newTextValue[index]);\n      inputDataValue = oldText.slice(diffIndex, diffIndex + (oldText.length - newTextValue.length));\n    }\n\n    const traceDetails = (userInteraction === 'ValueInputModified')\n      ? {\n        newValue: newText,\n        inputType: inputTypeValue\n      }\n      : {\n        oldTextValue: oldText,\n        newTextValue,\n        origin: 'keyboard',\n        validationPattern,\n        invalidTextValue: newTextIsValid ? undefined : newText,\n        inputType: inputTypeValue,\n        inputData: inputDataValue\n      };\n    // do not trace in for table cells\n    if (!isInEditMode) {\n      CommonActionsHelper.traceUserInteraction(\n        userInteraction, path,\n        traceDetails,\n        event,\n        {\n          type: traceType,\n          value: path\n        },\n        runtime\n      );\n    }\n\n    // update our full state in state manager:\n    // handle variable value input\n    if (config.isVariableValueInput) {\n      if (newText === '' || newText === '-') {\n        component.blockedDynamicUpdateText = newText;\n      } else {\n        component.blockedDynamicUpdateText = undefined;\n        if (InputComponent.isValidText(newText, '^[\\\\-]?[0-9]+$')) {\n          const { taskManager, variableManager } = runtime;\n          const currentTaskId = taskManager.getCurrentStatePathRoot();\n\n          const variableName = config.text.dynamic.variable;\n          const variableValue = parseInt(newText, 10);\n\n          variableManager.setVariable(currentTaskId, variableName, variableValue, \"integer\", runtime);\n        }\n      }\n\n    } else {\n      StateAttributeAccess.setTextValue(pathState, newTextValue);\n      if (sourceInputPath !== undefined) {\n        runtime.eventEmitter.emit(`inputFieldUpdated-${sourceInputPath}`, newTextValue);\n      }\n    }\n    StateAttributeAccess.setVisited(pathState, true);\n    ComponentStateHelper.registerState(component, pathState);\n\n    // trigger rendering by updating component's local state:\n    RenderingHelper.triggerRendering(component);\n\n    if (!newTextIsValid) {\n      CommonActionsHelper.sendEvent(validationFailEvent, runtime);\n    }\n  }\n\n  static onClickHandler(component, event) {\n    const { runtime, config, path, isInEditMode } = component.props;\n    const readOnly = config.readOnly === undefined ? false : config.readOnly;\n    CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, readOnly, InputComponent.updateTextValue, component, runtime);\n    InputComponent.registerAsInsertPosition(component, event);\n    const pathState = ComponentStateHelper.getState(component);\n    const currentText = StateAttributeAccess.extractTextValue(pathState);\n    const traceDetails = (config.isVariableValueInput === true)\n      ? {}\n      : {\n        currentTextValue: currentText\n      }\n    // do not trace in trace log for table cells\n    if (!isInEditMode) {\n      CommonActionsHelper.doStandardOnClick(event, traceDetails, component);\n    } else {\n      // when double click is made in a table cell we need to avoid propagation\n      const { row, column } = config;\n      const tablePath = TableHelper.buildTablePath(path);\n      const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tablePath, runtime);\n      const oldSelected = TableHelper.isOldSelected(tableUserDefIdPath, runtime);\n      const cellTraceDetails = {\n        tableUserDefIdPath,\n        tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\n        row,\n        column,\n        oldSelected\n      }\n\n      const cellPath = IndexPathHelper.dropIndexFromPageSegment(path);\n      CommonActionsHelper.traceUserInteractionPerConfig(config, cellPath,\n        cellTraceDetails,\n        event, runtime);\n      // avoid container tracing \n      CommonActionsHelper.stopEventPropagation(event);\n    }\n  }\n\n  static onContextMenuHandler(component, event) {\n    CommonActionsHelper.doContextMenuOpen(component, event);\n  }\n\n  static onSelectionHandler(component, event, componentTypeValue) {\n    const { runtime, path, config, isInEditMode } = component.props;\n    const pathState = ComponentStateHelper.getState(component);\n    const readOnly = config.readOnly === undefined ? false : config.readOnly;\n    CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, readOnly, InputComponent.updateTextValue, component, runtime);\n    InputComponent.registerAsInsertPosition(component, event);\n    CommonActionsHelper.stopEventPropagation(event);\n\n    if (!isInEditMode) {\n      const { selectionStart, selectionEnd, selectionDirection } = event.target;\n      const positionValue = (selectionStart === selectionEnd || selectionDirection === 'backward') ? selectionStart : selectionEnd;\n      CommonActionsHelper.traceUserInteraction(\n        'CaretPositionChange', path,\n        {\n          componentType: componentTypeValue,\n          position: positionValue\n        },\n        undefined, undefined, runtime\n      );\n      StateAttributeAccess.setLastCaretPosition(pathState, positionValue);\n      ComponentStateHelper.registerState(component, pathState);\n    }\n  }\n\n  static registerAsInsertPosition = (component, event) => {\n    const { runtime, path, config } = component.props;\n    const { selectionStart, selectionEnd } = event.target;\n    const readOnly = config.readOnly === undefined ? false : config.readOnly;\n    if (!readOnly) {\n      runtime.clipboardManager.registerInsertPosition(\n        path,\n        contentToInsert => InputComponent.updateTextValue(component, selectionStart, selectionEnd, contentToInsert)\n      );\n    }\n  }\n\n  static onBlurHandler(component) {\n    CommonActionsHelper.doStandardOnBlur(component);\n  }\n\n  static onFocusHandler(component) {\n    CommonActionsHelper.doStandardOnFocus(component);\n  }\n\n  /* disable the cut copy paste default browser handling of events */\n  static onCutCopyPaste(component, event) {\n    event.preventDefault();\n    return false;\n  }\n\n  static updateTextValue = (component, startPosition, endPosition, replacementText) => {\n    const pathState = ComponentStateHelper.getState(component);\n    const oldText = StateAttributeAccess.extractTextValue(pathState);\n    const newText = `${oldText.substring(0, startPosition)}${replacementText}${oldText.substring(endPosition)}`;\n\n    const { config, runtime, path, isInEditMode } = component.props;\n    const { validationPattern, validationFailEvent, trace } = config;\n    const newTextIsValid = InputComponent.isValidText(newText, validationPattern);\n    const eventType = trace.type === 'SingleLineInputField' ? 'SingleLineInputFieldModified' : 'InputFieldModified'\n\n    // do not trace in table cell edit mode\n    if (!isInEditMode) {\n      CommonActionsHelper.traceUserInteraction(\n        eventType, path,\n        {\n          oldTextValue: oldText,\n          newTextValue: newTextIsValid ? newText : oldText,\n          origin: 'cutAndPaste',\n          validationPattern,\n          invalidTextValue: newTextIsValid ? undefined : newText\n        },\n        undefined,\n        undefined,\n        runtime\n      );\n    }\n\n    if (newTextIsValid) {\n      // update our full state in state manager:\n      StateAttributeAccess.setTextValue(pathState, newText);\n      ComponentStateHelper.registerState(component, pathState);\n      RenderingHelper.triggerRendering(component);\n    } else {\n      CommonActionsHelper.sendEvent(validationFailEvent, runtime);\n    }\n\n  }\n\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport RenderingHelper from './RenderingHelper';\nimport TableHelper from './table/TableHelper';\nimport InputComponent from './InputComponent';\nimport IndexPathHelper from '../state/IndexPathHelper';\n\nexport default class CbaSingleLineInputField extends Component {\n\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.blockedDynamicUpdateText = undefined;\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n    const { runtime, config, path, isInEditMode } = this.props;\n    const { isSpreadsheet } = config;\n    if (isSpreadsheet) {\n      runtime.eventEmitter.addListener(`${TableHelper.buildTablePath(path)}-inputContentUpdate`, this.onContentUpdate.bind(this));\n\n      if (isInEditMode) {\n        this.focus();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  focus = () => {\n    this.inputRef.current.focus();\n  }\n\n  // ------------- Table specific handlers ------------------- //\n\n  onContentUpdate(value, receivedRow, receivedColumn) {\n    const { config } = this.props;\n    const { row, column } = config;\n    if (row === receivedRow && column === receivedColumn) {\n      const pathState = ComponentStateHelper.getState(this);\n\n      // update our full state in state manager:\n      StateAttributeAccess.setTextValue(pathState, value);\n      StateAttributeAccess.setVisited(pathState, true);\n      ComponentStateHelper.registerState(this, pathState);\n    }\n  }\n\n  onKeyDownHandler = (e) => {\n    const { path, runtime, config, isInEditMode } = this.props;\n    TableHelper.handleKeyDown(e, runtime, config, TableHelper.buildTablePath(path), isInEditMode);\n  }\n\n  onFocusHandler = () => {\n    const { path, runtime, isInEditMode } = this.props;\n    InputComponent.onFocusHandler(this);\n    TableHelper.handleCellFocus(runtime, TableHelper.buildTablePath(path), isInEditMode);\n  }\n\n  onKeyPressOnInput = (e) => {\n    const { runtime, config, path, isInEditMode, onBlur } = this.props;\n    // handle 'Enter' key pressed only we are inside of a table cell \n    if (isInEditMode) {\n      const { row, column } = config;\n      if (e.key === 'Enter') {\n        runtime.eventEmitter.emit(`${TableHelper.buildTablePath(path)}-contentUpdate`, e.target.value, row, column, false);\n        onBlur(e);\n        e.preventDefault();\n      }\n    }\n  }\n\n  onClickFrozenHandler = (event) => {\n    const { runtime, path, config, isInEditMode } = this.props;\n    let componentType = 'SingleLineInputField';\n    if (isInEditMode) componentType = 'TableCell';\n    if (config.isVariableValueInput) componentType = 'ValueInput';\n\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, componentType);\n    event.stopPropagation();\n  }\n\n  render() {\n    const { config, path, runtime, orientation, isInEditMode, onBlur, title } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selected = StateAttributeAccess.extractSelected(pathState);\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selected, orientation, runtime);\n\n    if (isInEditMode) {\n      // use the evaluated value as initial text if the config text is a formula\n      const textValue = StateAttributeAccess.extractTextValue(pathState);\n      if (textValue !== undefined && textValue === config.text.label\n        && TableHelper.isFormula(textValue)) {\n        const cellPath = IndexPathHelper.dropIndexFromPageSegment(path);\n        const cellPathState = runtime.componentStateManager.findOrBuildStateForPathId(cellPath, runtime);\n        const cellValue = StateAttributeAccess.extractTextValue(cellPathState);\n        StateAttributeAccess.setTextValue(pathState, cellValue);\n      }\n\n      // force border style when in table cell\n      CommonConfigHelper.setStyleAttribute(style, \"zIndex\", 1);\n      CommonConfigHelper.setStyleAttribute(style, \"boxShadow\", \"inset rgb(79, 124, 177) 0px 0px 4px\");\n    }\n\n    const value = this.blockedDynamicUpdateText === undefined ? CommonConfigHelper.buildDisplayText(config, pathState, runtime) : this.blockedDynamicUpdateText;\n    this.blockedDynamicUpdateText = undefined;\n    const userInteraction = config.isVariableValueInput ? 'ValueInputModified' : 'SingleLineInputFieldModified';\n    const traceType = config.isVariableValueInput ? 'ValueInputField_onChange' : 'CbaSingleLineInputField_onChange';\n    const componentType = config.isVariableValueInput ? 'ValueInput' : 'SingleLineInputField';\n\n    return (\n      <React.Fragment>\n        <input\n          ref={this.inputRef}\n          type=\"text\"\n          title={isInEditMode ? title : CommonConfigHelper.buildTitle(config)}\n          style={style}\n          data-cba-id={config.pageEditId}\n          readOnly={config.readOnly}\n          disabled={StateAttributeAccess.extractDisabled(pathState)}\n          value={value}\n          onClick={event => InputComponent.onClickHandler(this, event)}\n          onContextMenu={event => InputComponent.onContextMenuHandler(this, event)}\n          onChange={event => InputComponent.onChangeHandler(this, event, userInteraction, traceType)}\n          onSelect={event => InputComponent.onSelectionHandler(this, event, componentType)}\n          onBlur={e => (isInEditMode ? onBlur(e, StateAttributeAccess.extractTextValue(pathState), false) : InputComponent.onBlurHandler(this))}\n          onFocus={this.onFocusHandler}\n          onKeyPress={this.onKeyPressOnInput}\n          onKeyDown={this.onKeyDownHandler}\n          onCut={event => InputComponent.onCutCopyPaste(this, event)}\n          onCopy={event => InputComponent.onCutCopyPaste(this, event)}\n          onPaste={event => InputComponent.onCutCopyPaste(this, event)}\n          tabIndex={config.tabIndex}\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaSingleLineInputField\")}\n          spellCheck={config.spellCheck}\n        />\n        {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaSingleLineInputField-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(style)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\n\nCbaSingleLineInputField.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        validationPattern: PropTypes.string,\n        validationFailEvent: PropTypes.string,\n        sourceInputPath: PropTypes.string\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n  isInEditMode: PropTypes.bool,\n  onBlur: PropTypes.func,\n  title: PropTypes.string\n}\n\nCbaSingleLineInputField.defaultProps = {\n  isInEditMode: false,\n  onBlur: () => {},\n  title: \"\"\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport CbaSingleLineInputField from '../CbaSingleLineInputField';\r\nimport CbaComboBox from '../CbaComboBox';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CbaRichTextField from '../CbaRichTextField/CbaRichTextField';\r\nimport TableHelper from './TableHelper';\r\nimport PathTranslationHelper from '../../state/PathTranslationHelper';\r\nimport UserDefPathHelper from '../../state/UserDefPathHelper';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\n\r\nexport default class CbaTableCell extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { runtime, config } = this.props;\r\n    this.eventEmitter = runtime.eventEmitter;\r\n    this.state = {\r\n      isInEditMode: config.isInEditMode,\r\n      hasHover: false\r\n    }\r\n    this.onCellFocused = this.onCellFocused.bind(this);\r\n    this.onClickHandler = this.onClickHandler.bind(this);\r\n    this.buildTableIndexPath = this.buildTableIndexPath.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { config } = this.props;\r\n    if (config.isSpreadsheet) {\r\n      this.initializeSpreadsheet();\r\n    }\r\n\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-removeLastSelection-[${config.row},${config.column}]`, this.onRemoveLastSelection.bind(this));\r\n  }\r\n\r\n  initializeSpreadsheet = () => {\r\n    const { config, path, runtime } = this.props;\r\n    const { row, column, isReadOnly } = config;\r\n    this.registerEventListeners(row, column);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const hadFocus = StateAttributeAccess.extractCellHadFocus(pathState);\r\n    // the default selected cell will be cell[1,1] if there was no focus registered for the page\r\n    const pagePath = IndexPathHelper.getPagePath(path);\r\n    if (row === 1 && column === 1 && !hadFocus\r\n      && !runtime.focusRegister.hasActionsRegisteredForPath(pagePath)) {\r\n      window.setTimeout(() => {\r\n        this.onCellFocused(row, column, isReadOnly);\r\n      }, 100);\r\n      StateAttributeAccess.setCellHadFocus(pathState, true);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n      this.updateStateAndTriggerRender(true);\r\n    }\r\n  }\r\n\r\n  registerEventListeners(row) {\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-rowHeaderUpdate`, this.onRowHeaderUpdate.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-columnHeaderUpdate`, this.onColumnHeaderUpdate.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-cell-mouse-enter-${row}`, this.onCellMouseEnter.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-cell-mouse-leave-${row}`, this.onCellMouseLeave.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-updateCellValue`, this.onUpdateValue.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-autoFocus`, this.onAutoFocus.bind(this));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  /**\r\n   * Callback method registered as a listener for cell update events. \r\n   * Update the cell state accordingly and notifies the edit mode component about the current updates.\r\n   * @param {*} selectedCell \r\n   * @param {*} value \r\n   * @param {*} isNotValidFormula \r\n   * @param {*} formula \r\n   * @param {*} errorMessage \r\n   * @param {*} isInitialization \r\n   */\r\n  onUpdateValue(selectedCell, value, isNotValidFormula, formula, errorMessage, isInitialization) {\r\n    const { config } = this.props;\r\n    if (selectedCell.row === config.row && selectedCell.column === config.column) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-inputContentUpdate`, value, selectedCell.row, selectedCell.column);\r\n      this.updateStateAndTriggerRender(true);\r\n\r\n      const pathState = ComponentStateHelper.getState(this);\r\n      const oldValue = StateAttributeAccess.extractTextValue(pathState);\r\n      const oldFormula = StateAttributeAccess.extractFormula(pathState);\r\n\r\n      // update our full state in state manager:\r\n      if (isNotValidFormula !== undefined) {\r\n        StateAttributeAccess.setCellHasError(pathState, isNotValidFormula);\r\n      }\r\n      if (errorMessage !== undefined) {\r\n        StateAttributeAccess.setCellTitle(pathState, errorMessage);\r\n      }\r\n      StateAttributeAccess.setTextValue(pathState, value);\r\n      StateAttributeAccess.setFormula(pathState, formula);\r\n      StateAttributeAccess.setVisited(pathState, true);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n\r\n\r\n      // handle tracing \r\n      if (!isInitialization && oldValue !== undefined && oldValue !== value) {\r\n        this.traceCellModified(undefined, oldValue, value, oldFormula, formula, errorMessage);\r\n      }\r\n\r\n      this.setState({\r\n        isInEditMode: false\r\n      });\r\n    }\r\n  }\r\n\r\n  onClickHandler = (event, keepHover) => {\r\n    const { config, runtime, path } = this.props;\r\n    const { row, column, isSpreadsheet, readOnly } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldSelected = StateAttributeAccess.extractSelected(pathState);\r\n\r\n    if (isSpreadsheet) {\r\n      if (row !== 0 && column !== 0) {\r\n        this.onCellFocused(row, column, readOnly);\r\n        this.updateStateAndTriggerRender(true);\r\n      } else if (row === 0) {\r\n        // second row same column should be focused\r\n        this.eventEmitter.emit(`${this.buildTableIndexPath()}-autoFocus`, row + 1, column);\r\n        // avoid container tracing \r\n        CommonActionsHelper.stopEventPropagation(event);\r\n        return;\r\n      } else if (column === 0) {\r\n        // same row second column should be focused\r\n        this.eventEmitter.emit(`${this.buildTableIndexPath()}-autoFocus`, row, column + 1);\r\n        // avoid container tracing \r\n        CommonActionsHelper.stopEventPropagation(event);\r\n        return;\r\n      }\r\n    } else {\r\n      // ignore click if our parent table is switched to 'not selectable' currently:\r\n      const tableState = runtime.componentStateManager.findOrBuildStateForPathId(this.buildTableIndexPath(), runtime);\r\n      if (StateAttributeAccess.extractSelectable(tableState)) {\r\n        // when multi select is disabled we need to clean the last selection \r\n        if (!config.isMultiSelectEnabled) {\r\n          this.onCellFocused(row, column, readOnly);\r\n        }\r\n        this.updateStateAndTriggerRender();\r\n      }\r\n    }\r\n\r\n    // handle tracing\r\n    const tablePath = this.buildTableIndexPath();\r\n    const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tablePath, runtime);\r\n    const traceDetails = {\r\n      tableUserDefIdPath,\r\n      tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n      row,\r\n      column,\r\n      oldSelected\r\n    }\r\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\r\n      traceDetails,\r\n      event, runtime);\r\n    // avoid container tracing \r\n    CommonActionsHelper.stopEventPropagation(event);\r\n\r\n    // when a cell is clicked the row hover should disapeer \r\n    if (row !== 0 && !keepHover) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-cell-mouse-leave-${row}`, row);\r\n    }\r\n  }\r\n\r\n  checkSelectable = () => {\r\n    const { config, runtime } = this.props;\r\n\r\n    if (config.isSpreadsheet) {\r\n      return true;\r\n    }\r\n\r\n    const tableState = runtime.componentStateManager.findOrBuildStateForPathId(this.buildTableIndexPath(), runtime);\r\n    return StateAttributeAccess.extractSelectable(tableState);\r\n  }\r\n\r\n  updateStateAndTriggerRender = (keepSelection, selectionValue) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const { runtime, path } = this.props;\r\n\r\n    // update our full state in state manager:\r\n    if (!keepSelection) {\r\n      const oldSelected = StateAttributeAccess.extractSelected(pathState);\r\n      StateAttributeAccess.setSelected(pathState, selectionValue !== undefined ? selectionValue : !oldSelected);\r\n    }\r\n\r\n    StateAttributeAccess.setVisited(pathState, true);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRenderingViaPath(path, runtime);\r\n  }\r\n\r\n  onAutoFocus(rowToFocus, columnToFocus) {\r\n    const { config } = this.props;\r\n    const { row, column } = config;\r\n\r\n    if (row === rowToFocus && column === columnToFocus) {\r\n      this.onClickHandler(undefined, true);\r\n    }\r\n  }\r\n\r\n  onCellFocused(row, column, isReadOnly) {\r\n    const { config } = this.props;\r\n    this.eventEmitter.emit(`${this.buildTableIndexPath()}-cellFocused`, row, column, config.address, isReadOnly);\r\n    this.setState({\r\n      isInEditMode: true\r\n    });\r\n  }\r\n\r\n  onRowHeaderUpdate(currentSelected, newSelected) {\r\n    const { config } = this.props;\r\n    if ((config.row === currentSelected || config.row === newSelected)\r\n      && (currentSelected !== newSelected) && (config.column === 0)) {\r\n      this.updateStateAndTriggerRender();\r\n    }\r\n  }\r\n\r\n  onColumnHeaderUpdate(currentSelected, newSelected) {\r\n    const { config } = this.props;\r\n    if ((config.column === currentSelected || config.column === newSelected)\r\n      && (currentSelected !== newSelected) && (config.row === 0)) {\r\n      this.updateStateAndTriggerRender();\r\n    }\r\n  }\r\n\r\n  onRemoveLastSelection() {\r\n    this.updateStateAndTriggerRender(false, false);\r\n  }\r\n\r\n  onMouseEnter() {\r\n    const { config } = this.props;\r\n    const { row } = config;\r\n    if (row !== 0) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-cell-mouse-enter-${row}`, row);\r\n    }\r\n  }\r\n\r\n  onCellMouseEnter(row) {\r\n    const { config } = this.props;\r\n    if (config.row === row && config.column !== 0) {\r\n      this.setState({\r\n        hasHover: true\r\n      });\r\n    }\r\n  }\r\n\r\n  onMouseLeave() {\r\n    const { config } = this.props;\r\n    const { row } = config;\r\n    if (row !== 0) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-cell-mouse-leave-${row}`, row);\r\n    }\r\n  }\r\n\r\n  onCellMouseLeave(row) {\r\n    const { config } = this.props;\r\n    if (config.row === row && config.column !== 0) {\r\n      this.setState({\r\n        hasHover: false\r\n      });\r\n    }\r\n  }\r\n\r\n  onKeyDownHandler(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      this.onClickHandler(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback method sent as prop to edit mode components.\r\n   * Will forward the changed data to the table component and exit the edit mode(rerender).\r\n   */\r\n  onSelectionChange = (e, textValue, isReadOnly) => {\r\n    if (textValue !== undefined) {\r\n      const pathState = ComponentStateHelper.getState(this);\r\n      const oldValue = StateAttributeAccess.extractTextValue(pathState);\r\n      const { config } = this.props;\r\n      if (textValue !== oldValue) {\r\n        const { row, column } = config;\r\n        this.eventEmitter.emit(`${this.buildTableIndexPath()}-contentUpdate`, textValue, row, column, isReadOnly);\r\n      }\r\n    }\r\n\r\n    this.updateStateAndTriggerRender(false, true);\r\n    this.setState({\r\n      isInEditMode: false\r\n    });\r\n  }\r\n\r\n  buildLabel = (config, pathState) => {\r\n    let label = StateAttributeAccess.extractTextValue(pathState);\r\n    const { text } = config;\r\n\r\n    label = (label === undefined ? text.label : label);\r\n\r\n    if (TableHelper.isInt(label)) {\r\n      label = Number.parseInt(label, 10);\r\n    }\r\n\r\n    if (TableHelper.isFloat(label)) {\r\n      if (config.numberOfDecimalPlaces !== -1) {\r\n        label = Number.parseFloat(label).toFixed(config.numberOfDecimalPlaces);\r\n      } else if (config.defaultNumberOfDecimalPlaces !== 0) {\r\n        label = Number.parseFloat(label).toFixed(config.defaultNumberOfDecimalPlaces);\r\n      }\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  buildTitle = (config, pathState) => {\r\n    const hasError = StateAttributeAccess.extractCellHasError(pathState);\r\n    let title;\r\n    if (hasError) {\r\n      const errorMessage = StateAttributeAccess.extractCellTitle(pathState);\r\n      title = errorMessage !== undefined ? errorMessage : '';\r\n    } else if (config.hasStandardTooltip) {\r\n      title = CommonConfigHelper.buildTitle(config);\r\n      if (title === undefined || title === '') {\r\n        title = config.address;\r\n      }\r\n    }\r\n    return title;\r\n  }\r\n\r\n  /**\r\n   * Helper method used to decide which kind of React component will be rendered as a table cell.\r\n   * In standard mode this will usually return a CbaRichTextField or a <div>. \r\n   * In spreadsheed mode the cell in read mode will be represented by a <div> \r\n   * and in edit mode they'll become a CbaSingleLineInputField or a CbaCombobox.\r\n   */\r\n  buildTableCell = (config, path, runtime, orientation, style) => {\r\n    const { isSpreadsheet, tabIndex } = config;\r\n    const { isInEditMode } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const imageStyle = {\r\n      maxHeight: \"100%\",\r\n      maxWidth: \"100%\"\r\n    }\r\n    let tableCell;\r\n    if (isSpreadsheet) {\r\n      tableCell = (\r\n        <div\r\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaSpreadsheetCell\")}\r\n          style={style}\r\n          data-cba-id={config.pageEditId}\r\n          onClick={this.onClickHandler}\r\n          onDoubleClick={this.onDoubleClickCaptureHandler}\r\n          title={this.buildTitle(config, pathState)}\r\n          onMouseEnter={() => this.onMouseEnter()}\r\n          onMouseLeave={() => this.onMouseLeave()}\r\n          onKeyDown={event => this.onKeyDownHandler(event)}\r\n          tabIndex={tabIndex}\r\n        >\r\n          {config.imageReference\r\n            && <img src={CommonConfigHelper.getProperResourcePath(config.imageReference, runtime)} style={imageStyle} alt=\"\" />}\r\n          {this.buildLabel(config, pathState)}\r\n        </div>\r\n      );\r\n\r\n      // in edit we render a child component \r\n      if (isInEditMode) {\r\n        const cellConfig = {\r\n          config\r\n        }\r\n        if (config.items !== undefined) {\r\n          const comboboxCopy = CbaTableCell.createCellCopy(cellConfig, path, \"CbaComboBox\");\r\n          tableCell = <CbaComboBox config={comboboxCopy.config} path={comboboxCopy.path} runtime={runtime} orientation={orientation} title={this.buildTitle(config, pathState)} onBlur={this.onSelectionChange} isInEditMode={isInEditMode} />\r\n          StateAttributeAccess.setCellType(pathState, \"combo\");\r\n        } else {\r\n          const inputCopy = CbaTableCell.createCellCopy(cellConfig, path, \"CbaSingleLineInputField\");\r\n          tableCell = <CbaSingleLineInputField config={inputCopy.config} path={inputCopy.path} runtime={runtime} orientation={orientation} title={this.buildTitle(config, pathState)} onBlur={this.onSelectionChange} isInEditMode={isInEditMode} />\r\n          StateAttributeAccess.setCellType(pathState, \"text\");\r\n        }\r\n        ComponentStateHelper.registerState(this, pathState);\r\n      }\r\n    } else {\r\n      const delegates = config.cbaChildren.map((child, index) => {\r\n        const childPath = IndexPathHelper.appendIndexToPageSegment(path, index);\r\n\r\n        // Override child config with some of the table cell config attributes,\r\n        // needed for selected/deselected behavior, \r\n        // because the text field model doesn't contain the selectGroupMember attribute\r\n        const childCopy = StateManagerHelper.deepCopy(child);\r\n        childCopy.config.color = config.color;\r\n        childCopy.config.toggleType = \"colorChange\";\r\n        childCopy.config.tabIndex = config.tabIndex;\r\n\r\n        return (\r\n          <CbaRichTextField\r\n            key={childPath}\r\n            config={childCopy.config}\r\n            path={childPath}\r\n            runtime={runtime}\r\n            orientation={orientation}\r\n            row={config.row}\r\n            column={config.column}\r\n            parentTableUserDefId={config.parentTableUserDefId}\r\n            onParentClick={this.onClickHandler}\r\n            checkSelectable={this.checkSelectable}\r\n          />\r\n        )\r\n      });\r\n\r\n      // shrink borders inside the cell\r\n      style.boxSizing = 'border-box';\r\n      tableCell = (\r\n        <div\r\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaTableCell\")}\r\n          style={style}\r\n          data-cba-id={config.pageEditId}\r\n          onClick={this.onClickHandler}\r\n          title={CommonConfigHelper.buildTitle(config)}\r\n          tabIndex={delegates.length ? \"-1\" : tabIndex}\r\n          onKeyDown={event => this.onKeyDownHandler(event)}\r\n        >\r\n          {config.imageReference\r\n            && <img src={CommonConfigHelper.getProperResourcePath(config.imageReference, runtime)} style={imageStyle} alt=\"\" />}\r\n          {delegates}\r\n        </div>\r\n      )\r\n    }\r\n    return tableCell;\r\n  }\r\n\r\n  /**\r\n   * The method returns the index path of the parent table\r\n   */\r\n  buildTableIndexPath() {\r\n    const { path } = this.props;\r\n    return IndexPathHelper.dropIndexFromPageSegment(path);\r\n  }\r\n\r\n  traceCellModified(event, oldEvaluatedValue, newEvaluatedValue, oldValue, newValue, errorInFormula) {\r\n    const { config, path, runtime } = this.props;\r\n    const { row, column } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const tablePath = this.buildTableIndexPath();\r\n    const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tablePath, runtime);\r\n    const currentCellType = StateAttributeAccess.extractCellType(pathState);\r\n    const cellType = TableHelper.isFormula(newValue) ? 'formula' : currentCellType;\r\n    const oldCellType = TableHelper.isFormula(oldValue) ? 'formula' : currentCellType;\r\n    const oldErrorState = Number.isNaN(Number.parseFloat(oldEvaluatedValue));\r\n    let traceDetails;\r\n\r\n    if (oldCellType !== 'formula') {\r\n      // do not show old evaluated value for old text cells  \r\n      oldValue = oldEvaluatedValue;\r\n      oldEvaluatedValue = undefined;\r\n    } else if (oldErrorState) {\r\n      // do not show old evaluated value for old formula cells with errors \r\n      oldEvaluatedValue = undefined;\r\n    }\r\n\r\n    // do not show new evaluated value for new formula cells with errors \r\n    if (errorInFormula) {\r\n      newEvaluatedValue = undefined;\r\n    }\r\n\r\n    if (cellType === 'formula') {\r\n      traceDetails = {\r\n        tableUserDefIdPath,\r\n        tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n        row,\r\n        column,\r\n        oldValue,\r\n        newValue,\r\n        cellType,\r\n        oldEvaluatedValue,\r\n        newEvaluatedValue,\r\n        errorInFormula\r\n      }\r\n    } else {\r\n      newValue = newEvaluatedValue;\r\n      traceDetails = {\r\n        tableUserDefIdPath,\r\n        tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n        row,\r\n        column,\r\n        oldValue,\r\n        newValue,\r\n        cellType,\r\n        oldEvaluatedValue\r\n      }\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteraction(\"TableCellModified\", path, traceDetails,\r\n      event,\r\n      undefined,\r\n      runtime);\r\n  }\r\n\r\n  /**\r\n   * Helper method used to create a copy of the cell coponent and override some info.\r\n   * @param {*} cell the table cell component instance\r\n   * @param {*} type the type of the copy created\r\n   */\r\n  static createCellCopy(cell, path, type) {\r\n    const cellCopy = StateManagerHelper.deepCopy(cell);\r\n    cellCopy.config.userDefinedId = undefined;\r\n    cellCopy.type = type;\r\n    cellCopy.path = IndexPathHelper.appendIndexToPageSegment(path, 0);\r\n    return cellCopy;\r\n  }\r\n\r\n  static getFormulaOrValue(selector, userDefPath, runtime) {\r\n    const cellState = runtime.componentStateManager.findOrBuildStateByUserDefPath(userDefPath, runtime);\r\n    if (selector === 'formula') {\r\n      return StateAttributeAccess.extractFormula(cellState);\r\n    }\r\n    return StateAttributeAccess.extractTextValue(cellState);\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n    const { hasHover } = this.state;\r\n    const hoverBackgroundColor = \"-webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(235, 235, 235)), to(rgb(213, 213, 213)))\";\r\n\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const selectedState = StateAttributeAccess.extractSelected(pathState);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\r\n\r\n    const { isSpreadsheet } = config;\r\n    if (isSpreadsheet) {\r\n      // when a cell has hover a grey gradient will be applied to its background, \r\n      // otherwise should return to its previous state\r\n      if (hasHover) {\r\n        CommonConfigHelper.setStyleAttribute(style, \"background\", hoverBackgroundColor);\r\n      } else if (selectedState) {\r\n        CommonConfigHelper.setStyleAttribute(style, \"background\", config.color.background.selected);\r\n      } else {\r\n        CommonConfigHelper.setStyleAttribute(style, \"background\", config.color.background.default);\r\n      }\r\n\r\n      // these are styling settings to keep the label inside the cell \r\n      CommonConfigHelper.setStyleAttribute(style, \"textOverflow\", \"ellipsis\");\r\n      CommonConfigHelper.setStyleAttribute(style, \"whiteSpace\", \"nowrap\");\r\n      CommonConfigHelper.setStyleAttribute(style, \"overflow\", \"hidden\");\r\n\r\n    }\r\n\r\n    return this.buildTableCell(config, path, runtime, orientation, style);\r\n  }\r\n\r\n}\r\n\r\nCbaTableCell.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        row: PropTypes.number.isRequired,\r\n        column: PropTypes.number.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDrop, useDrag } from 'react-dnd'\r\nimport TreeUtils from '../TreeUtils';\r\nimport DragAndDropHelper from '../../../config/DragAndDropHelper';\r\nimport PropTypesHelper from '../../PropTypesHelper';\r\n\r\n\r\nexport default function CbaTreeHeader(props) {\r\n  const { column } = props;\r\n  const { mouseOver, label, font } = column;\r\n  // const style = TreeUtils.buildTreeCellStyle(column); use this when/if generator generates the full column header style\r\n  const style = {\r\n    textAlign: font ? font.alignmentHorizontal : \"\"\r\n  }\r\n\r\n  const headerRef = useRef(null);\r\n\r\n  const [collectedPropsDrop, drop] = useDrop({\r\n    accept: `${column.parentPath}-header`,\r\n    drop: (item) => {\r\n      TreeUtils.handleColumnMove(column, item.id);\r\n    },\r\n    canDrop: item => item.id !== column.key,\r\n    collect: monitor => ({\r\n      dragIsOver: monitor.isOver(),\r\n      dragCanDrop: monitor.canDrop(),\r\n    })\r\n  });\r\n\r\n  const [, drag] = useDrag({\r\n    item: {\r\n      id: column.key,\r\n      type: `${column.parentPath}-header`\r\n    },\r\n    canDrag: () => column.moveable\r\n  });\r\n\r\n  drag(drop(headerRef));\r\n\r\n  DragAndDropHelper.addCanDropStyleAttributes(style, collectedPropsDrop);\r\n\r\n  return (\r\n    <div\r\n      title={mouseOver}\r\n      className=\"CbaTreeHeaderInner\"\r\n      style={style}\r\n      ref={headerRef}\r\n    >\r\n      <span>{label}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nCbaTreeHeader.propTypes = {\r\n  column: PropTypes.shape(PropTypesHelper.getCbaTreeColumnConfig())\r\n}\r\n\r\nCbaTreeHeader.defaultProps = {\r\n  column: {\r\n    label: \"default\",\r\n    key: \"\"\r\n  }\r\n}\r\n","import CommonActionsHelper from \"../CommonActionsHelper\";\r\nimport TreeUtils from \"./TreeUtils\";\r\n\r\nexport default class TreeTraceHelper {\r\n\r\n  /**\r\n   * Trace tree view sort action \r\n  */\r\n  static traceSort(path, columnId, sortDirection, runtime) {\r\n\r\n    const { treeColumns } = TreeUtils.getTreeDataByPath(path, runtime);\r\n\r\n    let columnName;\r\n    let columnIndex;\r\n\r\n    treeColumns.forEach((column, index) => {\r\n      if (column.key === columnId) {\r\n        columnName = column.label;\r\n        columnIndex = index;\r\n      }\r\n    });\r\n\r\n    const traceDetails = {\r\n      columnName,\r\n      columnIndex,\r\n      sortDirection: TreeTraceHelper.getSortDirectionForTrace(sortDirection)\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteraction(\"TreeViewSort\", path, traceDetails, undefined, undefined, runtime);\r\n  }\r\n\r\n  static getSortDirectionForTrace(sortDirection) {\r\n    switch (sortDirection) {\r\n      case 'ASC':\r\n        return 'ascending';\r\n      case 'DESC':\r\n        return 'descending';\r\n      case 'NONE':\r\n        return 'none';\r\n      default:\r\n        return `<unknown: ${sortDirection}>`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traces any kind of node action \r\n   */\r\n  static traceNodeAction(actionType, treePath, rowData, runtime, oldValue, newValue, columnName) {\r\n    const { isTreeView, treeViewPath, nodeType, nodePathId, nodeTypes } = rowData;\r\n    const eventType = isTreeView ? \"TreeViewNode\" : \"TreeNode\";\r\n    const path = isTreeView ? treeViewPath : treePath;\r\n\r\n    let triggeredEvent;\r\n    let nodeName;\r\n\r\n    if (!newValue && !oldValue && !columnName) {\r\n      nodeName = TreeUtils.getNodeName(rowData);\r\n    }\r\n\r\n    if (nodeType && nodeTypes) {\r\n      const nodeTypeInstance = TreeUtils.getNodeType(nodeTypes, nodeType);\r\n      const { deleteEvent } = nodeTypeInstance;\r\n      triggeredEvent = TreeTraceHelper.isTriggeredEventRequired(deleteEvent, actionType) ? deleteEvent : undefined;\r\n    }\r\n\r\n    const traceDetails = {\r\n      operation: actionType,\r\n      nodeName,\r\n      oldValue,\r\n      newValue,\r\n      columnName,\r\n      nodeType,\r\n      nodePathId,\r\n      triggeredEvent\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteraction(eventType, path, traceDetails, undefined, undefined, runtime);\r\n  }\r\n\r\n  static isTriggeredEventRequired = (deleteEvent, operation) => deleteEvent !== undefined && deleteEvent !== \"\" && operation === \"delete\";\r\n\r\n}\r\n","import TreeUtils from \"./TreeUtils\";\r\nimport TreeTraceHelper from \"./TreeTraceHelper\";\r\n\r\nexport default class TreeContextMenuHelper {\r\n\r\n  static openContextMenu(event, rowData, columnKey) {\r\n    event.persist();\r\n    const { runtime } = rowData;\r\n    const entries = TreeContextMenuHelper.buildContextMenuEntries(rowData, columnKey);\r\n\r\n    if (entries.length) {\r\n      runtime.contextMenu.openMenuItemTree({\r\n        event,\r\n        entries\r\n      })\r\n    }\r\n  }\r\n\r\n  static buildContextMenuEntries = (rowData, columnKey) => {\r\n    const { nodeType, nodeTypes } = rowData;\r\n    const nodeTypeInstance = TreeUtils.getNodeType(nodeTypes, nodeType);\r\n    const { contextMenuCommands } = nodeTypeInstance;\r\n\r\n    return contextMenuCommands.map((entry) => {\r\n      let command = Object.assign({}, entry);\r\n      switch (entry.type) {\r\n        case \"action\": command = TreeContextMenuHelper.buildContextMenuActionEntry(command, rowData, columnKey); break;\r\n        case \"submenu\": command = Object.assign(command, {\r\n          submenu: command.submenu.map(e => TreeContextMenuHelper.buildContextMenuActionEntry(e, rowData, columnKey)),\r\n          disabled: !command.submenu.length\r\n        }); break;\r\n        default: console.error(\"Invalid context menu config in tree\", rowData);\r\n      }\r\n\r\n      return command;\r\n    });\r\n  }\r\n\r\n  static buildContextMenuActionEntry(entry, rowData, columnKey) {\r\n    const actionEntry = Object.assign({}, entry);\r\n    const { action } = entry;\r\n\r\n    switch (action) {\r\n      case \"CUT\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeCut);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"COPY\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeCopy);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"PASTE\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreePaste);\r\n        actionEntry.disabled = TreeContextMenuHelper.handlePasteDisabled(rowData);\r\n        break;\r\n      case \"DELETE\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeDelete);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"RENAME\": // rename operation needs specific data for tracing, thus we'll trace inside the rename handler\r\n        actionEntry.action = () => TreeUtils.startRenameOperation(rowData, columnKey);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"NEW\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeNew, actionEntry.label);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      default: console.error(\"Invalid context menu config in tree\", rowData);\r\n    }\r\n\r\n    return actionEntry;\r\n  }\r\n\r\n  static buildContextMenuAction = (actionType, rowData, actionHandler, label) => {\r\n    const { path: nodePath, treePath, runtime, isTreeView, treeViewPath } = rowData;\r\n\r\n    TreeTraceHelper.traceNodeAction(actionType.toLowerCase(), treePath, rowData, runtime);\r\n    actionHandler(treePath, nodePath, runtime, label, isTreeView, treeViewPath);\r\n  }\r\n\r\n  static handlePasteDisabled = (rowData) => {\r\n    const { treePath, runtime, path: nodePath, nodeType: nodeTypeName } = rowData;\r\n\r\n    const { treeState, nodeTypes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const { copiedNode, currentlyCutNodePath } = treeState;\r\n    const nodeType = TreeUtils.getNodeType(nodeTypes, nodeTypeName);\r\n\r\n    // mark as disabled if there is no node to paste\r\n    if (!treeState.copiedNode) {\r\n      return true;\r\n    }\r\n\r\n    // mark as disabled if the copied node does not have the accepted node type\r\n    if (!nodeType.childTypes.includes(copiedNode.nodeType)) {\r\n      return true;\r\n    }\r\n\r\n    // mark as disabled if cut node is a parent of the node that opened context menu\r\n    if (copiedNode && currentlyCutNodePath) {\r\n      let cutNodes = []\r\n      if (copiedNode.nodes.length) {\r\n        cutNodes = TreeUtils.flattenNodes(copiedNode.nodes);\r\n      }\r\n      cutNodes.push(copiedNode);\r\n\r\n      if (cutNodes.find(n => n.path === nodePath)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // mark enabled if it gets here\r\n    return false\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TreeUtils from '../TreeUtils';\r\nimport TreeContextMenuHelper from '../TreeContextMenuHelper';\r\nimport CommonActionsHelper from '../../CommonActionsHelper';\r\nimport ComponentStateHelper from '../../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../../state/StateAttributeAccess';\r\nimport Utils from '../../../utils/Utils';\r\nimport TreeTraceHelper from '../TreeTraceHelper';\r\nimport PropTypesHelper from '../../PropTypesHelper';\r\n\r\n\r\nexport default class CbaTreeCell extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = this.getInitialState();\r\n    this.inputRef = React.createRef();\r\n  }\r\n\r\n  handleContextMenuClick = (event, updateOnSingleClick) => {\r\n    const { rowData, column } = this.props;\r\n    const { onRowSelect, runtime, isReadOnly } = rowData;\r\n\r\n    if (!runtime.contextMenu) console.error(\"Context menu not found in tree row\", rowData);\r\n\r\n    if (updateOnSingleClick) {\r\n      onRowSelect(event, rowData);\r\n    }\r\n\r\n    if (!isReadOnly) {\r\n      TreeContextMenuHelper.openContextMenu(event, rowData, column.key);\r\n    }\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  handleRenameCell = () => {\r\n    // setTimeout needed because method is called from render function\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isRenameState: true,\r\n        cellEditedValue: this.getInitialState().cellEditedValue\r\n      }, () => {\r\n        const { rowData } = this.props;\r\n        const { treePath, runtime } = rowData;\r\n        const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n        const pathState = ComponentStateHelper.getState(treeInstance);\r\n        const treeState = StateAttributeAccess.extractTreeState(pathState) || {};\r\n\r\n        treeState.currentRenameNode = null;\r\n\r\n        StateAttributeAccess.setTreeState(pathState, treeState);\r\n        ComponentStateHelper.registerState(treeInstance, pathState);\r\n\r\n        this.inputRef.current.focus();\r\n      });\r\n    }, 0)\r\n  }\r\n\r\n  handleCellInputFocus = (event) => {\r\n    event.target.select();\r\n  }\r\n\r\n  handleCellInputBlur = (event) => {\r\n    const { rowData, column } = this.props;\r\n    const { cellEditedValue } = this.state;\r\n    const initialState = this.getInitialState();\r\n\r\n    if (initialState.cellEditedValue !== cellEditedValue) {\r\n      TreeUtils.doTreeRename(rowData, column.key, cellEditedValue);\r\n    }\r\n\r\n    this.setState(this.getInitialState());\r\n  }\r\n\r\n  handleCellInputKeyDown = (event) => {\r\n    event.stopPropagation();\r\n    if (Utils.keyCodes.Enter === event.keyCode) {\r\n      // blur to save state\r\n      this.inputRef.current.blur();\r\n    }\r\n\r\n    if (Utils.keyCodes.Escape === event.keyCode) {\r\n      // ESC to cancel saving state\r\n      this.setState(this.getInitialState())\r\n    }\r\n  }\r\n\r\n  handleCellInputChange = (event) => {\r\n    event.stopPropagation();\r\n    const newValue = event.target.value;\r\n\r\n    this.setState(() => ({\r\n      cellEditedValue: newValue\r\n    }))\r\n\r\n    return false;\r\n  }\r\n\r\n  onDoubleClick = (event, updateOnSingleClick, onRowSelect, rowData) => {\r\n    event.stopPropagation();\r\n    const { treePath, runtime } = rowData;\r\n    TreeTraceHelper.traceNodeAction(\"doubleClick\", treePath, rowData, runtime);\r\n\r\n    if (!updateOnSingleClick) {\r\n      onRowSelect(event, rowData)\r\n    }\r\n  }\r\n\r\n  getCellData = () => {\r\n    const { rowData, column } = this.props;\r\n    const { cells } = rowData;\r\n    return cells.find(cell => cell.columnId === column.key) || {};\r\n  }\r\n\r\n  getInitialState = () => {\r\n    const cellData = this.getCellData();\r\n    return {\r\n      isRenameState: false,\r\n      cellEditedValue: cellData ? cellData.label : \"\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { rowData, idx, column } = this.props;\r\n    const { isRenameState, cellEditedValue } = this.state;\r\n    const { expanded, nodes, imagePath, depth, isLeaf, onRowExpandClick, onRowSelect, updateOnSingleClick, isTreeView, path: rowPath, runtime, treePath } = rowData;\r\n    const cellData = this.getCellData();\r\n\r\n    // JSX Conditionals\r\n    const hasSubRows = (nodes.length !== 0);\r\n\r\n    // CellData\r\n    const value = cellData.label || \"\";\r\n    const title = cellData.mouseOver || \"\";\r\n\r\n    // Styles\r\n    const rowStartStyle = {\r\n      paddingLeft: `${(depth - 1) * 16}px`\r\n    }\r\n    const rowImageStyle = {\r\n      backgroundImage: imagePath ? `url(${imagePath})` : null\r\n    }\r\n    const cellOuterStyle = {\r\n      width: column.width,\r\n      height: rowData.height,\r\n      left: column.left\r\n    }\r\n    const cellStyle = TreeUtils.buildTreeCellStyle(cellData);\r\n\r\n\r\n    // click logic\r\n    let updateOnClick;\r\n    if (isTreeView) {\r\n      updateOnClick = isLeaf;\r\n    } else {\r\n      updateOnClick = updateOnSingleClick;\r\n    }\r\n\r\n    // check if renamed\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const { currentRenameNode } = treeState;\r\n    if (currentRenameNode && currentRenameNode.cellPath === TreeUtils.buildCellPath(rowPath, column.key) && currentRenameNode.isTreeView === isTreeView) {\r\n      this.handleRenameCell();\r\n    }\r\n\r\n    return (\r\n      <div className=\"react-grid-Cell\" style={cellOuterStyle}>\r\n        <div\r\n          className=\"CbaTreeCellInner\"\r\n          onClick={event => (updateOnClick ? onRowSelect(event, rowData) : event.stopPropagation())}\r\n          onDoubleClick={event => this.onDoubleClick(event, updateOnClick, onRowSelect, rowData)}\r\n          onContextMenu={event => this.handleContextMenuClick(event, updateOnClick)}\r\n          title={title}\r\n          style={cellStyle}\r\n        >\r\n          {idx === 0 && (\r\n            <div className=\"CbaTreeCellInner-rowStart\" style={rowStartStyle}>\r\n              <div\r\n                className={`CbaTreeCellInner-expander ${expanded ? \"expanded\" : \"\"} ${hasSubRows ? \"hasSubRows\" : \"\"}`}\r\n                onClick={event => onRowExpandClick(event, rowData)}\r\n              />\r\n              <div className=\"CbaTreeCellInner-image\" style={rowImageStyle} />\r\n            </div>\r\n          )}\r\n\r\n          {!isRenameState && <div className=\"CbaTreeCellInner-value\" title={value}>{value}</div>}\r\n          {isRenameState && (\r\n            <input\r\n              ref={this.inputRef}\r\n              type=\"text\"\r\n              value={cellEditedValue}\r\n              onBlur={this.handleCellInputBlur}\r\n              onFocus={this.handleCellInputFocus}\r\n              onKeyDown={this.handleCellInputKeyDown}\r\n              onChange={this.handleCellInputChange}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTreeCell.propTypes = {\r\n  column: PropTypes.shape(PropTypesHelper.getCbaTreeColumnConfig()),\r\n  rowData: PropTypes.shape(PropTypesHelper.getCbaTreeRowConfig()).isRequired,\r\n  idx: PropTypes.number.isRequired\r\n}\r\n\r\n\r\nCbaTreeCell.defaultProps = {\r\n  column: {\r\n    label: \"default\"\r\n  }\r\n}\r\n","import React, { useRef, PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDrop, useDrag } from 'react-dnd';\r\nimport CbaTreeCell from './CbaTreeCell';\r\nimport PropTypesHelper from '../../PropTypesHelper';\r\nimport DragAndDropHelper from '../../../config/DragAndDropHelper';\r\nimport TreeUtils from '../TreeUtils';\r\nimport TreeTraceHelper from '../TreeTraceHelper';\r\n\r\nconst CbaTreeRow = (props) => {\r\n  const { row, columns, idx, height } = props;\r\n  const { nodeTypes, nodeType, treePath, runtime, isReadOnly } = row;\r\n\r\n  const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n  const { currentNode, currentlyCutNodePath } = treeState\r\n\r\n  const selectedClass = currentNode === row.path ? \"selected\" : \"\";\r\n  const cutClass = currentlyCutNodePath === row.path ? \"cut\" : \"\";\r\n  const reactGridClass = idx % 2 ? \"react-grid-Row--even\" : \"react-grid-Row--odd\";\r\n\r\n  const width = columns.map(c => c.width).reduce((accum, reducer) => accum + reducer, 0);\r\n\r\n  const rowStyle = {\r\n    height,\r\n    width\r\n  }\r\n\r\n  const nodeTypeInstance = TreeUtils.getNodeType(nodeTypes, nodeType);\r\n  const treeAction = TreeUtils.getTreeDragDropAction(treePath, runtime);\r\n\r\n  let hoverCount = 0;\r\n  let firstHover;\r\n\r\n  const rowRef = useRef(null);\r\n  const [collectedPropsDrop, drop] = useDrop({\r\n    accept: nodeTypes.map(ct => `${treePath}-${ct.name}`),\r\n    hover: () => {\r\n      hoverCount += 1;\r\n\r\n      if (hoverCount === 1) {\r\n        firstHover = new Date();\r\n      }\r\n\r\n      const deltaTime = new Date() - firstHover;\r\n\r\n      if (deltaTime > 1400 && deltaTime < 1600) {\r\n        row.onRowExpandClick(null, row, true);\r\n      }\r\n    },\r\n    drop: (item) => {\r\n      switch (treeAction) {\r\n        case \"DROP_COPY\": TreeUtils.doTreeCopyAction(treePath, item.path, row.path, runtime); break;\r\n        case \"DROP_MOVE\": TreeUtils.doTreeMoveAction(treePath, item.path, row.path, runtime); break;\r\n        case \"DROP_SWITCH\":\r\n        case \"DROP_NONE\": break;\r\n        default: console.error(\"Invalid Tree drag&dropMode\", treePath);\r\n      }\r\n\r\n      TreeTraceHelper.traceNodeAction(\"drop\", treePath, row, runtime, undefined);\r\n    },\r\n    canDrop: item => TreeUtils.canNodeTypeDrop(nodeTypeInstance, treePath, runtime, item.nodeType, isReadOnly),\r\n    collect: monitor => ({\r\n      dragIsOver: monitor.isOver(),\r\n      dragCanDrop: monitor.canDrop(),\r\n    })\r\n  });\r\n\r\n  const [, drag] = useDrag({\r\n    item: {\r\n      path: row.path,\r\n      type: `${treePath}-${nodeType}`,\r\n      nodePathId: row.nodePathId,\r\n      nodeType: row.nodeType,\r\n      runtime\r\n    },\r\n    canDrag: () => TreeUtils.canNodeTypeDrag(nodeTypeInstance, treePath, runtime, isReadOnly),\r\n    begin: () => {\r\n      TreeTraceHelper.traceNodeAction(\"drag\", treePath, row, runtime, undefined);\r\n    }\r\n  });\r\n\r\n  drag(drop(rowRef));\r\n\r\n  DragAndDropHelper.addCanDropStyleAttributes(rowStyle, collectedPropsDrop);\r\n\r\n  return (\r\n    <div\r\n      ref={rowRef}\r\n      style={rowStyle}\r\n      className={` react-grid-Row ${selectedClass} ${cutClass} ${reactGridClass}`}\r\n    >\r\n      {columns.map((column, index) => (\r\n        <CbaTreeCell key={column.key} column={column} rowData={row} idx={index} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nCbaTreeRow.propTypes = {\r\n  columns: PropTypes.arrayOf(PropTypes.shape(PropTypesHelper.getCbaTreeColumnConfig())).isRequired,\r\n  row: PropTypes.shape(PropTypesHelper.getCbaTreeRowConfig()).isRequired,\r\n  idx: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired\r\n}\r\n\r\n/**\r\n * Passthrough component required because CbaTreeRow is a functional component and the library react-data-grid uses ref's on it\r\n * Refs are only supported on Components\r\n */\r\nclass CbaTreeRowWrapper extends PureComponent {\r\n\r\n  render() {\r\n    return <CbaTreeRow {...this.props} />\r\n  }\r\n\r\n}\r\n\r\nexport default CbaTreeRowWrapper;\r\n","import React from 'react';\r\nimport Utils from '../../utils/Utils';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport PathTranslationHelper from '../../state/PathTranslationHelper';\r\nimport { CbaTreeHeader } from './DataGridRenderers';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport TreeTraceHelper from './TreeTraceHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\n/**\r\n * Helper class for CbaTree, CbaTreeView & CbaTreeChildArea:\r\n * \r\n * - contains constans\r\n * \r\n * - contains static methods\r\n *\r\n *  ____________________\r\n * | TREE   | TREE VIEW |\r\n * |________|___________|\r\n * |  TREE CHILD AREA   |\r\n * |____________________|\r\n * \r\n */\r\nexport default class TreeUtils {\r\n\r\n  static\r\n    const = {\r\n      COLUMN_HEIGHT: 34,\r\n      ROW_HEIGHT: 25,\r\n      DEFAULT_COLUMN: {\r\n        label: \"default\",\r\n        isPrimary: true,\r\n        isDefault: true\r\n      }\r\n    }\r\n\r\n  /* Static string builder functions */\r\n\r\n  static buildCellPath = (rowPath, columnPath) => `${rowPath}_${columnPath}`;\r\n\r\n  static buildColumnId = (path, index) => `${path}--${index}`;\r\n\r\n  static generateNodePathId = (node, parentNode) => `${parentNode.nodePathId}_${node.userDefinedId}-${parentNode.children + 1}`;\r\n\r\n  static generateNodePathIdChild = (node, parentNode) => `${parentNode.nodePathId}_${node.nodePathId.split(\"_\").slice(-1).pop()}`;\r\n\r\n  /** Get the name for change events issued by the given tree (specified as full index path). */\r\n  static getTreeEventChangeName = treePath => `${treePath}-TreeChangeEvent`;\r\n\r\n  static getTreePathFromColumnPath = columnPath => columnPath.split(\"--\")[0];\r\n\r\n\r\n  /* Initialisation functions */\r\n  static initTreeNodes(rootNodes, nodeTypes, path, runtime, treeSettings) {\r\n    rootNodes = Utils.deepCopy(rootNodes);\r\n\r\n    TreeUtils.resetPathsToNodes(rootNodes, path);\r\n\r\n    TreeUtils.parseNodes(rootNodes, (node) => {\r\n      const nodeType = TreeUtils.getNodeType(nodeTypes, node.nodeType);\r\n\r\n      node.cells = node.cells.map((cell, index) => {\r\n        cell.columnId = TreeUtils.buildColumnId(path, index);\r\n        return cell;\r\n      });\r\n\r\n      node.isLeaf = nodeType.childTypes.length === 0; // leaf is defined by not having the possiblity of children.\r\n      node.imagePath = CommonConfigHelper.getProperResourcePath(nodeType.image, runtime);\r\n      node.expanded = TreeUtils.isNodeExpandedAtInit(node, nodeType, treeSettings.startCollapsed);\r\n      node.children = node.nodes.length - 1; // needed to compute the userDefPath of pasted/new nodes\r\n      return true;\r\n    });\r\n\r\n    return rootNodes;\r\n  }\r\n\r\n  static initTreeColumns(columns, path) {\r\n    columns = Utils.deepCopy(columns);\r\n\r\n    if (columns.length === 0) {\r\n      columns.push(TreeUtils.const.DEFAULT_COLUMN);\r\n    }\r\n\r\n    return columns.map((column, index) => {\r\n      column.key = TreeUtils.buildColumnId(path, index);\r\n      column.name = column.label;\r\n\r\n      if (column.width === 0) {\r\n        delete column.width;\r\n      }\r\n\r\n      return column\r\n    });\r\n\r\n  }\r\n\r\n  static initTreeState(columns) {\r\n    const modifiedColumns = {}\r\n    columns.forEach((column, index) => {\r\n      modifiedColumns[column.key] = {\r\n        order: index,\r\n        width: column.width\r\n      }\r\n    });\r\n\r\n    return {\r\n      modifiedColumns\r\n    }\r\n  }\r\n\r\n  /* Column operations */\r\n  static handleColumnResize(columnKey, newWidth, instance) {\r\n    const state = ComponentStateHelper.getState(instance);\r\n    const treeState = StateAttributeAccess.extractTreeState(state) || {};\r\n\r\n    treeState.modifiedColumns[columnKey].width = newWidth;\r\n\r\n    StateAttributeAccess.setTreeState(state, treeState);\r\n    ComponentStateHelper.registerState(instance, state);\r\n  }\r\n\r\n  static handleColumnMove(displayDroppedColumn, draggedColumnId) {\r\n    const { runtime, key, parentPath } = displayDroppedColumn;\r\n    const treePath = TreeUtils.getTreePathFromColumnPath(key);\r\n\r\n    const parentInstance = runtime.componentDirectory.findComponent(parentPath);\r\n    const parentPathState = ComponentStateHelper.getState(parentInstance);\r\n    const parentTreeState = StateAttributeAccess.extractTreeState(parentPathState) || {};\r\n    const { modifiedColumns } = parentTreeState;\r\n\r\n    const draggedColumn = modifiedColumns[draggedColumnId];\r\n    const droppedColumn = modifiedColumns[displayDroppedColumn.key];\r\n\r\n    // figure out direction of dragging\r\n    const isDraggedToStart = draggedColumn.order > droppedColumn.order;\r\n\r\n    Object.keys(modifiedColumns)\r\n      .map((columnKey) => {\r\n        const column = modifiedColumns[columnKey];\r\n\r\n        // drag column gets the order of the dropped column\r\n        if (columnKey === draggedColumnId) {\r\n          return {\r\n            key: columnKey,\r\n            order: droppedColumn.order\r\n          }\r\n        }\r\n\r\n        // handle drag to start case\r\n        if (isDraggedToStart && (column.order >= droppedColumn.order && column.order < draggedColumn.order)) {\r\n          return {\r\n            key: columnKey,\r\n            order: column.order + 1\r\n          }\r\n        }\r\n\r\n        // handle drag to end case\r\n        if (!isDraggedToStart && (column.order > draggedColumn.order && column.order <= droppedColumn.order)) {\r\n          return {\r\n            key: columnKey,\r\n            order: column.order - 1\r\n          }\r\n        }\r\n\r\n        return {\r\n          key: columnKey,\r\n          order: column.order\r\n        }\r\n\r\n      }).forEach((column) => {\r\n        modifiedColumns[column.key].order = column.order;\r\n      });\r\n\r\n    StateAttributeAccess.setTreeState(parentPathState, parentTreeState);\r\n    ComponentStateHelper.registerState(parentInstance, parentPathState);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static getDisplayColumns(treeColumns, sortable, modifiedColumns, parentPath, runtime) {\r\n    treeColumns = Utils.deepCopy(treeColumns);\r\n\r\n    return treeColumns.map((column) => {\r\n      column.sortable = sortable;\r\n      column.headerRenderer = <CbaTreeHeader column={column} />;\r\n      column.parentPath = parentPath;\r\n      column.runtime = runtime;\r\n\r\n      // handles losing resize on rerender\r\n      if (modifiedColumns && modifiedColumns[column.key] && modifiedColumns[column.key].width) {\r\n        column.width = modifiedColumns[column.key].width;\r\n      }\r\n      return column;\r\n    }).sort(TreeUtils.sortAscendingByParameter(\"order\", c => modifiedColumns[c.key].order));\r\n  }\r\n\r\n  static isDefaultColumn(treeColumns) {\r\n    return treeColumns.length === 1 && treeColumns[0].isDefault;\r\n  }\r\n\r\n  /**\r\n   * Calculate the array of nodes (= rows) to be displayed in the CbaTree.\r\n   * \r\n   * We start with the given root nodes and flatten their subtrees out:\r\n   *  - drop leaf nodes (i.e. isLeaf flag is set on the node) if the hideLeaves flag is set\r\n   *  - include child nodes in the flat result if the expanded flag is true for the parent node\r\n   *  - sort the resulting list of nodes by their index path\r\n   *  - for each node calculate its depth in the node hierarchy\r\n   * \r\n   * @param {*} rootNodes An array of root nodes to start with.\r\n   * @param {*} path The path of the Tree that contains the tree nodes.\r\n   * @param {*} hideLeaves Should we drop leaf nodes from the result?\r\n   * @returns \r\n   */\r\n  static getTreeDisplayNodes(rootNodes, path, hideLeaves) {\r\n    rootNodes = Utils.deepCopy(rootNodes);\r\n    const flatmap = [];\r\n    TreeUtils.parseNodes(rootNodes, (node) => {\r\n      if (!(node.isLeaf && hideLeaves)) {\r\n        flatmap.push(node);\r\n      }\r\n\r\n      return node.expanded;\r\n    });\r\n\r\n    flatmap.sort(TreeUtils.sortAscendingByIndexHierarchy(path));\r\n    flatmap.map((node) => {\r\n      node.depth = IndexPathHelper.extractTreeChildPathFromTreePath(path, node.path).split(\"/\").length - 1\r\n\r\n      return node;\r\n    });\r\n\r\n    return flatmap;\r\n  }\r\n\r\n  static getTreeViewDisplayNodes(treeNodes, treePath, filterLeaves, selectedNodePath, sort) {\r\n    const allNodes = Utils.deepCopy(treeNodes);\r\n    const isRoot = !selectedNodePath;\r\n    const selectedNode = TreeUtils.getNode(allNodes, selectedNodePath);\r\n\r\n    let shownNodes;\r\n\r\n    if (!isRoot && selectedNode) {\r\n      shownNodes = selectedNode.isLeaf ? TreeUtils.getParentNode(allNodes, selectedNode.path).nodes : selectedNode.nodes;\r\n    } else {\r\n      shownNodes = allNodes;\r\n    }\r\n\r\n    const flatmap = shownNodes.map((child) => {\r\n      child.expanded = false;\r\n      child.depth = 1;\r\n      child.nodes = [];\r\n      return child;\r\n    });\r\n\r\n    const sortCellFinderFunction = (node, param) => {\r\n      const cell = node.cells.find(c => c.columnId === sort.column);\r\n      return cell ? cell[param] : \"\";\r\n    };\r\n\r\n    switch (sort.type) {\r\n      case \"NONE\": flatmap.sort(TreeUtils.sortAscendingByIndexHierarchy(treePath)); break;\r\n      case \"ASC\": flatmap.sort(TreeUtils.sortAscendingByParameter(\"label\", sortCellFinderFunction)); break;\r\n      case \"DESC\": flatmap.sort(TreeUtils.sortDescendingByParameter(\"label\", sortCellFinderFunction)); break;\r\n      default: flatmap.sort(TreeUtils.sortAscendingByIndexHierarchy(treePath)); break;\r\n    }\r\n\r\n    const filteredFlatMap = filterLeaves ? flatmap.filter(child => child.isLeaf && filterLeaves) : flatmap;\r\n\r\n    return filteredFlatMap;\r\n  }\r\n\r\n  /* helper methods */\r\n  static resetPathsToNodes(nodes, rootPath) {\r\n    nodes.forEach((node, index) => {\r\n      node.path = IndexPathHelper.appendIndexToPageSegment(rootPath, index);\r\n\r\n      if (node.nodes.length > 0) {\r\n        TreeUtils.resetPathsToNodes(node.nodes, node.path)\r\n      }\r\n    })\r\n  }\r\n\r\n  static flattenNodes(nodes) {\r\n    const flatmap = [];\r\n    TreeUtils.parseNodes(nodes, node => flatmap.push(node));\r\n    return flatmap;\r\n  }\r\n\r\n  /**\r\n   * Apply the given callback to all given root nodes and recurse down to the\r\n   * descendants of each node as long as the callback returns true. \r\n   * \r\n   * @param {*} rootNodes The array of root nodes where we start to apply the callback. Each node must have a node attribute containing an array of child nodes.\r\n   * @param {*} callback The callback to apply to the nodes. The callback must return a boolean value.\r\n   */\r\n  static parseNodes(rootNodes, callback) {\r\n    rootNodes.forEach((node) => {\r\n\r\n      const shouldContinue = callback(node);\r\n\r\n      if (node.nodes.length > 0 && shouldContinue) {\r\n        TreeUtils.parseNodes(node.nodes, callback);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  static isNodeExpandedAtInit(node, nodeType, treeStartCollapsed) {\r\n    if (node.nodes.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    return treeStartCollapsed ? false : !nodeType.startCollapsed;\r\n\r\n  }\r\n\r\n  static getNodeType(nodeTypes, type) {\r\n    return nodeTypes.filter(nodeType => nodeType.name === type)[0];\r\n  }\r\n\r\n  static createNodeFromNodeType(nodeType, treeColumns, parentNode, runtime) {\r\n    const cells = Utils.deepCopy(nodeType.cellInitSettings);\r\n\r\n    return {\r\n      cells: cells.map((c, i) => Object.assign(c, {\r\n        columnId: treeColumns[i].key\r\n      })),\r\n      contentPage: nodeType.contentPage,\r\n      event: nodeType.event,\r\n      expanded: false,\r\n      imagePath: CommonConfigHelper.getProperResourcePath(nodeType.image, runtime),\r\n      isLeaf: nodeType.childTypes.length === 0,\r\n      link: nodeType.link,\r\n      nodePathId: TreeUtils.generateNodePathId(nodeType, parentNode),\r\n      nodeType: nodeType.name,\r\n      nodes: [],\r\n      path: null,\r\n      tooltip: nodeType.tooltip,\r\n      children: -1, // -1 so that first child has index 0;\r\n      userDefinedId: nodeType.userDefId, // figure out what to do here\r\n    }\r\n  }\r\n\r\n  static getNode(nodes, searchedNodePath) {\r\n    let foundNode;\r\n    TreeUtils.parseNodes(nodes, (node) => {\r\n      if (node.path === searchedNodePath) {\r\n        foundNode = node;\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    return foundNode\r\n  }\r\n\r\n  static getNodeName(rowData) {\r\n    if (rowData !== undefined) {\r\n      const cell = rowData.cells.find(c => c.isPrimary);\r\n\r\n      if (cell !== undefined) return cell.label;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static getParentNode(nodes, searchedNodePath) {\r\n    const parentPath = IndexPathHelper.dropIndexFromPageSegment(searchedNodePath);\r\n    const parentNode = TreeUtils.getNode(nodes, parentPath);\r\n\r\n    if (parentNode) {\r\n      return parentNode;\r\n    } else {\r\n      return {\r\n        root: true,\r\n        nodes\r\n      }\r\n    }\r\n  }\r\n\r\n  static buildTreeCellStyle(cell) {\r\n    if (!cell) return {};\r\n\r\n    const result = {\r\n      fontFamily: `${cell.font.name}, Geneva, sans-serif`,\r\n      fontSize: cell.font.size,\r\n      fontWeight: cell.font.bold ? 'bold' : 'normal',\r\n      fontStyle: cell.font.italic ? 'italic' : 'normal',\r\n      textDecoration: cell.font.underlined ? 'underline' : 'none',\r\n      textAlign: cell.font.alignmentHorizontal,\r\n    }\r\n\r\n    CommonConfigHelper.setStyleAttribute(result, \"color\", CommonConfigHelper.chooseImageOrColorVariant(cell.color.text, false, false, false));\r\n\r\n    return result;\r\n  }\r\n\r\n  /* User actions */\r\n  static selectNodeAction(treePath, rowData) {\r\n    const { runtime, path, contentPage } = rowData;\r\n\r\n    const { treeState, treeNodes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const currentNode = TreeUtils.getNode(treeNodes, path);\r\n\r\n    treeState.currentNode = path;\r\n    treeState.currentPage = contentPage;\r\n    currentNode.visited = true;\r\n\r\n    TreeTraceHelper.traceNodeAction(\"selection\", treePath, rowData, runtime);\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, treeNodes, treeState, null, null);\r\n\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static emitTreeEvent(eventEmitter, treePath, replayStepMonitor) {\r\n    replayStepMonitor.incrementReplayStep();\r\n    eventEmitter.emit(TreeUtils.getTreeEventChangeName(treePath));\r\n  }\r\n\r\n  static sortAscendingByParameter = (param, compareLocator) => (node1, node2) => {\r\n    const comparator1 = compareLocator ? compareLocator(node1, param) : node1[param];\r\n    const comparator2 = compareLocator ? compareLocator(node2, param) : node2[param];\r\n\r\n    let comparison = 0;\r\n    if (comparator1 > comparator2) {\r\n      comparison = 1;\r\n    } else if (comparator1 < comparator2) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n  static sortDescendingByParameter = (param, compareLocator) => (node1, node2) => {\r\n    const comparator1 = compareLocator ? compareLocator(node1, param) : node1[param];\r\n    const comparator2 = compareLocator ? compareLocator(node2, param) : node2[param];\r\n\r\n    let comparison = 0;\r\n    if (comparator1 < comparator2) {\r\n      comparison = 1;\r\n    } else if (comparator1 > comparator2) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n  static sortAscendingByIndexHierarchy = treePath => (node1, node2) => {\r\n    const path1 = IndexPathHelper.extractTreeChildPathFromTreePath(treePath, node1.path);\r\n    const path2 = IndexPathHelper.extractTreeChildPathFromTreePath(treePath, node2.path);\r\n\r\n    const indexArray1 = path1.split('/index=');\r\n    const indexArray2 = path2.split('/index=');\r\n    const commonDepth = Math.min(indexArray1.length, indexArray2.length);\r\n\r\n    for (let checkedDepth = 0; checkedDepth < commonDepth; checkedDepth += 1) {\r\n      const number1 = parseInt(indexArray1[checkedDepth], 10);\r\n      const number2 = parseInt(indexArray2[checkedDepth], 10);\r\n      if (number1 > number2) {\r\n        return 1;\r\n      }\r\n      if (number1 < number2) {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    if (indexArray1.length > indexArray2.length) {\r\n      return 1;\r\n    }\r\n    if (indexArray1.length < indexArray2.length) {\r\n      return -1;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  static collapseNode = (node) => {\r\n    node.expanded = false;\r\n\r\n    if (!node.isLeaf && node.nodes.length) {\r\n      TreeUtils.parseNodes(node.nodes, (innerNode) => {\r\n        innerNode.expanded = false;\r\n        return true;\r\n      })\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /* Drag&Drop Actions */\r\n  static getTreeDragDropAction = (treePath, runtime) => {\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n    if (treeInstance) {\r\n      return treeInstance.props.config[\"drag&dropMode\"];\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  static canNodeTypeDrag = (nodeType, treePath, runtime, isReadOnly) => {\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n    const canTreeDoIt = treeInstance.props.config.dragSource;\r\n    const canNodeTypeDoIt = nodeType.dragSource;\r\n\r\n    return !isReadOnly && canTreeDoIt && canNodeTypeDoIt\r\n  }\r\n\r\n  static canNodeTypeDrop = (nodeType, treePath, runtime, type, isReadOnly) => {\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n    const canTreeDoIt = treeInstance.props.config.dropTarget;\r\n    const canNodeTypeDoIt = nodeType.dropTarget;\r\n\r\n    return !isReadOnly && canTreeDoIt && canNodeTypeDoIt && nodeType.childTypes.includes(type);\r\n  }\r\n\r\n  /* Methods used by tree child components (CbaTreeView or CbaTreeChildArea) */\r\n\r\n  /**\r\n   * Get the component instance of the tree that is associated with the tree child component instance (CbaTreeView or CbaTreeChildArea).\r\n   * \r\n   * Both components must be part of the same page. \r\n   * \r\n   * @param {*} props The properties of the tree child component instance. \r\n   * @returns {*} The associated tree component instance. \r\n   */\r\n  static getTreeInstanceFromChildComponent = (props) => {\r\n    const { runtime, config, path } = props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n\r\n    return treeInstance;\r\n  }\r\n\r\n  /**\r\n   * Get the full index path of the tree component using the given tree path (page segment as in the page configuration) and\r\n   * the full path of the component (CbaTreeView or CbaTreeChildArea) associated with the tree. \r\n   * \r\n   * The associated component must be part of the same page as the tree component. \r\n   * \r\n   * @param {string} treePathId Page segment of tree (according to page configuration).\r\n   * @param {string} path Full path of the component associated with the tree (must reside in the same page as the tree).\r\n   * @returns {string} Full path of the tree. \r\n   */\r\n  static getTreePathFromChildComponent = (treePathId, path) => IndexPathHelper.dropPageSegmentFromPath(path) + treePathId;\r\n\r\n  /* Methods handling userDefIdPath operations */\r\n\r\n  static getTreeFromUserDefIdPath = (userDefPath, runtime) => runtime.componentDirectory.findComponent(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime));\r\n\r\n  static getTreeFlatNodesFromUserDefIdPath = (userDefPath, runtime) => {\r\n    const path = PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime);\r\n    const treeData = TreeUtils.getTreeDataByPath(path, runtime);\r\n    return TreeUtils.flattenNodes(treeData.treeNodes);\r\n  }\r\n\r\n  /* Methods handling Getting/Setting TreeState */\r\n\r\n  static getTreeDataByPath = (path, runtime) => {\r\n    const treeNodes = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeNodes, path, runtime) || [];\r\n    const treeState = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeState, path, runtime) || {};\r\n    const treeColumns = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeColumns, path, runtime) || [];\r\n    const nodeTypes = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractNodeTypes, path, runtime) || [];\r\n    const treeReadOnly = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeReadOnly, path, runtime) || false;\r\n\r\n    return {\r\n      treeNodes,\r\n      treeState,\r\n      treeColumns,\r\n      nodeTypes,\r\n      treeReadOnly\r\n    }\r\n  }\r\n\r\n  static setTreeDataByPath = (path, runtime, treeNodes, treeState, treeColumns, nodeTypes) => {\r\n    if (treeNodes) {\r\n      const { extractTreeNodes: getter, setTreeNodes: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, treeNodes, path, runtime, false);\r\n    }\r\n\r\n    if (treeState) {\r\n      const { extractTreeState: getter, setTreeState: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, treeState, path, runtime, false);\r\n    }\r\n\r\n    if (treeColumns) {\r\n      const { extractTreeColumns: getter, setTreeColumns: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, treeColumns, path, runtime, false);\r\n    }\r\n\r\n    if (nodeTypes) {\r\n      const { extractNodeTypes: getter, setNodeTypes: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, nodeTypes, path, runtime, false);\r\n    }\r\n  }\r\n\r\n  /* Methods used by State Machine */\r\n\r\n  static getVisitedPathIds(userDefPath, runtime) {\r\n    const nodes = TreeUtils.getTreeFlatNodesFromUserDefIdPath(userDefPath, runtime);\r\n\r\n    return nodes.filter(node => node.visited).map(node => node.nodePathId);\r\n  }\r\n\r\n  static getNodePathIds(userDefPath, runtime) {\r\n    const nodes = TreeUtils.getTreeFlatNodesFromUserDefIdPath(userDefPath, runtime);\r\n\r\n    return nodes.map(node => node.nodePathId);\r\n  }\r\n\r\n  static getCurrentNodePathId(userDefPath, runtime) {\r\n    const path = PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime);\r\n    const { treeState, treeNodes } = TreeUtils.getTreeDataByPath(path, runtime);\r\n    const nodes = TreeUtils.flattenNodes(treeNodes);\r\n    const currentNodePath = treeState.currentNode;\r\n\r\n    const currentNode = nodes.find(node => node.path === currentNodePath);\r\n\r\n    return currentNode ? currentNode.nodePathId : null;\r\n  }\r\n\r\n  static getColumnValuesMap(userDefPath, nodePathIds, runtime) {\r\n    const nodes = TreeUtils.getTreeFlatNodesFromUserDefIdPath(userDefPath, runtime);\r\n    const map = new Map();\r\n\r\n    nodePathIds.forEach((nodePath) => {\r\n      const node = nodes.find(n => n.nodePathId === nodePath);\r\n      const columnValues = node.cells.map(cell => cell.label);\r\n      map.set(nodePath, columnValues);\r\n    });\r\n\r\n    return map;\r\n  }\r\n\r\n  static treeMoveCurrentNode(userDefPath, targetNode, runtime) {\r\n    TreeUtils.treeActionCurrentNode(userDefPath, targetNode, runtime, TreeUtils.doTreeMoveAction);\r\n  }\r\n\r\n  static treeCopyCurrentNode(userDefPath, targetNode, runtime) {\r\n    TreeUtils.treeActionCurrentNode(userDefPath, targetNode, runtime, TreeUtils.doTreeCopyAction);\r\n  }\r\n\r\n  static treeActionCurrentNode(userDefPath, targetNode, runtime, action) {\r\n    const treePath = PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime);\r\n    const { treeState, treeNodes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const currentNodePath = treeState.currentNode;\r\n    const flatNodes = TreeUtils.flattenNodes(treeNodes);\r\n    const targetNodeInstance = flatNodes.find(node => node.nodePathId === targetNode);\r\n\r\n    if (targetNodeInstance && !targetNodeInstance.isLeaf && treeState.currentNode) {\r\n      action(treePath, currentNodePath, targetNodeInstance.path, runtime)\r\n    }\r\n  }\r\n\r\n  /*\r\n    Methods used by Drag&Drop\r\n  */\r\n  static doTreeMoveAction(treePath, fromPath, toPath, runtime) {\r\n    if (toPath.includes(fromPath)) {\r\n      console.error(\"Could not move tree node from parent to child\", fromPath, toPath);\r\n      return;\r\n    }\r\n\r\n    TreeUtils.doTreeCut(treePath, fromPath, runtime);\r\n    TreeUtils.doTreePaste(treePath, toPath, runtime);\r\n  }\r\n\r\n  static doTreeCopyAction(treePath, fromPath, toPath, runtime) {\r\n    TreeUtils.doTreeCopy(treePath, fromPath, runtime);\r\n    TreeUtils.doTreePaste(treePath, toPath, runtime);\r\n  }\r\n\r\n  /* Context menu operations */\r\n  static doTreeCopy(treePath, nodePath, runtime, shouldNotClearCut) {\r\n    // get tree state\r\n    const { treeNodes: nodes, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    // copy logic\r\n    const node = TreeUtils.getNode(nodes, nodePath);\r\n    if (!shouldNotClearCut) {\r\n      treeState.currentlyCutNodePath = null;\r\n    }\r\n\r\n    treeState.copiedNode = Utils.deepCopy(node);\r\n    treeState.copiedNode = TreeUtils.collapseNode(treeState.copiedNode);\r\n    // treeState.copiedNode.path = null;\r\n\r\n    // set tree state\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, null, treeState, null);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static doTreeCut = (treePath, nodePath, runtime) => {\r\n    // get tree state\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    // cut logic\r\n    treeState.currentlyCutNodePath = nodePath;\r\n\r\n    // set tree state\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, null, treeState, null);\r\n\r\n    // this also emits event\r\n    TreeUtils.doTreeCopy(treePath, nodePath, runtime, true);\r\n  }\r\n\r\n  static doTreePaste(treePath, nodePath, runtime) {\r\n    // get tree state\r\n    let { treeNodes: nodes, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    // paste logic\r\n    let node = TreeUtils.getNode(nodes, nodePath);\r\n\r\n    const { copiedNode, currentlyCutNodePath } = treeState;\r\n\r\n    if (!copiedNode) {\r\n      console.error(\"Tree context menu error, no node to paste\");\r\n      return;\r\n    }\r\n\r\n    // delete node if cut node exists\r\n    if (currentlyCutNodePath) {\r\n      TreeUtils.doTreeDelete(treePath, currentlyCutNodePath, runtime, true);\r\n      // update function variables to new state after delete\r\n      ({ treeNodes: nodes, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime));\r\n      node = TreeUtils.getNode(nodes, nodePath);\r\n\r\n      // clear copied node and cut node\r\n      treeState.currentlyCutNodePath = null;\r\n      treeState.copiedNode = null;\r\n    }\r\n\r\n    // update nodePathId for copied node and children\r\n    copiedNode.nodePathId = TreeUtils.generateNodePathId(copiedNode, node);\r\n    TreeUtils.parseNodes(copiedNode.nodes, (copiedNodeChild) => {\r\n      let copiedNodeParent = TreeUtils.getParentNode(copiedNode.nodes, copiedNodeChild.path);\r\n      if (copiedNodeParent.root) {\r\n        copiedNodeParent = copiedNode;\r\n      }\r\n      copiedNodeChild.nodePathId = TreeUtils.generateNodePathIdChild(copiedNodeChild, copiedNodeParent);\r\n      return true;\r\n    });\r\n\r\n    // add node\r\n    node.nodes.push(copiedNode);\r\n\r\n    // update children number\r\n    node.children += 1;\r\n\r\n    // reset paths\r\n    TreeUtils.resetPathsToNodes(nodes, treePath);\r\n\r\n    // update tree state\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, treeState, null);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static doTreeDelete(treePath, nodePath, runtime, isPasted) {\r\n    // get tree state\r\n    const treeData = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    let { treeNodes: nodes } = treeData;\r\n    const { treeState, nodeTypes } = treeData;\r\n\r\n    // delete logic \r\n    const parentNode = TreeUtils.getParentNode(nodes, nodePath);\r\n    const deletedNode = TreeUtils.getNode(nodes, nodePath);\r\n    const deleteEventNodeType = TreeUtils.getNodeType(nodeTypes, deletedNode.nodeType);\r\n\r\n    // Don't delete for raised event\r\n    if (!isPasted && deleteEventNodeType.deleteEvent) {\r\n      CommonActionsHelper.sendEvent(deleteEventNodeType.deleteEvent, runtime);\r\n      return;\r\n    }\r\n\r\n    // clear selection in deleted nodes\r\n    TreeUtils.parseNodes(nodes, (currentParsedNode) => {\r\n      let deletedNodes = [];\r\n      if (currentParsedNode.path === nodePath) {\r\n        deletedNodes = TreeUtils.flattenNodes(currentParsedNode.nodes);\r\n        deletedNodes.push(currentParsedNode);\r\n\r\n        const selectedNodeInDeletedNodes = !!deletedNodes.find(node => treeState.currentNode === node.path);\r\n        const cutNodeInDeleteNodes = !!deletedNodes.find(node => treeState.currentlyCutNodePath === node.path);\r\n\r\n        if (selectedNodeInDeletedNodes) treeState.currentNode = null;\r\n        if (cutNodeInDeleteNodes) {\r\n          treeState.currentlyCutNodePath = null;\r\n          treeState.copiedNode = null\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    // filter out node\r\n    if (parentNode.root) {\r\n      nodes = nodes.filter(node => node.path !== nodePath);\r\n    } else {\r\n      parentNode.nodes = parentNode.nodes.filter(node => node.path !== nodePath);\r\n    }\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, treeState);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static startRenameOperation(rowData, columnKey) {\r\n    const { treePath, path: nodePath, runtime, isTreeView } = rowData;\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    treeState.currentRenameNode = {\r\n      isTreeView,\r\n      cellPath: TreeUtils.buildCellPath(nodePath, columnKey)\r\n    }\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, null, treeState, null, null)\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static doTreeRename(rowData, columnKey, newValue) {\r\n    const { treePath, path: nodePath, runtime } = rowData;\r\n    const { treeNodes: nodes, treeColumns: columns } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    const node = TreeUtils.getNode(nodes, nodePath);\r\n    const cell = node.cells.find(c => c.columnId === columnKey);\r\n    const column = columns.find(c => c.key === columnKey);\r\n    const oldValue = cell.label;\r\n\r\n    cell.label = newValue;\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, null, null, null);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n    TreeTraceHelper.traceNodeAction(\"rename\", treePath, rowData, runtime, oldValue, newValue, column.name);\r\n  }\r\n\r\n  static doTreeNew(treePath, nodePath, runtime, newTreeType, isTreeView, treeViewPath) {\r\n    const { treeNodes: nodes, treeColumns, nodeTypes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const node = TreeUtils.getNode(nodes, nodePath); // need this to compute pathid of new node\r\n\r\n    const newNodeType = TreeUtils.getNodeType(nodeTypes, newTreeType);\r\n    const newNode = TreeUtils.createNodeFromNodeType(newNodeType, treeColumns, node, runtime);\r\n\r\n    node.expanded = true;\r\n    node.nodes.push(newNode);\r\n    node.children += 1;\r\n    TreeUtils.resetPathsToNodes(nodes, treePath)\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, null, null, null);\r\n\r\n    const primaryColumn = newNode.cells.find(c => c.isPrimary).columnId;\r\n    const mockRowData = Object.assign({\r\n      runtime,\r\n      treePath,\r\n      isTreeView,\r\n      treeViewPath\r\n    }, newNode);\r\n\r\n    TreeUtils.selectNodeAction(treePath, mockRowData);\r\n    TreeUtils.startRenameOperation(mockRowData, primaryColumn);\r\n  }\r\n\r\n}\r\n","\nexport const FORMATS = {\n  DE: {\n    decimal: \",\", grouping: \".\"\n  },\n  EN: {\n    decimal: \".\", grouping: \",\"\n  }\n}\n\n/**\n  * Translate a value given as number (or as string with dot as decimal separator)\n  * to a string with decimal and thousand separators as specified by our format members.\n  */\nexport function formatValue(number, withThousandSeparator, addTrailingDecimalSeparator, format) {\n  if (number === null || number === undefined) return number;\n\n  const parts = number.toString().split('.');\n  if (withThousandSeparator) {\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, format.grouping);\n  }\n  return `${parts.join(format.decimal)}${addTrailingDecimalSeparator ? format.decimal : ''}`;\n}\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport TreeUtils from './TreeUtils';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport PageAreaRenderer from '../PageAreaRenderer';\r\nimport Utils from '../../utils/Utils';\r\n\r\n\r\nexport default class CbaTreeChildArea extends PureComponent {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { runtime } = this.props;\r\n    this.scrollableAreaRef = React.createRef();\r\n    this.eventEmitter = runtime.eventEmitter;\r\n\r\n    this.onClickHandler = this.onClickHandler.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n    // Make our tree change handler listen to change events issued by our tree:\r\n    const { path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    this.subscription = this.eventEmitter.addListener(TreeUtils.getTreeEventChangeName(treePath), this.handleTreeChange);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n\r\n    // Remove our tree change event subscription:\r\n    this.subscription.remove();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onClickHandler(event) {\r\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  /**\r\n   * Callback handling changes in our associated tree.\r\n   */\r\n  handleTreeChange = () => {\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * Get the name of the currently embedded (i.e. displayed) page. \r\n   * \r\n   * The embedded page follows the selected node in the associated tree. \r\n   * We return 'undefined' if the currently selected node does not have a page assigned. \r\n   * \r\n   */\r\n  static getEmbeddedPageName(path, config, runtime) {\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    return treeState.currentPage || undefined;\r\n  }\r\n\r\n  scroll(x, y) {\r\n    const scrollElement = this.scrollableAreaRef.current;\r\n    if (!scrollElement) return;\r\n    Utils.doScrollOnHTMLElement(x, y, scrollElement, scrollElement);\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const currentPage = CbaTreeChildArea.getEmbeddedPageName(path, config, runtime);\r\n    const emptyStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    // TODO: CKI: factor that out in a common helper method shared with CbaPageArea\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const positionOnlyState = {};\r\n    StateAttributeAccess.setPosition(positionOnlyState, StateAttributeAccess.extractPosition(pathState));\r\n\r\n\r\n    if (currentPage === undefined) {\r\n      return (\r\n        <div\r\n          style={emptyStyle}\r\n          data-cba-id={config.pageEditId}\r\n          onClick={event => CommonActionsHelper.doStandardOnClick(event, undefined, this)}\r\n          title={CommonConfigHelper.buildTitle(config)}\r\n          className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <PageAreaRenderer\r\n          onClick={this.onClickHandler}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          orientation={orientation}\r\n          embeddedPageName={currentPage}\r\n          hasTabs={false}\r\n          tabsBar={<span />}\r\n          path={path}\r\n          position={positionOnlyState}\r\n          config={config}\r\n          scrollableAreaRef={this.scrollableAreaRef}\r\n          runtime={runtime}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nCbaTreeChildArea.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        treePathId: PropTypes.string.isRequired,\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","\r\nimport React, { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './media.css'\r\n\r\nconst MediaPreview = ({ type, stream, style, pauseRecording, resumeRecording, shouldPause }) => {\r\n  const mediaRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (mediaRef.current && stream) {\r\n      mediaRef.current.srcObject = stream;\r\n    }\r\n    if (mediaRef.current !== null && mediaRef.current !== undefined\r\n      && shouldPause) {\r\n      mediaRef.current.pause();\r\n    }\r\n  }, [stream, shouldPause]);\r\n  if (!stream) {\r\n    return null;\r\n  }\r\n  let media;\r\n  if (type === \"video\") {\r\n    media = (\r\n      <video\r\n        ref={mediaRef}\r\n        style={style}\r\n        onPause={pauseRecording}\r\n        onPlay={resumeRecording}\r\n        autoPlay\r\n        controls\r\n      />\r\n    )\r\n  } else {\r\n    media = (\r\n      <div style={style}>\r\n        <audio\r\n          ref={mediaRef}\r\n          onPause={pauseRecording}\r\n          onPlay={resumeRecording}\r\n          autoPlay\r\n          controls\r\n          className=\"audio\"\r\n        />\r\n        {!shouldPause && <span className=\"recording\" />}\r\n      </div>\r\n    )\r\n  }\r\n  return media;\r\n};\r\n\r\nMediaPreview.propTypes = {\r\n  stream: PropTypes.object,\r\n  style: PropTypes.object.isRequired,\r\n  pauseRecording: PropTypes.func.isRequired,\r\n  resumeRecording: PropTypes.func.isRequired\r\n}\r\n\r\nMediaPreview.defaultProps = {\r\n  stream: null\r\n}\r\n\r\nexport default MediaPreview;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport debounce from 'lodash.debounce';\r\nimport { ReactMediaRecorder } from 'react-media-recorder';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CbaInterpreter from '../CbaInterpreter';\r\nimport MediaPreview from './MediaPreview';\r\nimport PathTranslationHelper from '../../state/PathTranslationHelper';\r\n\r\nexport const OPERATION_PLAY = 'play';\r\nexport const OPERATION_PAUSE = 'pause';\r\nexport const OPERATION_STOP = 'stop';\r\nexport const OPERATION_ENDED = 'ended';\r\n\r\nexport default class CbaMedia extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.mediaRef = React.createRef();\r\n    this.isStatemachineTriggered = false;\r\n    this.startRecordingTime = undefined;\r\n    this.shouldPlayOnResume = false;\r\n    this.shouldSendStartRecordingEvent = true;\r\n    this.isPauseHandled = false;\r\n    this.isTaskPlayerPausePlay = false;\r\n\r\n    this.startRecordingDelayed = false;\r\n    this.recordingStarted = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { runtime, config, path } = this.props;\r\n    if (config.src !== undefined && config.src.dynamic !== undefined) {\r\n      runtime.variableManager.addVariableChangeObserver(path, config.src.dynamic.variable);\r\n    }\r\n\r\n    this.setVolumeFromState();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    const { runtime, config, path } = this.props;\r\n    if (config.src !== undefined && config.src.dynamic !== undefined) {\r\n      runtime.variableManager.dropVariableChangeObserver(path, config.src.dynamic.variable);\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.setVolumeFromState();\r\n    if (this.resumeRecording && this.startRecordingDelayed) {\r\n      this.resumeRecording();\r\n      this.startRecordingDelayed = false;\r\n    }\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n  }\r\n\r\n  onClickCapture = (event) => {\r\n    // TODO: check if this is really needed otherwise remove it as it block access to text flash children\r\n    // CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  onPlayHandler = (event) => {\r\n    const { config, runtime } = this.props;\r\n\r\n    // skip play trace event, save operation and FSM event when play is triggered by TaskPlayer resume command\r\n    if (this.isTaskPlayerPausePlay) {\r\n      this.isTaskPlayerPausePlay = false;\r\n      return;\r\n    }\r\n\r\n    this.saveInStateLastOperation(OPERATION_PLAY);\r\n    this.traceMedia(OPERATION_PLAY, this.isStatemachineTriggered, event);\r\n    CommonActionsHelper.sendEvent(config.startEvent, runtime);\r\n    this.isStatemachineTriggered = false;\r\n  }\r\n\r\n  onPauseHandler = (event) => {\r\n    const { config, runtime } = this.props;\r\n    const player = this.getMediaPlayer();\r\n\r\n    // skip pause tracing events, save operation and FSM event when: a) ended is reached and b) is handled by stop;\r\n    // a) When the player reaches the end: currentTime == duration -> browser calls onPauseHandler and the onEndHandler. We want only the end handler to happen.\r\n    // b) FSM stop implementation will send pause to player but wants to skip onPauseHandler and call onStopHandler instead.\r\n    // c) When the player enters a pause triggered by pause task\r\n    if (player.duration === player.currentTime || this.isPauseHandled || this.isTaskPlayerPausePlay) {\r\n      this.isPauseHandled = false;\r\n      this.isTaskPlayerPausePlay = false;\r\n      return;\r\n    }\r\n\r\n    this.saveInStateLastOperation(OPERATION_PAUSE);\r\n    this.traceMedia(OPERATION_PAUSE, this.isStatemachineTriggered, event);\r\n    CommonActionsHelper.sendEvent(config.pauseEvent, runtime);\r\n    this.isStatemachineTriggered = false;\r\n  }\r\n\r\n  onStopHandler = () => {\r\n    const { config, runtime } = this.props;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const lastOperation = StateAttributeAccess.extractLastOperation(state);\r\n\r\n    if (lastOperation !== OPERATION_STOP) {\r\n      this.saveInStateLastOperation(OPERATION_STOP);\r\n      this.traceMedia(OPERATION_STOP, this.isStatemachineTriggered, undefined);\r\n      CommonActionsHelper.sendEvent(config.stopEvent, runtime);\r\n    }\r\n    this.isStatemachineTriggered = false;\r\n  }\r\n\r\n\r\n  onEndedHandler = (event) => {\r\n    const { config, runtime } = this.props;\r\n    this.saveInStateLastOperation(OPERATION_ENDED);\r\n    this.increasePlayNumberAndCheckMaxPlay();\r\n    this.traceMedia(OPERATION_ENDED, false, event);\r\n    CommonActionsHelper.sendEvent(config.endEvent, runtime);\r\n  }\r\n\r\n  handleTaskPauseOrResume = (enterPause) => {\r\n    const player = this.getMediaPlayer();\r\n\r\n    if (!player) return null;\r\n\r\n    const lastOperation = StateAttributeAccess.extractLastOperation(ComponentStateHelper.getState(this));\r\n\r\n    if (enterPause && lastOperation === OPERATION_PLAY) {\r\n      this.shouldPlayOnResume = true;\r\n      this.isTaskPlayerPausePlay = true;\r\n      player.pause();\r\n    }\r\n\r\n    if (!enterPause && this.shouldPlayOnResume) {\r\n      player.play();\r\n      this.shouldPlayOnResume = false;\r\n      this.isTaskPlayerPausePlay = true;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  onVolumeChange = () => {\r\n    const state = ComponentStateHelper.getState(this);\r\n    const player = this.getMediaPlayer();\r\n\r\n    // the mediaRef volume value is between [0,1] and the state media volume stores values between [0,10]\r\n    StateAttributeAccess.setMediaVolume(state, parseInt(player.volume * 10, 10));\r\n    ComponentStateHelper.registerState(this, state);\r\n  }\r\n\r\n  onTimeUpdate = () => {\r\n    const { runtime } = this.props;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const player = this.getMediaPlayer();\r\n    const newTime = parseInt(player.currentTime, 10);\r\n    const oldTime = StateAttributeAccess.extractCurrentTime(state);\r\n    if (oldTime !== newTime) {\r\n      StateAttributeAccess.setCurrentTime(state, newTime);\r\n      runtime.eventEmitter.emit(\"currentTimeUpdate\", newTime);\r\n    }\r\n    ComponentStateHelper.registerState(this, state);\r\n  }\r\n\r\n\r\n  play(isStatemachineTriggered = false) {\r\n    const { config } = this.props;\r\n    const { recording } = config;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const maxRecord = StateAttributeAccess.extractMaxRecord(state);\r\n    const recordNumber = StateAttributeAccess.extractRecordNumber(state);\r\n\r\n    if (recording) {\r\n      // when maxRecord is reached we should stop here\r\n      if (maxRecord > 0 && recordNumber === maxRecord) {\r\n        console.info(\"The max record number was reached!\");\r\n        return;\r\n      }\r\n      this.isRecording = true;\r\n      this.startRecordingTime = moment().format();\r\n\r\n      if (this.resumeRecording) {\r\n        this.resumeRecording();\r\n      } else {\r\n        this.startRecordingDelayed = true;\r\n      }\r\n\r\n      StateAttributeAccess.setRecordNumber(state, recordNumber + 1);\r\n      ComponentStateHelper.registerState(this, state);\r\n      RenderingHelper.triggerRendering(this);\r\n    } else {\r\n      const player = this.getMediaPlayer();\r\n      if (!player) return;\r\n      this.isStatemachineTriggered = isStatemachineTriggered;\r\n      player.play();\r\n    }\r\n  }\r\n\r\n  stop(isStatemachineTriggered = false) {\r\n    if (this.stopRecording) {\r\n      this.stopRecording();\r\n    } else {\r\n      const player = this.getMediaPlayer();\r\n      if (!player) return;\r\n\r\n      this.isStatemachineTriggered = isStatemachineTriggered;\r\n      this.isPauseHandled = true;\r\n\r\n      player.pause();\r\n      player.currentTime = 0;\r\n      this.onStopHandler();\r\n    }\r\n  }\r\n\r\n  pause(isStatemachineTriggered = false) {\r\n    if (this.pauseRecording) {\r\n      this.pauseRecording();\r\n      RenderingHelper.triggerRendering(this)\r\n    } else {\r\n      const player = this.getMediaPlayer();\r\n      if (!player) return;\r\n      this.isStatemachineTriggered = isStatemachineTriggered;\r\n\r\n      player.pause();\r\n    }\r\n  }\r\n\r\n  saveInStateLastOperation(operation) {\r\n    const state = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setLastOperation(state, operation);\r\n    ComponentStateHelper.registerState(this, state);\r\n  }\r\n\r\n  setVolumeFromState() {\r\n    const state = ComponentStateHelper.getState(this);\r\n\r\n    const volume = StateAttributeAccess.extractMediaVolume(state);\r\n    const newVolume = volume !== undefined ? CbaMedia.convertToMediaRefVolume(volume) : undefined;\r\n\r\n    // mediaRef might refer to a simple div if there is nothing to play currently:\r\n    if (newVolume !== undefined && this.mediaRef.current !== null) {\r\n      this.mediaRef.current.volume = newVolume;\r\n    }\r\n  }\r\n\r\n  increasePlayNumberAndCheckMaxPlay() {\r\n    const state = ComponentStateHelper.getState(this);\r\n    const maxPlay = StateAttributeAccess.extractMaxPlay(state);\r\n    const playNo = StateAttributeAccess.extractPlayNumber(state);\r\n    const currentPlayNumber = playNo + 1;\r\n    StateAttributeAccess.setPlayNumber(state, currentPlayNumber);\r\n    ComponentStateHelper.registerState(this, state);\r\n\r\n    // when current play number equals maxPlay we need to disable media controls\r\n    if (currentPlayNumber === maxPlay) {\r\n      StateAttributeAccess.setHideControls(state, true);\r\n      ComponentStateHelper.registerState(this, state);\r\n      RenderingHelper.triggerRendering(this);\r\n    }\r\n  }\r\n\r\n  traceMedia(operation, isStatemachineTriggered, event) {\r\n    const { config, path, runtime } = this.props;\r\n    const { trace } = config;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const automaticStart = StateAttributeAccess.extractAutomaticStart(state);\r\n    const maxPlay = StateAttributeAccess.extractMaxPlay(state);\r\n    const hideControls = StateAttributeAccess.extractHideControls(state);\r\n    const modifiedTraceConfig = StateManagerHelper.deepCopy(config.trace);\r\n\r\n    if (trace.type !== undefined && trace.type !== 'ValueDisplay') {\r\n      modifiedTraceConfig.type = `${trace.type}Control`;\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteractionPerTraceConfig(\r\n      modifiedTraceConfig,\r\n      path,\r\n      trace.type === 'ValueDisplay' ? {} : {\r\n        operation,\r\n        maxPlay,\r\n        currentPlayNo: StateAttributeAccess.extractPlayNumber(state),\r\n        automaticStart,\r\n        hideControls,\r\n        volumeLevel: CbaMedia.computeVolumeInPercentage(StateAttributeAccess.extractMediaVolume(state)),\r\n        isStatemachineTriggered\r\n      },\r\n      trace.type === 'ValueDisplay' ? event : undefined,\r\n      runtime\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns player instance if available, else returns null\r\n   */\r\n  getMediaPlayer = () => {\r\n    const player = this.mediaRef.current;\r\n    if (player === null || player === undefined) {\r\n      console.info(\"The player is not there (anymore); probably max play number was reached or there is nothing to play.\");\r\n      return null;\r\n    }\r\n\r\n    return player;\r\n  }\r\n\r\n\r\n  // ------------ media recorder methods ----------------\r\n\r\n  /**\r\n   * Creates a media recorder component and exposes callbacks to the current instance\r\n   * @param {*} type The media component type\r\n   * @param {*} mediaStyle The component style\r\n   * @param {*} config the component config (needed for the start/pause/stop event names)\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  createMediaRecorder(type, mediaStyle, config, runtime) {\r\n    return (\r\n      <ReactMediaRecorder\r\n        audio\r\n        video={type === \"video\"}\r\n        onStop={this.endRecording}\r\n        render={({ status, startRecording, stopRecording, pauseRecording, resumeRecording, mediaBlobUrl, previewStream }) => {\r\n          this.stopRecording = () => {\r\n            CommonActionsHelper.sendEvent(config.stopRecordingEvent, runtime);\r\n            stopRecording();\r\n            this.shouldSendStartRecordingEvent = true;\r\n          }\r\n\r\n          this.pauseRecording = () => {\r\n            CommonActionsHelper.sendEvent(config.pauseRecordingEvent, runtime);\r\n            pauseRecording();\r\n            this.shouldPause = true;\r\n            this.shouldSendStartRecordingEvent = true;\r\n          }\r\n\r\n          this.resumeRecording = () => {\r\n            if (this.shouldSendStartRecordingEvent) {\r\n              CommonActionsHelper.sendEvent(config.startRecordingEvent, runtime);\r\n              this.shouldSendStartRecordingEvent = false;\r\n            }\r\n            resumeRecording();\r\n            this.shouldPause = false;\r\n            if (type === \"audio\") {\r\n              // we need to rerender the preview in order to have recording resume feedback\r\n              RenderingHelper.triggerRendering(this)\r\n            }\r\n          }\r\n\r\n          this.startRecording = () => {\r\n            if (status === \"idle\" && !this.recordingStarted) {\r\n              startRecording();\r\n            }\r\n            if (status === \"acquiring_media\" || status === \"recording\") {\r\n              this.recordingStarted = true;\r\n            }\r\n            if (status === \"stopped\") {\r\n              this.recordingStarted = false;\r\n            }\r\n          }\r\n\r\n          this.startRecording();\r\n\r\n          return (\r\n            <MediaPreview\r\n              type={type}\r\n              stream={status === \"recording\" ? previewStream : null}\r\n              style={mediaStyle}\r\n              pauseRecording={this.pauseRecording}\r\n              resumeRecording={this.resumeRecording}\r\n              shouldPause={this.shouldPause}\r\n            />\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handles the end recording logic which will store the recorded blob inside the component state,\r\n   * then passes it to the transfer mechanism for global storage.\r\n   * @param {*} mediaBlob The recorded media blob URL\r\n   */\r\n  endRecording = (mediaBlob) => {\r\n    const { runtime, config, path } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const recordNumber = StateAttributeAccess.extractRecordNumber(pathState);\r\n    StateAttributeAccess.setMediaBlob(pathState, mediaBlob)\r\n    ComponentStateHelper.registerState(this, pathState);\r\n\r\n    const taskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\r\n    const userDefinedIDPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime);\r\n    runtime.recordingBuffer.reportRecording(config.userDefinedId, this.startRecordingTime, recordNumber, mediaBlob, taskInfo, userDefinedIDPath);\r\n\r\n    this.isRecording = false;\r\n    this.shouldPause = false;\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * a debounced version of the previous method.\r\n   */\r\n  debouncedEndRecording = debounce(this.endRecording, 500);\r\n\r\n  /**\r\n   * Converts the config value to a range value supported by MediaRef.\r\n   * @param volume \r\n   */\r\n  static convertToMediaRefVolume(volume) {\r\n    if (volume < 0) {\r\n      volume = 0;\r\n    } else if (volume > 10) {\r\n      volume = 10;\r\n    }\r\n    return volume / 10;\r\n  }\r\n\r\n  static computeVolumeInPercentage(volume) {\r\n    const volumeValue = parseInt(volume * 10, 10);\r\n    return volumeValue;\r\n  }\r\n\r\n  static addAttributesToInitialState(initialState, configProps) {\r\n    initialState.volume = configProps.useAudio ? 1 : 0;\r\n    initialState.lastOperation = undefined;\r\n    initialState.playNumber = 0;\r\n    initialState.hideControls = configProps.hideControls;\r\n    initialState.automaticStart = configProps.automaticStart;\r\n    initialState.hideControls = configProps.hideControls;\r\n    initialState.maxPlay = configProps.maxPlay;\r\n    initialState.maxRecord = configProps.maxRecord;\r\n    initialState.recordNumber = 0;\r\n  }\r\n\r\n  static createDelegateComponent(component, path, type) {\r\n    const delegateComponent = StateManagerHelper.deepCopy(component);\r\n    delegateComponent.config.userDefinedId = undefined;\r\n    delegateComponent.type = type;\r\n    const delegatePath = IndexPathHelper.appendIndexToPageSegment(path, 0);\r\n    return {\r\n      delegatePath, delegateComponent\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const { type, imageReference } = config;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const muted = StateAttributeAccess.extractMediaVolume(state) <= 0;\r\n    const automaticStart = StateAttributeAccess.extractAutomaticStart(state);\r\n    const hideControls = StateAttributeAccess.extractHideControls(state);\r\n    const mediaBlob = StateAttributeAccess.extractMediaBlob(state);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const srcFromVariable = (config.src !== undefined && config.src.dynamic !== undefined)\r\n      ? CommonConfigHelper.getDynamicValueFromStatemachineAndMapper(config.src.dynamic, runtime)\r\n      : undefined;\r\n    // const src = mediaBlobUrl !== undefined ? mediaBlobUrl\r\n    //   : CommonConfigHelper.getProperResourcePath((srcFromVariable === undefined || srcFromVariable.length === 0) ? config.src.mediaReference : srcFromVariable, runtime);\r\n\r\n    const src = mediaBlob || CommonConfigHelper.getProperResourcePath((srcFromVariable === undefined || srcFromVariable.length === 0) ? config.src.mediaReference : srcFromVariable, runtime);\r\n    const altSrc = (config.src.mediaAlternateRef) ? CommonConfigHelper.getProperResourcePath(config.src.mediaAlternateRef, runtime) : undefined;\r\n    const extSrc = config.src.mediaReferenceExternal;\r\n    const altExtSrc = config.src.mediaAlternateRefExternal;\r\n    const poster = (imageReference === undefined || imageReference.length === 0) ? undefined : CommonConfigHelper.getProperResourcePath(imageReference, runtime);\r\n\r\n    // Avoid blocking the loading mechanism if there is nothing to play currently:\r\n    const someResourceToPlay = (\r\n      (src !== undefined && src !== null && src.length > 0)\r\n      || (altSrc !== undefined && altSrc.length > 0)\r\n      || (extSrc !== undefined && extSrc.length > 0)\r\n      || (altExtSrc !== undefined && altExtSrc.length > 0)\r\n      || this.isRecording);\r\n\r\n    // Make sure the audio/video reload each time the primary local resource changes:\r\n    // (Alternate and external resources do not change dynamically.)\r\n    const key = src;\r\n    const mediaStyle = {\r\n      width: '100%',\r\n      height: '100%'\r\n    }\r\n\r\n    // we might have childrens only for video component\r\n    const delegates = config.cbaChildren !== undefined ? config.cbaChildren.map((child, index) => {\r\n      const childPath = IndexPathHelper.appendIndexToPageSegment(path, index);\r\n      return (\r\n        <CbaInterpreter\r\n          key={childPath}\r\n          config={child}\r\n          path={childPath}\r\n          runtime={runtime}\r\n          orientation={orientation}\r\n        />\r\n      )\r\n    }) : undefined;\r\n\r\n    let media;\r\n    if (this.isRecording) {\r\n      media = this.createMediaRecorder(type, mediaStyle, config, runtime)\r\n    } else if (type === 'audio') {\r\n      media = (\r\n        <audio\r\n          ref={this.mediaRef}\r\n          key={key}\r\n          style={mediaStyle}\r\n          controls={!hideControls}\r\n          autoPlay={automaticStart}\r\n          muted={muted}\r\n          controlsList=\"nodownload\"\r\n          onClick={this.onClickHandler}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          onPlay={this.onPlayHandler}\r\n          onPause={this.onPauseHandler}\r\n          onEnded={this.onEndedHandler}\r\n          onVolumeChange={this.onVolumeChange}\r\n          title={CommonConfigHelper.buildTitle(config)}\r\n          tabIndex={config.tabIndex}\r\n        >\r\n          <source src={src} />\r\n          {(altSrc) && <source src={altSrc} />}\r\n          {(extSrc) && <source src={extSrc} />}\r\n          {(altExtSrc) && <source src={altExtSrc} />}\r\n          Your browser does not support the audio element.\r\n        </audio>\r\n      );\r\n    } else if (type === 'video') {\r\n      media = (\r\n        <video\r\n          ref={this.mediaRef}\r\n          key={key}\r\n          style={mediaStyle}\r\n          controls={!hideControls}\r\n          autoPlay={automaticStart}\r\n          muted={muted}\r\n          poster={poster}\r\n          controlsList=\"nodownload nofullscreen noremoteplayback noplaybackrate\"\r\n          disablePictureInPicture\r\n          onClick={this.onClickHandler}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          onPlay={this.onPlayHandler}\r\n          onPause={this.onPauseHandler}\r\n          onEnded={this.onEndedHandler}\r\n          onVolumeChange={this.onVolumeChange}\r\n          onTimeUpdate={this.onTimeUpdate}\r\n          title={CommonConfigHelper.buildTitle(config)}\r\n          tabIndex={config.tabIndex}\r\n        >\r\n          <source src={src} type=\"video/mp4\" />\r\n          {(altSrc) && <source src={altSrc} type=\"video/mp4\" />}\r\n          {(extSrc) && <source src={extSrc} type=\"video/mp4\" />}\r\n          {(altExtSrc) && <source src={altExtSrc} type=\"video/mp4\" />}\r\n          Your browser does not support the video element.\r\n        </video>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        onClick={someResourceToPlay ? undefined : this.onClickHandler}\r\n        onClickCapture={this.onClickCapture}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n      >\r\n        {someResourceToPlay && media}\r\n        {delegates}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nCbaMedia.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.getStandardConfigPropTypes(false)\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n}\r\n","import ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport SelectGroupHelper from '../components/SelectGroupHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\nimport TextBlockSelectHelper from '../components/CbaRichTextField/TextBlockSelectHelper';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\nimport BookmarkHelper from '../components/BookmarkHelper';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\nimport CbaRichTextField from '../components/CbaRichTextField/CbaRichTextField';\r\nimport CbaTableCell from '../components/table/CbaTableCell';\r\nimport TreeUtils from '../components/CbaTree/TreeUtils';\r\nimport PropagationHelper from './PropagationHelper';\r\nimport Utils from '../utils/Utils';\r\nimport CbaContainer from '../components/CbaContainer';\r\nimport * as ValueFormatter from \"../components/calculator/ValueFormatter\";\r\nimport CbaTreeChildArea from '../components/CbaTree/CbaTreeChildArea';\r\nimport { OPERATION_PLAY, OPERATION_PAUSE, OPERATION_STOP, OPERATION_ENDED } from '../components/media/CbaMedia';\r\n\r\n\r\nexport default class TermEvaluator {\r\n\r\n  // all operators we know: -----------------------------------------------------------------\r\n  static operators = {\r\n    // context value access\r\n    contextValue: TermEvaluator.contextValue,\r\n\r\n    // basic boolean\r\n    and: TermEvaluator.and,\r\n    or: TermEvaluator.or,\r\n    not: TermEvaluator.not,\r\n    ifThenElse: TermEvaluator.ifThenElse,\r\n    ifGuard: TermEvaluator.ifGuard,\r\n\r\n    // compare\r\n    equal: TermEvaluator.equal,\r\n    notEqual: TermEvaluator.notEqual,\r\n    greater: TermEvaluator.greater,\r\n    greaterEqual: TermEvaluator.greaterEqual,\r\n    less: TermEvaluator.less,\r\n    lessEqual: TermEvaluator.lessEqual,\r\n    max: TermEvaluator.max,\r\n    maxNamed: TermEvaluator.maxNamed,\r\n    matches: TermEvaluator.matches,\r\n\r\n    // arrays \r\n    arrayLength: TermEvaluator.arrayLength,\r\n    union: TermEvaluator.union,\r\n    intersection: TermEvaluator.intersection,\r\n\r\n    // numbers\r\n    add: TermEvaluator.add,\r\n    subtract: TermEvaluator.subtract,\r\n    multiply: TermEvaluator.multiply,\r\n    divide: TermEvaluator.divide,\r\n    modulo: TermEvaluator.modulo,\r\n    floor: TermEvaluator.floor,\r\n    ceil: TermEvaluator.ceil,\r\n    trunc: TermEvaluator.trunc,\r\n    round: TermEvaluator.round,\r\n\r\n    // strings\r\n    stringFormat: TermEvaluator.stringFormat,\r\n    concatenate: TermEvaluator.concatenate,\r\n    boolToString: TermEvaluator.boolToString,\r\n    numberToString: TermEvaluator.numberToString,\r\n    contains: TermEvaluator.contains,\r\n\r\n    // currently running\r\n    getCurrentTest: TermEvaluator.getCurrentTest,\r\n    getCurrentTask: TermEvaluator.getCurrentTask,\r\n    getCurrentItem: TermEvaluator.getCurrentItem,\r\n    getCurrentPage: TermEvaluator.getCurrentPage,\r\n    getEmbeddedPage: TermEvaluator.getEmbeddedPage,\r\n\r\n    switchPage: TermEvaluator.switchPage,\r\n    closeDialog: TermEvaluator.closeDialog,\r\n\r\n    saveTaskResults: TermEvaluator.saveTaskResults,\r\n    previousTask: TermEvaluator.previousTask,\r\n    nextTask: TermEvaluator.nextTask,\r\n    cancelTask: TermEvaluator.cancelTask,\r\n    switchTaskInTest: TermEvaluator.switchTaskInTest,\r\n    switchTaskAndTest: TermEvaluator.switchTaskAndTest,\r\n\r\n    recommend: TermEvaluator.recommend,\r\n\r\n    // interaction events\r\n    nbUserInteractions: TermEvaluator.nbUserInteractions,\r\n    nbUserInteractionsTotal: TermEvaluator.nbUserInteractionsTotal,\r\n    firstReactionTime: TermEvaluator.firstReactionTime,\r\n    firstReactionTimeTotal: TermEvaluator.firstReactionTimeTotal,\r\n    taskExecutionTime: TermEvaluator.taskExecutionTime,\r\n    taskExecutionTimeTotal: TermEvaluator.taskExecutionTimeTotal,\r\n\r\n    // get/set on widgets\r\n    focus: TermEvaluator.focus,\r\n\r\n    getDisabled: TermEvaluator.getDisabled,\r\n    setDisabled: TermEvaluator.setDisabled,\r\n\r\n    getSelected: TermEvaluator.getSelected,\r\n    setSelected: TermEvaluator.setSelected,\r\n\r\n    getHidden: TermEvaluator.getHidden,\r\n    setHidden: TermEvaluator.setHidden,\r\n\r\n    getVisited: TermEvaluator.getVisited,\r\n    setVisited: TermEvaluator.setVisited,\r\n\r\n    getTextValue: TermEvaluator.getTextValue,\r\n    setTextValue: TermEvaluator.setTextValue,\r\n\r\n    setHighlightable: TermEvaluator.setHighlightable,\r\n    isSelectedComponentOrTextBlock: TermEvaluator.isSelectedComponentOrTextBlock,\r\n    isHighlighted: TermEvaluator.isHighlighted,\r\n    getIntegerValue: TermEvaluator.getIntegerValue,\r\n\r\n    setMediaPlayerVolume: TermEvaluator.setMediaPlayerVolume,\r\n    setMediaPlayer: TermEvaluator.setMediaPlayer,\r\n    initMediaPlayer: TermEvaluator.initMediaPlayer,\r\n\r\n    setDragAndDropMode: TermEvaluator.setDragAndDropMode,\r\n\r\n    setSingleSelectMode: TermEvaluator.setSingleSelectMode,\r\n    setAllowDeselect: TermEvaluator.setAllowDeselect,\r\n    setSelectable: TermEvaluator.setSelectable,\r\n    setSelectChangeBlockMode: TermEvaluator.setSelectChangeBlockMode,\r\n\r\n    // named calculations\r\n    evaluateNamedCalculation: TermEvaluator.evaluateNamedCalculation,\r\n    getCalculationResult: TermEvaluator.getCalculationResult,\r\n\r\n    // variables\r\n    getVariable: TermEvaluator.getVariable,\r\n    setVariable: TermEvaluator.setVariable,\r\n    switchVariables: TermEvaluator.switchVariables,\r\n    getImplicitVariable: TermEvaluator.getImplicitVariable,\r\n    getInternalImplicitVariable: TermEvaluator.getInternalImplicitVariable,\r\n\r\n    // state machine\r\n    raiseEvent: TermEvaluator.raiseEvent,\r\n    postponeTaskSwitch: TermEvaluator.postponeTaskSwitch,\r\n    setTimedEventInterval: TermEvaluator.setTimedEventInterval,\r\n    setStatemachineAssignedPage: TermEvaluator.setStatemachineAssignedPage,\r\n    getNbStatemachineEventsRaised: TermEvaluator.getNbStatemachineEventsRaised,\r\n    getCurrentLeafStates: TermEvaluator.getCurrentLeafStates,\r\n    getRaisedStatemachineEvents: TermEvaluator.getRaisedStatemachineEvents,\r\n    getVisitedStates: TermEvaluator.getVisitedStates,\r\n    getRaisedEventsInState: TermEvaluator.getRaisedEventsInState,\r\n    getStatemachineVariableValues: TermEvaluator.getStatemachineVariableValues,\r\n\r\n    // trace\r\n    traceText: TermEvaluator.traceText,\r\n    traceSnapshot: TermEvaluator.traceSnapshot,\r\n\r\n    // calculator\r\n    calcGetMem: TermEvaluator.calcGetMem,\r\n    calcOp: TermEvaluator.calcOp,\r\n    calcOpnd: TermEvaluator.calcOpnd,\r\n    calcSettings: TermEvaluator.calcSettings,\r\n\r\n    // tree\r\n    currentNode: TermEvaluator.currentNode,\r\n    getVisitedNodes: TermEvaluator.getVisitedNodes,\r\n    matchNodes: TermEvaluator.matchNodes,\r\n    matchNodesWithColumns: TermEvaluator.matchNodesWithColumns,\r\n    treeMove: TermEvaluator.treeMove,\r\n    treeCopy: TermEvaluator.treeCopy,\r\n\r\n    // scroll\r\n    scrollEmbeddedPage: TermEvaluator.scrollEmbeddedPage,\r\n    scrollTopLevelPage: TermEvaluator.scrollTopLevelPage,\r\n\r\n    // system environment\r\n    currentTimestamp: TermEvaluator.currentTimestamp,\r\n    consoleLog: TermEvaluator.consoleLog,\r\n\r\n    setGlobalPropertyHighlightColor: TermEvaluator.setGlobalPropertyHighlightColor,\r\n\r\n    // others\r\n    containerMembersFormLocalGroup: TermEvaluator.containerMembersFormLocalGroup,\r\n    containerRangeContainsMembers: TermEvaluator.containerRangeContainsMembers,\r\n    isInBookmarksList: TermEvaluator.isInBookmarksList,\r\n    callExternalPageFrame: TermEvaluator.callExternalPageFrame,\r\n    caretPosition: TermEvaluator.caretPosition\r\n  }\r\n\r\n  static contextValue(params, runtime, contextSlots) {\r\n    const mainEntry = contextSlots[params.valueIndex];\r\n    if (params.attributes === undefined) {\r\n      return mainEntry;\r\n    }\r\n    let result = mainEntry;\r\n    params.attributes.forEach((attribute) => { result = result === undefined ? undefined : result[attribute]; })\r\n    return result;\r\n  }\r\n\r\n  // basic boolean ------------------------------------\r\n  static and(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous && current, true);\r\n    }\r\n    return params.left && params.right;\r\n  }\r\n\r\n  static or(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous || current, false);\r\n    }\r\n    return params.left || params.right;\r\n  }\r\n\r\n  static not(params, runtime) {\r\n    return !params.value;\r\n  }\r\n\r\n  static ifThenElse(params, runtime) {\r\n    return params.if ? params.then : params.else;\r\n  }\r\n\r\n  static ifGuard(params, runtime) {\r\n    // Th internal evaluation evaluated guarded branches implicitly\r\n    // and puts term of first passed guard as 'activeBranch' into the params structure.\r\n    // We just return that branch here:\r\n    return params.activeBranch;\r\n  }\r\n\r\n  // compare ------------------------------------\r\n  static equal(params, runtime) {\r\n    return params.left === params.right;\r\n  }\r\n\r\n  static notEqual(params, runtime) {\r\n    return params.left !== params.right;\r\n  }\r\n\r\n  static greater(params, runtime) {\r\n    return params.left > params.right;\r\n  }\r\n\r\n  static greaterEqual(params, runtime) {\r\n    return params.left >= params.right;\r\n  }\r\n\r\n  static less(params, runtime) {\r\n    return params.left < params.right;\r\n  }\r\n\r\n  static lessEqual(params, runtime) {\r\n    return params.left <= params.right;\r\n  }\r\n\r\n  static max(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.sort((a, b) => b - a)[0];\r\n    }\r\n    return params.left > params.right ? params.left : params.right;\r\n  }\r\n\r\n  static maxNamed(params, runtime) {\r\n    // use the params names as return\r\n    // compare params values and return params name of max value\r\n    let currentMaximumValue;\r\n    let currentMaximumName;\r\n    Object.keys(params).forEach((candidateName) => {\r\n      const candidateValue = params[candidateName];\r\n      if (currentMaximumValue === undefined || currentMaximumValue < candidateValue) {\r\n        currentMaximumValue = candidateValue;\r\n        currentMaximumName = candidateName;\r\n      }\r\n    });\r\n    return currentMaximumName;\r\n  }\r\n\r\n  static matches(params) {\r\n    try {\r\n      const matcher = RegExp(params.pattern, 'm');\r\n      return matcher.test(params.candidate);\r\n    } catch (exception) {\r\n      console.log(`Invalid regular expression in matches operator: ${params.pattern} -> evaluate matches call to 'false'`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // arrays -----------------------------------\r\n  static arrayLength(params, runtime) {\r\n    return params.value.length;\r\n  }\r\n\r\n  static union(params, runtime) {\r\n    const { left, right } = params;\r\n\r\n    const result = [];\r\n    left.forEach((candidate) => {\r\n      if (!result.includes(candidate)) {\r\n        result.push(candidate);\r\n      }\r\n    })\r\n    right.forEach((candidate) => {\r\n      if (!result.includes(candidate)) {\r\n        result.push(candidate);\r\n      }\r\n    })\r\n    return result;\r\n  }\r\n\r\n\r\n  static intersection(params, runtime) {\r\n    const { left, right } = params;\r\n\r\n    const result = [];\r\n    left.forEach((candidate) => {\r\n      if (right.includes(candidate) && !result.includes(candidate)) {\r\n        result.push(candidate);\r\n      }\r\n    })\r\n    return result;\r\n  }\r\n\r\n  // numbers ------------------------------------\r\n  static add(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous + current, 0);\r\n    }\r\n    return params.left + params.right;\r\n  }\r\n\r\n  static subtract(params, runtime) {\r\n    return params.left - params.right;\r\n  }\r\n\r\n  static multiply(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous * current, 1);\r\n    }\r\n    return params.left * params.right;\r\n  }\r\n\r\n  static divide(params, runtime) {\r\n    return params.left / params.right;\r\n  }\r\n\r\n  static modulo(params, runtime) {\r\n    return params.left % params.right;\r\n  }\r\n\r\n  static floor(params, runtime) {\r\n    return Math.floor(params.value);\r\n  }\r\n\r\n  static ceil(params, runtime) {\r\n    return Math.ceil(params.value);\r\n  }\r\n\r\n  static trunc(params, runtime) {\r\n    return Math.trunc(params.value);\r\n  }\r\n\r\n  static round(params, runtime) {\r\n    return Math.round(params.value);\r\n  }\r\n\r\n  // strings --------------------------------------------------------------\r\n  static stringFormat(params, runtime) {\r\n    let result = params.expression;\r\n    params.valuesArray.forEach((value, index) => {\r\n      // build regex based on the value index\r\n      const exp = `%${index + 1}[$]s`;\r\n      const regexp = new RegExp(exp, \"g\");\r\n      result = result.replace(regexp, value);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  static concatenate(params, runtime) {\r\n    const { left, right } = params;\r\n    return left + right;\r\n  }\r\n\r\n  static boolToString(params, runtime) {\r\n    const { cond } = params;\r\n    return cond.toString();\r\n  }\r\n\r\n  static numberToString(params, runtime) {\r\n    const { expression } = params;\r\n    return expression.toString();\r\n  }\r\n\r\n  static contains(params, runtime) {\r\n    const { container, candidates } = params;\r\n    return candidates.every(candidate => container.includes(candidate));\r\n  }\r\n\r\n  // currently running -----------------------------------------------------\r\n  static getCurrentTest(params, runtime) {\r\n    return runtime.taskManager.getCurrentTestTaskItemNames().test;\r\n  }\r\n\r\n  static getCurrentTask(params, runtime) {\r\n    return runtime.taskManager.getCurrentTestTaskItemNames().task;\r\n  }\r\n\r\n  static getCurrentItem(params, runtime) {\r\n    return runtime.taskManager.getCurrentTestTaskItemNames().item;\r\n  }\r\n\r\n  static getCurrentPage(params, runtime) {\r\n    switch (params.pageType) {\r\n      case \"standard\":\r\n        return runtime.taskManager.getCurrentPageNames().standardPage;\r\n      case \"xPage\":\r\n        return runtime.taskManager.getCurrentPageNames().xPage;\r\n      default:\r\n        console.error(`Illegal page type in getCurrentPage call: ${params.pageType}`);\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  static getEmbeddedPage(params, runtime) {\r\n    const path = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(UserDefPathHelper.getLastUserDefIdFromPath(params.absoluteUserDefId));\r\n    const pageAreaConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (pageAreaConfig === undefined) {\r\n      console.error(`Illegal page area reference in getEmbeddedPage call: ${params.absoluteUserDefId}`);\r\n      return undefined;\r\n    }\r\n    switch (pageAreaConfig.type) {\r\n      case 'CbaPageArea': return CbaPageArea.getEmbeddedPageName(path, pageAreaConfig.config, runtime);\r\n      case 'CbaTreeChildArea': return CbaTreeChildArea.getEmbeddedPageName(path, pageAreaConfig.config, runtime);\r\n      default: {\r\n        console.error(`Not supported component type ${pageAreaConfig.type} in getEmbeddedPage call with reference: ${params.absoluteUserDefId}`);\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  static switchPage(params, runtime) {\r\n    // translate the user defined id path to the target CBAPageArea to a proper state path \r\n    const receiverPath = params.receiver === undefined ? undefined\r\n      : IndexPathHelper.trimRootAndPageAreaFromPath(PathTranslationHelper.getIndexPathForUserDefPath(params.receiver, runtime));\r\n    const receiverTabInfo = params.receiverTabName === undefined ? undefined : {\r\n      name: params.receiverTabName,\r\n      image: params.receiverTabImage\r\n    }\r\n    const position = (params.x === undefined || params.y === undefined) ? undefined : {\r\n      x: params.x, y: params.y\r\n    }\r\n\r\n    runtime.taskManager.switchPage(\r\n      params.pageName, undefined, params.pageUrl,\r\n      params.pageAreaType, params.pageAreaName, receiverPath,\r\n      receiverTabInfo, undefined, position\r\n    );\r\n    return undefined;\r\n  }\r\n\r\n  static closeDialog(params, runtime) {\r\n    const presenter = runtime.dialogPresenter;\r\n    if (presenter !== undefined) {\r\n      if (params.pageName !== undefined) {\r\n        presenter.closeSpecificPageDialog(params.pageName);\r\n      } else {\r\n        presenter.closeDialog({\r\n          pageAreaName: params.pageAreaName,\r\n          type: params.pageAreaType\r\n        })\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static saveTaskResults(params, runtime) {\r\n    runtime.taskManager.saveCurrentTaskResults();\r\n    return undefined;\r\n  }\r\n\r\n  static previousTask(params, runtime) {\r\n    runtime.taskManager.switchTaskPrevious();\r\n    return undefined;\r\n  }\r\n\r\n  static nextTask(params, runtime) {\r\n    runtime.taskManager.switchTaskNext();\r\n    return undefined;\r\n  }\r\n\r\n  static cancelTask(params, runtime) {\r\n    runtime.taskManager.cancelTask();\r\n    return undefined;\r\n  }\r\n\r\n  static switchTaskInTest(params, runtime) {\r\n    runtime.taskManager.switchFirstMatchingTaskIntraTest(params.taskName);\r\n    return undefined;\r\n  }\r\n\r\n  static switchTaskAndTest(params, runtime) {\r\n    runtime.taskManager.switchFirstMatchingTaskInterTest(params.testName, params.taskName);\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * The parameter recommendations must be an array of recommendation objects.\r\n   * Each recommendation object \r\n   * - must have a testName attribute and \r\n   * - may have a taskName atrribute and \r\n   * - may have an absoluteUserDef attribute if a taskName attribute is given.\r\n   */\r\n  static recommend(params, runtime) {\r\n    runtime.recommendationsManager.setRecommendations(params.recommendations);\r\n    return undefined;\r\n  }\r\n\r\n  // interaction events ---------------------------------------------------\r\n  static nbUserInteractions(params, runtime) {\r\n    return runtime.incidentsAccumulator.nbUserInteractions(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static nbUserInteractionsTotal(params, runtime) {\r\n    return runtime.incidentsAccumulator.nbUserInteractionsTotal(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static firstReactionTime(params, runtime) {\r\n    return runtime.incidentsAccumulator.firstReactionTime(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static firstReactionTimeTotal(params, runtime) {\r\n    return runtime.incidentsAccumulator.firstReactionTimeTotal(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static taskExecutionTime(params, runtime) {\r\n    return runtime.incidentsAccumulator.taskExecutionTime(runtime.taskManager.getCurrentStatePathRoot(), new Date().getTime());\r\n  }\r\n\r\n  static taskExecutionTimeTotal(params, runtime) {\r\n    return runtime.incidentsAccumulator.taskExecutionTimeTotal(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n\r\n  // get/set on widgets ------------------------------------------------------------------\r\n  static focus(params, runtime) {\r\n    const component = TermEvaluator.findComponentByAbsoluteUserDefId(params.absoluteUserDefId, runtime);\r\n    const pathId = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pagePath = IndexPathHelper.getPagePath(pathId);\r\n    if (component !== undefined) {\r\n      component.focus();\r\n    } else {\r\n      runtime.actionRegister.registerAction(pathId, \"focus\");\r\n    }\r\n    runtime.focusRegister.registerFocus(pagePath);\r\n    return undefined;\r\n  }\r\n\r\n  static getDisabled(params, runtime) {\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractDisabled, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setDisabled(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    PropagationHelper.applySimpleSetter(absoluteUserDefId, groupName, StateAttributeAccess.extractDisabled, StateAttributeAccess.setDisabled, value, true, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static getSelected(params, runtime) {\r\n    const pathId = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(pathId, runtime);\r\n    return SelectGroupHelper.extractSelectedState(pathState, pathId, runtime);\r\n  }\r\n\r\n  static setSelected(params, runtime) {\r\n    const pathId = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(pathId, runtime);\r\n    const dataBeforeSelection = TraceLogHelper.getTraceDataBeforeSetSelection(params.absoluteUserDefId, runtime);\r\n\r\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(params.value, pathId, pathState, false, true, runtime);\r\n    TraceLogHelper.traceChangesAfterSetSelection(params.absoluteUserDefId, runtime, dataBeforeSelection);\r\n    return undefined;\r\n  }\r\n\r\n  static getHidden(params, runtime) {\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractHidden, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setHidden(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    PropagationHelper.applySimpleSetter(absoluteUserDefId, groupName, StateAttributeAccess.extractHidden, StateAttributeAccess.setHidden, value, true, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static getVisited(params, runtime) {\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractVisited, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setVisited(params, runtime) {\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractVisited, StateAttributeAccess.setVisited, params.value, params.absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n\r\n  static getTextValue(params, runtime) {\r\n    const { selector } = params;\r\n    if (selector) {\r\n      return CbaTableCell.getFormulaOrValue(selector, params.absoluteUserDefId, runtime);\r\n    }\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setTextValue(params, runtime) {\r\n\r\n    // create trace log entry\r\n    const oldTextValue = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, params.absoluteUserDefId, runtime);\r\n    const newTextValue = TermEvaluator.caluculateTextInsert(oldTextValue, params.value, params.insertPosition, params.dropLength);\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const traceDetails = {\r\n      indexPath,\r\n      userDefIdPath: params.absoluteUserDefId,\r\n      userDefId: UserDefPathHelper.getLastUserDefIdFromPath(params.absoluteUserDefId),\r\n      oldTextValue,\r\n      newTextValue,\r\n      insertedValue: params.value,\r\n      insertPosition: params.insertPosition,\r\n      dropLength: params.dropLength\r\n    };\r\n    runtime.traceLogBuffer.reportEvent('OperatorSetTextValue', new Date(), traceDetails);\r\n\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, StateAttributeAccess.setTextValue, newTextValue, params.absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n  static caluculateTextInsert(oldText, insertText, insertPosition, dropLength) {\r\n    const prefix = insertPosition < 0 ? oldText : oldText.substr(0, insertPosition);\r\n    const postfix = (insertPosition < 0 || dropLength < 0) ? \"\" : oldText.substr(insertPosition + dropLength);\r\n    return prefix + insertText + postfix;\r\n  }\r\n\r\n  static setHighlightable(params, runtime) {\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractHighlightable, StateAttributeAccess.setHighlightable, params.value, params.absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n  static isSelectedComponentOrTextBlock(params, runtime) {\r\n    const pathParameter = params.absolutePath;\r\n    const blockOwnerPathId = PathTranslationHelper.getIndexPathForTextBlockPath(pathParameter, runtime);\r\n    if (blockOwnerPathId === undefined) {\r\n      const pathId = PathTranslationHelper.getIndexPathForUserDefPath(pathParameter, runtime);\r\n      const pathState = runtime.componentStateManager.findOrBuildStateForPathId(pathId, runtime);\r\n      return SelectGroupHelper.extractSelectedState(pathState, pathId, runtime);\r\n    } else {\r\n      const { partial, highlightColor } = params;\r\n      const richTextPathState = runtime.componentStateManager.findOrBuildStateForPathId(blockOwnerPathId, runtime);\r\n      const blockName = UserDefPathHelper.getLastUserDefIdFromPath(pathParameter);\r\n      const richTextPageSegment = runtime.pageConfigurationsManager.findPageSegmentForTextBlockOwner(blockName);\r\n      const richTextConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(richTextPageSegment);\r\n      let highlightColorValue = null;\r\n      if (highlightColor !== undefined) {\r\n        highlightColorValue = CbaRichTextField.convertHighlightValueToKey(highlightColor);\r\n      }\r\n      return TextBlockSelectHelper.isTextBlockSelected(blockName, richTextPathState, richTextConfig.config, partial, highlightColorValue);\r\n    }\r\n  }\r\n\r\n  static isHighlighted(params, runtime) {\r\n    const { highlightColor } = params;\r\n    const richTextPathState = runtime.componentStateManager.findOrBuildStateByUserDefPath(params.absoluteUserDefId, runtime);\r\n    const richTextPageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(UserDefPathHelper.getLastUserDefIdFromPath(params.absoluteUserDefId));\r\n    const richTextConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(richTextPageSegment);\r\n    let highlightColorValue = null;\r\n    if (highlightColor !== undefined) {\r\n      highlightColorValue = CbaRichTextField.convertHighlightValueToKey(highlightColor);\r\n    }\r\n    return TextBlockSelectHelper.isSelectionContainsNonBlank(richTextPathState, richTextConfig.config, highlightColorValue);\r\n  }\r\n\r\n  static getIntegerValue(params, runtime) {\r\n    const { absoluteUserDefId, roundingMode, defaultValue } = params;\r\n    // TODO: CKI or BHO: unfortunately the TableCell component puts a Number into the textValue field -> cast that to String:\r\n    const valueAsText = String(ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, absoluteUserDefId, runtime));\r\n\r\n    if (valueAsText === undefined || valueAsText.length === 0) {\r\n      return defaultValue;\r\n    }\r\n\r\n    const parsedValue = TermEvaluator.integerValueFromString(valueAsText, roundingMode);\r\n    return parsedValue === undefined ? defaultValue : parsedValue;\r\n  }\r\n\r\n  /**\r\n   * Internal helper: Parse the given String as integer with rounding applied.\r\n   * \r\n   * The method returns undefined if the string does not represent a decimal number. \r\n   * \r\n   * @param {String} valueAsString The value given as string\r\n   * @param {String} roundingMode The rounding mode, one of 'up', 'down', 'half_up', 'half_down'\r\n   */\r\n  static integerValueFromString(valueAsString, roundingMode) {\r\n    const parseResult = TermEvaluator.parseDecimalString(valueAsString);\r\n    if (parseResult === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const { wholeValue: whole, fractionClass } = parseResult;\r\n    const wholeUp = whole >= 0 ? (whole + 1) : (whole - 1);\r\n    switch (roundingMode) {\r\n      case 'up':\r\n        return fractionClass === 'zero' ? whole : wholeUp;\r\n      case 'down':\r\n        return whole;\r\n      case 'half_up':\r\n        return fractionClass === 'five' || fractionClass === 'greaterThanFive' ? wholeUp : whole;\r\n      case 'half_down':\r\n        return fractionClass === 'greaterThanFive' ? wholeUp : whole;\r\n      default:\r\n        console.warn(`Invalid rounding mode: ${roundingMode}`);\r\n        return undefined;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Internal helper that parses a decimal string into the whole part\r\n   * and a classification of the fractional part: 'zero', 'lessThanFive', 'five', greaterThanFive'.\r\n   * \r\n   * The method returns undefined if the given String is not a proper decimal number.\r\n   * \r\n   * @param {String} valueAsString \r\n   */\r\n  static parseDecimalString(valueAsString) {\r\n    const dotIndex = valueAsString.indexOf('.');\r\n    const wholeString = dotIndex === -1 ? valueAsString : valueAsString.substr(0, dotIndex);\r\n    const fractionString = dotIndex === -1 ? '0' : valueAsString.substr(dotIndex + 1);\r\n    const wholeValue = parseInt(wholeString, 10);\r\n    const fractionValue = parseInt(fractionString, 10);\r\n    if (String(wholeValue) !== wholeString) {\r\n      return undefined;\r\n    }\r\n    let fractionCompareString = fractionString;\r\n    while (fractionCompareString.startsWith('0')) {\r\n      fractionCompareString = fractionCompareString.substr(1);\r\n    }\r\n    if (fractionCompareString.length === 0) {\r\n      fractionCompareString = '0';\r\n    }\r\n    if (String(fractionValue) !== fractionCompareString) {\r\n      return undefined;\r\n    }\r\n    if (fractionValue < 0) {\r\n      return undefined;\r\n    }\r\n    let fractionClass;\r\n    if (fractionValue === 0) {\r\n      fractionClass = 'zero'\r\n    } else if (fractionString[0] === '0' || fractionValue < 5) {\r\n      fractionClass = 'lessThanFive'\r\n    } else if (fractionValue > 5) {\r\n      fractionClass = 'greaterThanFive'\r\n    } else {\r\n      fractionClass = 'five'\r\n    }\r\n    return {\r\n      wholeValue, fractionClass\r\n    };\r\n  }\r\n\r\n  static setMediaPlayerVolume(params, runtime) {\r\n    if (params.value >= 0 && params.value <= 10) {\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractMediaVolume, StateAttributeAccess.setMediaVolume, params.value, params.absoluteUserDefId, runtime, true);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static setMediaPlayer(params, runtime) {\r\n    const component = TermEvaluator.findComponentByAbsoluteUserDefId(params.absoluteUserDefId, runtime);\r\n    if (component !== undefined) {\r\n      const operation = params.value.toLowerCase();\r\n      switch (operation) {\r\n        case 'start':\r\n          component.play(true);\r\n          break;\r\n        case 'stop':\r\n          component.stop(true);\r\n          break;\r\n        case 'pause':\r\n          component.pause(true);\r\n          break;\r\n        default:\r\n          TermEvaluator.logMessage(`invalid operation ${operation}`);\r\n          break;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static initMediaPlayer(params, runtime) {\r\n    const { absoluteUserDefId, automaticStart, hideControls, maxPlay } = params;\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractAutomaticStart, StateAttributeAccess.setAutomaticStart, automaticStart, absoluteUserDefId, runtime, true);\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractHideControls, StateAttributeAccess.setHideControls, hideControls, absoluteUserDefId, runtime, true);\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractMaxPlay, StateAttributeAccess.setMaxPlay, maxPlay, absoluteUserDefId, runtime, true);\r\n  }\r\n\r\n  static setDragAndDropMode(params, runtime) {\r\n    const { isSender, isReceiver, absoluteUserDefId } = params;\r\n    const modeToSet = {\r\n      isSender,\r\n      isReceiver\r\n    }\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractDragAndDrop, StateAttributeAccess.setDragAndDrop, modeToSet, absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n  static setSingleSelectMode(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    SelectGroupHelper.setSingleSelectActiveForController(absoluteUserDefId, groupName, value, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static setAllowDeselect(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    SelectGroupHelper.setAllowDeselectForController(absoluteUserDefId, groupName, value, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Operator to set the selectable flag in the ComponentStateManager explcitily. \r\n   * For use on components, that never use the select-group approach to control selectability (e.g. CbaTable).\r\n   */\r\n  static setSelectable(params, runtime) {\r\n    const { value, absoluteUserDefId } = params;\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractSelectable, StateAttributeAccess.setSelectable, value, absoluteUserDefId, runtime, false);\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Operator to switch selectability for a component possibly controlled by a select group controller.\r\n   */\r\n  static setSelectChangeBlockMode(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    const pathState = runtime.componentStateManager.findOrBuildStateByUserDefPath(params.absoluteUserDefId, runtime);\r\n    const selectableFlagInPathState = StateAttributeAccess.extractSelectable(pathState);\r\n    if (selectableFlagInPathState === undefined) {\r\n      // selectability is controlled by select group:\r\n      SelectGroupHelper.setSelectionChangesBlockedForController(absoluteUserDefId, groupName, value, runtime);\r\n    } else {\r\n      // selectability is explicitly controlled by component itself:\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractSelectable, StateAttributeAccess.setSelectable, !value, absoluteUserDefId, runtime, false);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n\r\n  // named calculations ----------------------------------------------------------------------\r\n\r\n  static evaluateNamedCalculation(params, runtime, contextSlots) {\r\n    const currentTaskName = runtime.taskManager.getCurrentTestTaskItemNames().task;\r\n    const termIdentifiedByName = runtime.calculationsConfigurationManager.findCalculationByTaskName(currentTaskName, params.calculationName);\r\n\r\n    // Shortcut to avoid repetitive calculations during a full task result calculation (i.e. starting with a cleared task result):\r\n    if (\r\n      contextSlots !== undefined\r\n      && contextSlots[0] !== undefined\r\n      && contextSlots[0].useExistingCalculationResults === true\r\n      && contextSlots[0].taskPath !== undefined) {\r\n      const existingResult = runtime.taskResultsManager.getResult(contextSlots[0].taskPath, params.calculationName);\r\n      if (existingResult !== undefined) {\r\n        return existingResult;\r\n      }\r\n    }\r\n\r\n    return TermEvaluator.evaluateTerm(termIdentifiedByName, runtime, contextSlots, params.calculationName);\r\n  }\r\n\r\n  static getCalculationResult(params, runtime) {\r\n\r\n    const currentTaskName = runtime.taskManager.getCurrentTestTaskItemNames().task;\r\n    if (currentTaskName === params.taskName) {\r\n      // evaluate ad hoc in current task\r\n      return TermEvaluator.evaluateNamedCalculation({\r\n        calculationName: params.calculationName\r\n      }, runtime);\r\n    } else {\r\n      // look up calculation result in stored result of inactive task\r\n      const taskPath = runtime.taskManager.getStatePathRootForTask(params.taskName);\r\n      return runtime.taskResultsManager.getResult(taskPath, params.calculationName);\r\n    }\r\n  }\r\n\r\n  // variables  --------------------------------------------------------------------------\r\n\r\n  static getVariable(params, runtime) {\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    return variableManager.getVariable(currentTaskId, params.name);\r\n  }\r\n\r\n  static setVariable(params, runtime) {\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    variableManager.setVariable(currentTaskId, params.name, params.value, params.type, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static switchVariables(params, runtime) {\r\n    const { left, right } = params;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n    const { value: oldValueLeft, type: oldTypeLeft } = variableManager.getVariable(currentTaskId, left, true);\r\n    const { value: oldValueRight, type: oldTypeRight } = variableManager.getVariable(currentTaskId, right, true);\r\n\r\n    variableManager.setVariable(currentTaskId, left, oldValueRight, oldTypeRight, runtime);\r\n    variableManager.setVariable(currentTaskId, right, oldValueLeft, oldTypeLeft, runtime);\r\n  }\r\n\r\n  // implicit variables ---------------------------------------------------------------\r\n  static getImplicitVariable(params, runtime) {\r\n    const { groupName, absoluteUserDefId, selector } = params;\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n    switch (componentType) {\r\n      // evaluated to String\r\n      case 'CbaInputField':\r\n      case 'CbaSingleLineInputField':\r\n        return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, absoluteUserDefId, runtime);\r\n      case 'CbaTableCell':\r\n        if (selector) {\r\n          return CbaTableCell.getFormulaOrValue(selector, absoluteUserDefId, runtime);\r\n        }\r\n        return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, absoluteUserDefId, runtime);\r\n      case 'CbaComboBox': {\r\n        return SelectGroupHelper.getComboboxSelectedItem(indexPath, runtime);\r\n      }\r\n      case 'CbaList': {\r\n        return SelectGroupHelper.getListSelectedItems(indexPath, runtime);\r\n      }\r\n      case 'CbaTree': {\r\n        const currentNode = TreeUtils.getCurrentNodePathId(absoluteUserDefId, runtime);\r\n        return (currentNode === null) ? '' : currentNode;\r\n      }\r\n      case 'CbaMedia': {\r\n        const lastOperation = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractLastOperation, absoluteUserDefId, runtime);\r\n        if (lastOperation === OPERATION_PLAY) return 'mp_start';\r\n        if (lastOperation === OPERATION_PAUSE) return 'mp_pause';\r\n        if (lastOperation === OPERATION_STOP) return 'mp_stop';\r\n        if (lastOperation === OPERATION_ENDED) return 'mp_end';\r\n        return '';\r\n      }\r\n      case 'CbaContainer': {\r\n        if (groupName === undefined) {\r\n          return SelectGroupHelper.getNonSelectGroupSelectedChildren(indexPath, runtime);\r\n        }\r\n        return SelectGroupHelper.getSelectGroupSelectedChildren(indexPath, groupName, runtime);\r\n      }\r\n      // evaluated to Boolean\r\n      case 'CbaCheckbox':\r\n      case 'CbaRadioButton':\r\n      case 'CbaButton':\r\n      case 'CbaLink':\r\n      case 'CbaRichTextField':\r\n        return TermEvaluator.getSelected(params, runtime);\r\n      // evaluated to Integer\r\n      case 'CbaTimer': {\r\n        const { pageConfigurationsManager, statemachinesManager } = runtime;\r\n        const { timerEvent } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config;\r\n        if (timerEvent !== undefined) {\r\n          const timerData = statemachinesManager.getTimerData(timerEvent);\r\n          const remainingTimeInMillis = timerData.remainingTime;\r\n          return (remainingTimeInMillis ? Math.ceil(remainingTimeInMillis / 1000) : 0);\r\n        }\r\n        return 0;\r\n      }\r\n      default:\r\n        console.log(`Unknown component type: ${componentType}. We will do nothing!`);\r\n        return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internally used to build ResultVariables in the scoring result structure for components that have 'scoringResultPerMember' attribute enabled.\r\n   * \r\n   * Returns a collection containing each 'member' of the given component together with its current (selection) state.\r\n   * Applies on CbaList, Frames, RadioButtonGroup.\r\n   */\r\n  static getInternalImplicitVariable(params, runtime) {\r\n    const { groupName, absoluteUserDefId } = params;\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n    switch (componentType) {\r\n      // evaluated to list of Strings\r\n      case 'CbaList': {\r\n        return SelectGroupHelper.getListItemsPerMemberState(indexPath, runtime);\r\n      }\r\n      case 'CbaContainer': {\r\n        if (groupName === undefined) {\r\n          return SelectGroupHelper.getNonSelectGroupSelectedChildrenPerMember(indexPath, runtime);\r\n        }\r\n        return SelectGroupHelper.getSelectGroupSelectedChildrenPerMember(indexPath, groupName, runtime);\r\n      }\r\n      default:\r\n        console.log(`Not supported component type: ${componentType} for internal evaluation.`);\r\n        return [];\r\n    }\r\n  }\r\n\r\n  // state machine  --------------------------------------------------------------------------\r\n\r\n  static raiseEvent(params, runtime) {\r\n    runtime.statemachinesManager.triggerEvent(params.event);\r\n    return undefined;\r\n  }\r\n\r\n  static postponeTaskSwitch(params, runtime) {\r\n    runtime.statemachinesManager.setPostponedTaskSwitch(params.switchCall.deferred);\r\n    return undefined;\r\n  }\r\n\r\n  static setTimedEventInterval(params, runtime) {\r\n    const { eventName, interval } = params;\r\n    const { statemachinesManager } = runtime;\r\n    statemachinesManager.setTimedEventInterval(eventName, interval, runtime);\r\n  }\r\n\r\n  static setStatemachineAssignedPage(params, runtime) {\r\n    const { state, pageName, pageAreaType, pageAreaName } = params;\r\n    const { statemachinesManager } = runtime;\r\n    statemachinesManager.setStatePageAssignment(state, pageName, pageAreaType, pageAreaName);\r\n  }\r\n\r\n  static getNbStatemachineEventsRaised(params, runtime) {\r\n    return runtime.statemachinesManager.getTotalNbOfRaisedEvents();\r\n  }\r\n\r\n  static getCurrentLeafStates(params, runtime) {\r\n    return runtime.statemachinesManager.getCurrentStateMachineLeafStates();\r\n  }\r\n\r\n  static getRaisedStatemachineEvents(params, runtime) {\r\n    return runtime.statemachinesManager.getRaisedEvents();\r\n  }\r\n\r\n  static getVisitedStates(params, runtime) {\r\n    return runtime.statemachinesManager.getVisitedStates();\r\n  }\r\n\r\n  static getRaisedEventsInState(params, runtime) {\r\n    return runtime.statemachinesManager.getRaisedEventsInState(params.state);\r\n  }\r\n\r\n  static getStatemachineVariableValues(params, runtime) {\r\n    return runtime.statemachinesManager.getValuesOfVariable(params.variable);\r\n  }\r\n\r\n  // trace ----------------------------------------------------------------------------------\r\n\r\n  static traceText(params, runtime) {\r\n    TermEvaluator.traceTextInternal('OperatorTraceText', params, runtime);\r\n    return true;\r\n  }\r\n\r\n  static traceSnapshot(params, runtime) {\r\n    TermEvaluator.traceTextInternal('OperatorTraceSnapshot', params, runtime);\r\n    TraceLogHelper.dumpSnapshotToTrace(runtime);\r\n    return true;\r\n  }\r\n\r\n  static traceTextInternal(operator, params, runtime) {\r\n    const text = TermEvaluator.evaluateTerm(params.expression, runtime, [], `text_${operator}`);\r\n    const type = params.type === undefined ? undefined : TermEvaluator.evaluateTerm(params.type, runtime, [], `type_${operator}`);\r\n    const traceDetails = {\r\n      type,\r\n      text\r\n    };\r\n    runtime.traceLogBuffer.reportEvent(operator, new Date(), traceDetails);\r\n  }\r\n\r\n  // calculator ----------------------------------------------------------------------------------\r\n\r\n  static calcGetMem(params, runtime) {\r\n    return runtime.calculatorsManager.calcGetMem(TermEvaluator.evaluateTerm(params.expression, runtime, [], 'calcGetMem'));\r\n  }\r\n\r\n  static calcOp(params, runtime) {\r\n    const value = (params.expression !== undefined) ? TermEvaluator.evaluateTerm(params.expression, runtime, [], `calcOp${params.operation}`) : undefined;\r\n    runtime.calculatorsManager.calcOp(params.operation, value);\r\n    return undefined;\r\n  }\r\n\r\n  static calcOpnd(params, runtime) {\r\n    const value = (params.expression !== undefined) ? TermEvaluator.evaluateTerm(params.expression, runtime, [], `calcOpnd${params.operation}`) : undefined;\r\n    runtime.calculatorsManager.calcOpnd(params.operation, value);\r\n    return undefined;\r\n  }\r\n\r\n  static calcSettings(params, runtime) {\r\n    const settings = {};\r\n    const { scale, displayWidth, withThousandSeparator, includeOperandInHistory, angle, format } = params;\r\n    if (scale !== undefined) {\r\n      settings.scale = scale;\r\n    }\r\n    if (displayWidth !== undefined) {\r\n      settings.displayWidth = displayWidth;\r\n    }\r\n    if (withThousandSeparator !== undefined) {\r\n      settings.withThousandSeparator = withThousandSeparator;\r\n    }\r\n    if (includeOperandInHistory !== undefined) {\r\n      settings.includeOperandInHistory = includeOperandInHistory;\r\n    }\r\n    if (angle !== undefined) {\r\n      settings.angle = angle;\r\n    }\r\n    if (format !== undefined) {\r\n      settings.format = TermEvaluator.getValueFormatForCalculator(params.format);\r\n    }\r\n    runtime.calculatorsManager.calcSettings(settings);\r\n  }\r\n\r\n  // system environment -----------------------------------------------------------------------\r\n\r\n  static currentTimestamp(params, runtime) {\r\n    return new Date().getTime();\r\n  }\r\n\r\n  static consoleLog(params, runtime) {\r\n    console.log(params.message);\r\n    return undefined;\r\n  }\r\n\r\n  static setGlobalPropertyHighlightColor(params, runtime) {\r\n    const topLevelConfiguration = runtime.presenterStateManager.getTaskState(runtime.taskManager.getCurrentStatePathRoot());\r\n    topLevelConfiguration.itemHighlightColor = params.value;\r\n    runtime.presenterStateManager.saveTaskState(runtime.taskManager.getCurrentStatePathRoot(), topLevelConfiguration, runtime);\r\n\r\n    runtime.componentDirectory.findByComponentType(CbaRichTextField).forEach((richTextComponent) => {\r\n      richTextComponent.highlightColorChanged();\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  // scroll -----------------------------------------------------------------------\r\n  static scrollEmbeddedPage(params, runtime) {\r\n    const { absoluteUserDefId, xPosition, yPosition, xPositionType, yPositionType } = params;\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const componentInstance = runtime.componentDirectory.findComponent(indexPath);\r\n\r\n    if (componentInstance) {\r\n      const x = `${xPosition}${xPositionType === '%' ? xPositionType : ''}`;\r\n      const y = `${yPosition}${yPositionType === '%' ? yPositionType : ''}`;\r\n      componentInstance.scroll(x, y);\r\n    } else {\r\n      console.warn(`Term Evaluator - scrollEmbeddedPage - component is not currently on screen or can't be found`);\r\n    }\r\n  }\r\n\r\n  static scrollTopLevelPage(params, runtime) {\r\n    const { isXPage, xPosition, yPosition, xPositionType, yPositionType } = params;\r\n    const currentPages = runtime.taskManager.getCurrentPageNames();\r\n    const pageAreaName = isXPage ? \"xPage\" : \"standard\";\r\n    const pageName = isXPage ? currentPages.xPage : currentPages.standardPage;\r\n\r\n    if (pageAreaName && pageName) {\r\n      const pagePath = IndexPathHelper.appendPageSegmentToPathRoot(\r\n        runtime.taskManager.getCurrentStatePathRoot(),\r\n        'main',\r\n        pageAreaName,\r\n        IndexPathHelper.buildPageSegment(pageName)\r\n      );\r\n\r\n      const componentInstance = runtime.componentDirectory.findComponent(pagePath);\r\n      const containerRef = componentInstance && componentInstance instanceof CbaContainer && componentInstance.containerRendererRef.current;\r\n\r\n      if (containerRef) {\r\n        const parentNode = currentPages.xPage ? containerRef.parentNode.parentNode : containerRef.parentNode;\r\n        const x = `${xPosition}${xPositionType === '%' ? xPositionType : ''}`;\r\n        const y = `${yPosition}${yPositionType === '%' ? yPositionType : ''}`;\r\n        Utils.doScrollOnHTMLElement(x, y, containerRef, parentNode);\r\n      }\r\n    } else if (!pageName && isXPage) {\r\n      console.warn(`Term Evaluator - scrollTopLevelPage - xPage is either not currently on screen or can't be found`);\r\n    } else {\r\n      // should never go here\r\n      console.warn(`Term Evaluator - scrollTopLevelPage - unknown page tried scrolling`);\r\n    }\r\n  }\r\n\r\n  // others -----------------------------------------------------------------------\r\n  static containerMembersFormLocalGroup(params, runtime) {\r\n    const { container, minDistance, maxDistance, anchorPointType, groupMembers, checkNonMembers } = params;\r\n    const containerIndexPath = PathTranslationHelper.getIndexPathForUserDefPath(container, runtime);\r\n    const memberIndexPaths = TermEvaluator.getIndexPathsForUserDefIds(groupMembers, runtime);\r\n    if (!TermEvaluator.checkChildhood(containerIndexPath, memberIndexPaths)) {\r\n      console.warn('Some group members in containerMembersFormLocalGroup call are not children of the given container -> returning false.')\r\n      return false;\r\n    }\r\n    const { memberComparePoints, nonMemberComparePoints } = TermEvaluator.getComparePointSets(containerIndexPath, 'comparesPosition', anchorPointType, memberIndexPaths, runtime);\r\n\r\n    return TermEvaluator.checkLocalGroup(minDistance, maxDistance, memberComparePoints, checkNonMembers === false ? [] : nonMemberComparePoints);\r\n  }\r\n\r\n  static containerRangeContainsMembers(params, runtime) {\r\n    const { container, minX, maxX, minY, maxY, anchorPointType, rangeMembers, checkNonMembers } = params;\r\n    const containerIndexPath = PathTranslationHelper.getIndexPathForUserDefPath(container, runtime);\r\n    const memberIndexPaths = TermEvaluator.getIndexPathsForUserDefIds(rangeMembers, runtime);\r\n    if (!TermEvaluator.checkChildhood(containerIndexPath, memberIndexPaths)) {\r\n      console.warn('Some group members in containerRangeContainsMembers call are not children of the given container -> returning false.')\r\n      return false;\r\n    }\r\n    const { memberComparePoints, nonMemberComparePoints } = TermEvaluator.getComparePointSets(containerIndexPath, 'comparesPosition', anchorPointType, memberIndexPaths, runtime);\r\n\r\n    return TermEvaluator.checkInRange(minX, maxX, minY, maxY, memberComparePoints, checkNonMembers === false ? [] : nonMemberComparePoints);\r\n  }\r\n\r\n  static isInBookmarksList(params, runtime) {\r\n    const { pageName: pageToLookFor } = params;\r\n    const pageAreaPathList = ComponentStateHelper.findIndexPathsInCurrentTaskOfComponentWithType('CbaPageArea', runtime);\r\n\r\n    const pageAreaWithMatchingBookmark = pageAreaPathList.find(indexPath => BookmarkHelper.getBookmarks(indexPath, runtime).find(bookmark => bookmark.pageName === pageToLookFor) !== undefined);\r\n    return pageAreaWithMatchingBookmark !== undefined;\r\n  }\r\n\r\n  static callExternalPageFrame(params, runtime) {\r\n    const { absoluteUserDefId, values } = params;\r\n    const pageFrameInstance = runtime.componentDirectory.findComponent(PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime));\r\n\r\n    // don't try to send a message if the external page frame does not exist currently:\r\n    if (pageFrameInstance !== undefined) {\r\n      const targetWindow = pageFrameInstance.getFrameWindow();\r\n      const url = pageFrameInstance.getFrameContentUrl();\r\n      if (targetWindow !== undefined && url !== undefined) {\r\n        // send asynchronosly:\r\n        const sendPromise = new Promise((resolve, reject) => {\r\n          try {\r\n            targetWindow.postMessage(JSON.stringify(values), url.origin);\r\n          } catch (e) {\r\n            console.error(`Cannot call external page frame via postMessage`, e);\r\n            throw new Error(`Cannot call external page frame via postMessage`);\r\n          }\r\n        });\r\n        // currently we don't do anything once the send operation is complete:\r\n        sendPromise.then();\r\n      }\r\n    }\r\n  }\r\n\r\n  static caretPosition(params, runtime) {\r\n    const { absoluteUserDefId, defaultValue } = params;\r\n    const caretPosition = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractLastCaretPosition, absoluteUserDefId, runtime);\r\n    return (caretPosition !== undefined) ? caretPosition : defaultValue;\r\n  }\r\n\r\n\r\n  // client interface ------------------------------------------------------------------------\r\n  static evaluateTerm(term, runtime, contextSlots, topLogName) {\r\n    return TermEvaluator.evaluateTermInternal(term, runtime, contextSlots, `<${topLogName === undefined ? '' : topLogName}>`);\r\n  }\r\n\r\n\r\n  // internal methods of evaluation loop ------------------------------------------------------------------------\r\n  static evaluateTermInternal(term, runtime, contextSlots, logContext) {\r\n    if (runtime === undefined) TermEvaluator.logMessage(`Runtime undefined for ${logContext}`);\r\n\r\n    // detect atomic terms and return their values immediately:\r\n    const typeOfTerm = typeof term\r\n    if (typeOfTerm === 'string' || typeOfTerm === 'boolean' || typeOfTerm === 'number') {\r\n      TermEvaluator.logCalculation(`${logContext}=>${term}`);\r\n      return term;\r\n    }\r\n\r\n    if (!TermEvaluator.isTermComplete(term, logContext)) {\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n\r\n    // get operator\r\n    const operatorName = term.operator;\r\n\r\n    // detect non recursive structures (i.e. parameter objects that are not operator calls)\r\n    // and return them immediately\r\n    if (operatorName === undefined) {\r\n      TermEvaluator.logCalculation(`${logContext}=>${JSON.stringify(term)}`);\r\n      return term;\r\n    }\r\n\r\n    const operatorFunction = TermEvaluator.operators[operatorName];\r\n    if (operatorFunction === undefined) {\r\n      TermEvaluator.logMessage(`Unknown operator ${operatorName} in term in ${logContext}`);\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n\r\n    // evaluate parameters\r\n    const evaluatedParams = {};\r\n\r\n    if (operatorFunction === TermEvaluator.ifThenElse) {\r\n      // special case for if-then-else: evaluate one branch only:\r\n\r\n      const ifParamIndex = term.params.findIndex(param => param.name === 'if');\r\n      if (ifParamIndex === -1) {\r\n        TermEvaluator.logMessage(`Missing if parameter in if-then-else in ${logContext}`);\r\n        evaluatedParams.if = false;\r\n      } else {\r\n        const evaluationResult = TermEvaluator.evaluateParam(term.params[ifParamIndex], ifParamIndex, runtime, contextSlots, operatorName, logContext);\r\n        evaluatedParams[evaluationResult.name] = evaluationResult.value;\r\n      }\r\n\r\n      const chosenBranch = evaluatedParams.if === true ? 'then' : 'else';\r\n      const chosenBranchIndex = term.params.findIndex(param => param.name === chosenBranch);\r\n      if (chosenBranchIndex !== -1) {\r\n        const evaluationResult = TermEvaluator.evaluateParam(term.params[chosenBranchIndex], chosenBranchIndex, runtime, contextSlots, operatorName, logContext)\r\n        evaluatedParams[evaluationResult.name] = evaluationResult.value;\r\n      }\r\n    } else if (operatorFunction === TermEvaluator.ifGuard) {\r\n      // special case for an array of guarded evaluations: evaluate guards up to the first hit, evaluate that branch only:\r\n\r\n      const branchesIndex = term.params.findIndex(param => param.name === 'branches');\r\n      if (branchesIndex === -1) {\r\n        TermEvaluator.logMessage(`Missing branches parameter in guarded-if in ${logContext}`);\r\n      } else {\r\n        const branchesArray = term.params[branchesIndex].value;\r\n        if (branchesArray === undefined || !Array.isArray(branchesArray)) {\r\n          TermEvaluator.logMessage(`Branches parameter in guarded-if does not contain an array as value in ${logContext}`);\r\n        } else {\r\n          // find the first branch with a passed guard:\r\n          const activeBranch = branchesArray.find((branchInfo, branchIndex) => {\r\n            if (branchInfo.guard === undefined || branchInfo.branch === undefined) {\r\n              TermEvaluator.logMessage(`Ignored incomplete guarded branch at index ${branchIndex} in guarded-if in ${logContext}`);\r\n              return false;\r\n            }\r\n            return TermEvaluator.evaluateTermInternal(branchInfo.guard, runtime, contextSlots, operatorName, logContext);\r\n          });\r\n\r\n          // none of the guards might pass:\r\n          if (activeBranch === undefined) {\r\n            TermEvaluator.logMessage(`No active branch in guarded-if in ${logContext}`);\r\n          } else {\r\n            // put evaluated branch of first passed guard into parameter structure for operator implementation:\r\n            evaluatedParams.activeBranch = TermEvaluator.evaluateTermInternal(activeBranch.branch, runtime, contextSlots, operatorName, logContext);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // standard case: evaluate all parameters\r\n      term.params.forEach((param, index) => {\r\n        const evaluationResult = TermEvaluator.evaluateParam(param, index, runtime, contextSlots, operatorName, logContext);\r\n        evaluatedParams[evaluationResult.name] = evaluationResult.value;\r\n      });\r\n    }\r\n\r\n    // call operator with evaluated parameters\r\n    const result = operatorFunction(evaluatedParams, runtime, contextSlots);\r\n    TermEvaluator.logCalculation(`${logContext}=>${result}`);\r\n    return result;\r\n\r\n  }\r\n\r\n  static isTermComplete(term, logContext) {\r\n    if (term === undefined) {\r\n      TermEvaluator.logMessage(`Undefined term in ${logContext}`);\r\n      return false;\r\n    }\r\n    if (term.operator === undefined) {\r\n      // terms without operator are object value parameters that should not be evaluated\r\n      return true;\r\n    }\r\n    if (term.params === undefined) {\r\n      TermEvaluator.logMessage(`Undefined parameters for operator ${term.operator} in term in ${logContext}`);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  static evaluateParam(param, index, runtime, contextSlots, operatorName, logContext) {\r\n    if (param === undefined) {\r\n      TermEvaluator.logMessage(`Undefined parameter at index ${index} in term in ${logContext}`);\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n    if (param.name === undefined) {\r\n      TermEvaluator.logMessage(`Parameter without name at index ${index} in term in ${logContext}`);\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n\r\n    const resultValue = (Array.isArray(param.value))\r\n      // manage arrays as param.value content: call evaluateTermInternal for each array element \r\n      // and create an array of these results in evaluatedParams[param.name]\r\n      ? param.value.map((value, index2, all) => TermEvaluator.evaluateTermInternal(value, runtime, contextSlots, `${logContext}-> parameter ${param.name}[${index2}] for operator ${operatorName}`))\r\n      : TermEvaluator.evaluateTermInternal(param.value, runtime, contextSlots, `${logContext}-> parameter ${param.name} for operator ${operatorName}`);\r\n\r\n    return {\r\n      name: param.name,\r\n      value: resultValue\r\n    }\r\n\r\n  }\r\n\r\n  static logMessage(message) {\r\n    console.warn(message);\r\n  }\r\n\r\n  static logCalculation(message) {\r\n    // console.log(message);\r\n  }\r\n\r\n\r\n  // ---- internal helper methods ------------------------------------------------------------------------------------------------------------\r\n  /**\r\n   * Private helper: Translate the format parameter value coming from the generator\r\n   * to a ValueFormatter format known to the calculator implementation.\r\n   */\r\n  static getValueFormatForCalculator(parameterValue) {\r\n    switch (parameterValue) {\r\n      case 'EN': return ValueFormatter.FORMATS.EN;\r\n      case 'DE': return ValueFormatter.FORMATS.DE;\r\n      default: return ValueFormatter.FORMATS.DE;\r\n    }\r\n  }\r\n\r\n  static checkLocalGroup(minDistance, maxDistance, memberComparePoints, nonMemberComparePoints) {\r\n    const membersNotKeepingDistance = memberComparePoints.filter((candidate, index) => !TermEvaluator.keepsDistanceToGroup(candidate, memberComparePoints, minDistance, maxDistance, index));\r\n    const nonMembersKeepingDistance = nonMemberComparePoints.filter(candidate => TermEvaluator.keepsDistanceToGroup(candidate, memberComparePoints, minDistance, maxDistance, undefined));\r\n\r\n    return membersNotKeepingDistance.length === 0 && nonMembersKeepingDistance.length === 0;\r\n\r\n  }\r\n\r\n  static keepsDistanceToGroup(candidate, group, minDistance, maxDistance, excludeIndex) {\r\n    return group.filter((groupMember, index) => excludeIndex !== index && !TermEvaluator.keepDistance(candidate, groupMember, minDistance, maxDistance)).length === 0;\r\n  }\r\n\r\n  static keepDistance(pointA, pointB, minDistance, maxDistance) {\r\n    const xDelta = pointA.x - pointB.x;\r\n    const yDelta = pointA.y - pointB.y;\r\n    const distance = Math.sqrt((xDelta * xDelta) + (yDelta * yDelta));\r\n    return minDistance < distance && distance < maxDistance;\r\n  }\r\n\r\n\r\n  static checkInRange(minX, maxX, minY, maxY, memberComparePoints, nonMemberComparePoints) {\r\n    const membersNotInRange = TermEvaluator.filterInRange(minX, maxX, minY, maxY, memberComparePoints);\r\n    const nonMembersInRange = TermEvaluator.filterOutOfRange(minX, maxX, minY, maxY, nonMemberComparePoints);\r\n\r\n    return membersNotInRange.length === 0 && nonMembersInRange.length === 0;\r\n\r\n  }\r\n\r\n  static filterInRange(minX, maxX, minY, maxY, points) {\r\n    return points.filter(point => minX > point.x || point.x > maxX || minY > point.y || point.y > maxY);\r\n  }\r\n\r\n  static filterOutOfRange(minX, maxX, minY, maxY, points) {\r\n    return points.filter(point => minX <= point.x && point.x <= maxX && minY <= point.y && point.y <= maxY);\r\n  }\r\n\r\n  static checkChildhood(container, children) {\r\n    const nonChildren = children.filter(candidatePath => !candidatePath.startsWith(container));\r\n    return nonChildren.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Get the positions of the children of the given container according to the given anchor point type: topLeft/center/bottomLeft/...\r\n   * The children are divided in two groups: \r\n   *  - the 'members' (i.e. those in the given memberIndexPaths set) and\r\n   *  - the 'non-members' (i.e. those not in the given memberIndexPaths set) \r\n   * \r\n   * @param {*} containerIndexPath \r\n   * @param {*} classifier \r\n   * @param {*} anchorPointType \r\n   * @param {*} memberIndexPaths \r\n   * @param {*} runtime \r\n   */\r\n  static getComparePointSets(containerIndexPath, classifier, anchorPointType, memberIndexPaths, runtime) {\r\n    const nonMemberIndexPaths = TermEvaluator.getIndexPathsForChildrenWithClassifier(containerIndexPath, classifier, runtime).filter(childPath => !memberIndexPaths.includes(childPath));\r\n    return {\r\n      memberComparePoints: TermEvaluator.getComparePointsForIndexPaths(memberIndexPaths, anchorPointType, runtime),\r\n      nonMemberComparePoints: TermEvaluator.getComparePointsForIndexPaths(nonMemberIndexPaths, anchorPointType, runtime)\r\n    }\r\n  }\r\n\r\n  static getIndexPathsForChildrenWithClassifier(containerIndexPath, classifier, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const matchingChildrenPaths = [];\r\n    const containerChildrenArray = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(containerIndexPath)).config.cbaChildren;\r\n    if (containerChildrenArray !== undefined) {\r\n      containerChildrenArray.forEach((childConfig, index) => {\r\n        if (childConfig.config.classifiers !== undefined && childConfig.config.classifiers.includes(classifier)) {\r\n          matchingChildrenPaths.push(IndexPathHelper.appendIndexToPageSegment(containerIndexPath, index));\r\n        }\r\n      });\r\n    }\r\n    return matchingChildrenPaths;\r\n  }\r\n\r\n  static getIndexPathsForUserDefIds(userDefIdPaths, runtime) {\r\n    return userDefIdPaths.map(userDefIdPath => PathTranslationHelper.getIndexPathForUserDefPath(userDefIdPath, runtime));\r\n  }\r\n\r\n  /**\r\n   * For each given display component instance get the point that we should use for position compoarisons\r\n   * according to the given anchor point type: topLeft/center/bottomLeft/...\r\n   * \r\n   * @param {} indexPaths The index paths of the display component instances.\r\n   * @param {*} anchorPointType The anchor point type.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static getComparePointsForIndexPaths(indexPaths, anchorPointType, runtime) {\r\n    return indexPaths.map(indexPath => TermEvaluator.getComparePointForIndexPath(indexPath, anchorPointType, runtime));\r\n  }\r\n\r\n  /**\r\n   * Get the point of the given display component instance that we should use for position compoarisons\r\n   * according to the given anchor point type: topLeft/center/bottomLeft/...\r\n   * \r\n   * @param {} indexPath The index path of the display component instance.\r\n   * @param {*} anchorPointType The anchor point type.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static getComparePointForIndexPath(indexPath, anchorPointType, runtime) {\r\n    const { componentStateManager, pageConfigurationsManager } = runtime;\r\n    return TermEvaluator.getComparePoint(\r\n      StateAttributeAccess.extractPosition(componentStateManager.findOrBuildStateForPathId(indexPath, runtime)),\r\n      pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config.position,\r\n      anchorPointType\r\n    );\r\n  }\r\n\r\n  static getComparePoint(point, positionFromConfig, anchorPointType) {\r\n    switch (anchorPointType) {\r\n      case 'topLeft':\r\n        return {\r\n          x: point.x,\r\n          y: point.y\r\n        }\r\n      case 'bottomLeft':\r\n        return {\r\n          x: point.x,\r\n          y: point.y + positionFromConfig.height\r\n        }\r\n      case 'topRight':\r\n        return {\r\n          x: point.x + positionFromConfig.width,\r\n          y: point.y\r\n        }\r\n      case 'bottomRight':\r\n        return {\r\n          x: point.x + positionFromConfig.width,\r\n          y: point.y + positionFromConfig.height\r\n        }\r\n      case 'center':\r\n        return {\r\n          x: point.x + (positionFromConfig.width / 2),\r\n          y: point.y + (positionFromConfig.height / 2)\r\n        }\r\n      default:\r\n        console.error(`Unknown anchor point type ${anchorPointType} -> use upper left corner instead.`);\r\n        return {\r\n          x: point.x,\r\n          y: point.y\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n  static findComponentByAbsoluteUserDefId(absoluteUserDefId, runtime) {\r\n    return runtime.componentDirectory.findComponent(PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime));\r\n  }\r\n\r\n  static currentNode(params, runtime) {\r\n    return TreeUtils.getCurrentNodePathId(params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static getVisitedNodes(params, runtime) {\r\n    return TreeUtils.getVisitedPathIds(params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static matchNodes(params, runtime) {\r\n    const { absoluteUserDefId, regularExpressions } = params;\r\n    const matchedNodes = [];\r\n    const nodePathIds = TreeUtils.getNodePathIds(absoluteUserDefId, runtime);\r\n    regularExpressions.forEach((pattern) => {\r\n      nodePathIds.forEach((nodePathId) => {\r\n        if (TermEvaluator.matches({\r\n          pattern,\r\n          candidate: nodePathId\r\n        }) && !matchedNodes.includes(nodePathId)) {\r\n          matchedNodes.push(nodePathId);\r\n        }\r\n      })\r\n    })\r\n\r\n    return matchedNodes;\r\n  }\r\n\r\n  static matchNodesWithColumns(params, runtime) {\r\n    const { absoluteUserDefId, regularExpressions } = params;\r\n    const matchedNodes = [];\r\n    if (regularExpressions.length > 0) {\r\n      const matchedNodesByPatternId = TermEvaluator.matchNodes({\r\n        absoluteUserDefId, regularExpressions: [regularExpressions[0]]\r\n      }, runtime);\r\n      const nodeToColumnValuesMap = TreeUtils.getColumnValuesMap(absoluteUserDefId, matchedNodesByPatternId, runtime);\r\n      regularExpressions.shift();\r\n      nodeToColumnValuesMap.forEach((values, key) => {\r\n        if (TermEvaluator.columnsMatch(regularExpressions, values)) {\r\n          matchedNodes.push(key);\r\n        }\r\n      });\r\n    } else {\r\n      console.log(\"Empty list of regular expressions!\");\r\n    }\r\n\r\n    return matchedNodes;\r\n  }\r\n\r\n  static columnsMatch = (patterns, candidates) => {\r\n    let hasMatch = true;\r\n    if (patterns === undefined || patterns === null\r\n      || patterns.length === 0) {\r\n      return hasMatch;\r\n    }\r\n\r\n    for (let i = 0; i < patterns.length; i += 1) {\r\n      if (!TermEvaluator.matches({\r\n        pattern: patterns[i],\r\n        candidate: candidates[i]\r\n      })) {\r\n        hasMatch = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return hasMatch;\r\n  }\r\n\r\n  static treeAction(params, runtime, callback) {\r\n    const { absoluteUserDefId, targetNode } = params;\r\n    const nodePathIds = TermEvaluator.matchNodes(\r\n      {\r\n        absoluteUserDefId,\r\n        regularExpressions: [targetNode]\r\n      }, runtime\r\n    );\r\n    if (nodePathIds.length === 1) {\r\n      callback(absoluteUserDefId, nodePathIds[0], runtime);\r\n    }\r\n  }\r\n\r\n  static treeCopy(params, runtime) {\r\n    TermEvaluator.treeAction(params, runtime, TreeUtils.treeCopyCurrentNode);\r\n  }\r\n\r\n  static treeMove(params, runtime) {\r\n    TermEvaluator.treeAction(params, runtime, TreeUtils.treeMoveCurrentNode);\r\n  }\r\n\r\n}\r\n","import { useDrag, useDrop } from 'react-dnd';\r\nimport CommonConfigHelper from './CommonConfigHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport TermEvaluator from '../eval/TermEvaluator';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\n\r\n\r\n/**\r\n * All available drag&drop-content 'items' that we can move around via drag&drop.\r\n */\r\nexport const DndItemTypes = {\r\n  VALUE_DISPLAY: 'valueDisplay',\r\n}\r\n\r\n/**\r\n * Helper methods used for drag and drop event handling.\r\n */\r\nexport default class DragAndDropHelper {\r\n\r\n  // -------- public API ----------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Add the 'drag' part of a drag&drop functionality to a component renderer.\r\n   * \r\n   * @param {*} config The config structure of the component from the page configuration description.\r\n   * @param {String} path The index path of the component's state in the ComponentStateManager.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {String} itemType The type of the dragged item structure.\r\n   * @param {*} previewData The data that should be available for the preview in the drag layer.\r\n   * @returns The array returned by the useDrag call.\r\n   */\r\n  static addDrag(config, path, runtime, itemType, previewData) {\r\n    return useDrag({\r\n      item: {\r\n        type: itemType\r\n      },\r\n      begin: (monitor) => {\r\n        const dragAndDropConfig = CommonConfigHelper.getDragAndDrop(config);\r\n        const { sender: senderConfig } = dragAndDropConfig;\r\n        const { data, traceType, event: statemachineEvent } = senderConfig;\r\n        const dragAndDropData = {\r\n          type: itemType,\r\n          previewData,\r\n          indexPath: path,\r\n          senderData: data,\r\n          traceType,\r\n          startPosition: monitor.getInitialClientOffset()\r\n        };\r\n        DragAndDropHelper.triggerStatemachineEvent(statemachineEvent, runtime);\r\n        return dragAndDropData;\r\n      },\r\n      canDrag: monitor => DragAndDropHelper.isDragAndDropSender({\r\n        config, runtime, path\r\n      }),\r\n      collect: monitor => ({\r\n        idDragging: monitor.isDragging()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Add the 'drop' part of a drag&drop functionality to a component renderer.\r\n   * \r\n   * @param {*} config The config structure of the component from the page configuration description.\r\n   * @param {String} path The index path of the component's state in the ComponentStateManager.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {String} itemType The item type that we should accept as drop content.\r\n   * @param {bool} dropsOfMyChildrenOnly Should we restrict drops to children of the drop target component?\r\n   * @returns The array returned by the useDrop call.\r\n   */\r\n  static addDrop(config, path, runtime, itemType, dropsOfMyChildrenOnly) {\r\n    return useDrop({\r\n      accept: itemType,\r\n      drop: (item, monitor) => {\r\n        const transferredData = item;\r\n        const dragAndDropConfig = CommonConfigHelper.getDragAndDrop(config);\r\n        const { receiver: receiverConfig } = dragAndDropConfig;\r\n        const { actionTerms, traceType, event: statemachineEvent } = receiverConfig;\r\n        const endPosition = monitor.getClientOffset();\r\n        runtime.replayStepMonitor.incrementReplayStep();\r\n        const lastEvaluationResult = DragAndDropHelper.evaluateActionTerms(actionTerms, transferredData, runtime);\r\n        DragAndDropHelper.relocateIfNecessary(lastEvaluationResult, endPosition, transferredData, runtime);\r\n        DragAndDropHelper.triggerStatemachineEvent(statemachineEvent, runtime);\r\n        DragAndDropHelper.logAction(transferredData, path, endPosition, traceType, lastEvaluationResult, runtime);\r\n      },\r\n      canDrop: (item, monitor) => {\r\n        if (dropsOfMyChildrenOnly) {\r\n          const transferredData = item;\r\n          const senderIndexPath = transferredData.indexPath;\r\n          if (path !== IndexPathHelper.dropIndexFromPageSegment(senderIndexPath)) {\r\n            return false;\r\n          }\r\n        }\r\n        return DragAndDropHelper.isDragAndDropReceiver({\r\n          config, runtime, path\r\n        });\r\n      },\r\n      collect: monitor => (\r\n        {\r\n          dragIsOver: monitor.isOver({\r\n            shallow: true\r\n          }),\r\n          dragCanDrop: monitor.canDrop()\r\n        }\r\n      )\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add attributes to the given style configuration that give feedback\r\n   * highlighting a component instance as eligible drop target.\r\n   * \r\n   * @param {*} style The style attributes list to be modified.\r\n   * @param {*} props The props of the component instance.\r\n   */\r\n  static addCanDropStyleAttributes(style, props) {\r\n    const { dragIsOver, dragCanDrop } = props;\r\n    if (dragIsOver && dragCanDrop) {\r\n      CommonConfigHelper.setStyleAttribute(style, \"boxShadow\", \"0 0 8px 0 rgba(0, 0, 0, 0.5) inset\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add attributes to the given style configuration that give feedback\r\n   * highlighting a component instance as current drag source.\r\n   * \r\n   * @param {*} style The style attributes list to be modified.\r\n   * @param {*} props The props of the component instance.\r\n   */\r\n  static addIsDraggingStyleAttributes(style, props) {\r\n    const { isDragging } = props;\r\n    if (isDragging) {\r\n      CommonConfigHelper.setStyleAttribute(style, \"boxShadow\", \"0 0 8px 0 rgba(0, 0, 0, 0.5) inset\");\r\n    }\r\n  }\r\n\r\n\r\n  // -------- private stuff ----------------------------------------------------------------\r\n\r\n  /**\r\n   * Can the component instance start a drag currently?\r\n   * \r\n   * @param {*} props The full props structure of the component instance.\r\n   */\r\n  static isDragAndDropSender(props) {\r\n    const { config, runtime, path } = props;\r\n\r\n    // The TermEvaluator operator might declare a component to be a sender \r\n    // even though it has no proper drag&drop configuration.\r\n    // -> We check the necessary configuration in any case:\r\n    const dragAndDropInConfig = CommonConfigHelper.getDragAndDrop(config);\r\n    if (dragAndDropInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const { sender: senderInConfig } = dragAndDropInConfig;\r\n    if (senderInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    // Drag and drop participation can be changed by the TermEvaluator operators.\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n    const dragAndDropInState = StateAttributeAccess.extractDragAndDrop(pathState);\r\n    return dragAndDropInState.isSender;\r\n\r\n  }\r\n\r\n  /**\r\n   * Can the component instance receive a drop currently?\r\n   * \r\n   * @param {*} props The full props structure of the component instance.\r\n   */\r\n  static isDragAndDropReceiver(props) {\r\n    const { config, runtime, path } = props;\r\n\r\n    // The TermEvaluator operator might declare a component to be a receiver \r\n    // even though it has no proper drag&drop configuration.\r\n    // -> We check the necessary configuration in any case:\r\n    const dragAndDropInConfig = CommonConfigHelper.getDragAndDrop(config);\r\n    if (dragAndDropInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const { receiver: receiverInConfig } = dragAndDropInConfig;\r\n    if (receiverInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    // Drag and drop participation can be changed by the TermEvaluator operators.\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n    const dragAndDropInState = StateAttributeAccess.extractDragAndDrop(pathState);\r\n    return dragAndDropInState.isReceiver;\r\n\r\n  }\r\n\r\n\r\n  static evaluateActionTerms(actionTerms, transferredData, runtime) {\r\n    let lastEvaluationResult;\r\n    if (actionTerms !== undefined) {\r\n      actionTerms.forEach((term, index) => {\r\n        lastEvaluationResult = TermEvaluator.evaluateTerm(term, runtime, [transferredData], `drag&drop[${index}]`);\r\n      });\r\n    }\r\n    return lastEvaluationResult;\r\n  }\r\n\r\n  static relocateIfNecessary(lastEvaluationResult, endPosition, transferredData, runtime) {\r\n    if (lastEvaluationResult !== 'relocate') {\r\n      return;\r\n    }\r\n    const { startPosition } = transferredData;\r\n    if (endPosition === undefined || endPosition === null || startPosition === undefined || startPosition === null) {\r\n      console.warn(`Drag and drop without proper coordinates! -> We do not move the component instance.`);\r\n      return;\r\n    }\r\n    const translationX = endPosition.x - startPosition.x;\r\n    const translationY = endPosition.y - startPosition.y;\r\n    const { componentStateManager } = runtime;\r\n    const senderIndexPath = transferredData.indexPath;\r\n    const pathState = componentStateManager.findOrBuildStateForPathId(senderIndexPath, runtime);\r\n    const position = StateAttributeAccess.extractPosition(pathState);\r\n\r\n    position.x += translationX / runtime.app.state.scaleValue;\r\n    position.y += translationY / runtime.app.state.scaleValue;\r\n\r\n    StateAttributeAccess.setPosition(pathState, position);\r\n\r\n    componentStateManager.registerStateByPathId(senderIndexPath, pathState, runtime);\r\n    RenderingHelper.triggerRenderingViaPath(senderIndexPath, runtime);\r\n  }\r\n\r\n  static triggerStatemachineEvent(statemachineEvent, runtime) {\r\n    if (statemachineEvent !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(statemachineEvent);\r\n    }\r\n  }\r\n\r\n  static logAction(transferredData, indexPath, endPosition, traceType, operation, runtime) {\r\n    const timestamp = new Date();\r\n    const receiverUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n    const senderUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(transferredData.indexPath, runtime);\r\n\r\n    runtime.incidentsAccumulator.userInteraction(timestamp.getTime(), undefined, runtime);\r\n    runtime.traceLogBuffer.reportEvent('DragAndDropReceive', timestamp, {\r\n      senderIndexPath: transferredData.indexPath,\r\n      senderUserDefIdPath,\r\n      senderUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(senderUserDefIdPath),\r\n      receiverIndexPath: indexPath,\r\n      receiverUserDefIdPath,\r\n      receiverUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(receiverUserDefIdPath),\r\n      startPosition: transferredData.startPosition,\r\n      endPosition,\r\n      sendingType: transferredData.traceType,\r\n      receivingType: traceType,\r\n      operation\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaInterpreter from './CbaInterpreter';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport DragAndDropHelper, { DndItemTypes } from '../config/DragAndDropHelper';\nimport RenderingHelper from './RenderingHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport Utils from '../utils/Utils';\n\n/**\n * A 'bare function component' used to manage the drag&drop functionality for the CbaContainer component.\n */\nconst ContainerRenderer = React.forwardRef(({ onClick, onContextMenu, title, style, className, onScroll, children, config, path, runtime }, ref) => {\n\n  const [dropCollectedProps, drop] = DragAndDropHelper.addDrop(config, path, runtime, DndItemTypes.VALUE_DISPLAY, true);\n  drop(ref);\n\n  const extendedStyle = Utils.safeDeepCopy(style);\n  DragAndDropHelper.addCanDropStyleAttributes(extendedStyle, dropCollectedProps);\n\n  return (\n    <div\n      ref={ref}\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      title={title}\n      style={extendedStyle}\n      data-cba-id={config.pageEditId}\n      className={className}\n      onScroll={onScroll}\n    >\n      {children}\n    </div>\n  );\n})\n\n\nexport default class CbaContainer extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.containerRendererRef = React.createRef();\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  render() {\n    const { config, runtime, path: controllerPath, orientation } = this.props;\n\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = StateAttributeAccess.extractSelected(pathState);\n\n    const delegates = config.cbaChildren.map((child, index) => {\n      const childPath = IndexPathHelper.appendIndexToPageSegment(controllerPath, index);\n      return (\n        <CbaInterpreter\n          key={childPath}\n          config={child}\n          path={childPath}\n          runtime={runtime}\n          orientation={orientation}\n        />\n      )\n    });\n\n    const containerStyle = CommonConfigHelper.buildStyleByIndexPath(controllerPath, config, selectedState, orientation, runtime);\n\n    return (\n      <ContainerRenderer\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        title={CommonConfigHelper.buildTitle(config)}\n        style={containerStyle}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"overflow-hidden\")}\n        onScroll={event => event.stopPropagation()}\n        config={config}\n        path={controllerPath}\n        runtime={runtime}\n        ref={this.containerRendererRef}\n      >\n        {delegates}\n      </ContainerRenderer>\n    )\n\n  }\n\n}\n\nCbaContainer.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(true))\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n}\n\nContainerRenderer.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  onContextMenu: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  style: PropTypes.object.isRequired,\n  className: PropTypes.string.isRequired,\n  onScroll: PropTypes.func.isRequired,\n  children: PropTypes.array.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(true))\n  ).isRequired,\n  path: PropTypes.string.isRequired,\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport RenderingHelper from './RenderingHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\n\nexport default class CbaRectangle extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.lineOnClickHandler = this.lineOnClickHandler.bind(this);\n    this.containerOnClickHandler = this.containerOnClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  lineOnClickHandler(event) {\n    const { config } = this.props;\n    const { blockEvents } = config;\n\n    if (!blockEvents) {\n      CommonActionsHelper.doStandardOnClick(event, undefined, this);\n    }\n  }\n\n  containerOnClickHandler(event) {\n    const { config } = this.props;\n    const { blockEvents } = config;\n\n    if (blockEvents) {\n      event.stopPropagation();\n      CommonActionsHelper.doStandardOnClick(event, undefined, this);\n    }\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  buildLineDiv(style, config) {\n    return (\n      <div\n        onClick={this.lineOnClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        title={CommonConfigHelper.buildTitle(config)}\n        style={style}\n        className=\"overflow-hidden\"\n      />\n    )\n  }\n\n  render() {\n    const { config, runtime, path: controllerPath, orientation } = this.props;\n\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = StateAttributeAccess.extractSelected(pathState);\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(controllerPath, config, selectedState, orientation, runtime);\n\n    const { lineWidth, pageEditId } = config;\n\n    const containerStyle = Object.assign({}, style, {\n      backgroundColor: \"rgba(255, 255, 255, 0)\",\n      cursor: undefined\n    })\n\n    const lineWidthString = `${lineWidth}px`;\n\n    const baseLineStyle = {\n      position: \"absolute\",\n      backgroundColor: style.backgroundColor,\n      width: lineWidthString,\n      height: lineWidthString,\n      cursor: style.cursor\n    }\n\n    const northStyle = Object.assign({}, baseLineStyle, {\n      top: 0,\n      left: 0,\n      width: \"100%\"\n    });\n\n    const eastStyle = Object.assign({}, baseLineStyle, {\n      top: 0,\n      right: 0,\n      height: \"100%\"\n    });\n\n    const southStyle = Object.assign({}, baseLineStyle, {\n      bottom: 0,\n      left: 0,\n      width: \"100%\"\n    });\n\n    const westStyle = Object.assign({}, baseLineStyle, {\n      top: 0,\n      left: 0,\n      height: \"100%\"\n    });\n\n    return (\n      <div\n        style={containerStyle}\n        data-cba-id={pageEditId}\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\n        onClick={this.containerOnClickHandler}\n      >\n        {this.buildLineDiv(northStyle, config)}\n        {this.buildLineDiv(southStyle, config)}\n        {this.buildLineDiv(eastStyle, config)}\n        {this.buildLineDiv(westStyle, config)}\n      </div>\n    )\n  }\n\n}\n\n\nCbaRectangle.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        lineWidth: PropTypes.number.isRequired,\n        blockEvents: PropTypes.bool.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n}\n","import React, { Component, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport DragAndDropHelper, { DndItemTypes } from '../config/DragAndDropHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport RenderingHelper from './RenderingHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport Utils from '../utils/Utils';\n\n/**\n * A 'bare function component' used to manage the drag&drop functionality for the CbaSimpleTextField component.\n */\nfunction SimpleTextFieldRenderer({ onClick, onContextMenu, onSelect, title, style, value, className, config, path, runtime }) {\n\n  const ref = useRef(null);\n  const [dragCollectedProps, drag, preview] = DragAndDropHelper.addDrag(\n    config, path, runtime, DndItemTypes.VALUE_DISPLAY, {\n      title,\n      style,\n      value\n    }\n  );\n\n  preview(getEmptyImage(), {\n    captureDraggingState: true\n  });\n\n  const [dropCollectedProps, drop] = DragAndDropHelper.addDrop(config, path, runtime, DndItemTypes.VALUE_DISPLAY, false);\n  drag(drop(ref));\n\n  const extendedStyle = Utils.safeDeepCopy(style);\n  DragAndDropHelper.addIsDraggingStyleAttributes(extendedStyle, dragCollectedProps);\n  DragAndDropHelper.addCanDropStyleAttributes(extendedStyle, dropCollectedProps);\n\n  if (config.renderAsDiv) {\n    CommonConfigHelper.setStyleAttribute(extendedStyle, \"whiteSpace\", \"pre-wrap\");\n    CommonConfigHelper.setStyleAttribute(extendedStyle, \"overflow\", \"auto\");\n\n    return (\n      <div\n        ref={ref}\n        readOnly\n        onClick={onClick}\n        onContextMenu={onContextMenu}\n        onSelect={onSelect}\n        title={title}\n        style={extendedStyle}\n        data-cba-id={config.pageEditId}\n        className={className}\n      >\n        {value}\n      </div>\n    )\n  }\n\n  // We use a textarea instead of a label since it preserves line breaks etc. \n  return (\n    <textarea\n      ref={ref}\n      readOnly\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      onSelect={onSelect}\n      title={title}\n      style={extendedStyle}\n      data-cba-id={config.pageEditId}\n      value={value}\n      className={className}\n    />\n  )\n}\n\nexport default class CbaSimpleTextField extends Component {\n\n  componentDidMount() {\n    const { config, runtime } = this.props;\n    const { textInputReferencePath } = config;\n    if (textInputReferencePath !== undefined) {\n      runtime.eventEmitter.addListener(`inputFieldUpdated-${textInputReferencePath}`, this.onInputFieldUpdate.bind(this));\n    }\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onInputFieldUpdate = (newTextValue) => {\n    const pathState = ComponentStateHelper.getState(this);\n    StateAttributeAccess.setTextValue(pathState, newTextValue);\n    ComponentStateHelper.registerState(this, pathState);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  onClickHandler = (event) => {\n    const { runtime, path, config } = this.props;\n    if (!config.renderAsDiv) {\n      CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, true, undefined, undefined, runtime);\n    }\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  onSelectionHandler = (event) => {\n    const { runtime, path, config } = this.props;\n    const { suppressSelections } = config;\n\n    if (suppressSelections) {\n      event.target.selectionStart = event.target.selectionEnd;\n    } else {\n      CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, true, undefined, undefined, runtime);\n    }\n\n  }\n\n  static addAttributesToInitialState(result, config, runtime) {\n    const { textInputReferencePath } = config;\n    if (textInputReferencePath !== undefined) {\n      const filteredPaths = runtime.componentStateManager.filterExistingPathIds(candidate => IndexPathHelper.getLastPageSegmentFromPath(candidate) === textInputReferencePath);\n      if (filteredPaths.length > 0) {\n        result.textValue = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTextValue, filteredPaths[0], runtime);\n      } else {\n        const providerComponent = runtime.pageConfigurationsManager.findConfigurationForPageSegment(textInputReferencePath);\n        const { text } = providerComponent.config;\n        result.textValue = text.label;\n      }\n    }\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n    const { suppressSelections } = config;\n    const additionalCssClass = suppressSelections ? \"hide-selection\" : \"\";\n    const pathState = ComponentStateHelper.getState(this);\n\n    const text = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\n    CommonConfigHelper.setStyleAttribute(style, \"resize\", \"none\");\n\n    // override browser default padding value for textarea: \n    if (config.position.padding === undefined) {\n      CommonConfigHelper.setStyleAttribute(style, \"padding\", \"0px\");\n    }\n\n    return (\n      <SimpleTextFieldRenderer\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        onSelect={this.onSelectionHandler}\n        title={CommonConfigHelper.buildTitle(config)}\n        style={style}\n        value={text}\n        className={CommonConfigHelper.getCssClassNamesValue(config, additionalCssClass)}\n        config={config}\n        path={path}\n        runtime={runtime}\n      />\n    )\n  }\n\n}\n\n\nCbaSimpleTextField.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        textInputReferencePath: PropTypes.string,\n        renderAsDiv: PropTypes.bool\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n\nSimpleTextFieldRenderer.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  onContextMenu: PropTypes.func.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  style: PropTypes.object.isRequired,\n  value: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    {\n      dragAndDrop: PropTypes.object,\n      pageEditId: PropTypes.string,\n      renderAsDiv: PropTypes.bool\n    }\n  ).isRequired,\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n}\n","import React, { Component } from 'react';\nimport './CbaButton.css';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport MenuBuildHelper from \"./MenuBuildHelper\";\nimport SpecialClickActionsHelper from \"./SpecialClickActionsHelper\";\nimport CommonActionsHelper from \"./CommonActionsHelper\";\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport TermEvaluator from '../eval/TermEvaluator';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\nimport Utils from \"../utils/Utils\";\nimport MenuItemTree from './MenuItemTree';\n\n/**\n * A display component that displays a button.\n */\nexport default class CbaButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.backgroundImage = {\n      hover: \"\",\n      pressed: \"\",\n    }\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  onMouseDown = (event) => {\n    const { config, runtime, path } = this.props;\n\n    if (config.toggleType === \"upDown\") {\n      const selectedImage = Utils.isEmptyObject(config.image.selected) ? \"none\" : config.image.selected;\n      this.backgroundImage.pressed = selectedImage;\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n    return false;\n  }\n\n  onMouseUp = (event) => {\n    const { config, runtime, path } = this.props;\n\n    if (config.toggleType === \"upDown\") {\n      this.backgroundImage.pressed = \"\";\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n    return false;\n  }\n\n  onMouseEnter = (event) => {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\n\n    if (config.image.hover && !isDisabled) {\n      this.backgroundImage.hover = config.image.hover;\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n    return false;\n  }\n\n  onMouseLeave = (event) => {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\n\n    if ((config.image.hover && !isDisabled) || this.backgroundImage.pressed) {\n      this.backgroundImage.hover = \"\";\n      // if user leaves button frame with mouse clicked, then reset pressed state.\n      this.backgroundImage.pressed = \"\";\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n    return false;\n  }\n\n  getBackgroundImage = () => {\n    const { runtime } = this.props;\n\n    if (this.backgroundImage.pressed === \"none\") {\n      return \"none\";\n    }\n\n    if (this.backgroundImage.pressed) {\n      return `url(${CommonConfigHelper.getProperResourcePath(this.backgroundImage.pressed, runtime)})`;\n    }\n\n    if (this.backgroundImage.hover) {\n      return `url(${CommonConfigHelper.getProperResourcePath(this.backgroundImage.hover, runtime)})`;\n    }\n\n    return \"\";\n  }\n\n  onClickHandler = (event) => {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.stopEventPropagation(event);\n    if (!CbaButton.isClipboardManagerAction(config.selectionHandlerType)) {\n      CommonActionsHelper.signalFocusChangeToClipboardManager(path, runtime);\n    }\n\n    const traceDetails = CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState);\n    if (config.subtype !== undefined) {\n      traceDetails.subtype = config.subtype;\n    }\n\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      traceDetails,\n      event, runtime);\n\n    runtime.replayStepMonitor.incrementReplayStep();\n\n    // set selected and visited state:\n    this.updateStateAndTriggerRendering(pathState);\n\n    // run configured click event handler:\n    const { selectionHandlerParam, attachedScale, increment } = config;\n    const { path: indexPath } = this.props;\n    const triggeringType = 'button';\n    const buttonBoundingRect = MenuItemTree.buildTriggerBoundingRect(event);\n\n    switch (config.selectionHandlerType) {\n      case 'none':\n        SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n        break;\n      case 'switchPage':\n        runtime.taskManager.switchPage(\n          selectionHandlerParam.page,\n          undefined, undefined,\n          selectionHandlerParam.pageAreaType,\n          selectionHandlerParam.pageAreaName,\n          undefined, undefined, undefined, undefined\n        );\n        break;\n      case 'switchTask':\n        runtime.taskManager.switchTaskIntraItem(selectionHandlerParam.task);\n        break;\n      case 'switchTest':\n        runtime.taskManager.switchTaskInterTest(\n          selectionHandlerParam.test,\n          selectionHandlerParam.item,\n          selectionHandlerParam.task,\n        );\n        break;\n      case 'logTaskResult':\n        console.log(\"=== current task result: ===\", runtime.taskManager.getCurrentTaskResults());\n        break;\n      case 'recommend':\n        runtime.recommendationsManager.setRecommendations([{\n          testName: selectionHandlerParam.test,\n          taskName: selectionHandlerParam.task,\n        }]);\n        break;\n      case 'cut':\n        SpecialClickActionsHelper.cut(triggeringType, indexPath, runtime);\n        break;\n      case 'copy':\n        SpecialClickActionsHelper.copy(triggeringType, indexPath, runtime);\n        break;\n      case 'paste':\n        SpecialClickActionsHelper.paste(triggeringType, indexPath, runtime);\n        break;\n      case 'next_task':\n        SpecialClickActionsHelper.nextTask(runtime);\n        break;\n      case 'back_task':\n        SpecialClickActionsHelper.backTask(runtime);\n        break;\n      case 'cancel_task':\n        SpecialClickActionsHelper.cancelTask(runtime);\n        break;\n      case 'startFullscreen':\n        SpecialClickActionsHelper.startFullscreen(runtime);\n        break;\n      case 'stopFullscreen':\n        SpecialClickActionsHelper.stopFullscreen(runtime);\n        break;\n      case 'close':\n        SpecialClickActionsHelper.close(indexPath, runtime);\n        break;\n      case 'closeAndNextTask':\n        SpecialClickActionsHelper.close(indexPath, runtime);\n        SpecialClickActionsHelper.nextTask(runtime);\n        break;\n      case 'menu':\n        event.clientX = buttonBoundingRect.left;\n        event.clientY = buttonBoundingRect.bottom;\n        runtime.contextMenu.openMenuItemTreeWithDynamicConfig(\n          MenuBuildHelper.buildMenuTreeItemConfiguration(\n            selectionHandlerParam.contextMenu,\n            event,\n            indexPath,\n            StateAttributeAccess.extractDefaultLinkReceiver(pathState),\n            runtime\n          ),\n          runtime\n        );\n        break;\n      case 'back':\n        SpecialClickActionsHelper.back(indexPath, {}, runtime);\n        break;\n      case 'forward':\n        SpecialClickActionsHelper.forward(indexPath, {}, runtime);\n        break;\n      case 'home':\n        SpecialClickActionsHelper.home(indexPath, {}, runtime);\n        break;\n      case 'addBookmark':\n        SpecialClickActionsHelper.addBookmark('button', indexPath, {}, runtime);\n        break;\n      case 'manageBookmarks':\n        SpecialClickActionsHelper.manageBookmark('button', indexPath, selectionHandlerParam, runtime);\n        break;\n      case 'debugOperator':\n        TermEvaluator.evaluateTerm(selectionHandlerParam, runtime, [], 'callViaDebugButton');\n        break;\n      default:\n        if (config.selectionHandlerType !== undefined) {\n          console.error(`Unknown selection handler type in button: ${config.selectionHandlerType}`);\n        }\n    }\n\n    if (attachedScale !== undefined) {\n      SpecialClickActionsHelper.incrementScale(indexPath, attachedScale, increment, runtime);\n    }\n\n    // send statemachine event depending on old toggle state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  static isClipboardManagerAction(selectionHandlerType) {\n    return selectionHandlerType === 'cut' || selectionHandlerType === 'copy' || selectionHandlerType === 'paste' || selectionHandlerType === 'menu';\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering = (pathState) => {\n    const { runtime, config, path } = this.props;\n\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    StateAttributeAccess.setVisited(pathState, true);\n\n    if (config.toggleType !== 'none') {\n      // Flip the pressed state: 'yes' <-> 'no'\n      SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n    } else {\n      // save state and rerender myself: color may change due to visited flag!\n      runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n  }\n\n  addFlexTextAlignmentToStyles = (styleObject, config) => {\n    const alignment = config.font.alignmentHorizontal;\n    let flexAlignment = \"\";\n\n    switch (alignment) {\n      case \"left\": flexAlignment = \"flex-start\"; break;\n      case \"center\": flexAlignment = \"center\"; break;\n      case \"right\": flexAlignment = \"flex-end\"; break;\n      default: flexAlignment = \"center\"; break;\n    }\n\n    return Object.assign(styleObject, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: flexAlignment\n    });\n  }\n\n  onClickFrozenHandler = (event) => {\n    const { runtime, path, config } = this.props;\n    let componentType = 'Button';\n    // subtype values prefixed by Button_: back, forward, home, tab, taskbar, taskbarStart\n    // subtype values not prefixed: menu, bookmark\n    if (config.subtype !== undefined) {\n      componentType += `_${config.subtype}`;\n      if (config.subtype === 'menu') {\n        componentType = 'Menu';\n      }\n      if (config.subtype === 'bookmark') {\n        componentType = 'Bookmark';\n      }\n    }\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, componentType);\n    event.stopPropagation();\n  }\n\n  render() {\n    const { runtime, config, path, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const pressedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    const style = this.addFlexTextAlignmentToStyles(CommonConfigHelper.buildStyleByIndexPath(path, config, pressedState, orientation, runtime), config);\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\n    const { toggleType, highlight, position: positonInConfig } = config;\n\n    if (toggleType === \"upDown\") {\n      CommonConfigHelper.setStyleAttribute(style, \"borderStyle\", pressedState ? \"inset\" : \"outset\");\n    }\n\n    let className = '';\n    switch (highlight) {\n      case 'up': className = 'CbaButton-highlight-up';\n        break;\n      case 'down': className = 'CbaButton-highlight-down';\n        break;\n      default: className = 'CbaButton';\n        break;\n    }\n\n    const displayText = RenderingHelper.extractMultilineText(CommonConfigHelper.buildDisplayText(config, pathState, runtime));\n\n    // Disabled state does not support hovered/pressed states.\n    // Also, mouseleave events do not fire for disabled buttons.\n    // Overriding button states here.\n    if (isDisabled) {\n      this.backgroundImage.hover = \"\";\n      this.backgroundImage.pressed = \"\";\n    }\n\n    const backgroundImageStateResult = this.getBackgroundImage();\n    if (backgroundImageStateResult) {\n      CommonConfigHelper.setStyleAttribute(style, \"backgroundImage\", backgroundImageStateResult);\n    }\n\n    return (\n      <React.Fragment>\n        <button\n          className={CommonConfigHelper.getCssClassNamesValue(config, className)}\n          onClick={this.onClickHandler}\n          onContextMenu={this.onContextMenuHandler}\n          title={CommonConfigHelper.buildTitle(config)}\n          style={style}\n          data-cba-id={config.pageEditId}\n          onMouseDown={this.onMouseDown}\n          onMouseUp={this.onMouseUp}\n          onMouseEnter={this.onMouseEnter}\n          onMouseLeave={this.onMouseLeave}\n          type=\"button\"\n          disabled={isDisabled}\n          tabIndex={config.tabIndex}\n        >\n          {CommonConfigHelper.getImageTag(pathState, config, pressedState, runtime)}\n          <span style={{\n            maxHeight: positonInConfig.height\n          }}\n          >\n            {displayText}\n          </span>\n        </button>\n        {isDisabled && <div className=\"CbaButton-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(style)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\nCbaButton.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        selectionHandlerParam: PropTypes.object,\n        selectionHandlerType: PropTypes.oneOf([\n          'none',\n          'switchPage', 'switchTask', 'switchTest',\n          'logTaskResult', 'recommend',\n          'cut', 'copy', 'paste',\n          'next_task', 'back_task', 'cancel_task',\n          'startFullscreen', 'stopFullscreen',\n          'close',\n          'menu',\n          'back', 'forward', 'home',\n          'addBookmark', 'manageBookmarks',\n          'debugOperator'\n        ]).isRequired,\n        highlight: PropTypes.oneOf(['none', 'horizontal', 'vertical']).isRequired,\n        toggleType: PropTypes.oneOf(['none', 'upDown', 'colorChange']).isRequired,\n        subtype: PropTypes.string\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\nimport './CbaRichTextField/css/repeatable.css';\n\nconst DEFAULT_LABEL_POSITION = 10;\n\nexport default class CbaRadioButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    // Flip the selected state: 'yes' <-> 'no'\n    this.updateStateAndTriggerRendering(pathState);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState) {\n    const { runtime, path } = this.props;\n\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    StateAttributeAccess.setVisited(pathState, true);\n\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n  }\n\n  static hasImage(config) {\n    const { displayMode } = config.image;\n\n    return displayMode !== \"none\";\n  }\n\n  onClickFrozenHandler = (event) => {\n    const { runtime, path } = this.props;\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, 'RadioButton');\n    event.stopPropagation();\n  }\n\n  addFlexAlignmentToStyles = (styleObject, verticalAlign, horizontalAlign) => Object.assign(styleObject, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: this.computeFlexAlignment(verticalAlign),\n    alignItems: this.computeFlexAlignment(horizontalAlign)\n  });\n\n  computeFlexAlignment = (alignment) => {\n    let flexAlignment = \"\";\n    switch (alignment) {\n      case \"top\": flexAlignment = \"flex-start\"; break;\n      case \"left\": flexAlignment = \"flex-start\"; break;\n      case \"center\": flexAlignment = \"center\"; break;\n      case \"bottom\": flexAlignment = \"flex-end\"; break;\n      case \"right\": flexAlignment = \"flex-end\"; break;\n      default: flexAlignment = \"center\"; break;\n    }\n    return flexAlignment;\n  }\n\n  computeMargins = (verticalAlign, isTop) => {\n    let marginValue = \"auto\";\n    if (verticalAlign === 'bottom' && !isTop) marginValue = 2.5;\n    if (verticalAlign === 'top' && isTop) marginValue = 2.5;\n    return marginValue;\n  }\n\n  computeControlIconPosition = (controlIconOnly, horizontalAlign, controlIconSize, width) => {\n    let controlPosition = {};\n    if (controlIconOnly) {\n      if (horizontalAlign === \"center\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: (width - controlIconSize) / 2,\n          right: 'auto'\n        });\n      } else if (horizontalAlign === \"left\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: 2.5,\n          right: 'auto'\n        })\n      } else if (horizontalAlign === \"right\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: 'auto',\n          right: 2.5\n        })\n      }\n    }\n    return controlPosition;\n  }\n\n  render() {\n    const { runtime, path, config, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    const rawText = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\n    const text = RenderingHelper.extractMultilineText(rawText);\n    const { label, textWrap, controlIconSize, horizontalAlign, verticalAlign, position } = config;\n    const { distance, position: labelPosition } = label;\n    const { width } = position;\n    const leftToRight = (labelPosition === 'right');\n\n    let wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\n    wrapperStyle = this.addFlexAlignmentToStyles(wrapperStyle, verticalAlign, horizontalAlign);\n    CommonConfigHelper.setStyleAttribute(wrapperStyle, \"backgroundImage\", \"none\");\n\n    const textWrapStyle = {\n      whiteSpace: textWrap ? \"initial\" : \"noWrap\",\n      marginLeft: leftToRight ? 20 : 0,\n      marginRight: leftToRight ? 0 : 20,\n      marginBottom: this.computeMargins(verticalAlign, false),\n      marginTop: this.computeMargins(verticalAlign, true),\n      justifyContent: this.computeFlexAlignment(horizontalAlign)\n    }\n\n    const controlIconOnly = ((rawText.length === 0) && !CbaRadioButton.hasImage(config));\n    const inputStyle = {\n      left: (leftToRight) ? 2.5 : \"auto\",\n      right: (leftToRight) ? \"auto\" : 2.5,\n      marginBottom: this.computeMargins(verticalAlign, false),\n      marginTop: this.computeMargins(verticalAlign, true),\n      cursor: \"inherit\",\n      ...this.computeControlIconPosition(controlIconOnly, horizontalAlign, controlIconSize, width)\n    }\n\n    const labelPositionDelta = distance - DEFAULT_LABEL_POSITION;\n    const textStyle = {\n      marginLeft: leftToRight ? labelPositionDelta : 0,\n      marginRight: leftToRight ? 0 : labelPositionDelta,\n      marginBottom: this.computeMargins(verticalAlign, false),\n      marginTop: this.computeMargins(verticalAlign, true),\n      display: (rawText.length > 0) ? \"inline\" : \"none\"\n    }\n\n    const imageStyle = {\n      order: leftToRight ? 0 : 1,\n    }\n\n    const labelStyle = {\n      cursor: \"inherit\"\n    }\n\n    if (CbaRadioButton.hasImage(config)) {\n      textStyle.marginLeft = 0;\n      textStyle.marginRight = 0;\n      imageStyle.marginBottom = this.computeMargins(verticalAlign, false);\n      imageStyle.marginTop = this.computeMargins(verticalAlign, true);\n      if (!leftToRight) {\n        imageStyle.paddingRight = 5;\n        imageStyle.marginRight = labelPositionDelta;\n      } else {\n        imageStyle.paddingRight = 0;\n        imageStyle.marginRight = 0;\n        imageStyle.paddingLeft = 5;\n        imageStyle.marginLeft = labelPositionDelta;\n      }\n    }\n\n    const radioWrapStyle = {\n      ...(((rawText.length > 0) || CbaRadioButton.hasImage(config)) ? {\n        transform: 'translateX(0)',\n      } : {})\n    }\n\n    const forKey = shortid.generate();\n\n    return (\n      <React.Fragment>\n        <div\n          style={wrapperStyle}\n          data-cba-id={config.pageEditId}\n          title={CommonConfigHelper.buildTitle(config)}\n          onClick={this.onClickHandler}\n          onContextMenu={this.onContextMenuHandler}\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"inputWrapper overflow-hidden\")}\n        >\n          <div className=\"radioWrap\" style={radioWrapStyle}>\n            <label\n              style={labelStyle}\n              htmlFor={forKey}\n              className=\"label\"\n              onClick={(event) => { event.stopPropagation(); }}\n            >\n              <span style={textWrapStyle}>\n                {CommonConfigHelper.getImageTag(pathState, config, selectedState, runtime, imageStyle)}\n                <span style={textStyle} className=\"inputTextWrap\">\n                  {text}\n                </span>\n              </span>\n            </label>\n            <input\n              className={`radioCheckBoxSize${controlIconSize || 13}`}\n              name={forKey}\n              style={inputStyle}\n              id={forKey}\n              type=\"radio\"\n              checked={selectedState}\n              disabled={StateAttributeAccess.extractDisabled(pathState)}\n              // using a blank function to remove the warning src: https://stackoverflow.com/questions/36715901/reactjs-error-warning\n              onChange={() => { }}\n              tabIndex={config.tabIndex}\n            />\n          </div>\n        </div>\n        {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaRadioButton-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(wrapperStyle)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\nCbaRadioButton.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        textWrap: PropTypes.bool.isRequired,\n        label: PropTypesHelper.getInputLabelConfig(),\n        controlIconSize: PropTypes.number.isRequired,\n        horizontalAlign: PropTypes.string.isRequired,\n        verticalAlign: PropTypes.string.isRequired\n      },\n      true\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\nimport './CbaRichTextField/css/repeatable.css';\n\n\nconst DEFAULT_LABEL_POSITION = 10;\n\n/**\n * A display component that displays a labeled check box.\n */\nexport default class CbaCheckbox extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    // Flip state: 'true' <-> 'false'\n    this.updateStateAndTriggerRendering(pathState);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on old selected state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState) {\n    const { runtime, path } = this.props;\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    StateAttributeAccess.setVisited(pathState, true);\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n  }\n\n  onClickFrozenHandler = (event) => {\n    const { runtime, path } = this.props;\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, 'CheckBox');\n    event.stopPropagation();\n  }\n\n  addFlexAlignmentToStyles = (styleObject, verticalAlign, horizontalAlign) => Object.assign(styleObject, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: this.computeFlexAlignment(verticalAlign),\n    alignItems: this.computeFlexAlignment(horizontalAlign)\n  });\n\n  computeFlexAlignment = (alignment) => {\n    let flexAlignment = \"\";\n    switch (alignment) {\n      case \"top\": flexAlignment = \"flex-start\"; break;\n      case \"left\": flexAlignment = \"flex-start\"; break;\n      case \"center\": flexAlignment = \"center\"; break;\n      case \"bottom\": flexAlignment = \"flex-end\"; break;\n      case \"right\": flexAlignment = \"flex-end\"; break;\n      default: flexAlignment = \"center\"; break;\n    }\n    return flexAlignment;\n  }\n\n  computeMargins = (verticalAlign, isTop) => {\n    let marginValue = \"auto\";\n    if (verticalAlign === 'bottom' && !isTop) marginValue = 2.5;\n    if (verticalAlign === 'top' && isTop) marginValue = 2.5;\n    return marginValue;\n  }\n\n  computeControlIconPosition = (hasLabel, horizontalAlign, controlIconSize, width) => {\n    let controlPosition = {};\n    if (!hasLabel) {\n      if (horizontalAlign === \"center\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: (width - controlIconSize) / 2,\n          right: 'auto'\n        });\n      } else if (horizontalAlign === \"left\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: 2.5,\n          right: 'auto'\n        })\n      } else if (horizontalAlign === \"right\") {\n        controlPosition = Object.assign(controlPosition, {\n          left: 'auto',\n          right: 2.5\n        })\n      }\n    }\n    return controlPosition;\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    const text = RenderingHelper.extractMultilineText(CommonConfigHelper.buildDisplayText(config, pathState, runtime));\n    const { label, textWrap, controlIconSize, horizontalAlign, verticalAlign, text: checkboxLabel, position } = config;\n    const { distance, position: labelPosition } = label;\n    const { width } = position;\n    const leftToRight = (labelPosition === 'right');\n\n    let wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\n    wrapperStyle = this.addFlexAlignmentToStyles(wrapperStyle, verticalAlign, horizontalAlign);\n\n    const textWrapStyle = {\n      whiteSpace: textWrap ? \"initial\" : \"nowrap\",\n      marginLeft: leftToRight ? 20 : 0,\n      marginRight: leftToRight ? 0 : 20,\n      marginBottom: this.computeMargins(verticalAlign, false),\n      marginTop: this.computeMargins(verticalAlign, true),\n      justifyContent: this.computeFlexAlignment(horizontalAlign),\n    }\n\n    const inputStyle = {\n      left: (leftToRight) ? 2.5 : \"auto\",\n      right: (leftToRight) ? \"auto\" : 2.5,\n      marginBottom: this.computeMargins(verticalAlign, false),\n      marginTop: this.computeMargins(verticalAlign, true),\n      cursor: \"inherit\",\n      ...this.computeControlIconPosition(checkboxLabel.label, horizontalAlign, controlIconSize, width)\n    }\n\n    const labelPositionDelta = distance - DEFAULT_LABEL_POSITION;\n    const textStyle = {\n      marginLeft: leftToRight ? labelPositionDelta : 0,\n      marginRight: leftToRight ? 0 : labelPositionDelta,\n      display: checkboxLabel.label ? \"inline\" : \"none\"\n    }\n\n    const labelStyle = {\n      cursor: \"inherit\"\n    }\n\n    const checkBoxWrapStyle = {\n      ...((checkboxLabel.label) ? {\n        transform: 'translateX(0)'\n      } : {})\n    }\n\n    const forKey = shortid.generate();\n\n    // TODO: This class resembles CbaRadioButton pretty much \n    //       -> Merge into one class once we know that we keep implementation of both as <input> plus <div>.\n    return (\n      <React.Fragment>\n        <div\n          style={wrapperStyle}\n          data-cba-id={config.pageEditId}\n          title={CommonConfigHelper.buildTitle(config)}\n          onClick={this.onClickHandler}\n          onContextMenu={this.onContextMenuHandler}\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"inputWrapper overflow-hidden\")}\n        >\n          <div className=\"checkBoxWrap\" style={checkBoxWrapStyle}>\n            <label\n              style={labelStyle}\n              htmlFor={forKey}\n              className=\"label\"\n              onClick={(event) => { event.stopPropagation(); }}\n            >\n              <span style={textWrapStyle}>\n                <span style={textStyle} className=\"inputTextWrap\">{text}</span>\n              </span>\n            </label>\n            <input\n              className={`radioCheckBoxSize${controlIconSize || 13}`}\n              style={inputStyle}\n              id={forKey}\n              type=\"checkbox\"\n              checked={selectedState}\n              disabled={StateAttributeAccess.extractDisabled(pathState)}\n              // using a blank function to remove the warning src: https://stackoverflow.com/questions/36715901/reactjs-error-warning\n              onChange={() => { }}\n              tabIndex={config.tabIndex}\n            />\n          </div>\n        </div>\n        {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaCheckbox-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(wrapperStyle)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\nCbaCheckbox.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        textWrap: PropTypes.bool.isRequired,\n        label: PropTypesHelper.getInputLabelConfig(),\n        controlIconSize: PropTypes.number.isRequired,\n        horizontalAlign: PropTypes.string.isRequired,\n        verticalAlign: PropTypes.string.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaLink extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    // Update the 'selected' state: \n    this.updateStateAndTriggerRendering(pathState);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on old selected state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState) {\n    const { runtime, path } = this.props;\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    StateAttributeAccess.setVisited(pathState, true);\n\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n\n  }\n\n  // accesibility event for tab navigation\n  onKeyDown(event) {\n    if (event.keyCode === 32) {\n      // space key\n      this.onClickHandler(event);\n    }\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n\n    const selected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    const text = RenderingHelper.extractMultilineText(CommonConfigHelper.buildDisplayText(config, pathState, runtime));\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selected, orientation, runtime);\n\n    return (\n      <div\n        style={style}\n        data-cba-id={config.pageEditId}\n        title={CommonConfigHelper.buildTitle(config)}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaLink\")}\n      >\n        <span\n          onClick={this.onClickHandler}\n          onKeyDown={e => this.onKeyDown(e)}\n          onContextMenu={this.onContextMenuHandler}\n          tabIndex={config.tabIndex}\n        >\n          {CommonConfigHelper.getImageTag(pathState, config, false, runtime)}\n          {text}\n        </span>\n      </div>\n    );\n  }\n\n}\n\n\nCbaLink.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaPolygon extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    // Flip the selected state: 'yes' <-> 'no'\n    this.updateStateAndTriggerRendering(pathState, oldSelected);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState, oldSelected) {\n    const { runtime, path } = this.props;\n    StateAttributeAccess.setVisited(pathState, true);\n\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n  }\n\n  // accesibility event for tab navigation\n  onKeyDown(event) {\n    if (event.keyCode === 32) {\n      // space key\n      this.onClickHandler(event);\n    }\n  }\n\n\n  render() {\n    const { config, path, runtime, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n\n    const renderingSelectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    const polygonStyle = CommonConfigHelper.buildStyleSvg(pathState, config, renderingSelectedState, orientation, runtime);\n    const pointsString = CommonConfigHelper.buildPointsString(config.bendPoints);\n    const title = CommonConfigHelper.buildTitle(config);\n\n    return (\n      <polygon\n        points={pointsString}\n        style={polygonStyle}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        tabIndex={config.tabIndex}\n        onKeyDown={e => this.onKeyDown(e)}\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\n      >\n        {title !== \"\" && <title>{title}</title>}\n      </polygon>\n    );\n\n  }\n\n\n}\n\n\nCbaPolygon.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        bendPoints: PropTypes.arrayOf(PropTypes.shape({\n          x: PropTypes.number.isRequired,\n          y: PropTypes.number.isRequired\n        }))\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaPolygon from './CbaPolygon';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaRegionMap extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  render() {\n    const { runtime, path: controllerPath, config, orientation } = this.props;\n\n    const delegates = config.regions.map((child, index) => {\n      if (child.type !== \"CbaPolygon\") console.warn(`Unexpected region type: ${child.type}`);\n      const childPath = IndexPathHelper.appendIndexToPageSegment(controllerPath, index);\n\n      return (\n        <CbaPolygon\n          key={childPath}\n          config={child.config}\n          path={childPath}\n          orientation={orientation}\n          runtime={runtime}\n        />\n      )\n    });\n    return (\n      <div\n        title={CommonConfigHelper.buildTitle(config)}\n        style={CommonConfigHelper.buildStyleByIndexPath(controllerPath, config, false, orientation, runtime)}\n        data-cba-id={config.pageEditId}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaRegionMap\")}\n      >\n        <svg height=\"100%\" width=\"100%\">\n          {delegates}\n        </svg>\n      </div>\n    );\n  }\n\n}\n\nCbaRegionMap.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        regions: PropTypes.array.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaInnerHtml extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onClickHandler = this.onClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  static sanitizeHtml(original) {\n    // TODO: Should we scan the generated HTML code?\n    return {\n      __html: original\n    };\n  }\n\n  render() {\n    const { runtime, config, path, orientation } = this.props;\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\n    return (\n      <div\n        // We will check the embedded code in our sanitize method -> disable warning here:\n        // eslint-disable-next-line react/no-danger\n        dangerouslySetInnerHTML={CbaInnerHtml.sanitizeHtml(config.innerHtml)}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        title={CommonConfigHelper.buildTitle(config)}\n        style={style}\n        data-cba-id={config.pageEditId}\n      />\n    );\n  }\n\n}\n\nCbaInnerHtml.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        innerHtml: PropTypes.string.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport CommonActionsHelper from \"./CommonActionsHelper\";\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport RenderingHelper from './RenderingHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport Utils from '../utils/Utils';\n\nexport default class CbaExternalPageFrame extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.iframeRef = React.createRef();\n    this.currentSaveTimer = null;\n\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n    this.restoreIframeState();\n  }\n\n  componentWillUnmount() {\n    if (this.currentSaveTimer !== null) {\n      clearTimeout(this.currentSaveTimer);\n      this.currentSaveTimer = null;\n    }\n    this.saveIframeState();\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  // ----------- snapshot related ------------------------------------------------------------------------\n  /**\n   * Build the initial state in the component state manager. \n   * \n   * The component state manager will call this method to initialize state for new display component instances.\n   */\n  static addAttributesToInitialState(initialState, configProps) {\n    // activate volatile flag in state manager since state of external java code is not fully synchronized. \n    StateAttributeAccess.setVolatile(initialState, true);\n    StateAttributeAccess.setComponentClassName(initialState, \"CbaExternalPageFrame\");\n  }\n\n  updateStateInComponentStateManager() {\n    this.saveIframeState();\n  }\n\n  saveIframeState = () => {\n    const iframeWindow = this.iframeRef.current.contentWindow;\n    if (iframeWindow === undefined || iframeWindow === null) {\n      const { path } = this.props;\n      console.error(`No window in IFrame! -> We don't save state of code running in IFrame at path ${path}.`);\n      return;\n    }\n    try {\n      if (iframeWindow.getState !== undefined) {\n        const stateToSave = iframeWindow.getState();\n        const pathState = ComponentStateHelper.getState(this);\n        StateAttributeAccess.setExternalContentState(pathState, stateToSave);\n        ComponentStateHelper.registerState(this, pathState);\n      } else {\n        console.log(`No getState method found. ${this.reactionMessage(true)}`);\n      }\n    } catch (exception) {\n      if (CbaExternalPageFrame.isPermissionDeniedException(exception)) {\n        console.log(`We don't save state of code running in IFrame from another orgin. URL in IFrame is ${this.iframeRef.current.src}`);\n      } else {\n        console.error(`Exception while trying to save state. ${this.reactionMessage(true)}`, exception);\n      }\n    }\n\n  }\n\n  restoreIframeState = () => {\n    const pathState = ComponentStateHelper.getState(this);\n    const savedState = StateAttributeAccess.extractExternalContentState(pathState);\n    if (savedState !== undefined) {\n      if (this.currentSaveTimer != null) {\n        clearTimeout(this.currentSaveTimer);\n        this.currentSaveTimer = null;\n      }\n      this.currentSaveTimer = setTimeout(() => CbaExternalPageFrame.processSaveTimeout(this, savedState, 100), 20)\n    }\n  }\n\n  static processSaveTimeout(component, stateToRestore, callCount) {\n    component.currentSaveTimer = null;\n    const iframeWindow = component.iframeRef.current.contentWindow;\n    if (iframeWindow === undefined || iframeWindow === null) {\n      console.error(`No window in IFrame! ${component.reactionMessage(false)}`);\n      return;\n    }\n    try {\n      if (iframeWindow.setState !== undefined) {\n        iframeWindow.setState(stateToRestore);\n      } else if (callCount > 0) {\n        component.currentSaveTimer = setTimeout(() => CbaExternalPageFrame.processSaveTimeout(component, stateToRestore, callCount - 1), 20);\n      } else {\n        console.log(`No setState method found. ${component.reactionMessage(false)}`);\n      }\n    } catch (exception) {\n      if (CbaExternalPageFrame.isPermissionDeniedException(exception)) {\n        console.log(`We don't restore state of code running in IFrame from another orgin. URL in IFrame is ${component.iframeRef.current.src}`);\n      } else {\n        console.error(`Exception while trying to restore state ${component.reactionMessage(false)}`, exception);\n      }\n    }\n  }\n\n  static isPermissionDeniedException(exception) {\n    return exception.message.startsWith('Permission denied to access property')\n  }\n\n  reactionMessage = (isSaving) => {\n    const { path, runtime } = this.props;\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime);\n    const userDefIdPathMessage = userDefIdPath === undefined ? \"\" : ` (user defined ID path: ${userDefIdPath})`;\n    return ` -> We don't ${isSaving ? \"save\" : \"restore\"} state of code running in IFrame at index path ${path}${userDefIdPathMessage}.`\n  }\n\n  // ----------- term evaluation helpers -----------------------------------------------------------------\n  /**\n   * Get the window that contains the running external java script code.\n   */\n  getFrameWindow = () => this.iframeRef.current.contentWindow;\n\n  /**\n   * Get the URL that we use to fill the frame.\n   */\n  getFrameContentUrl = () => {\n    const { config, runtime } = this.props;\n    const urlString = CommonConfigHelper.getProperResourcePathExternalResources(config.pageAddress, runtime);\n    return urlString.startsWith('http') ? new URL(urlString) : new URL(urlString, window.location);\n\n  }\n\n  // ----------- user interaction ------------------------------------------------------------------------\n\n  onClick = (event) => {\n    const { config, path, runtime } = this.props;\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path, undefined, event, runtime);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  scroll = (x, y) => {\n    const iframeInstance = this.iframeRef.current;\n\n    if (!iframeInstance) return;\n\n    try {\n      const childDocument = iframeInstance.contentDocument ? iframeInstance.contentDocument : iframeInstance.contentWindow.document;\n      const childWindow = iframeInstance.contentWindow;\n\n      Utils.doScrollOnHTMLElement(x, y, childDocument.querySelector(\"html\"), childWindow, iframeInstance)\n\n    } catch (error) {\n      console.warn(\"Could not scroll external page \\n\", error)\n    }\n\n  }\n\n  // ----------- rendering ------------------------------------------------------------------------\n\n  static buildIframeUrl(configPageAddress, indexPath, runtime) {\n    const url = CommonConfigHelper.getProperResourcePathExternalResources(configPageAddress, runtime);\n\n    if (configPageAddress.startsWith('http')) {\n      // register foreign http server as source for post message events:\n      runtime.postMessageReceiver.registerAcceptableUrlForExternalPageFrameEvent(url);\n      return url;\n    } else {\n      const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\n\n      // add additional URL parameters for index path and user defined Id path\n      const urlContainsParametersAlready = url.indexOf('?') !== -1;\n      return `${url + (urlContainsParametersAlready ? '&' : '?')}indexPath=${indexPath}&userDefIdPath=${userDefIdPath}`;\n    }\n\n  }\n\n  render() {\n    const { path, config, runtime, orientation } = this.props;\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\n    CommonConfigHelper.setStyleAttribute(style, \"resize\", \"none\");\n\n    // <iframe> elements must have a unique title property\n    const uniqueTitle = `${config.pageAddress}-${(new Date()).getTime()}`;\n\n    const iframeUrl = CbaExternalPageFrame.buildIframeUrl(config.pageAddress, path, runtime);\n\n\n    return (\n      <iframe\n        ref={this.iframeRef}\n        title={uniqueTitle}\n        src={iframeUrl}\n        style={style}\n        data-cba-id={config.pageEditId}\n        onClick={this.onClick}\n        onContextMenu={this.onContextMenuHandler}\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\n      />\n    );\n  }\n\n}\n\nCbaExternalPageFrame.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.getStandardConfigPropTypes(false)\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport TreeUtils from './TreeUtils';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport { CbaTreeRow } from './DataGridRenderers';\r\nimport TreeTraceHelper from './TreeTraceHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport Utils from '../../utils/Utils';\r\n\r\nimport './CbaTree.css';\r\n\r\n\r\nexport default class CbaTree extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { path, runtime } = props;\r\n\r\n    this.eventEmitter = runtime.eventEmitter;\r\n    this.subscription = this.eventEmitter.addListener(TreeUtils.getTreeEventChangeName(path), this.triggerRendering);\r\n  }\r\n\r\n  static addAttributesToInitialState(initialState, config, path, runtime) {\r\n    const nodes = TreeUtils.initTreeNodes(config.nodes, config.nodeTypes, path, runtime, {\r\n      startCollapsed: config.startCollapsed\r\n    });\r\n    const treeColumns = TreeUtils.initTreeColumns(config.columns, path);\r\n    const treeState = TreeUtils.initTreeState(treeColumns);\r\n    const nodeTypes = Utils.deepCopy(config.nodeTypes);\r\n    const treeReadOnly = Utils.deepCopy(config.readOnly);\r\n\r\n    StateAttributeAccess.setTreeNodes(initialState, nodes);\r\n    StateAttributeAccess.setTreeColumns(initialState, treeColumns);\r\n    StateAttributeAccess.setTreeState(initialState, treeState);\r\n    StateAttributeAccess.setNodeTypes(initialState, nodeTypes);\r\n    StateAttributeAccess.setTreeReadOnly(initialState, treeReadOnly);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.subscription.remove();\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onRowExpandClick = (event, rowData, expandOnly) => {\r\n    if (event) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    const { path, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const nodes = StateAttributeAccess.extractTreeNodes(pathState);\r\n\r\n    const node = TreeUtils.getNode(nodes, rowData.path);\r\n    if (node.isLeaf && node.nodes.length === 0) return;\r\n\r\n    const oldExpandedValue = node.expanded;\r\n    node.expanded = expandOnly || !node.expanded;\r\n\r\n    if (oldExpandedValue !== node.expanded) {\r\n      runtime.replayStepMonitor.incrementReplayStep();\r\n      const actionType = node.expanded ? \"expandNode\" : \"collapseNode\";\r\n      TreeTraceHelper.traceNodeAction(actionType, path, rowData, runtime);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n      this.triggerRendering();\r\n    }\r\n  }\r\n\r\n  onRowSelect = (event, rowData) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const { path } = this.props;\r\n\r\n    TreeUtils.selectNodeAction(path, rowData);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", path, {\r\n      isTreeView: false,\r\n      cells: []\r\n    }, runtime);\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", path, {\r\n      isTreeView: false,\r\n      cells: []\r\n    }, runtime);\r\n  }\r\n\r\n  addRowReferences = (row = {}) => {\r\n    const { config, runtime, path } = this.props;\r\n    const { updateOnSingleClick, nodeTypes } = config;\r\n\r\n    row.onRowExpandClick = this.onRowExpandClick;\r\n    row.onRowSelect = this.onRowSelect;\r\n\r\n    row.updateOnSingleClick = updateOnSingleClick;\r\n    row.isTreeView = false\r\n\r\n    row.runtime = runtime;\r\n    row.nodeTypes = nodeTypes;\r\n    row.treePath = path;\r\n\r\n    row.isReadOnly = config.readOnly;\r\n    return row;\r\n  }\r\n\r\n  triggerRendering = () => {\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const { hideLeaves } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    const { treeNodes, treeColumns } = pathState;\r\n    const treeState = StateAttributeAccess.extractTreeState(pathState) || {};\r\n\r\n    const hideColumnsHeader = config.hideColumns || TreeUtils.isDefaultColumn(treeColumns);\r\n    const additionalCssClass = hideColumnsHeader ? \"hideColumns\" : \"\";\r\n\r\n    const displayNodes = TreeUtils.getTreeDisplayNodes(treeNodes, path, hideLeaves);\r\n    const displayTreeColumns = TreeUtils.getDisplayColumns(treeColumns, false, treeState.modifiedColumns, path, runtime);\r\n\r\n    if (config.hideColumns) {\r\n      // removes all columns except first\r\n      displayTreeColumns.length = 1;\r\n      delete displayTreeColumns[0].width;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, additionalCssClass)}\r\n        onClick={this.onClickHandler}\r\n        onContextMenu={this.onContextMenuHandler}\r\n        onScroll={event => event.stopPropagation()} // prevent scroll propagation (stops tracing)\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n      >\r\n        <ReactDataGrid\r\n          columns={displayTreeColumns}\r\n          headerRowHeight={TreeUtils.const.COLUMN_HEIGHT}\r\n          rowHeight={TreeUtils.const.ROW_HEIGHT} // this needs to be provided by generator by computing font in when no columns available\r\n          rowGetter={index => this.addRowReferences(displayNodes[index])}\r\n          rowsCount={displayNodes.length}\r\n          rowRenderer={CbaTreeRow}\r\n          onColumnResize={(columnIndex, newWidth) => TreeUtils.handleColumnResize(displayTreeColumns[columnIndex].key, newWidth, this)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTree.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        hideLeaves: PropTypes.bool.isRequired,\r\n        hideColumns: PropTypes.bool.isRequired,\r\n        updateOnSingleClick: PropTypes.bool.isRequired,\r\n        \"drag&dropMode\": PropTypes.string.isRequired,\r\n        userDefinedId: PropTypes.string.isRequired,\r\n        nodes: PropTypes.array.isRequired,\r\n        nodeTypes: PropTypes.array.isRequired,\r\n        columns: PropTypes.array.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport TreeUtils from './TreeUtils';\r\nimport { CbaTreeRow } from './DataGridRenderers';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport TreeTraceHelper from './TreeTraceHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\n\r\nexport default class CbaTreeView extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { runtime } = this.props;\r\n\r\n    this.eventEmitter = runtime.eventEmitter;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n\r\n    this.subscription = this.eventEmitter.addListener(TreeUtils.getTreeEventChangeName(treePath), this.handleTreeChange);\r\n\r\n    RenderingHelper.onMount(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    this.subscription.remove();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  handleTreeChange = () => {\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onRowSelect = (event, rowData) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const { path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n\r\n    TreeUtils.selectNodeAction(treePath, rowData);\r\n\r\n    // reset sort and triggers rendering;\r\n    // cannot visually reset sort due to library only allowing setting of current column and direction only on first init.\r\n    // this.handleGridSort(null, \"NONE\");\r\n  }\r\n\r\n  handleGridSort = (columnId, sortDirection) => {\r\n    const { path, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setTreeViewSort(pathState, {\r\n      type: sortDirection,\r\n      column: columnId\r\n    });\r\n\r\n    runtime.replayStepMonitor.incrementReplayStep();\r\n\r\n    TreeTraceHelper.traceSort(path, columnId, sortDirection, runtime);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", undefined, {\r\n      isTreeView: true,\r\n      treeViewPath: path,\r\n      cells: []\r\n    }, runtime);\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", undefined, {\r\n      isTreeView: true,\r\n      treeViewPath: path,\r\n      cells: []\r\n    }, runtime);\r\n  }\r\n\r\n  addRowReferences = (row = {}) => {\r\n    const { runtime, path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const { nodeTypes, treeReadOnly } = TreeUtils.getTreeDataByPath(treePath, runtime)\r\n\r\n    row.onRowSelect = this.onRowSelect;\r\n    row.updateOnSingleClick = false;\r\n    row.isTreeView = true;\r\n\r\n    row.onRowExpandClick = () => { };\r\n\r\n    row.runtime = runtime;\r\n    row.nodeTypes = nodeTypes;\r\n    row.treePath = treePath;\r\n    row.treeViewPath = path;\r\n\r\n    row.isReadOnly = treeReadOnly;\r\n    return row;\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const { filterLeaves, sortable, treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const sort = StateAttributeAccess.extractTreeViewSort(pathState) || {\r\n      type: \"NONE\",\r\n      column: null\r\n    };\r\n\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const { treeNodes, treeColumns, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const { currentNode } = treeState;\r\n\r\n    let treeViewState = StateAttributeAccess.extractTreeState(pathState);\r\n\r\n    // init tree view state if not initialised \r\n    if (!treeViewState) {\r\n      treeViewState = TreeUtils.initTreeState(treeColumns);\r\n\r\n      StateAttributeAccess.setTreeState(pathState, treeViewState);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n    }\r\n\r\n    const displayNodes = TreeUtils.getTreeViewDisplayNodes(treeNodes, treePath, filterLeaves, currentNode, sort) || [];\r\n    const displayColumns = TreeUtils.getDisplayColumns(treeColumns, sortable, treeViewState.modifiedColumns, path, runtime) || [];\r\n    const hideColumnsHeader = TreeUtils.isDefaultColumn(treeColumns);\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        onClick={this.onClickHandler}\r\n        onContextMenu={this.onContextMenuHandler}\r\n        onScroll={event => event.stopPropagation()} // prevent scroll propagation (stops tracing)\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, hideColumnsHeader ? \"hideColumns\" : \"\")}\r\n      >\r\n        <ReactDataGrid\r\n          columns={displayColumns}\r\n          headerRowHeight={TreeUtils.const.COLUMN_HEIGHT}\r\n          rowHeight={TreeUtils.const.ROW_HEIGHT} // this needs to be provided by generator by computing font in when no columns available\r\n          rowGetter={index => this.addRowReferences(displayNodes[index])}\r\n          rowsCount={displayNodes.length}\r\n          rowRenderer={CbaTreeRow}\r\n          onGridSort={this.handleGridSort}\r\n          sortColumn={sort.column}\r\n          sortDirection={sort.type}\r\n          onColumnResize={(columnIndex, newWidth) => TreeUtils.handleColumnResize(displayColumns[columnIndex].key, newWidth, this)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTreeView.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        filterLeaves: PropTypes.bool.isRequired,\r\n        sortable: PropTypes.bool.isRequired,\r\n        treePathId: PropTypes.string.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import { Parser } from 'hot-formula-parser'\r\nimport TableHelper from './TableHelper';\r\n\r\n/**\r\n * Internal helper method: Build a result structure that signals an error.\r\n */\r\nfunction buildErrorResult(error) {\r\n  return {\r\n    error,\r\n    result: null\r\n  }\r\n}\r\n\r\n/**\r\n * Internal helper method: Build a result structure that contains a result value.\r\n */\r\nfunction buildValueResult(value) {\r\n  return {\r\n    error: null,\r\n    result: value\r\n  }\r\n}\r\n\r\n/**\r\n * Internal helper method: Sum up the values given as nested arrays of numbers or strings representing numbers.\r\n */\r\nfunction sumUpNestedValues(values) {\r\n  if (typeof values === 'number') return values;\r\n  if (typeof values === 'string') {\r\n    const number = Number.parseFloat(values);\r\n    if (Number.isNaN(number)) throw new Error(\"#NUM!\");\r\n    return number;\r\n  }\r\n  if (Array.isArray(values)) return values.reduce((previous, current) => previous + sumUpNestedValues(current), 0);\r\n  return 0;\r\n}\r\n\r\n\r\n/**\r\n * Evaluate the value of a cell in the given spreadsheet table. \r\n * \r\n * The cells table is an array of rows, with each row being an array of cells.\r\n * Indices start with 0.\r\n * Examples: \r\n *   - cellsTable[3][8] is the cell in the 9th column of the 4th row.\r\n * \r\n * The maxCellCoordinates parameter gives the coordinates of the cell in the lower \r\n * right corner of the cells table (i.e. the index of the last column in the last row).\r\n * \r\n * We assume that the cells table contains one header row (with column titles 'A', 'B', ...)\r\n * and one header column with row numbers (1, 2, 3, ...)\r\n * Therefore, cell references like A1, B1, C5 refer to cells in the cells table with an 'offset' of 1\r\n * to ignore the header row and column:\r\n * Examples: \r\n *  - A1 refers to data[1][1]. \r\n *  - B1 refers to data[1][2].\r\n *  - C5 refers to data[5][3].\r\n * \r\n * The cellToEvaluate parameter should not include this offset: \r\n * {row:0 , col: 0} should refer to cell A1 (=data[1][1]), {row:3, col:2} should refer to cell C5 (=data[5][3]).\r\n * \r\n * The evaluatedCellsList parameter should contain the indices of the cells that\r\n * are currently part of the evaluation stack (again including the offset). \r\n * The cellToEvaluate should not be part of that list yet. \r\n * We use this list to avoid an endless loop in case of a circular dependency.\r\n * \r\n * We return errors if we detect inconsistencies with the formulas:\r\n *  - #N/A: A reference beyond the borders of our data table was detected.\r\n *  - #REF!: A Circular dependency was detected.\r\n * \r\n * @param { [[string]]} cellsTable\r\n * @param { row: int, col: int} maxCellCoordinates\r\n * @param { row: int, col: int } cellToEvaluate\r\n * @param { [{ row: int, col: int}]} evaluatedCellsList\r\n * @returns { error: string, result: string} The evaluation result or an error.\r\n */\r\nexport default function evaluateCell(cellsTable, maxCellCoordinates, cellToEvaluate, evaluatedCellsList) {\r\n\r\n  const dataCellCoordinates = {\r\n    row: cellToEvaluate.row + 1,\r\n    col: cellToEvaluate.col + 1\r\n  }\r\n\r\n  // check coordinate ranges:\r\n  if (dataCellCoordinates.row < 1 || dataCellCoordinates.col < 1) {\r\n    return buildErrorResult('#N/A');\r\n  }\r\n  if (dataCellCoordinates.row > maxCellCoordinates.row || dataCellCoordinates.col > maxCellCoordinates.col) {\r\n    return buildErrorResult('#N/A');\r\n  }\r\n\r\n  // avoid endless loop in a circular dependeny:\r\n  if (evaluatedCellsList.find(candidate => candidate.row === cellToEvaluate.row && candidate.col === cellToEvaluate.col) !== undefined) {\r\n    return buildErrorResult('#REF!');\r\n  }\r\n\r\n  const cellContent = cellsTable[dataCellCoordinates.row][dataCellCoordinates.col];\r\n\r\n  // return cell content if cell does not contain a formula\r\n  if (!TableHelper.isFormula(cellContent)) {\r\n    return buildValueResult(cellContent);\r\n  }\r\n\r\n  // extract formula from cell content\r\n  const formula = cellContent.slice(1);\r\n\r\n  // evaluate formula \r\n  const extendedCellsList = evaluatedCellsList.slice();\r\n  extendedCellsList.push(cellToEvaluate);\r\n  const parser = new Parser();\r\n\r\n  parser.on('callCellValue', (referredCoordinates, done) => {\r\n    const recursiveResult = evaluateCell(cellsTable, maxCellCoordinates, {\r\n      row: referredCoordinates.row.index,\r\n      col: referredCoordinates.column.index\r\n    }, extendedCellsList);\r\n    if (recursiveResult.error !== null) {\r\n      throw new Error(recursiveResult.error);\r\n    }\r\n    return done(recursiveResult.result)\r\n  })\r\n\r\n  parser.on('callRangeValue', (startCellCoordinates, endCellCoordinates, done) => {\r\n    const resultRows = [];\r\n\r\n    for (let row = startCellCoordinates.row.index; row <= endCellCoordinates.row.index; row += 1) {\r\n      const resultRow = [];\r\n      for (let col = startCellCoordinates.column.index; col <= endCellCoordinates.column.index; col += 1) {\r\n        const recursiveResult = evaluateCell(cellsTable, maxCellCoordinates, {\r\n          row, col\r\n        }, extendedCellsList);\r\n        if (recursiveResult.error !== null) {\r\n          throw new Error(recursiveResult.error);\r\n        }\r\n        resultRow.push(recursiveResult.result);\r\n      }\r\n      resultRows.push(resultRow);\r\n    }\r\n    return done(resultRows)\r\n  })\r\n\r\n  /**\r\n   * Introduce German 'SUMME' function (calculates the sum of all given values).\r\n   */\r\n  parser.setFunction('SUMME', params => sumUpNestedValues(params));\r\n\r\n  return parser.parse(formula);\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CbaContainer from '../CbaContainer'\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport TableHelper from './TableHelper';\r\nimport evaluateCell from './CellEvaluator';\r\n\r\nexport default class CbaTable extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.runAllAvailableFormulas = this.runAllAvailableFormulas.bind(this);\r\n    this.notifyUpdateCellValue = this.notifyUpdateCellValue.bind(this);\r\n    this.notifyShowContent = this.notifyShowContent.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { config, path, runtime } = this.props;\r\n    runtime.eventEmitter.addListener(`${path}-cellFocused`, this.onCellFocused.bind(this));\r\n\r\n    if (config.isSpreadsheet) {\r\n      // register to cell-focused and content update events if you are spreadsheet table\r\n      runtime.eventEmitter.addListener(`${path}-contentUpdate`, this.onContentUpdate.bind(this));\r\n      runtime.eventEmitter.addListener(`${path}-removeOldSelection`, this.onRemoveOldSelection.bind(this));\r\n\r\n      // when the table is rendered we should see the values and not the formulas\r\n      this.runAllAvailableFormulas(true);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    const { runtime } = this.props;\r\n    runtime.eventEmitter.removeAllListeners();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  /**\r\n   * Used when component registers its state.\r\n   * @param {*} initialState \r\n   * @param {*} configProps \r\n   */\r\n  static addAttributesToInitialState(initialState, configProps) {\r\n    StateAttributeAccess.setSelectable(initialState, configProps.selectable);\r\n    if (configProps.isSpreadsheet) {\r\n      initialState.tableData = CbaTable.buildInitialData(configProps);\r\n      StateAttributeAccess.setComponentClassName(initialState, 'CbaTable');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the initial Table data as an array of arrays. \r\n   * The cells value is represented as string if available or empty string for not available cell data.\r\n   * @param {*} configProps \r\n   */\r\n  static buildInitialData(configProps) {\r\n    const data = [];\r\n    for (let i = 0; i < configProps.rows; i += 1) {\r\n      data.push([]);\r\n    }\r\n\r\n    configProps.cbaChildren.map((child, index) => {\r\n      data[child.config.row].push(child.config.text.label !== undefined ? child.config.text.label : \"\");\r\n      return false;\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * This is callback method registered as a listener for content update events triggered from cells or cell editor. \r\n   * The method update the table state accordingly and runs all the formulas at the end as one or more formula could rely on the changed cell value.\r\n   * @param {*} value \r\n   * @param {*} row \r\n   * @param {*} column \r\n   * @param {*} isReadOnly \r\n   */\r\n  onContentUpdate(value, row, column, isReadOnly) {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const data = StateAttributeAccess.extractTableData(pathState);\r\n\r\n    let isAnUpdate = false;\r\n    if (row !== undefined && column !== undefined) {\r\n      if (value !== undefined && data[row][column] !== value) {\r\n        isAnUpdate = true;\r\n        data[row][column] = value;\r\n        this.executeFormulaAndNotifyOthers(data, row, column, isReadOnly);\r\n      }\r\n    } else {\r\n      const selectedCell = StateAttributeAccess.extractSelectedCell(pathState);\r\n      if (selectedCell !== undefined && value !== undefined && data[selectedCell.row][selectedCell.column] !== value) {\r\n        isAnUpdate = true;\r\n        data[selectedCell.row][selectedCell.column] = value;\r\n        this.executeFormulaAndNotifyOthers(data, selectedCell.row, selectedCell.column, isReadOnly);\r\n      }\r\n\r\n    }\r\n    StateAttributeAccess.setTableData(pathState, data);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n\r\n    if (isAnUpdate) {\r\n      this.runAllAvailableFormulas();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes all the available formulas and notifies the cells when required.\r\n   * @param {*} isInitialization \r\n   */\r\n  runAllAvailableFormulas(isInitialization) {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const data = StateAttributeAccess.extractTableData(pathState);\r\n\r\n    for (let i = 1; i < data.length; i += 1) {\r\n      for (let j = 1; j < data[i].length; j += 1) {\r\n        if (TableHelper.isFormula(data[i][j])) {\r\n          const { valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow } = this.executeFormulaInternal(data, i, j);\r\n          this.notifyUpdateCellValue({\r\n            row: i, column: j\r\n          }, valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow, isInitialization);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  executeFormulaAndNotifyOthers(dataTable, row, column, isReadOnly) {\r\n    const { cellToUpdate, valueToUpdate, formulaToShow, isNotValidFormula, errorMessageToShow } = this.executeFormulaInternal(dataTable, row, column);\r\n    this.notifyUpdateCellValue(cellToUpdate, valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow);\r\n    this.notifyShowContent(formulaToShow, isNotValidFormula, isReadOnly, errorMessageToShow);\r\n  }\r\n\r\n  executeFormulaInternal(dataTable, row, column) {\r\n    const cellToUpdate = {\r\n      row, column\r\n    }\r\n    const formulaToShow = dataTable[row][column];\r\n\r\n    if (!TableHelper.isFormula(formulaToShow)) {\r\n      return {\r\n        cellToUpdate,\r\n        formulaToShow,\r\n        valueToUpdate: formulaToShow,\r\n        isNotValidFormula: false,\r\n        errorMessageToShow: undefined\r\n      }\r\n    }\r\n\r\n    const { config } = this.props;\r\n    const res = evaluateCell(\r\n      dataTable,\r\n      {\r\n        row: config.rows - 1, col: config.columns - 1\r\n      },\r\n      {\r\n        row: row - 1, col: column - 1\r\n      },\r\n      []\r\n    );\r\n    const hasError = res.error !== null;\r\n\r\n    return {\r\n      cellToUpdate,\r\n      formulaToShow,\r\n      valueToUpdate: CbaTable.buildResultString(hasError, res.result),\r\n      isNotValidFormula: hasError,\r\n      errorMessageToShow: hasError ? this.buildErrorMessage(res.error) : undefined\r\n    }\r\n\r\n  }\r\n\r\n  static buildResultString(hasError, resultValue) {\r\n    if (hasError) return \"###\";\r\n    if (resultValue === Infinity) return \"####\";\r\n    return resultValue;\r\n  }\r\n\r\n  buildErrorMessage(error) {\r\n    const { config } = this.props;\r\n    const { divByZeroError, naNError, syntaxError, circularError } = config;\r\n    switch (error) {\r\n      case '#DIV/0!':\r\n        return divByZeroError;\r\n      case '#VALUE!':\r\n        return naNError;\r\n      case '#REF!':\r\n        return circularError;\r\n      default:\r\n        return syntaxError;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method handles a cell focused event. \r\n   * It will forward address and content(value or formula) to the cell editor \r\n   * and will properly select the headers.\r\n   */\r\n  onCellFocused = (row, column, address, isReadOnly) => {\r\n    const { config, path, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    let currentSelection = StateAttributeAccess.extractSelectedCell(pathState);\r\n    let oldSelection = StateManagerHelper.deepCopy(currentSelection);\r\n\r\n    if (config.isSpreadsheet) {\r\n      const tableData = StateAttributeAccess.extractTableData(pathState);\r\n      const { cellToUpdate, valueToUpdate, formulaToShow, isNotValidFormula, errorMessageToShow } = this.executeFormulaInternal(tableData, row, column);\r\n      this.notifyShowAddress(address);\r\n      this.notifyShowContent(formulaToShow, isNotValidFormula, isReadOnly, errorMessageToShow);\r\n      this.notifyUpdateCellValue(cellToUpdate, valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow);\r\n    }\r\n\r\n\r\n    // handle header selection \r\n    ({ currentSelection, oldSelection } = this.handleHeaderSelection(currentSelection, row, column, oldSelection));\r\n\r\n    StateAttributeAccess.setOldSelectedCell(pathState, oldSelection);\r\n\r\n    if (currentSelection.row !== oldSelection.row || currentSelection.column !== oldSelection.column) {\r\n      this.notifyRemoveLastSelection(oldSelection);\r\n    }\r\n\r\n    StateAttributeAccess.setOldSelectedCell(pathState, oldSelection);\r\n    StateAttributeAccess.setSelectedCell(pathState, currentSelection);\r\n\r\n    const oldSelected = StateAttributeAccess.extractSelected(pathState);\r\n\r\n    StateAttributeAccess.setSelected(pathState, !oldSelected);\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n    RenderingHelper.triggerRenderingViaPath(path, runtime);\r\n\r\n  }\r\n\r\n  onRemoveOldSelection() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldSelection = StateAttributeAccess.extractOldSelectedCell(pathState);\r\n    this.notifyRemoveLastSelection(oldSelection);\r\n  }\r\n\r\n  notifyRemoveLastSelection(oldSelection) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-removeLastSelection-[${oldSelection.row},${oldSelection.column}]`);\r\n  }\r\n\r\n  notifyShowAddress(address) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-showAddress`, address);\r\n  }\r\n\r\n  notifyShowContent(value, isNotValidFormula, isReadOnly, errorMessageToShow) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-showContent`, value, isNotValidFormula, isReadOnly, errorMessageToShow);\r\n  }\r\n\r\n  notifyUpdateCellValue(cellToUpdate, value, isNotValidFormula, formulaToShow, errorMessageToShow, isInitialization) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-updateCellValue`, cellToUpdate, value, isNotValidFormula, formulaToShow, errorMessageToShow, isInitialization);\r\n  }\r\n\r\n  /**\r\n   * When a cell is selected its coresponding header cell will be highlighted.\r\n   * The current method is used for that purpose, it decides if row/column header selection changed and notifies them.\r\n   * @param {*} currentSelection \r\n   * @param {*} row \r\n   * @param {*} column \r\n   * @param {*} oldSelection \r\n   */\r\n  handleHeaderSelection(currentSelection, row, column, oldSelection) {\r\n    if (currentSelection === undefined && row !== undefined && column !== undefined) {\r\n      this.notifyRowHeaderUpdate(undefined, row);\r\n      this.notifyColumnHeaderUpdate(undefined, column);\r\n      currentSelection = {\r\n        row, column\r\n      };\r\n      oldSelection = currentSelection;\r\n    } else if (currentSelection.row !== row && currentSelection.column !== column) {\r\n      this.notifyRowHeaderUpdate(currentSelection.row, row);\r\n      this.notifyColumnHeaderUpdate(currentSelection.column, column);\r\n      currentSelection = {\r\n        row, column\r\n      };\r\n    } else if (currentSelection.row !== row) {\r\n      this.notifyRowHeaderUpdate(currentSelection.row, row);\r\n      currentSelection.row = row;\r\n    } else if (currentSelection.column !== column) {\r\n      this.notifyColumnHeaderUpdate(currentSelection.column, column);\r\n      currentSelection.column = column;\r\n    }\r\n    return {\r\n      currentSelection, oldSelection\r\n    };\r\n  }\r\n\r\n  notifyColumnHeaderUpdate(currentColumn, newColumn) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-columnHeaderUpdate`, currentColumn, newColumn);\r\n  }\r\n\r\n  notifyRowHeaderUpdate(currentRow, newRow) {\r\n    const { runtime, path } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-rowHeaderUpdate`, currentRow, newRow);\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n\r\n    return (\r\n      <CbaContainer\r\n        config={config}\r\n        path={path}\r\n        runtime={runtime}\r\n        orientation={orientation}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaTable.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        rows: PropTypes.number.isRequired,\r\n        columns: PropTypes.number.isRequired,\r\n        selectable: PropTypes.bool.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport Utils from '../../utils/Utils';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\nexport default class CbaTableCellEditor extends Component {\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { runtime } = this.props;\r\n    runtime.eventEmitter.addListener(`${this.buildAttachedTableIndexPath()}-showAddress`, this.onAddressUpdate);\r\n    runtime.eventEmitter.addListener(`${this.buildAttachedTableIndexPath()}-showContent`, this.onContentUpdate);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onChangeHandler = (event) => {\r\n    this.updateContent(event.target.value);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    // avoid container tracing \r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  onAddressUpdate = (value) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setCellEditorAddress(pathState, value);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onContentUpdate = (value, isNotValid, isReadOnly, errorMessage) => {\r\n    this.updateContent(value, isNotValid, isReadOnly, errorMessage);\r\n  }\r\n\r\n  updateContent(value, isNotValidFormula, isReadOnly, errorMessage) {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n\r\n    if (isNotValidFormula !== undefined) {\r\n      StateAttributeAccess.setCellEditorIsNotValid(pathState, isNotValidFormula);\r\n    }\r\n    if (errorMessage !== undefined) {\r\n      StateAttributeAccess.setCellEditorErrorMessage(pathState, errorMessage);\r\n    }\r\n    if (isReadOnly !== undefined) {\r\n      StateAttributeAccess.setCellEditorContentIsReadOnly(pathState, isReadOnly);\r\n    }\r\n\r\n    StateAttributeAccess.setCellEditorContent(pathState, value);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onKeyPressOnInput = (e) => {\r\n    const { runtime } = this.props;\r\n    if (e.key === 'Enter') {\r\n      runtime.eventEmitter.emit(`${this.buildAttachedTableIndexPath()}-contentUpdate`, e.target.value);\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method will compose the index path for the attached table, based on the current path.\r\n   */\r\n  buildAttachedTableIndexPath() {\r\n    const { config, path } = this.props;\r\n    const cellEditorPathWithoutLastPageSegment = IndexPathHelper.dropPageSegmentFromPath(path);\r\n    return IndexPathHelper.appendPageSegmentsToPath(cellEditorPathWithoutLastPageSegment, config.attachedTable);\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { adressTitle, contentTitle } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const address = StateAttributeAccess.extractCellEditorAddress(pathState);\r\n    const content = StateAttributeAccess.extractCellEditorContent(pathState);\r\n\r\n    const readOnly = StateAttributeAccess.extractCellEditorContentIsReadOnly(pathState);\r\n    const containerStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const addressWidth = config.cellAddressRelWidth * 100;\r\n    const contentWidth = 100 - addressWidth;\r\n    const addressrStyle = Utils.deepCopy(containerStyle);\r\n    addressrStyle.left = 0;\r\n    addressrStyle.top = 0;\r\n    addressrStyle.width = `${addressWidth}%`;\r\n    addressrStyle.height = '100%';\r\n    addressrStyle.boxSizing = \"border-box\";\r\n    addressrStyle.lineHeight = containerStyle.height;\r\n    addressrStyle.textAlign = \"center\";\r\n\r\n\r\n    const contentStyle = {\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: `${addressWidth}%`,\r\n      width: `${contentWidth}%`,\r\n      height: '100%',\r\n      boxSizing: 'border-box'\r\n    }\r\n\r\n    const isError = StateAttributeAccess.extractCellEditorIsNotValid(pathState);\r\n    const errorMessage = StateAttributeAccess.extractCellEditorErrorMessage(pathState);\r\n    const errorStyle = {\r\n      position: \"absolute\",\r\n      top: \"-2px\",\r\n      right: \"0\",\r\n      width: \"7px\",\r\n      height: \"8px\",\r\n      fontSize: \"8px\",\r\n      lineHeight: \"8px\",\r\n      backgroundColor: \"#d8424f\",\r\n      color: \"#fff\",\r\n      display: isError ? \"block\" : \"none\"\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={containerStyle}\r\n        data-cba-id={config.pageEditId}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaTableCellEditor\")}\r\n      >\r\n        <div style={addressrStyle} title={adressTitle}>\r\n          {address !== undefined ? address : ''}\r\n          <span style={errorStyle} title={errorMessage}>&#215;</span>\r\n        </div>\r\n        <input\r\n          style={contentStyle}\r\n          title={contentTitle}\r\n          onChange={this.onChangeHandler}\r\n          onKeyPress={this.onKeyPressOnInput}\r\n          onClick={this.onClickHandler}\r\n          type=\"text\"\r\n          value={content !== undefined ? content : ''}\r\n          readOnly={readOnly}\r\n          tabIndex={config.tabIndex}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaTableCellEditor.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.getStandardConfigPropTypes(false)\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from '../PropTypesHelper';\nimport CbaSimpleTextField from \"../CbaSimpleTextField\";\nimport RenderingHelper from '../RenderingHelper';\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\nimport IndexPathHelper from '../../state/IndexPathHelper';\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\nimport StateManagerHelper from '../../state/StateManagerHelper';\n\n/**\n * \n */\nexport default class CbaCalculatorHistory extends Component {\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n\n  static getSimpleTextFieldPath(path) {\n    return IndexPathHelper.appendIndexToPageSegment(path, 0);\n  }\n\n  static setDisplayValueInState(component, value) {\n    const myState = ComponentStateHelper.getState(component);\n    StateAttributeAccess.setTextValue(myState, value);\n    ComponentStateHelper.registerState(component, myState);\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n\n    const textValue = StateAttributeAccess.extractTextValue(ComponentStateHelper.getState(this));\n\n    // Set the new value for the CbaSimpleTextField that we use for display:\n    const simpleTextFieldPath = CbaCalculatorHistory.getSimpleTextFieldPath(path);\n    const simpleTextFieldState = runtime.componentStateManager.findOrBuildStateForPathId(simpleTextFieldPath, runtime);\n    StateAttributeAccess.setTextValue(simpleTextFieldState, textValue);\n    runtime.componentStateManager.registerStateByPathId(simpleTextFieldPath, simpleTextFieldState, runtime);\n\n    const simpleTextFieldConfig = StateManagerHelper.deepCopy(config);\n    simpleTextFieldConfig.userDefinedId = undefined;\n\n    return (\n      <CbaSimpleTextField\n        runtime={runtime}\n        path={simpleTextFieldPath}\n        config={simpleTextFieldConfig}\n        orientation={orientation}\n      />\n    );\n  }\n\n}\n\nCbaCalculatorHistory.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.getStandardConfigPropTypes(false)\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from '../PropTypesHelper';\nimport CbaSimpleTextField from '../CbaSimpleTextField';\nimport RenderingHelper from '../RenderingHelper';\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\nimport IndexPathHelper from '../../state/IndexPathHelper';\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\nimport StateManagerHelper from '../../state/StateManagerHelper';\n\n/**\n * \n */\nexport default class CbaCalculatorInput extends Component {\n\n  static keyboardShortcutsRegistered = 0;\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n\n    const { config } = this.props;\n    if (config.catchKeyboardInputEvents === true) {\n      if (!CbaCalculatorInput.keyboardShortcutsRegistered) {\n        document.addEventListener('keydown', this.keydown, false);\n        document.addEventListener('paste', this.paste, false);\n        // document.addEventListener('copy', this.copy, false);\n      }\n      CbaCalculatorInput.keyboardShortcutsRegistered += 1;\n    }\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n\n    const { config } = this.props;\n    if (config.catchKeyboardInputEvents === true) {\n      CbaCalculatorInput.keyboardShortcutsRegistered -= 1;\n      if (!CbaCalculatorInput.keyboardShortcutsRegistered) {\n        document.removeEventListener('keydown', this.keydown);\n        document.removeEventListener('paste', this.paste);\n        // document.removeEventListener('copy', this.copy);\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  keydown = (event) => {\n    // key press overrides the paste event\n    if (event.ctrlKey) {\n      return false;\n    } else {\n      event.preventDefault();\n      const { runtime } = this.props;\n      runtime.calculatorsManager.keypress(event.key);\n      return true;\n    }\n  }\n\n  paste = (event) => {\n    event.preventDefault();\n    const { runtime } = this.props;\n    runtime.calculatorsManager.paste(event.clipboardData.getData(\"Text\").toString());\n  }\n\n  static getSimpleTextFieldPath(path) {\n    return IndexPathHelper.appendIndexToPageSegment(path, 0);\n  }\n\n  static createDelegateComponent(component, path, type) {\n    const delegateComponent = StateManagerHelper.deepCopy(component);\n    delegateComponent.config.userDefinedId = undefined;\n    delegateComponent.type = type;\n    // Set the new value for the CbaSimpleTextField that we use for display:\n    const delegatePath = CbaCalculatorInput.getSimpleTextFieldPath(path);\n    return {\n      delegatePath, delegateComponent\n    };\n  }\n\n  static setDisplayValueInState(component, value) {\n    const myState = ComponentStateHelper.getState(component);\n    StateAttributeAccess.setTextValue(myState, value);\n    ComponentStateHelper.registerState(component, myState);\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n\n    const textValue = StateAttributeAccess.extractTextValue(ComponentStateHelper.getState(this));\n\n    const { delegatePath, delegateComponent } = CbaCalculatorInput.createDelegateComponent({\n      config\n    }, path, \"CbaSimpleTextField\");\n    const simpleTextFieldState = runtime.componentStateManager.findOrBuildStateForPathId(delegatePath, runtime);\n    StateAttributeAccess.setTextValue(simpleTextFieldState, textValue);\n    runtime.componentStateManager.registerStateByPathId(delegatePath, simpleTextFieldState, runtime);\n\n\n    return (\n      <CbaSimpleTextField\n        runtime={runtime}\n        path={delegatePath}\n        config={delegateComponent.config}\n        orientation={orientation}\n      />\n    );\n  }\n\n}\n\nCbaCalculatorInput.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        catchKeyboardInputEvents: PropTypes.bool.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport PropTypesHelper from './PropTypesHelper';\nimport RenderingHelper from './RenderingHelper';\nimport InputComponent from './InputComponent';\n\nexport default class CbaInputField extends Component {\n\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  focus = () => {\n    this.inputRef.current.focus();\n  }\n\n  onClickFrozenHandler = (event) => {\n    const { runtime, path } = this.props;\n    CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, 'InputField');\n    event.stopPropagation();\n  }\n\n  render() {\n    const { config, path, runtime, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selected = StateAttributeAccess.extractSelected(pathState);\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selected, orientation, runtime);\n\n    // override browser default padding value for textarea: \n    if (config.position.padding === undefined) {\n      CommonConfigHelper.setStyleAttribute(style, \"padding\", \"0px\");\n    }\n\n    CommonConfigHelper.setStyleAttribute(style, \"resize\", \"none\");\n\n    return (\n      <React.Fragment>\n        <textarea\n          style={style}\n          data-cba-id={config.pageEditId}\n          ref={this.inputRef}\n          title={CommonConfigHelper.buildTitle(config)}\n          disabled={StateAttributeAccess.extractDisabled(pathState)}\n          value={StateAttributeAccess.extractTextValue(pathState)}\n          onClick={event => InputComponent.onClickHandler(this, event)}\n          onContextMenu={event => InputComponent.onContextMenuHandler(this, event)}\n          onChange={event => InputComponent.onChangeHandler(this, event, 'InputFieldModified', 'InputField_onChange')}\n          onSelect={event => InputComponent.onSelectionHandler(this, event, 'InputField')}\n          onFocus={event => InputComponent.onFocusHandler(this, event)}\n          onBlur={event => InputComponent.onBlurHandler(this, event)}\n          onCut={event => InputComponent.onCutCopyPaste(this, event)}\n          onCopy={event => InputComponent.onCutCopyPaste(this, event)}\n          onPaste={event => InputComponent.onCutCopyPaste(this, event)}\n          readOnly={config.readOnly}\n          tabIndex={config.tabIndex}\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaInputField\")}\n          spellCheck={config.spellCheck}\n        />\n        {StateAttributeAccess.extractDisabled(pathState) && <div className=\"CbaInputField-mask\" onClick={e => this.onClickFrozenHandler(e)} onContextMenu={e => e.preventDefault()} style={CommonConfigHelper.buildStyleForMask(style)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\n\nCbaInputField.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        validationPattern: PropTypes.string,\n        validationFailEvent: PropTypes.string,\n        sourceInputPath: PropTypes.string\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n}\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\n\r\n\r\nexport default class CbaStopWatch extends Component {\r\n\r\n  state = {\r\n    counterValue: moment(new Date(0, 0, 0, 0, 0, 0))\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n    this.reinitialiseState();\r\n    this.timer = this.startTimer();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n    this.setCounterValueToState();\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  setCounterValueToState = () => {\r\n    const { counterValue } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setCounterValue(pathState, counterValue);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n  }\r\n\r\n  reinitialiseState = () => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const rawInitialCounterValue = StateAttributeAccess.extractCounterValue(pathState);\r\n    const initialCounterValue = rawInitialCounterValue ? moment(rawInitialCounterValue) : null;\r\n\r\n    if (initialCounterValue) {\r\n      this.setState((prevState) => {\r\n        const { counterValue } = prevState;\r\n        counterValue.add(initialCounterValue.hours(), 'hours');\r\n        counterValue.add(initialCounterValue.minutes(), 'minutes');\r\n        counterValue.add(initialCounterValue.seconds(), 'seconds');\r\n\r\n        return {\r\n          counterValue\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  startTimer = () => setInterval(() => {\r\n    this.setState((prevState) => {\r\n      const { counterValue } = prevState;\r\n\r\n      counterValue.add(1, 'seconds');\r\n\r\n      return {\r\n        counterValue\r\n      }\r\n    })\r\n  }, 1000);\r\n\r\n  formatTime = (counterValue) => {\r\n    const withHoursFormat = 'HH:mm:ss';\r\n    const withoutHoursFormat = 'mm:ss';\r\n\r\n    return !counterValue.hours() ? counterValue.format(withoutHoursFormat) : counterValue.format(withHoursFormat);\r\n  }\r\n\r\n  handleTaskPauseOrResume = (enterPause) => {\r\n    window.clearInterval(this.timer);\r\n\r\n    if (!enterPause) {\r\n      this.timer = this.startTimer();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n    const { counterValue } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const pressedState = StateAttributeAccess.extractSelected(pathState);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, pressedState, orientation, runtime);\r\n\r\n    return (\r\n      <div\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"centerVerticalHorizontal\")}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n      >\r\n        {this.formatTime(counterValue)}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaStopWatch.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(PropTypesHelper.getStandardConfigPropTypes(false)).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Slider from 'react-rangeslider'\r\n\r\n// To include the default styles\r\n// import 'react-rangeslider/lib/index.css'\r\nimport './slider.css'\r\nimport '../CbaRichTextField/css/repeatable.css';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\nclass CbaScaleValueInput extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.scaleValueInput = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { path, runtime } = this.props;\r\n    RenderingHelper.onMount(this);\r\n    this.subscription = runtime.eventEmitter.addListener(`${path}-incrementScale`, this.onIncrementScale.bind(this));\r\n\r\n    if (this.scaleValueInput.current) {\r\n      // set tabindex on 3rd party component slider.\r\n      // later edit, added the -1 to disable completly. This blocks tabbing across elements on the page if left to default\r\n      this.scaleValueInput.current.querySelector(\".rangeslider__handle\").tabIndex = -1 // should be config.tabIndex but does not work due to 3rd part implementation\r\n    }\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    this.subscription.remove();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    if (!pathState.disabled) {\r\n      const { config, path, runtime } = this.props;\r\n      CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, undefined, event, runtime);\r\n      CommonActionsHelper.doPageSwitchForComponent(this);\r\n    } else {\r\n      CommonActionsHelper.stopEventPropagation(event);\r\n    }\r\n  }\r\n\r\n  onChangeCompleteHandler = ()  => {\r\n    const { config, runtime } = this.props;\r\n    CommonActionsHelper.sendStandardEvent(config, runtime);\r\n  }\r\n\r\n  onChangeHandler = (value) => {\r\n    const { config, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    value = this.validateValue(value);\r\n    if (pathState.disabled || Number.isNaN(value)) {\r\n      // we should not update the statemachine variable with NaN value \r\n      return;\r\n    }\r\n\r\n    const { taskManager, variableManager, replayStepMonitor } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const oldValue = variableManager.getVariable(currentTaskId, variableName);\r\n\r\n    if (oldValue !== value) {\r\n      // set new variable only if a change occurs\r\n      variableManager.setVariable(currentTaskId, variableName, value, \"integer\", runtime);\r\n      replayStepMonitor.incrementReplayStep();\r\n      RenderingHelper.triggerRendering(this);\r\n    }\r\n  }\r\n\r\n  onKeyDownHandler = (e) => {\r\n    const { config, runtime } = this.props;\r\n    const { pageIncrement, minValue, maxValue } = config;\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n\r\n    if (e.keyCode === 33) {\r\n      let newValue = value + pageIncrement;\r\n      newValue = newValue > maxValue ? maxValue : newValue;\r\n      this.onChangeHandler(newValue);\r\n      this.onChangeCompleteHandler();\r\n      e.preventDefault();\r\n    }\r\n    if (e.keyCode === 34) {\r\n      let newValue = value - pageIncrement;\r\n      newValue = newValue < minValue ? minValue : newValue;\r\n      this.onChangeHandler(newValue);\r\n      this.onChangeCompleteHandler();\r\n      e.preventDefault();\r\n    }\r\n\r\n    // call the change complete handler for Arrow Keys - the actual logic is handled by the changeHandler\r\n    if ((e.keyCode === 37) || (e.keyCode === 38) || (e.keyCode === 39) || (e.keyCode === 40)) {\r\n      this.onChangeCompleteHandler();\r\n    }\r\n  }\r\n\r\n  onIncrementScale = (incrementValue) => {\r\n    const { config, runtime } = this.props;\r\n    const { minValue, maxValue } = config;\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n\r\n    const newValue = value + incrementValue;\r\n    let incrementedValue = newValue > maxValue ? maxValue : newValue;\r\n    incrementedValue = incrementedValue < minValue ? minValue : incrementedValue;\r\n    this.onChangeHandler(incrementedValue);\r\n  }\r\n\r\n  validateValue = (value, minValue, maxValue) => {\r\n    let numberValue = parseInt(value, 10);\r\n    numberValue = numberValue < minValue ? minValue : numberValue;\r\n    numberValue = numberValue > maxValue ? maxValue : numberValue;\r\n    return numberValue;\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { minValue, maxValue, stepIncrement, thumbSize, isHorizontal } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    let value = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\r\n    value = this.validateValue(value, minValue, maxValue);\r\n    const horizontal = `rangeslider-horizontal sliderHandleWidth${thumbSize}`;\r\n    const vertical = `rangeslider-vertical sliderHandleHeight${thumbSize}`;\r\n    const orientationClass = isHorizontal ? horizontal : vertical;\r\n\r\n    const additionalCssClass = `${orientationClass} ${pathState.disabled ? \"disabled\" : \"\"}`;\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        title={pathState.disabled ? undefined : CommonConfigHelper.buildTitle(config)}\r\n        onKeyDown={this.onKeyDownHandler}\r\n        onClickCapture={this.onClickHandler}\r\n        ref={this.scaleValueInput}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n      >\r\n        <Slider\r\n          className={additionalCssClass}\r\n          min={minValue}\r\n          max={maxValue}\r\n          tooltip={false}\r\n          step={stepIncrement}\r\n          value={value}\r\n          orientation={isHorizontal ? \"horizontal\" : \"vertical\"}\r\n          onChange={this.onChangeHandler}\r\n          onChangeComplete={this.onChangeCompleteHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaScaleValueInput.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape().isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CbaScaleValueInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport NumericInput from 'react-numeric-input';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport { debounce } from 'lodash';\r\n\r\nclass CbaSpinnerValueInput extends Component {\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    if (!pathState.disabled) {\r\n      CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n    } else {\r\n      CommonActionsHelper.stopEventPropagation(event);\r\n    }\r\n  }\r\n\r\n  onChangeHandlerDebounced = debounce((value) => {\r\n    this.onChangeHandler(value);\r\n  }, 2000);\r\n\r\n  onChangeHandler = (value) => {\r\n    const { config, runtime } = this.props;\r\n    const { minValue, maxValue } = config;\r\n    if (value !== null) {\r\n      const { taskManager, variableManager, replayStepMonitor } = runtime;\r\n      const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n      const variableName = config.text.dynamic.variable;\r\n\r\n      replayStepMonitor.incrementReplayStep();\r\n      value = this.validateValue(value, minValue, maxValue);\r\n      variableManager.setVariable(currentTaskId, variableName, value, \"integer\", runtime);\r\n    }\r\n\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onInvalidHandler = (errorMessage, valueAsNumber, valueAsString) => {\r\n    // Issue with invalid handler within library - the function is not called\r\n    // see https://github.com/vlad-ignatov/react-numeric-input/issues/114\r\n    if (errorMessage !== undefined) {\r\n      const { config, runtime } = this.props;\r\n      const variableName = config.text.dynamic.variable;\r\n      const { taskManager, variableManager } = runtime;\r\n      const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n      const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n\r\n      this.onChangeHandler(value);\r\n    }\r\n  }\r\n\r\n  onKeyDownHandler = (e) => {\r\n    const { config, runtime } = this.props;\r\n    const { pageIncrement, minValue, maxValue } = config;\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n    let newValue = value;\r\n\r\n    // PageUp keyCode\r\n    if (e.keyCode === 33) {\r\n      newValue = value + pageIncrement;\r\n      newValue = newValue > maxValue ? maxValue : newValue;\r\n    }\r\n    // PageDown keyCode\r\n    if (e.keyCode === 34) {\r\n      newValue = value - pageIncrement;\r\n      newValue = newValue < minValue ? minValue : newValue;\r\n    }\r\n    // ArrowUp keyCode\r\n    if (e.keyCode === 38) {\r\n      newValue = value + 1;\r\n      newValue = newValue > maxValue ? maxValue : newValue;\r\n    }\r\n    // ArrowDown keyCode\r\n    if (e.keyCode === 40) {\r\n      newValue = value - 1;\r\n      newValue = newValue < minValue ? minValue : newValue;\r\n    }\r\n\r\n    // For all special KeyCodes above, trigger manually the onChangeHandler and prevent the default onChange delayed code\r\n    if ((e.keyCode === 33) || (e.keyCode === 34) || (e.keyCode === 38) || (e.keyCode === 40)) {\r\n      this.onChangeHandler(newValue);\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  onInputHandler = (e) => {\r\n    const inputValue = e.target.value;\r\n    const regex = /(-)?[0-9]*\\.?[0-9]*/g;\r\n\r\n    if (regex.test(inputValue)) {\r\n      this.onChangeHandlerDebounced(inputValue);\r\n    }\r\n  }\r\n\r\n  validateValue = (value, minValue, maxValue) => {\r\n    let numberValue = parseInt(value, 10);\r\n    numberValue = numberValue < minValue ? minValue : numberValue;\r\n    numberValue = numberValue > maxValue ? maxValue : numberValue;\r\n    return numberValue;\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { minValue, maxValue, stepIncrement } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    let value = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\r\n    value = this.validateValue(value, minValue, maxValue);\r\n    const childStyle = {\r\n      wrap: {\r\n        position: 'unset',\r\n        display: 'unset'\r\n      },\r\n      input: {\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: 'inherit',\r\n        fontFamily: 'inherit',\r\n        fontSize: 'inherit',\r\n        fontWeight: 'inherit',\r\n        fontStyle: 'inherit',\r\n        color: 'inherit'\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n        onKeyDown={this.onKeyDownHandler}\r\n        onClickCapture={this.onClickHandler}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n      >\r\n        <NumericInput\r\n          style={childStyle}\r\n          disabled={pathState.disabled}\r\n          min={minValue}\r\n          max={maxValue}\r\n          value={value}\r\n          step={stepIncrement}\r\n          onChange={this.onChangeHandlerDebounced}\r\n          onInvalid={this.onInvalidHandler}\r\n          tabIndex={config.tabIndex}\r\n          onInput={this.onInputHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaSpinnerValueInput.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape().isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CbaSpinnerValueInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\n\r\nimport './CbaTimer.css';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\n\r\nconst ROW = \"row\";\r\nconst COLUMN_REVERSE = \"column-reverse\";\r\n\r\nconst requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame\r\n  || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\r\n\r\nconst cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;\r\n\r\nexport default class CbaTimer extends Component {\r\n\r\n  state = {\r\n    value: '0%'\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    this.setTimerType();\r\n    this.timer = requestAnimationFrame(this.timerAnimation);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    cancelAnimationFrame(this.timer);\r\n    this.timer = null;\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  timerAnimation = () => {\r\n    const { runtime, config } = this.props;\r\n    const { timerEvent, runForward } = config;\r\n    const timerData = runtime.statemachinesManager.getTimerData(timerEvent);\r\n\r\n    if (this.timer) {\r\n      const percentage = this.computeTimerPercentage(timerData, runForward);\r\n\r\n      this.setState({\r\n        value: `${percentage}%`\r\n      });\r\n\r\n      requestAnimationFrame(this.timerAnimation);\r\n    }\r\n  }\r\n\r\n  setTimerType = () => {\r\n    const { config } = this.props;\r\n    const { verticalOrientation, runForward } = config;\r\n    this.timerType = this.computeTimerType(verticalOrientation, runForward);\r\n  }\r\n\r\n  computeTimerType = (verticalOrientation) => {\r\n    if (verticalOrientation) return COLUMN_REVERSE;\r\n    if (!verticalOrientation) return ROW;\r\n\r\n    console.error(\"Timer Flags not ok\", verticalOrientation);\r\n    return null;\r\n  }\r\n\r\n  computeTimerValue = time => ({\r\n    seconds: time ? Math.ceil(time / 1000) : 0,\r\n    miliseconds: time ? (time % 1000) : null\r\n  });\r\n\r\n  computeTimerPercentage = (timerData, runForward) => {\r\n    const { totalTime, remainingTime, isRunning } = timerData;\r\n    let percentage;\r\n\r\n    if (!isRunning && !remainingTime) {\r\n      percentage = 0;\r\n    } else {\r\n      percentage = ((remainingTime * 100) / totalTime);\r\n    }\r\n\r\n    if (runForward) {\r\n      percentage = 100 - percentage;\r\n    }\r\n\r\n    return percentage.toFixed(2);\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n    const { value } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const pressedState = StateAttributeAccess.extractSelected(pathState);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, pressedState, orientation, runtime);\r\n    const { timerEvent, showSecondsLabel } = config;\r\n\r\n    const timerStyleDirection = (this.timerType === ROW) ? \"width\" : \"height\";\r\n    const animationStyle = {\r\n      [timerStyleDirection]: value\r\n    }\r\n\r\n    const timerData = runtime.statemachinesManager.getTimerData(timerEvent);\r\n    const timerParsedValue = this.computeTimerValue(timerData.remainingTime);\r\n\r\n    return (\r\n      <div\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, `cba-timer-wrap ${this.timerType}`)}\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n      >\r\n        <div className=\"cba-timer-animation\" style={animationStyle} />\r\n        {showSecondsLabel ? <span className=\"cba-timer-secondsLabel\">{timerParsedValue.seconds}</span> : null}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTimer.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(PropTypesHelper.getStandardConfigPropTypes(false)).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CbaList.css'\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\n\r\n\r\nfunction ListItem(props) {\r\n  const { config, selectedIds, index, itemHeight, onClickHandler, parentTabIndex } = props;\r\n  const selectedBackgroundColor = \"-webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(88, 130, 181)), to(rgb(65, 102, 147))), rgb(0, 88, 159)\";\r\n  const additionalCssClass = selectedIds.includes(index) ? \"listItemNoHover\" : \"listItem\";\r\n  // accesibility event for tab navigation\r\n  function onKeyDown(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      onClickHandler(event, index);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={CommonConfigHelper.getCssClassNamesValue(config, additionalCssClass)}\r\n      style={{\r\n        height: itemHeight,\r\n        background: selectedIds.includes(index) ? selectedBackgroundColor : config.background\r\n      }}\r\n      onClick={event => onClickHandler(event, index)}\r\n      onKeyDown={event => onKeyDown(event)}\r\n      tabIndex={parentTabIndex}\r\n    >\r\n      <div className=\"listItemChild\">\r\n        {config.text}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nListItem.propTypes = {\r\n  config: PropTypes.object.isRequired,\r\n  selectedIds: PropTypes.array.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  itemHeight: PropTypes.number.isRequired,\r\n  onClickHandler: PropTypes.func.isRequired,\r\n  parentTabIndex: PropTypes.number.isRequired\r\n};\r\n\r\nexport default ListItem;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess'\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport './CbaList.css'\r\nimport ListItem from './ListItem';\r\n\r\n/**\r\n * A display component that displays a list.\r\n * \r\n * This component manages the items in the list as children of its own \r\n * in the display component instances tree.\r\n */\r\nexport default class CbaList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.comboRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  // basic state management --------------------------------------------------------------\r\n\r\n  static getItemType() {\r\n    return 'ListItem';\r\n  }\r\n\r\n  /**\r\n   * Build an array of 'standard' configuration structures for the items in the items list.\r\n   * The page configurations manager expects a structure with the attributes 'type' and 'config'. \r\n   * When accessing this structure the state manager expects a config.state object as a minimum. \r\n   */\r\n  static buildListItemsArray(itemsInConfig) {\r\n    return itemsInConfig.map((itemInConfig, index, all) => {\r\n      const configOnPathSegment = StateManagerHelper.deepCopy(itemInConfig);\r\n      const additionalState = {}\r\n      StateAttributeAccess.setSelected(additionalState, false);\r\n      StateAttributeAccess.setDisabled(additionalState, false);\r\n      StateAttributeAccess.setHidden(additionalState, false);\r\n      configOnPathSegment.state = additionalState;\r\n      return {\r\n        type: CbaList.getItemType(),\r\n        config: configOnPathSegment\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the disabled status stored in state\r\n   */\r\n  getDisabledFromState = () => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    return StateAttributeAccess.extractDisabled(pathState);\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns the array of selected ids stored in state\r\n   */\r\n  getSelectedIdsFromState = () => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    return StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the selected settings for all list items to reflect\r\n   * the currently selected items. \r\n   */\r\n  setSelectedIdInState = (newSelectedId, isCtrlKeyEvent) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    let selectedIds = StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n    const selectGroupControllerState = StateAttributeAccess.extractSelectGroupControllerState(pathState);\r\n    if (!isCtrlKeyEvent) {\r\n      // clear the previous selections\r\n      selectedIds = [];\r\n    }\r\n\r\n    if (selectGroupControllerState !== undefined\r\n      && (selectGroupControllerState.singleSelectActive\r\n      || !isCtrlKeyEvent)) {\r\n      selectedIds[0] = newSelectedId;\r\n    } else if (selectedIds.includes(newSelectedId)) {\r\n      selectedIds = selectedIds.filter(value => value !== newSelectedId)\r\n    } else {\r\n      selectedIds.push(newSelectedId);\r\n    }\r\n    StateAttributeAccess.setSelectedIds(pathState, selectedIds);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n  }\r\n\r\n  // handle user triggered events ----------------------------------------------------------------\r\n\r\n  onClickHandler = (event, index) => {\r\n    const { runtime, config, path } = this.props;\r\n    const disabled = this.getDisabledFromState();\r\n    if (disabled === false) {\r\n      const selectedIds = this.getSelectedIdsFromState();\r\n      const oldSelectedId = selectedIds[selectedIds.length - 1];\r\n      const newSelectedId = parseInt(index, 10);\r\n      const oldSelectedItem = config.items[oldSelectedId];\r\n      const newSelectedItem = config.items[newSelectedId];\r\n\r\n      runtime.replayStepMonitor.incrementReplayStep();\r\n      this.updateStateAndTriggerRendering(newSelectedId, event);\r\n\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, CbaList.buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId), event, runtime);\r\n      CommonActionsHelper.sendStandardEvent(newSelectedItem, runtime);\r\n      const defaultLinkReceiver = CommonActionsHelper.getDefaultLinkReceiver(this);\r\n      CommonActionsHelper.doPageSwitch(newSelectedItem.link, runtime, defaultLinkReceiver, path);\r\n    } else {\r\n      CommonActionsHelper.doStandardOnFrozenInteraction(path, runtime, 'ListItem');\r\n    }\r\n\r\n    event.stopPropagation();\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  static buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId) {\r\n    // the first selection will not have an old selected id\r\n    return {\r\n      oldSelected: oldSelectedId,\r\n      oldSelectedUserDefId: oldSelectedItem !== undefined ? oldSelectedItem.userDefinedId : undefined,\r\n      newSelected: newSelectedId,\r\n      newSelectedUserDefId: newSelectedItem.userDefinedId\r\n    };\r\n  }\r\n\r\n  updateStateAndTriggerRendering = (newSelectedId, event) => {\r\n    const { runtime, path } = this.props;\r\n    this.setSelectedIdInState(newSelectedId, event.ctrlKey);\r\n    RenderingHelper.triggerRenderingViaPath(path, runtime);\r\n  }\r\n\r\n\r\n  // rendering ---------------------------------------------------------------------------------------\r\n\r\n  checkForInvalidItems = () => {\r\n    const { config } = this.props;\r\n    const { items } = config;\r\n    return !Array.isArray(items) || (Array.isArray(items) && items.length === 0);\r\n  }\r\n\r\n  generateOptions = (itemsConfig, selectedIds, itemHeight, listPath, tabIndex) => itemsConfig.map((itemConfig, mapIndex) => {\r\n    const itemPath = IndexPathHelper.appendIndexToPageSegment(listPath, mapIndex)\r\n    return (\r\n      <ListItem\r\n        key={itemPath}\r\n        config={itemConfig}\r\n        selectedIds={selectedIds}\r\n        itemHeight={itemHeight}\r\n        onClickHandler={this.onClickHandler}\r\n        index={mapIndex}\r\n        parentTabIndex={tabIndex}\r\n      />\r\n    )\r\n  })\r\n\r\n  render() {\r\n    if (this.checkForInvalidItems()) {\r\n      return React.createElement(\r\n        'div',\r\n        null,\r\n        `Invalid item configuration for list.`\r\n      );\r\n    }\r\n\r\n\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const selectedIds = this.getSelectedIdsFromState() || [];\r\n    const options = this.generateOptions(config.items, selectedIds, config.font.size * 1.9, path, config.tabIndex);\r\n\r\n    return (\r\n      <div\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"list-container\")}\r\n        style={wrapperStyle}\r\n        data-cba-id={config.pageEditId}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n      >\r\n        <div className=\"list\">\r\n          {options}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nCbaList.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\r\n      {\r\n        items: PropTypes.array.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CbaContainer from './CbaContainer';\r\nimport CbaRectangle from './CbaRectangle';\r\nimport CbaSingleLineInputField from './CbaSingleLineInputField';\r\nimport CbaSimpleTextField from './CbaSimpleTextField';\r\nimport CbaButton from './CbaButton';\r\nimport CbaRadioButton from './CbaRadioButton';\r\nimport CbaCheckbox from './CbaCheckbox';\r\nimport CbaLink from './CbaLink';\r\nimport CbaPageArea from './CbaPageArea';\r\nimport CbaRegionMap from './CbaRegionMap';\r\nimport CbaInnerHtml from './CbaInnerHtml';\r\nimport CbaRichTextField from './CbaRichTextField/CbaRichTextField';\r\nimport CbaComboBox from './CbaComboBox';\r\nimport CbaMedia from './media/CbaMedia';\r\nimport CbaExternalPageFrame from './CbaExternalPageFrame';\r\nimport CbaTree from './CbaTree/CbaTree';\r\nimport CbaTreeChildArea from './CbaTree/CbaTreeChildArea';\r\nimport CbaTreeView from './CbaTree/CbaTreeView';\r\nimport CbaTable from './table/CbaTable';\r\nimport CbaTableCell from './table/CbaTableCell';\r\nimport CbaTableCellEditor from './table/CbaTableCellEditor';\r\nimport CbaCalculatorHistory from './calculator/CbaCalculatorHistory';\r\nimport CbaCalculatorInput from './calculator/CbaCalculatorInput';\r\nimport CbaInputField from './CbaInputField';\r\nimport CbaStopWatch from './CbaTimer/CbaStopWatch';\r\nimport CbaScaleValueInput from './variable/CbaScaleValueInput';\r\nimport CbaSpinnerValueInput from './variable/CbaSpinnerValueInput';\r\nimport CbaTimer from './CbaTimer/CbaTimer';\r\nimport CbaList from './list/CbaList';\r\n\r\nexport default class CbaInterpreter extends Component {\r\n\r\n\r\n  static getComponentClass(componentTypeName) {\r\n    switch (componentTypeName) {\r\n      case 'CbaContainer':\r\n        return CbaContainer;\r\n      case 'CbaRectangle':\r\n        return CbaRectangle;\r\n      case 'CbaSingleLineInputField':\r\n        return CbaSingleLineInputField;\r\n      case 'CbaSimpleTextField':\r\n        return CbaSimpleTextField;\r\n      case 'CbaButton':\r\n        return CbaButton;\r\n      case 'CbaRadioButton':\r\n        return CbaRadioButton;\r\n      case 'CbaCheckbox':\r\n        return CbaCheckbox;\r\n      case 'CbaLink':\r\n        return CbaLink;\r\n      case 'CbaPageArea':\r\n        return CbaPageArea;\r\n      case 'CbaRegionMap':\r\n        return CbaRegionMap;\r\n      case 'CbaInnerHtml':\r\n        return CbaInnerHtml;\r\n      case 'CbaRichTextField':\r\n        return CbaRichTextField;\r\n      case 'CbaComboBox':\r\n        return CbaComboBox;\r\n      case 'CbaExternalPageFrame':\r\n        return CbaExternalPageFrame;\r\n      case 'CbaMedia':\r\n        return CbaMedia;\r\n      case 'CbaTree':\r\n        return CbaTree;\r\n      case 'CbaTreeChildArea':\r\n        return CbaTreeChildArea;\r\n      case 'CbaTreeView':\r\n        return CbaTreeView;\r\n      case 'CbaTable':\r\n        return CbaTable;\r\n      case 'CbaTableCell':\r\n        return CbaTableCell;\r\n      case 'CbaTableCellEditor':\r\n        return CbaTableCellEditor;\r\n      case 'CbaCalculatorInput':\r\n        return CbaCalculatorInput;\r\n      case 'CbaCalculatorHistory':\r\n        return CbaCalculatorHistory;\r\n      case 'CbaInputField':\r\n        return CbaInputField;\r\n      case 'CbaStopWatch':\r\n        return CbaStopWatch;\r\n      case 'CbaTimer':\r\n        return CbaTimer;\r\n      case 'CbaScaleValueInput':\r\n        return CbaScaleValueInput\r\n      case 'CbaSpinnerValueInput':\r\n        return CbaSpinnerValueInput;\r\n      case 'CbaList':\r\n        return CbaList;\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { type, content } = config;\r\n\r\n    // Take care: This variable has to be capitalized for <Delegate .../> to work!\r\n    const Delegate = CbaInterpreter.getComponentClass(type);\r\n\r\n    if (Delegate === undefined) {\r\n      switch (type) {\r\n        case 'PlainText':\r\n          return React.createElement(\r\n            'div',\r\n            null,\r\n            content\r\n          );\r\n        default:\r\n          console.error(`Interpreter does not know component type ${type}`);\r\n          return React.createElement(\r\n            'div',\r\n            null,\r\n            `Interpreter does not know component type: ${type}`\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <Delegate\r\n          config={config.config}\r\n          path={path}\r\n          runtime={runtime}\r\n          orientation={orientation}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n\r\nCbaInterpreter.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape({\r\n    type: PropTypes.string.isRequired,\r\n    config: PropTypes.object,\r\n    content: PropTypes.string\r\n  }).isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n}\r\n","import React, { Component } from 'react';\nimport SplitPane from 'react-split-pane';\nimport PropTypes from 'prop-types';\nimport { HotKeys } from 'react-hotkeys';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaInterpreter from './CbaInterpreter';\nimport { SCORING, TRACING, STATE_MACHINE, ModalDialog } from \"../dialog/ModalManager\";\nimport Utils from \"../utils/Utils\";\nimport DialogPresenter from \"../dialog/DialogPresenter\"\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\n\nexport default class CbaTestPresenter extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isDialogOpen: false,\n      currentModal: '',\n      currentModalTitle: '',\n      currentModalContent: {},\n      isPaused: false\n    };\n\n    // TODO: Drop this reference in the runtime once we have merged the static modal dialogs into the DialogPresenter:\n    //       The SpecialClickActionsHelper would use the DialogPresenter instead of the CbaTestPresenter then and the DialogPresenter is in the runtime already. \n    props.runtime.testPresenter = this;\n\n  }\n\n  openDialog = (modalType, windowTitle, currentModalContent) => {\n    this.setState({\n      isDialogOpen: true,\n      currentModal: modalType,\n      currentModalTitle: windowTitle,\n      currentModalContent\n    });\n  }\n\n  handleClose = () => this.setState({\n    isDialogOpen: false\n  });\n\n  pause = () => this.setState({\n    isPaused: true\n  })\n\n  resume = () => this.setState({\n    isPaused: false\n  })\n\n  generateTaskStyles = cssStyles => (\n    /**\n     * Handles insertion of CSS defined by an item author #5327\n     */\n    // eslint-disable-next-line react/no-danger\n    <style dangerouslySetInnerHTML={\n      {\n        __html: cssStyles\n      }\n    }\n    />\n  );\n\n  static findPageForPageName(pageName, runtime) {\n    if (pageName === undefined) {\n      return undefined;\n    }\n\n    const page = runtime.pageConfigurationsManager.findPage(pageName);\n    if (page === undefined) {\n      console.error(`Could not find page with name ${pageName}`);\n    }\n    return page;\n  }\n\n  static buildPathForPage(pageName, pageAreaName, runtime) {\n    if (pageName === undefined) {\n      return undefined;\n    }\n\n    return IndexPathHelper.appendPageSegmentToPathRoot(\n      runtime.taskManager.getCurrentStatePathRoot(),\n      'main',\n      pageAreaName,\n      IndexPathHelper.buildPageSegment(pageName)\n    );\n  }\n\n  static isRightToLeftPage(page) {\n    if (page === undefined) return undefined;\n    return page.isRightToLeft;\n\n  }\n\n  static getPagePosition(page) {\n    if (page === undefined) return undefined;\n    if (page.content === undefined) return undefined;\n    if (page.content.config === undefined) return undefined;\n    return page.content.config.position;\n\n  }\n\n  static getPageWidth(page, defaultWidth) {\n    const position = CbaTestPresenter.getPagePosition(page);\n    return (position === undefined) ? defaultWidth : (position.width + position.x);\n  }\n\n  static getPageHeight(page, defaultHeight) {\n    const position = CbaTestPresenter.getPagePosition(page);\n    return (position === undefined) ? defaultHeight : (position.height + position.y);\n  }\n\n  static getDividerConfig(itemLayout) {\n    if (itemLayout === undefined) return undefined;\n    return itemLayout.divider;\n  }\n\n  static getDividerWidth(itemLayout) {\n    const divider = CbaTestPresenter.getDividerConfig(itemLayout);\n    if (divider === undefined) return 0;\n    return divider.width === undefined ? 0 : divider.width;\n  }\n\n  static getDividerColor(itemLayout) {\n    const divider = CbaTestPresenter.getDividerConfig(itemLayout);\n    if (divider === undefined) return 'rgb(0,0,0,1)';\n    return divider.color === undefined ? 'rgb(0,0,0,1)' : divider.color;\n  }\n\n  static getXAreaSize(itemLayout) {\n    if (itemLayout === undefined) return 0;\n    return itemLayout.xSize === undefined ? 0 : itemLayout.xSize;\n  }\n\n\n  static getXPlacement(itemLayout) {\n    if (itemLayout === undefined) return \"left\";\n    return itemLayout.xPlacement === undefined ? \"left\" : itemLayout.xPlacement;\n  }\n\n  static isHorizontalDivider(itemLayout) {\n    const xPlacement = CbaTestPresenter.getXPlacement(itemLayout);\n    return xPlacement === \"top\" || xPlacement === \"bottom\";\n  }\n\n  static isDividerMovable(itemLayout) {\n    if (itemLayout === undefined) return false;\n    return itemLayout.divider.moveable; // TYPO in JSON ?\n  }\n\n  static isXPageFirst(itemLayout) {\n    const xPlacement = CbaTestPresenter.getXPlacement(itemLayout);\n    return xPlacement === \"top\" || xPlacement === \"left\";\n  }\n\n  static getRtlOrientation(page) {\n    return CbaTestPresenter.isRightToLeftPage(page) ? \"right\" : \"left\";\n  }\n\n  static getRtlDir(page, xPage, isXPageFirst) {\n    if (isXPageFirst) {\n      return {\n        firstAreaDir: CbaTestPresenter.isRightToLeftPage(xPage) ? \"rtl\" : \"ltr\",\n        secondAreaDir: CbaTestPresenter.isRightToLeftPage(page) ? \"rtl\" : \"ltr\",\n      }\n    } else {\n      return {\n        firstAreaDir: CbaTestPresenter.isRightToLeftPage(page) ? \"rtl\" : \"ltr\",\n        secondAreaDir: CbaTestPresenter.isRightToLeftPage(xPage) ? \"rtl\" : \"ltr\",\n      }\n    }\n  }\n\n  static calculateDividerOffset(isXPageFirst, isHorizontalDivider, xAreaSize, totalHeight, totalWidth) {\n    if (isXPageFirst) return xAreaSize;\n    if (isHorizontalDivider) return totalHeight - xAreaSize;\n    return totalWidth - xAreaSize;\n  }\n\n  render() {\n    const { runtime, taskId, settings } = this.props;\n\n    const topLevelConfiguration = runtime.presenterStateManager.getTaskState(taskId);\n\n    const taskCssStyles = topLevelConfiguration.cssStyles;\n\n    const totalWidth = topLevelConfiguration !== undefined && topLevelConfiguration.itemWidth !== undefined ? topLevelConfiguration.itemWidth : 600;\n    const totalHeight = topLevelConfiguration !== undefined && topLevelConfiguration.itemHeight !== undefined ? topLevelConfiguration.itemHeight : 600;\n\n    const foundPage = CbaTestPresenter.findPageForPageName(topLevelConfiguration.standardPage, runtime);\n\n    // Declare a dummy page if we cannot find the specified top level page due to a misconfigured item: we cannot make the generator foolproof.\n    if (foundPage === undefined) {\n      console.error(`Cannot find top level page ${topLevelConfiguration.standardPage} for taskId ${taskId}, showing error page now!`, topLevelConfiguration);\n    }\n    const standardPage = foundPage === undefined\n      ? {\n        content: {\n          type: 'PlainText',\n          content: `Cannot find page ${topLevelConfiguration.standardPage}`\n        },\n        isRighToLeft: false,\n      }\n      : foundPage\n\n\n    const xPage = CbaTestPresenter.findPageForPageName(topLevelConfiguration.xPage, runtime);\n\n    const standardPath = CbaTestPresenter.buildPathForPage(topLevelConfiguration.standardPage, 'standard', runtime);\n    const xPath = CbaTestPresenter.buildPathForPage(topLevelConfiguration.xPage, 'xPage', runtime);\n\n    const { withEditContextMenu, itemLayout } = topLevelConfiguration;\n\n    const isHorizontalDivider = CbaTestPresenter.isHorizontalDivider(itemLayout);\n    const isXPageFirst = CbaTestPresenter.isXPageFirst(itemLayout);\n\n    const xAreaSize = CbaTestPresenter.getXAreaSize(itemLayout);\n    const dividerOffset = CbaTestPresenter.calculateDividerOffset(isXPageFirst, isHorizontalDivider, xAreaSize, totalHeight, totalWidth);\n    const dividerThickness = CbaTestPresenter.getDividerWidth(itemLayout);\n    const dividerGrabArea = 10;\n    const isDividerMovable = CbaTestPresenter.isDividerMovable(itemLayout);\n    const isDividerHidden = dividerThickness === 0 && !isDividerMovable;\n\n    const standardPageOrientation = CbaTestPresenter.getRtlOrientation(standardPage);\n    const xPageOrientation = CbaTestPresenter.getRtlOrientation(xPage);\n\n    const pagesAreaDir = CbaTestPresenter.getRtlDir(standardPage, xPage, isXPageFirst);\n    const standardPageDir = standardPageOrientation === \"right\" ? \"rtl\" : \"ltr\";\n\n    const itemBackgroundColor = 'rgb(192, 192, 192)';\n\n    const noDividerStyle = {\n      position: 'absolute',\n      [standardPageOrientation]: 0,\n      top: 0,\n      width: totalWidth,\n      height: totalHeight,\n      overflow: \"auto\",\n      background: itemBackgroundColor\n    }\n\n    const wrapStyle = {\n      width: totalWidth,\n      height: totalHeight,\n      position: \"absolute\",\n      [standardPageOrientation]: 0\n    };\n\n    const dividerStyle = {\n      width: isHorizontalDivider ? \"100%\" : dividerThickness + dividerGrabArea,\n      height: isHorizontalDivider ? dividerThickness + dividerGrabArea : \"100%\",\n      background: CbaTestPresenter.getDividerColor(topLevelConfiguration.itemLayout),\n      display: isDividerHidden ? \"none\" : \"block\",\n      MozBoxSizing: \"border-box\",\n      WebkitBoxSizing: \"border-box\",\n      boxSizing: \"border-box\",\n      MozBackgroundClip: \"padding\",\n      WebkitBackgroundClip: \"padding\",\n      backgroundClip: \"padding-box\",\n      transition: \"none\"\n    };\n\n    const areaWrapStyle = {\n      overflow: 'auto',\n      background: itemBackgroundColor\n    };\n\n    const areaStyle = {\n      position: 'absolute',\n      [isXPageFirst ? xPageOrientation : standardPageOrientation]: 0,\n      top: 0,\n      background: itemBackgroundColor\n    };\n\n    // define fixed hot keys as key map and keyHandlers map:\n    const keyMap = {\n      openConfigParams: ['alt+v'],\n      cut: ['ctrl+x'],\n      copy: ['ctrl+c'],\n      paste: ['ctrl+v'],\n      print: ['ctrl+p', 'ctrl+shift+p']\n    };\n\n    const keyHandlers = {\n      openConfigParams: (event) => {\n        Utils.printCbaVersion();\n      },\n      cut: (withEditContextMenu\n        ? (event) => { runtime.clipboardManager.cut('keyboard', undefined, runtime); }\n        : (event) => { }\n      ),\n      copy: (withEditContextMenu\n        ? (event) => { runtime.clipboardManager.copy('keyboard', undefined, runtime); }\n        : (event) => { }\n      ),\n      paste: (withEditContextMenu\n        ? (event) => { runtime.clipboardManager.paste('keyboard', undefined, runtime); }\n        : (event) => { }\n      ),\n      print: (event) => {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    };\n\n    // add dynamically configured debugging hot keys:\n    const { debugScoreHotKey, debugTraceHotKey, debugStatemachineHotKey } = settings;\n    if (debugTraceHotKey !== undefined && debugTraceHotKey.length > 0) {\n      keyMap.openTrace = [debugTraceHotKey];\n      keyHandlers.openTrace = (event) => {\n        event.preventDefault();\n        const currentModalContent = runtime.traceLogBuffer;\n        this.openDialog(TRACING, 'Tracing Debug Window', currentModalContent);\n      }\n    }\n    if (debugScoreHotKey !== undefined && debugScoreHotKey.length > 0) {\n      keyMap.openScoring = [debugScoreHotKey];\n      keyHandlers.openScoring = (event) => {\n        event.preventDefault();\n        const currentModalContent = runtime.taskManager.getScoring();\n        this.openDialog(SCORING, 'Scoring Debug Window', currentModalContent);\n      }\n    }\n    if (debugStatemachineHotKey !== undefined && debugStatemachineHotKey.length > 0) {\n      keyMap.openStateMachine = [debugStatemachineHotKey];\n      keyHandlers.openStateMachine = (event) => {\n        event.preventDefault();\n        const { statemachinesManager, variableManager } = runtime;\n        const currentStatemachineData = statemachinesManager.getCurrentStateMachineLeafStates();\n        const currentVariableData = variableManager.buildVariablesInfoArrayForTask(taskId);\n\n        const nullSafeStatemachineData = {\n          variables: currentVariableData === undefined ? [] : currentVariableData,\n          states: currentStatemachineData === undefined ? [] : currentStatemachineData,\n          visitedStates: statemachinesManager.getVisitedStates(),\n          raisedEvents: statemachinesManager.getRaisedEvents()\n        }\n        this.openDialog(STATE_MACHINE, 'State Machine Debug Window', nullSafeStatemachineData);\n      }\n    }\n\n    const { isDialogOpen, currentModal, currentModalTitle, currentModalContent, isPaused } = this.state;\n\n    const itemName = runtime.taskManager.getCurrentTestTaskItemNames().item;\n    const customFontsCss = CommonConfigHelper.buildCustomFontsCss(runtime.taskManager.getCustomFontMappings(itemName), runtime);\n\n    return (\n      <HotKeys className=\"appContainer\" style={{ width: totalWidth, height: totalHeight }} keyMap={keyMap} handlers={keyHandlers} tabIndex={1} >\n        {customFontsCss ? this.generateTaskStyles(customFontsCss) : null}\n        {taskCssStyles ? this.generateTaskStyles(taskCssStyles) : null}\n        {\n          (xPage === undefined\n            ? (\n              <div style={noDividerStyle} dir={CbaTestPresenter.isRightToLeftPage(standardPage) ? \"rtl\" : \"\"} onScroll={CommonActionsHelper.traceUserScroll(standardPath, runtime)}>\n                <CbaInterpreter config={standardPage.content} path={standardPath} runtime={runtime} orientation={standardPageOrientation} />\n              </div>\n            )\n            : (\n              <div key={IndexPathHelper.getRootFromPath(standardPath)} style={wrapStyle} dir={standardPageDir} onScroll={CommonActionsHelper.traceUserScroll(standardPath, runtime, xPath, isXPageFirst)}>\n                <SplitPane\n                  split={isHorizontalDivider ? \"horizontal\" : \"vertical\"}\n                  pane1Style={areaWrapStyle}\n                  pane2Style={areaWrapStyle}\n                  resizerStyle={dividerStyle}\n                  minSize={0}\n                  maxSize={dividerThickness === 0 ? -1 : -dividerThickness}\n                  defaultSize={dividerOffset}\n                  allowResize={isDividerMovable}\n                >\n                  <div style={areaStyle} dir={pagesAreaDir.firstAreaDir}>\n                    <CbaInterpreter config={isXPageFirst ? xPage.content : standardPage.content} path={isXPageFirst ? xPath : standardPath} runtime={runtime} orientation={isXPageFirst ? xPageOrientation : standardPageOrientation} />\n                  </div>\n\n                  <div style={areaStyle} dir={pagesAreaDir.secondAreaDir}>\n                    <CbaInterpreter config={isXPageFirst ? standardPage.content : xPage.content} path={isXPageFirst ? standardPath : xPath} runtime={runtime} orientation={isXPageFirst ? standardPageOrientation : xPageOrientation} />\n                  </div>\n                </SplitPane>\n              </div>\n            )\n          )\n        }\n\n        <ModalDialog isOpen={isDialogOpen} closeDialog={this.handleClose} currentModal={currentModal} currentModalTitle={currentModalTitle} currentModalContent={currentModalContent} runtime={runtime} />\n        <DialogPresenter runtime={runtime} findPageForPageName={CbaTestPresenter.findPageForPageName} />\n\n        <div className={`pause-backdrop ${!isPaused ? 'display-none' : ''}`}>\n          <div className=\"pause-button\"> </div>\n        </div>\n      </HotKeys >\n    );\n  }\n\n}\n\nCbaTestPresenter.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  taskId: PropTypes.string.isRequired,\n  settings: PropTypes.object.isRequired\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport CommonActionsHelper from './CommonActionsHelper';\r\nimport Utils from '../utils/Utils';\r\n\r\nexport default class HeaderButtons extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // temporary rerender on click\r\n    this.state = {\r\n      // eslint rule malfunction, state used in on click handler\r\n      // eslint-disable-next-line react/no-unused-state\r\n      renderHelper: 0\r\n    }\r\n  }\r\n\r\n  handleClick = (event, button, index) => {\r\n    const { runtime } = this.props;\r\n\r\n    // trace event in log\r\n    const traceDetails = {\r\n      index\r\n    };\r\n    CommonActionsHelper.addMouseEventDetails(event, traceDetails);\r\n    runtime.traceLogBuffer.reportEvent('HeaderButton', new Date(), traceDetails);\r\n\r\n    // send state machine event\r\n    CommonActionsHelper.sendEvent(button.event, runtime);\r\n\r\n\r\n    // temporary rerender on click\r\n    this.setState(oldState => ({\r\n      renderHelper: oldState.renderHelper + 1\r\n    }\r\n    ));\r\n  }\r\n\r\n  getLargestHeightFromButtons = (buttons) => {\r\n    let largestHeight = 0;\r\n    buttons.forEach((button) => {\r\n      largestHeight = largestHeight < button.height ? button.height : largestHeight;\r\n    });\r\n\r\n    return largestHeight;\r\n    // or return this buttons.map((button) => button.height).reduce((accumulator, currentValue) => (accumulator < currentValue ? currentValue : accumulator));\r\n  }\r\n\r\n  isButtonInvalid = (buttonConfig) => {\r\n    let invalid = false;\r\n\r\n    // check width and set default if none\r\n    if (!buttonConfig.width || buttonConfig.width <= 0) {\r\n      buttonConfig.width = 110;\r\n    }\r\n    // check height and set default if none\r\n    if (!buttonConfig.height || buttonConfig.height <= 0) {\r\n      buttonConfig.height = 26;\r\n    }\r\n\r\n    // check image and text\r\n    if (!buttonConfig.image && !buttonConfig.text) {\r\n      console.log(\"Button Config for \", buttonConfig, \"  has no image or no text\");\r\n      invalid = true;\r\n    }\r\n\r\n    // check event\r\n    if (!buttonConfig.event || !(typeof buttonConfig.event === 'string')) {\r\n      console.log(\"Button Config for \", buttonConfig, \" has invalid event\");\r\n      invalid = true;\r\n    }\r\n\r\n    return invalid;\r\n  }\r\n\r\n  buildButtons = (config, barWidth) => {\r\n    const largestHeight = this.getLargestHeightFromButtons(config);\r\n    let buttonTotalWidth = 0;\r\n    const { runtime } = this.props;\r\n\r\n    return config.map((button, index) => {\r\n      if (this.isButtonInvalid(button)) return null;\r\n\r\n      const buttonPadding = 5;\r\n\r\n      const buttonStyle = {\r\n        height: largestHeight || 32,\r\n        width: button.width || \"auto\",\r\n        overflow: \"hidden\",\r\n        cursor: \"pointer\"\r\n      };\r\n\r\n      const buttonWrapStyle = {\r\n        padding: buttonPadding,\r\n        display: \"inline-block\",\r\n        float: \"right\"\r\n      };\r\n\r\n      // handle image case\r\n      if (button.image) {\r\n        buttonStyle.backgroundImage = `url(${CommonConfigHelper.getProperResourcePath(button.image, runtime)})`;\r\n        buttonStyle.backgroundSize = \"contain\";\r\n        buttonStyle.backgroundPosition = \"center\";\r\n        buttonStyle.backgroundRepeat = \"no-repeat\";\r\n      }\r\n\r\n      // handle drop buttons case\r\n      buttonTotalWidth += button.width + buttonPadding * 2;\r\n      if (buttonTotalWidth > barWidth) {\r\n        return null;\r\n      }\r\n\r\n      return (\r\n        // disabled because we don't have a unique id to use as key and also the array does not change.\r\n        // eslint-disable-next-line react/no-array-index-key\r\n        <span style={buttonWrapStyle} key={index}>\r\n          <button type=\"button\" onClick={(event) => { this.handleClick(event, button, index) }} style={buttonStyle}>{button.image ? false : button.text}</button>\r\n        </span>\r\n      )\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config } = this.props;\r\n    if (!config || !Utils.isNonEmptyArray(config)) {\r\n      return null;\r\n    }\r\n\r\n    const { taskManager } = runtime;\r\n    const { itemWidth } = taskManager.getTopLevelConfiguration();\r\n    const wrapStyle = {\r\n      width: itemWidth\r\n    };\r\n\r\n    const buttons = this.buildButtons(config, itemWidth);\r\n\r\n\r\n    return <div style={wrapStyle} className=\"headerButtonsToolbar\">{buttons}</div>\r\n  }\r\n\r\n}\r\n\r\nHeaderButtons.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.array.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext } from 'pure-react-carousel';\r\nimport 'pure-react-carousel/dist/react-carousel.es.css';\r\nimport './TopButtonToolbar.css';\r\n\r\nexport default class TopButtonToolbar extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.currentSlide = 0;\r\n  }\r\n\r\n  static getButtonPadding() {\r\n    return 5;\r\n  }\r\n\r\n  static getCarouselMarginBottom() {\r\n    return 5;\r\n  }\r\n\r\n  /*\r\n  * external function that can be used to compute carousel current height\r\n  */\r\n  static getCarouselHeight = (buttonHeight) => {\r\n    const padding = TopButtonToolbar.getButtonPadding() * 2;\r\n    const marginBottom = TopButtonToolbar.getCarouselMarginBottom();\r\n\r\n    return buttonHeight + padding + marginBottom;\r\n  }\r\n\r\n  /*\r\n  * function used to build array of slides that server the carousel\r\n  */\r\n  buildSlides = buttonArray => (\r\n    buttonArray.map((item, index) => (\r\n      <Slide key={item.key} index={index}>\r\n        <span className=\"button-container\">\r\n          {item}\r\n        </span>\r\n      </Slide>\r\n    ))\r\n  )\r\n\r\n\r\n  /*\r\n  * build the config needed for the carousel\r\n  */\r\n  buildCarouselConfig = (buttonHeight, widthRatio) => {\r\n    const { itemWidth } = this.props;\r\n\r\n    const navButtonsWidth = 25;\r\n    const buttonPadding = TopButtonToolbar.getButtonPadding();\r\n    const buttonWidth = buttonHeight * widthRatio;\r\n\r\n    const carouselWidth = itemWidth - navButtonsWidth * 2 - buttonPadding * 2;\r\n    const carouselHeight = buttonHeight + buttonPadding * 2;\r\n\r\n    const slideWidth = buttonWidth + buttonPadding * 2;\r\n    const slideHeight = carouselHeight;\r\n\r\n    const leftArrow = String.fromCharCode(\"0x2039\");\r\n    const rightArrow = String.fromCharCode(\"0x203A\");\r\n\r\n    const carouselWrapStyle = {\r\n      width: itemWidth,\r\n      marginBottom: TopButtonToolbar.getCarouselMarginBottom()\r\n    }\r\n\r\n    const carouselStyle = {\r\n      width: carouselWidth,\r\n      height: carouselHeight,\r\n      margin: \"0 auto\",\r\n    }\r\n\r\n    const buttonStyle = {\r\n      height: carouselHeight\r\n    }\r\n\r\n    return {\r\n      button: {\r\n        height: buttonHeight,\r\n        width: buttonWidth,\r\n        padding: buttonPadding\r\n      },\r\n\r\n      slides: {\r\n        width: slideWidth,\r\n        height: slideHeight,\r\n        visibleSlides: Math.floor(carouselWidth / slideWidth),\r\n      },\r\n\r\n      carouselWidth, // padding for next and prev\r\n      carouselHeight, // button paddings\r\n\r\n      arrows: {\r\n        left: leftArrow,\r\n        right: rightArrow\r\n      },\r\n\r\n      styles: {\r\n        carouselStyle,\r\n        buttonStyle,\r\n        carouselWrapStyle,\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n  * computes the offset needed for the carousel to set the active button in the middle\r\n  */\r\n  computeCurrentSlideCenter = (visibleSlides, buttons) => {\r\n    let offset = 0\r\n    // only valid for more buttons than slides.\r\n    if (visibleSlides >= buttons.length) return offset;\r\n\r\n    const middlePoint = Math.ceil(visibleSlides / 2);\r\n    let activeSlide;\r\n    buttons.forEach((button, index) => {\r\n      if (button.props.className === \"active\") {\r\n        activeSlide = index + 1;\r\n      }\r\n    });\r\n\r\n    offset = activeSlide - middlePoint;\r\n\r\n    offset = offset < 0 ? 0 : offset;\r\n    offset = offset > buttons.length - visibleSlides ? buttons.length - visibleSlides : offset;\r\n\r\n    return offset;\r\n\r\n  }\r\n\r\n  computeCurrentSlideNotCenter = () => (\r\n    this.carousel ? this.carousel.carouselStore.getStoreState().currentSlide : 0\r\n  )\r\n\r\n  buildCurrentSlide = (carouselConfig, isCenter) => {\r\n    const { buttons } = this.props;\r\n    return (isCenter\r\n      ? this.computeCurrentSlideCenter(carouselConfig.slides.visibleSlides, buttons)\r\n      : this.computeCurrentSlideNotCenter()\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { buttonHeight, buttonRatio, activateCenterToolbarOnChange, className, buttons } = this.props;\r\n    const carouselConfig = this.buildCarouselConfig(buttonHeight, buttonRatio);\r\n    this.currentSlide = this.buildCurrentSlide(carouselConfig, activateCenterToolbarOnChange);\r\n\r\n    return (\r\n      <div className={`carousel-wrap ${className}`} style={carouselConfig.styles.carouselWrapStyle}>\r\n        <CarouselProvider\r\n          ref={(c) => { this.carousel = c; }}\r\n          style={carouselConfig.styles.carouselStyle}\r\n          className={className}\r\n          naturalSlideWidth={carouselConfig.slides.width}\r\n          naturalSlideHeight={carouselConfig.slides.height}\r\n          totalSlides={buttons.length}\r\n          visibleSlides={carouselConfig.slides.visibleSlides}\r\n          currentSlide={this.currentSlide}\r\n        >\r\n          <Slider style={carouselConfig.styles.carouselStyle}>\r\n            {this.buildSlides(buttons)}\r\n          </Slider>\r\n\r\n          <ButtonBack className=\"nav-buttons back\" style={carouselConfig.styles.buttonStyle}>{carouselConfig.arrows.left}</ButtonBack>\r\n          <ButtonNext className=\"nav-buttons next\" style={carouselConfig.styles.buttonStyle}>{carouselConfig.arrows.right}</ButtonNext>\r\n        </CarouselProvider>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nTopButtonToolbar.propTypes = {\r\n  className: PropTypes.string.isRequired,\r\n  buttons: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  buttonHeight: PropTypes.number.isRequired,\r\n  buttonRatio: PropTypes.number,\r\n  activateCenterToolbarOnChange: PropTypes.bool,\r\n  itemWidth: PropTypes.number\r\n}\r\n\r\nTopButtonToolbar.defaultProps = {\r\n  itemWidth: 800,\r\n  buttonRatio: 3,\r\n  activateCenterToolbarOnChange: false\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TopButtonToolBar from './TopButtonToolbar'\nimport RecommendationsManager from '../state/RecommendationsManager';\nimport CommonActionsHelper from \"./CommonActionsHelper\";\nimport './TaskNavigator.css';\n\n/**\n * Component that manages the test/task menu bars in the header area.\n */\nexport default class TaskNavigator extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recommendations: []\n    }\n\n  }\n\n  // public API -----------------------------------------------------------------------------\n\n  /**\n   * Set the currently recommended test/task combination.\n   * \n   * The method expects an array of objects. Each object must specify a testName and a taskName.\n   */\n  highlightRecommendations = (recommendations) => {\n    if (recommendations === undefined) {\n      console.error(\"Invalid recommendations in highlight call ignored!\");\n    }\n    const verifiedRecommendations = recommendations === undefined ? [] : recommendations;\n    this.setState(previousState => ({\n      recommendations: verifiedRecommendations\n    }));\n  }\n\n\n  // private stuff -----------------------------------------------------------------------------\n\n  /**\n   * Build the CCS style for all buttons that we display in our menu bars.\n   * \n   * We support two decorations: \n   *  - active marks the currently active test/task.\n   *  - recommended marks the tests currently recommended by the some adaptation logic. \n   */\n  static buildButtonStyle(buttonHeight, isActive, isRecommended) {\n    const style = {\n      height: buttonHeight\n    };\n\n    if (isActive) {\n      // compute growth of button based on the padding value\n      const growth = 1 + ((TopButtonToolBar.getButtonPadding() * 2) / buttonHeight) // padding/height\n      style.transform = `scale(${growth})`;\n    }\n    if (isRecommended) {\n      // TODO: move this to CSS class? \n      style.backgroundColor = RecommendationsManager.getRecommendationColor();\n    }\n    return style;\n  }\n\n  static buildButtonClassName(isActive, isRecommended) {\n    let className = \"\";\n    if (isActive) {\n      className += \"active\";\n    }\n\n    if (isRecommended) {\n      className += \" recommended\";\n    }\n\n    return className\n  }\n\n  /**\n   * Find the index for the test specified by the test name. \n   */\n  static findTestIndexForName(tests, testName) {\n    const testIndexForName = tests.findIndex((value, index, theArray) => value.name === testName);\n    if (testIndexForName === undefined) {\n      console.error(`Test navigator could not find test with name ${testName}`);\n      return undefined;\n    }\n    return testIndexForName;\n  }\n\n\n  /**\n   * Find the test configuration for the test specified by the test name. \n   */\n  static findTestForName(tests, testName) {\n    const testForName = tests.find((value, index, theArray) => value.name === testName);\n    if (testForName === undefined) {\n      console.error(`Test navigator could not find test with name ${testName}`);\n      return undefined;\n    }\n    return testForName;\n  }\n\n  /**\n   * Find the the first task in the given test. \n   * \n   * The method returns an object describing the task with two attributes:\n   *  - task\n   *  - item\n   */\n  static findFirstTaskInTest(test) {\n    if (test === undefined || test.taskCourse[0] === undefined) {\n      return undefined;\n    }\n    return test.taskCourse[0];\n  }\n\n  /**\n   * Find the 'default' task in the test specified by the test name.\n   *\n   * The method returns an object describing the task with two attributes:\n   *  - task\n   *  - item\n   */\n  static findDefaultTaskForTest(tests, testName) {\n    const test = TaskNavigator.findTestForName(tests, testName);\n    return TaskNavigator.findFirstTaskInTest(test)\n  }\n\n  /**\n   * Find the first task with matching task name in the test specified by the test name.\n   *\n   * The method returns an object describing the task with two attributes:\n   *  - task\n   *  - item\n   */\n  static findFirstTaskWithNameForTest(tests, testName, taskName) {\n    const targetTest = TaskNavigator.findTestForName(tests, testName);\n    if (targetTest === undefined) {\n      return undefined;\n    }\n    return targetTest.taskCourse.find((taskEntry, index, theArray) => taskEntry.task === taskName);\n  }\n\n\n  /**\n   * Render a single button in the test menu bar.\n   */\n  buildTestButton = (testName) => {\n    const { recommendations } = this.state;\n    const matchingRecommendation = RecommendationsManager.findFirstRecommendationForTest(recommendations, testName);\n    const targetTaskInfo = this.selectDefaultTaskForTest(testName, matchingRecommendation);\n    const { runtime, testButtonHeight, currentTest } = this.props;\n\n    // Do nothing on button click if the test does not exist or has no tasks assigned:\n    const buttonClickHandler = (targetTaskInfo === undefined\n      ? (event) => {\n        console.info(`Ignored navigation request to test named ${testName} since the test has no tasks assigned.`)\n      }\n      : (event) => {\n        TaskNavigator.traceNavigation(true, testName, event, runtime);\n        TaskNavigator.navigateToTest(testName, targetTaskInfo.item, targetTaskInfo.task, runtime);\n      });\n\n    return (\n      <button\n        type=\"button\"\n        key={testName}\n        onClick={buttonClickHandler}\n        title={testName}\n        style={TaskNavigator.buildButtonStyle(testButtonHeight, testName === currentTest, matchingRecommendation !== undefined)}\n        className={TaskNavigator.buildButtonClassName(testName === currentTest, matchingRecommendation !== undefined)}\n      >\n        {testName}\n      </button>\n    );\n  }\n\n  selectDefaultTaskForTest = (testName, matchingRecommendation) => {\n    const { runtime, tests } = this.props;\n    if (matchingRecommendation !== undefined && matchingRecommendation.taskName !== undefined) {\n      const taskEntry = TaskNavigator.findFirstTaskWithNameForTest(tests, testName, matchingRecommendation.taskName);\n      if (taskEntry !== undefined) {\n        return {\n          item: taskEntry.item,\n          task: taskEntry.task\n        };\n      }\n    }\n\n    const testState = runtime.taskNavigatorStateManager.getTestState(testName);\n    if (testState !== undefined) {\n      return {\n        item: testState.itemName,\n        task: testState.taskName\n      };\n    }\n\n    const defaultTask = TaskNavigator.findDefaultTaskForTest(tests, testName);\n    if (defaultTask !== undefined) {\n      return {\n        item: defaultTask.item,\n        task: defaultTask.task\n      };\n    }\n\n    return undefined;\n  }\n\n  static navigateToTest(testName, itemName, taskName, runtime) {\n    runtime.taskManager.switchTaskInterTest(testName, itemName, taskName);\n  }\n\n\n  /**\n   * Render the test menu bar.\n   */\n  buildTestNavigation = () => {\n    const { courses } = this.props;\n    return courses.map(testName => this.buildTestButton(testName));\n  }\n\n  /**\n   * Render a single button in the task menu bar.\n   */\n  buildTaskButton = (testName, itemName, taskName) => {\n\n    const { recommendations } = this.state;\n    const { runtime, taskButtonHeight, currentItem, currentTask } = this.props;\n    const matchingRecommendation = RecommendationsManager.findFirstRecommendationForTask(recommendations, testName, taskName);\n\n    // Do nothing on button click if task entry is invalid:\n    const buttonClickHandler = (taskName === undefined\n      ? (event) => { }\n      : (event) => {\n        TaskNavigator.traceNavigation(false, taskName, event, runtime);\n        TaskNavigator.navigateToTask(taskName, itemName, runtime);\n        runtime.recommendationsManager.processTaskSelected(testName, itemName, taskName);\n      });\n\n    return (\n      <button\n        type=\"button\"\n        key={`${testName}.${itemName}.${taskName}`}\n        onClick={buttonClickHandler}\n        title={taskName}\n        style={TaskNavigator.buildButtonStyle(taskButtonHeight,\n          taskName === currentTask && itemName === currentItem, matchingRecommendation !== undefined)}\n        className={TaskNavigator.buildButtonClassName(taskName === currentTask && itemName === currentItem, matchingRecommendation !== undefined)}\n      >\n        {taskName}\n      </button>\n    );\n\n  }\n\n  buildTopLayerStyle = () => {\n    const { runtime } = this.props;\n\n    return {\n      width: runtime.taskManager.getTopLevelConfiguration().itemWidth\n    }\n  }\n\n  assignRatioToButton = buttonRatio => ((button) => {\n    const width = buttonRatio * button.props.style.height;\n\n    button.props.style.width = width;\n    button.props.style.minWidth = width;\n\n    return button;\n  });\n\n  /**\n   * Trace the navigation action in the log.\n   * \n   * @param {*} isTest Is this a test navigation? If false we assume a task navigation.\n   * @param {*} navigationTarget The test/task we navigate to.\n   * @param {*} browserEvent The event that triggered the button's action.\n   * @param {*} runtime The common runtime structure.\n   */\n  static traceNavigation(isTest, navigationTarget, browserEvent, runtime) {\n    const traceDetails = {\n      navigationType: (isTest ? 'test' : 'task'),\n      navigationTarget\n    };\n    CommonActionsHelper.addMouseEventDetails(browserEvent, traceDetails);\n\n    runtime.traceLogBuffer.reportEvent('NavigationButton', new Date(), traceDetails);\n  }\n\n  /**\n   * Render the task menu bar.\n   */\n  buildTaskNavigation = () => {\n    const { tests, currentTest } = this.props;\n    const activeTest = TaskNavigator.findTestForName(tests, currentTest);\n    if (activeTest === undefined || activeTest.taskCourse === undefined) {\n      return <div>--- Test invalid, no tasks found ---</div>\n    }\n\n    return activeTest.taskCourse.map(taskEntry => this.buildTaskButton(currentTest, taskEntry.item, taskEntry.task));\n  }\n\n  static navigateToTask(taskName, itemName, runtime) {\n    runtime.taskManager.switchTaskIntraTest(itemName, taskName);\n  }\n\n  /*\n  * computes the total height of the task navigator\n  */\n  static getTaskNavigatorHeight = (testButtonHeight, taskButtonHeight) => {\n    const testNavHeight = TopButtonToolBar.getCarouselHeight(testButtonHeight);\n    const taskNavHeight = TopButtonToolBar.getCarouselHeight(taskButtonHeight);\n    const negateMargin = TopButtonToolBar.getCarouselMarginBottom();\n\n    return testNavHeight + taskNavHeight - negateMargin;\n  }\n\n  render() {\n    const { runtime, testButtonHeight } = this.props;\n    const { itemWidth } = runtime.taskManager.getTopLevelConfiguration();\n    const buttonRatio = 2;\n\n    return (\n      <div className=\"task-navigator\" style={this.buildTopLayerStyle()}>\n        <TopButtonToolBar\n          className=\"test-navigation\"\n          buttons={this.buildTestNavigation()}\n          itemWidth={itemWidth}\n          buttonHeight={testButtonHeight}\n          buttonRatio={buttonRatio}\n          activateCenterToolbarOnChange={false}\n        >\n          {/* activateCenterToolbarOnChange flag when set to false works only with fixed width items */}\n        </TopButtonToolBar>\n\n        <div className=\"task-navigation\">\n          {this.buildTaskNavigation().map(this.assignRatioToButton(buttonRatio))}\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\nTaskNavigator.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  courses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  tests: PropTypes.arrayOf((propValue, key, componentName, location, propFullName) => {\n    const testPropTypes = {\n      name: PropTypes.string.isRequired,\n      taskCourse: PropTypes.arrayOf((propValue2, key2, componentName2, location2, propFullName2) => {\n        const taskEntryPropTypes = {\n          item: PropTypes.string.isRequired,\n          task: PropTypes.string.isRequired,\n        };\n        return PropTypes.checkPropTypes(taskEntryPropTypes, propValue2[key2], propFullName2, componentName2)\n      }).isRequired\n    };\n    return PropTypes.checkPropTypes(testPropTypes, propValue[key], propFullName, componentName)\n  }).isRequired,\n  currentTest: PropTypes.string.isRequired,\n  currentItem: PropTypes.string.isRequired,\n  currentTask: PropTypes.string.isRequired,\n  testButtonHeight: PropTypes.number.isRequired,\n  taskButtonHeight: PropTypes.number.isRequired,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Notifications from 'react-notify-toast';\nimport CbaTestPresenter from './CbaTestPresenter';\nimport HeaderButtons from './HeaderButtons';\nimport TaskNavigator from './TaskNavigator';\nimport RenderingHelper from \"./RenderingHelper\";\nimport MenuItemTree from './MenuItemTree';\n\n/**\n * Display a running task. \n */\nexport default class LoggedInView extends Component {\n\n  constructor(props) {\n    super(props);\n    this.testPresenter = React.createRef();\n    this.contextMenu = React.createRef();\n\n    const { runtime } = this.props;\n    runtime.taskManager.setTopLevelPageChangeHandler(this.handleTopLevelPageChange);\n  }\n\n  componentDidMount() {\n    // activate the automtaic send trace log mechanism while mounted\n    const { runtime } = this.props;\n    runtime.traceLogUploader.startAutomaticTransmissions();\n    runtime.contextMenu = this.contextMenu.current;\n\n    // The reactClientLoaded method exists in the Chromium environment of the ItemBuilder only. \n    //  -> Just ignore if it is missing.\n    if (window.reactClientLoaded) {\n      try {\n        window.reactClientLoaded();\n      } catch (err) {\n        console.log(err.message)\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    // stop automatic trace log transmissions (and run a final transmission immediately)\n    const { runtime } = this.props;\n    runtime.traceLogUploader.stopAutomaticTransmissions();\n  }\n\n\n  handleTopLevelPageChange = () => {\n    if (this.testPresenter.current) {\n      RenderingHelper.triggerRendering(this.testPresenter.current);\n    }\n  }\n\n  setTaskNavigator = (navigator) => {\n    const { runtime } = this.props;\n    runtime.recommendationsManager.setTaskNavigator(navigator);\n  }\n\n  buildTaskNavigator = (testButtonHeight, taskButtonHeight) => {\n    if (!this.shouldBuildNavigator()) {\n      return undefined;\n    }\n\n    const { courses, tests, runtime } = this.props;\n    const taskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\n    const { test, item, task } = taskInfo;\n    return (\n      <TaskNavigator\n        courses={courses}\n        tests={tests}\n        currentTest={test}\n        currentItem={item}\n        currentTask={task}\n        testButtonHeight={testButtonHeight}\n        taskButtonHeight={taskButtonHeight}\n        ref={this.setTaskNavigator}\n        runtime={runtime}\n      />\n    );\n  }\n\n  shouldBuildNavigator = () => {\n    const { settings } = this.props;\n    return !!settings && settings.ShowTaskNavigationBars;\n  }\n\n\n  render() {\n    // TODO: if buttons are not given by settings and are static for test and task. I would remove them from the App level.\n    const testButtonHeight = 70;\n    const taskButtonHeight = 50;\n\n    const { runtime, settings, headerButtons, scaleValue } = this.props;\n    const taskId = runtime.taskManager.getCurrentStatePathRoot();\n    const style = {\n      transform: `scale(${scaleValue})`\n    }\n\n    return (\n      <div className=\"appDiv\" style={style}>\n        <div className=\"topToolBarContainer\">\n          <HeaderButtons runtime={runtime} config={headerButtons} />\n          {this.buildTaskNavigator(testButtonHeight, taskButtonHeight)}\n        </div>\n        <Notifications />\n        <CbaTestPresenter taskId={taskId} ref={this.testPresenter} runtime={runtime} settings={settings} />\n        <MenuItemTree ref={this.contextMenu} runtime={runtime} />\n      </div>\n    );\n  }\n\n}\n\n\nLoggedInView.propTypes = {\n  courses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  tests: PropTypes.arrayOf((propValue, key, componentName, location, propFullName) => {\n    const testPropTypes = {\n      name: PropTypes.string.isRequired,\n      taskCourse: PropTypes.arrayOf((propValue2, key2, componentName2, location2, propFullName2) => {\n        const taskEntryPropTypes = {\n          item: PropTypes.string.isRequired,\n          task: PropTypes.string.isRequired,\n        };\n        return PropTypes.checkPropTypes(taskEntryPropTypes, propValue2[key2], propFullName2, componentName2)\n      }).isRequired\n    };\n    return PropTypes.checkPropTypes(testPropTypes, propValue[key], propFullName, componentName)\n  }).isRequired,\n  settings: PropTypes.object.isRequired,\n  headerButtons: PropTypes.array.isRequired,\n  runtime: PropTypes.object.isRequired,\n  scaleValue: PropTypes.number.isRequired\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Login extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.inputRef = React.createRef();\r\n\r\n    this.state = {\r\n      loggedUserName: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputRef.current.focus();\r\n  }\r\n\r\n  switchToLoginState = () => {\r\n    const { handleLogin } = this.props;\r\n    const { loggedUserName } = this.state;\r\n    handleLogin(loggedUserName);\r\n  }\r\n\r\n  handleLoginClick = (evt) => {\r\n    this.switchToLoginState();\r\n  }\r\n\r\n  updateInputLoginValue = (evt) => {\r\n    this.setState({\r\n      loggedUserName: evt.target.value\r\n    });\r\n  }\r\n\r\n  handleKeyPress = (evt) => {\r\n    if (evt.key === 'Enter') {\r\n      this.switchToLoginState();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { loggedUserName } = this.state;\r\n    const { titleLabel, fieldLabel, buttonLabel, disabled } = this.props;\r\n\r\n    const usernameInputName = 'usernameInputName';\r\n    return (\r\n      <div className=\"appDiv\">\r\n        <div className=\"login-container\">\r\n          <div className=\"login-head\">\r\n            <h3>{titleLabel}</h3>\r\n          </div>\r\n          <div className=\"login-body\">\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor={usernameInputName}>\r\n                <b>{fieldLabel}</b>\r\n                <input\r\n                  ref={this.inputRef}\r\n                  type=\"text\"\r\n                  placeholder=\"\"\r\n                  name={usernameInputName}\r\n                  value={loggedUserName}\r\n                  onChange={evt => this.updateInputLoginValue(evt)}\r\n                  onKeyPress={this.handleKeyPress}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"btn-container\">\r\n              <button className=\"btn blue-button\" type=\"button\" onClick={this.handleLoginClick} disabled={disabled}>{`${disabled ? '...' : buttonLabel}`}</button>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nLogin.propTypes = {\r\n  titleLabel: PropTypes.string.isRequired,\r\n  fieldLabel: PropTypes.string.isRequired,\r\n  buttonLabel: PropTypes.string.isRequired,\r\n  handleLogin: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool.isRequired\r\n}\r\n","import moment from 'moment';\r\nimport ifvisible from 'ifvisible';\r\n\r\nconst TYPES = {\r\n  pageBlur: 'PAGE_HIDDEN',\r\n  pageFocus: 'PAGE_SHOWN',\r\n  enterFullscreen: 'ENTER_FULLSCREEN',\r\n  exitFullscreen: 'EXIT_FULLSCREEN'\r\n};\r\n\r\n/**\r\n * Observe events related to item visibility.\r\n * \r\n * We tried to detect full screen switches via the resize events initially \r\n * and might follow this path again in the future. Therefore this class also handles \r\n * creation of full screen switch trace log entries. \r\n */\r\nexport default class PageEventsObserver {\r\n\r\n  /**\r\n   * constructor initialises the lastVisibleTime and lastFullScreenTime variables to the current time.\r\n   * \r\n   * @param {*} runtime Runtime needed to extract the reportEvent Function from the traceLogBuffer\r\n   */\r\n  constructor(runtime) {\r\n    this.lastVisibilityTime = moment();\r\n    this.lastFullScreenTime = moment();\r\n    this.reportEvent = runtime.traceLogBuffer.reportEvent;\r\n  }\r\n\r\n  // private\r\n  lastVisibilityTime = null;\r\n\r\n  lastFullScreenTime = null;\r\n\r\n  isFullScreen = null;\r\n\r\n  handleVisibility = type => () => {\r\n    const newVisibilitytime = this.getMoment();\r\n    const timeSpent = this.computeTimeDifference(newVisibilitytime, this.lastVisibilityTime);\r\n\r\n    this.traceAction(type, timeSpent);\r\n    this.lastVisibilityTime = newVisibilitytime;\r\n  }\r\n\r\n\r\n  traceAction = (type, duration) => {\r\n    switch (type) {\r\n      case TYPES.pageBlur: this.reportEvent(\"ApplicationVisibility\", new Date(), this.buildTraceDetails('pageHidden', duration)); break;\r\n      case TYPES.pageFocus: this.reportEvent(\"ApplicationVisibility\", new Date(), this.buildTraceDetails('pageShown', duration)); break;\r\n      case TYPES.enterFullscreen: this.reportEvent(\"ApplicationFullScreen\", new Date(), this.buildTraceDetails('enterFullscreen', duration)); break;\r\n      case TYPES.exitFullscreen: this.reportEvent(\"ApplicationFullScreen\", new Date(), this.buildTraceDetails('exitFullscreen', duration)); break;\r\n      default: console.warn(\"Wrong type provided in PageEventsObserverssss\");\r\n    }\r\n  }\r\n\r\n  computeTimeDifference = (time1, time2) => {\r\n    const duration = moment.duration(time1.diff(time2));\r\n    return duration.asSeconds();\r\n  }\r\n\r\n  buildTraceDetails = (type, duration) => ({\r\n    type,\r\n    alternateStateDuration: duration\r\n  })\r\n\r\n  // public API\r\n\r\n  /**\r\n   * Function initialises the visibility observers\r\n   */\r\n  initObserver() {\r\n    ifvisible.on('blur', this.handleVisibility(TYPES.pageBlur));\r\n    ifvisible.on('focus', this.handleVisibility(TYPES.pageFocus));\r\n  }\r\n\r\n  /**\r\n   * Create a full screen switch trace log entry if necessary.\r\n   * \r\n   * The method manages the 'duration' attribute in the trace log entry.\r\n   */\r\n  handleFullScreen = (isFullscreenNow) => {\r\n    const newFullScreenTime = this.getMoment();\r\n    const timeSpent = this.computeTimeDifference(newFullScreenTime, this.lastFullScreenTime);\r\n\r\n    if (this.isFullScreen !== isFullscreenNow) {\r\n      const type = isFullscreenNow ? TYPES.enterFullscreen : TYPES.exitFullscreen;\r\n\r\n      this.traceAction(type, timeSpent)\r\n\r\n      this.isFullScreen = isFullscreenNow;\r\n      this.lastFullScreenTime = newFullScreenTime;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * hook in method for testing purposes\r\n   */\r\n  getMoment = () => moment();\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\nimport LoggedInView from '../components/LoggedInView';\nimport Login from './Login';\nimport PageEventsObserver from '../components/PageEventsObserver';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Make ourselves available via the runtime context:\n    const { runtime, waitingMessageTexts } = this.props;\n    this.runtime = runtime;\n    runtime.app = this;\n\n    this.waitingMessageTexts = waitingMessageTexts;\n    this.scalingConfig = {\n      alignmentHorizontal: \"left\",\n      alignmentVertical: \"top\",\n      scalingMode: \"no-scaling\"\n    };\n\n    // Possible display modes are: 'waiting', 'showLogin', 'showTask'.\n    this.state = {\n      displayMode: 'waiting',\n      scaleValue: 1\n    }\n\n    // init observer that traces page visibility state\n    runtime.pageEventsObserver = new PageEventsObserver(runtime);\n    runtime.pageEventsObserver.initObserver();\n\n  }\n\n  /**\n   * Recalculate our scaling factor and trigger a rendering\n   * by putting it into the component state.\n   * \n   * The method does nothing if we don't have a task running currently.\n   */\n  resize = () => {\n    const { displayMode } = this.state;\n    if (displayMode === 'showTask') {\n      const scaleValue = this.computeScalingValue()\n      this.setState(() => (Object.assign({}, {\n        scaleValue\n      })))\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', debounce(this.resize, 200))\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', debounce(this.resize, 200))\n  }\n\n  /**\n   * Set new waiting messages texts.\n   * \n   * @param {*} newValues The new waiting messages 'primary' and 'secondary'.\n   */\n  setWaitingMessageTexts(newValues) {\n    this.waitingMessageTexts = newValues;\n    const { displayMode } = this.state;\n    if (displayMode === 'waiting') {\n      this.showWaiting();\n    }\n  }\n\n  /**\n   * Show the waiting page.\n   * \n   * The method implicitly stops a currently running task in the task manager.\n   */\n  showWaiting = () => {\n    this.runtime.taskManager.stopTask();\n    this.setState(prevState => ({\n      displayMode: 'waiting',\n    }));\n  }\n\n  /**\n   * Show the login dialog.\n   * \n   * @param {String} titleLabel The label to use as title of the login dialog.\n   * @param {String} fieldLabel The label to use for the input field label in the login dialog.\n   * @param {String} buttonLabel The label to use for the button label in the login dialog.\n   * @param {function} loginDialogClosedHandler A callback that accepts the field value obtained by the login dialog.\n   */\n  showLogin = (titleLabel, fieldLabel, buttonLabel, loginDialogClosedHandler) => {\n    this.setState(prevState => ({\n      displayMode: 'showLogin',\n      loginTitleLabel: titleLabel,\n      loginFieldLabel: fieldLabel,\n      loginButtonLabel: buttonLabel,\n      loginDialogClosedHandler,\n      loginDialogDisabled: false\n    }));\n  }\n\n  /**\n   * Show a running task.\n   */\n  showTask = (testName, itemName, taskName, settings, headerButtons, courseForNavigator, testsForNavigator) => {\n    const taskId = this.runtime.taskManager.switchTask(testName, itemName, taskName, false);\n    if (taskId === undefined) {\n      console.info(`Could not switch to task ${testName}/${itemName}/${taskName}.`);\n      return;\n    }\n    const scaleValue = this.computeScalingValue(this.scalingConfig.scalingMode);\n\n    App.dumpTasksViewConfigurationToTraceLog(courseForNavigator, testsForNavigator, settings, headerButtons, this.runtime.traceLogBuffer);\n    this.setState(prevState => ({\n      displayMode: 'showTask',\n      settings,\n      headerButtons,\n      courseForNavigator,\n      testsForNavigator,\n      scaleValue\n    }));\n  }\n\n  /**\n   * Show a replay of a task.\n   */\n  showReplay = (testName, itemName, taskName, settings, headerButtons, courseForNavigator, testsForNavigator) => {\n    const taskId = this.runtime.taskManager.switchTask(testName, itemName, taskName, true);\n    if (taskId === undefined) {\n      console.info(`Could not switch replay to task ${testName}/${itemName}/${taskName}.`);\n      return;\n    }\n    const scaleValue = this.computeScalingValue(this.scalingConfig.scalingMode);\n\n    App.dumpTasksViewConfigurationToTraceLog(courseForNavigator, testsForNavigator, settings, headerButtons, this.runtime.traceLogBuffer);\n    this.setState(prevState => ({\n      displayMode: 'showTask',\n      settings,\n      headerButtons,\n      courseForNavigator,\n      testsForNavigator,\n      scaleValue\n    }));\n  }\n\n  /**\n   * Set the scaling configuration that we will use to scale the display in task display mode.\n   * \n   * The setting is not active for the other display modes.\n   * The setting is not applied immediately to an already running task display mode. Call the resize method to trigger \n   * the scaling update on a running task.\n   */\n  setScalingConfig = (scalingConfig) => {\n    this.scalingConfig = scalingConfig;\n  }\n\n  /**\n   * Calculate the current scaling factor. \n   * \n   * The scaling factor depends \n   *  - on the current scaling configuration and \n   *  - the currently available display size and\n   *  - the required display size of the currently running item. \n   * \n   * Since this method needs an item in place, you should not call it without a task running currently\n   * in the task manager.\n   */\n  computeScalingValue = () => {\n    const { runtime } = this.props;\n    let value;\n\n    const horizontalScale = window.innerWidth / runtime.taskManager.getTopLevelConfiguration().itemWidth;\n    const verticalScale = window.innerHeight / runtime.taskManager.getTopLevelConfiguration().itemHeight;\n\n    switch (this.scalingConfig.scalingMode) {\n      case \"no-scaling\": value = 1; break;\n      case \"scale-up\":\n        if (horizontalScale > 1 && verticalScale > 1) {\n          value = horizontalScale < verticalScale ? horizontalScale : verticalScale\n        } else {\n          value = 1;\n        }\n        break;\n      case \"scale-down\":\n        if (horizontalScale < 1 || verticalScale < 1) {\n          value = horizontalScale < verticalScale ? horizontalScale : verticalScale;\n        } else {\n          value = 1;\n        }\n        break;\n      case \"scale-up-down\":\n        value = horizontalScale < verticalScale ? horizontalScale : verticalScale;\n        break;\n      default: value = 1;\n    }\n\n    return value;\n  }\n\n  getScalingAlignmentCssClass = () => {\n    const { alignmentHorizontal, alignmentVertical } = this.scalingConfig;\n\n    let cssClass = \"\";\n\n    switch (alignmentHorizontal) {\n      case \"left\": cssClass += \"left\"; break;\n      case \"center\": cssClass += \"horizontal-center\"; break;\n      case \"right\": cssClass += \"right\"; break;\n      default: cssClass += \"left\";\n    }\n\n    cssClass += \" \";\n\n    switch (alignmentVertical) {\n      case \"top\": cssClass += \"top\"; break;\n      case \"center\": cssClass += \"vertical-center\"; break;\n      case \"bottom\": cssClass += \"bottom\"; break;\n      default: cssClass += \"top\";\n    }\n\n    return cssClass;\n  }\n\n\n  /** \n   * The login screen is filled in -> Disable login screen and run callback with obtained field value.\n   */\n  handleLoginClick = (fieldValue) => {\n    const { loginDialogClosedHandler } = this.state;\n    this.setState(prevState => ({\n      loginDialogDisabled: true\n    }))\n    loginDialogClosedHandler(fieldValue);\n  }\n\n  /**\n   * Dump the configuration of the tasks view to the trace log.\n   * \n   * @param {*} courseForNavigator The list of tests in the navigator menu.\n   * @param {*} testsForNavigator The test configurations used by the navigator menu.\n   * @param {*} settings The general settings used.\n   * @param {*} headerButtons The configurable header buttons used.\n   * @param {*} traceLogBuffer The trace log buffer to dump to.\n   */\n  static dumpTasksViewConfigurationToTraceLog(courseForNavigator, testsForNavigator, settings, headerButtons, traceLogBuffer) {\n    traceLogBuffer.reportEvent('TasksViewVisible', new Date(), {\n      settings,\n      headerButtons,\n      upperHeaderMenu: courseForNavigator,\n      lowerHeaderMenu: testsForNavigator,\n    })\n  }\n\n  renderWaiting = () => {\n    // configNok -> wait for the configuration setting event to arrive:\n    const primary = this.waitingMessageTexts === undefined ? \"\" : this.waitingMessageTexts.primary\n    const secondary = this.waitingMessageTexts === undefined ? \"\" : this.waitingMessageTexts.secondary\n\n    return (\n      <div className=\"appDivContainer top left\">\n        <div className=\"appDiv\">\n          {primary}\n          <br />\n          <br />\n          {secondary}\n        </div>\n      </div>\n    )\n  };\n\n  renderLogin = () => {\n    const { loginTitleLabel, loginFieldLabel, loginButtonLabel, loginDialogDisabled } = this.state;\n    return (\n      <div className=\"appDivContainer horizontal-center vertical-center\">\n        <Login\n          handleLogin={this.handleLoginClick}\n          titleLabel={loginTitleLabel}\n          fieldLabel={loginFieldLabel}\n          buttonLabel={loginButtonLabel}\n          disabled={loginDialogDisabled}\n        />\n      </div>\n    )\n  };\n\n  renderTask = () => {\n    const { runtime } = this.props;\n\n    const { settings, headerButtons, courseForNavigator, testsForNavigator, scaleValue } = this.state;\n\n    return (\n      <div className={`appDivContainer ${this.getScalingAlignmentCssClass()} ${scaleValue === 1 ? 'overflow-auto' : ''}`}>\n        <LoggedInView\n          courses={courseForNavigator}\n          tests={testsForNavigator}\n          settings={settings}\n          headerButtons={headerButtons}\n          runtime={runtime}\n          scaleValue={scaleValue}\n        />\n      </div>\n    );\n  };\n\n  render() {\n    const { displayMode } = this.state;\n\n    switch (displayMode) {\n      case 'waiting':\n        return this.renderWaiting();\n      case 'showLogin':\n        return this.renderLogin();\n      case 'showTask':\n        return this.renderTask();\n      default:\n        return this.renderWaiting();\n    }\n  }\n\n}\n\nApp.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  waitingMessageTexts: PropTypes.object.isRequired\n}\n","import IndexPathHelper from \"./IndexPathHelper\";\r\nimport StateAttributeAccess from \"./StateAttributeAccess\";\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\nimport PathTranslationHelper from \"./PathTranslationHelper\";\r\nimport SelectGroupHelper from '../components/SelectGroupHelper';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\nimport CbaRichTextField from '../components/CbaRichTextField/CbaRichTextField';\r\nimport CbaMedia from '../components/media/CbaMedia';\r\nimport CbaTable from '../components/table/CbaTable';\r\nimport InputComponent from \"../components/InputComponent\";\r\nimport CbaTree from \"../components/CbaTree/CbaTree\";\r\nimport CbaExternalPageFrame from \"../components/CbaExternalPageFrame\";\r\nimport CbaSimpleTextField from \"../components/CbaSimpleTextField\";\r\nimport PropagationHelper from \"../eval/PropagationHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\n/**\r\n * Manage all component instance specific state that is relevant for rendering and scoring evaluation.\r\n * \r\n * The manager uses the component instance's index path ID as key to store and retrieve a component's state.\r\n * It provides convenience methods to store and retrieve state by the user defined ID path of a component instance.\r\n * \r\n * The manager implicitly creates an initial state if asked for a key without an already registered state.\r\n * It fills the state with a standard set of attributes (based on the configuration info for the component\r\n * in the page definition). For some component types it also asks the component class to add component specific\r\n * attributes. \r\n * \r\n * Usually a component's state is cloneable by JSON.parse/stringify and the component state manager \r\n * stores such a clone of the given state. \r\n * For some components their state cannot be cloned this way (e.g. due to structures of external libraries). \r\n * Such state is marked by the flag \"deep copy\" set to \"false\" and the component state manager \r\n * stores a reference to the component instance's state structure instead of building a clone.\r\n * \r\n * Some features require a serializable representation of the component instance state (e.g. preloading the \r\n * runtime with a snapshot of another assessment run or doing a replay based on a trace of state changes). \r\n * We call such a serializable representation a \"state snapshot\". \r\n * For clonable state the manager uses the clone itself as serializable representation. For non-cloneable state \r\n * the manager calls component specific methods \"toSnapshot\"/\"fromSnapshot\" to \r\n * switch between the internally stored state and the serializable state representation.\r\n * \r\n * A component instance's state might be marked as \"volatile\". Before creating the snapshot representation \r\n * for such a state the manager calls the component instance's method \"updateStateInComponentStateManager\"\r\n * (if the instance is currently mounted).\r\n * \r\n */\r\nexport default class ComponentStateManager {\r\n\r\n  constructor() {\r\n    this.stateMap = {};\r\n  }\r\n\r\n  /**\r\n   * Clear all content in the state manager.\r\n   */\r\n  clear = () => {\r\n    this.stateMap = {};\r\n  }\r\n\r\n  /**\r\n   * Get a snapshot representation of the full state. \r\n   * \r\n   * The result differs from our internal state representation: \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse \r\n   * we use a specific serializable representation.\r\n   * To obtain the specific serializable representation we ask the display component in charge.\r\n   * \r\n   * @param {ComponentDirectory} componentDirectory The directory of all currently visible component instances.\r\n   */\r\n  getStateSnapshot = componentDirectory => this.getSnapshot(entry => true, componentDirectory);\r\n\r\n\r\n  /**\r\n   * Get a snapshot representation of all state belonging to the specified task. \r\n   * \r\n   * The result differs from our internal state representation: \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse we use a specific serializable representation.\r\n   * To obtain the specific serializable representation we ask the display component in charge.\r\n   * \r\n   * @param {ComponentDirectory} componentDirectory The directory of all currently visible component instances.\r\n   */\r\n  getTaskSnapshot = (test, item, task, componentDirectory) => this.getSnapshot(entry => (IndexPathHelper.getRootFromPath(entry[0]) === IndexPathHelper.buildPathRoot(test, item, task)), componentDirectory);\r\n\r\n\r\n  /**\r\n   * Preload the given snapshot as our state memory. \r\n   * \r\n   * The expected snapshot structure differs from our internal state representation:  \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse we expect a specific serializable representation.\r\n   * To obtain the internal representation from the serializable representation we ask the display component in charge.\r\n   */\r\n  preloadWithStateSnapshot = (snapshot) => {\r\n    this.stateMap = ComponentStateManager.fromSnapshotRepresentation(Object.entries(snapshot));\r\n  }\r\n\r\n\r\n  /**\r\n   * Register the given state representation (coming from a snapshot) for the given pathId.\r\n   * \r\n   * The expected snapshot structure differs from our internal state representation: \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse we expect a specific serializable representation.\r\n   * To obtain the internal representation from the serializable representation we ask the display component in charge.\r\n   */\r\n  registerStateChangeFromSnapshot = (pathId, state) => {\r\n    this.stateMap[pathId] = ComponentStateManager.fromSnapshotRepresentationForSingleEntry(pathId, state);\r\n  }\r\n\r\n  /**\r\n   * Register the given state for the given pathId.\r\n   * \r\n   * The method stores a 'deep copy' of the state depending on the deepCopy flag in the state. \r\n   */\r\n  registerStateByPathId = (pathId, state, runtime) => {\r\n    this.stateMap[pathId] = ComponentStateManager.doDeepCopyIfRequired(state);\r\n    TraceLogHelper.dumpStateChangeToTrace('ComponentState', {\r\n      pathId, state: ComponentStateManager.toSnapshotRepresentationForSingleEntry(pathId, this.stateMap[pathId])\r\n    }, runtime.traceLogBuffer)\r\n  }\r\n\r\n  /**\r\n   * Find the state for the given path id. \r\n   * The method implicitly tries to create an initial state if there is no\r\n   * state registered yet.\r\n   * This will fail if the task loaded in the task/page manager in the runtime \r\n   * does not match the task of the given path id. \r\n   */\r\n  findOrBuildStateForPathId = (pathId, runtime) => this.findOrBuildStateForPathIdInternal(pathId, runtime);\r\n\r\n\r\n  /**\r\n   * Register the given state with a pathId corresponding to the given userDefPath. \r\n   * The method will build the pathId using the path root currently loaded in the given runtime.\r\n   */\r\n  registerStateByUserDefPath = (userDefPath, state, runtime) => {\r\n    this.registerStateByPathId(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime), state, runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Find the state for the given userDefPath. \r\n   * The method implicitly tries to create an initial state if there is no\r\n   * state registered yet. The method will implicitly register the created \r\n   * initial state with a pathId using the path root currently loaded\r\n   * in the given runtime.\r\n   */\r\n  findOrBuildStateByUserDefPath = (userDefPath, runtime) => this.findOrBuildStateForPathId(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime), runtime);\r\n\r\n\r\n  /**\r\n   * Return all already existing index paths that pass the given filter.\r\n   */\r\n  filterExistingPathIds = filterMethod => Object.keys(this.stateMap).filter(key => filterMethod(key));\r\n\r\n\r\n  // private stuff ------------------------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Find the state for the given path id. \r\n   * The method implicitly tries to create an initial state if there is no\r\n   * state registered yet.\r\n   * \r\n   * The method manages the cloning of the state (if cloning is possible).\r\n   * \r\n   * Creation of a new, initial state will fail if the task loaded in the task/page manager in the runtime \r\n   * does not match the task of the given path id. \r\n   * We build the new initial state for a component instance based on the configuration data for \r\n   * the component in the page definition. \r\n   */\r\n  findOrBuildStateForPathIdInternal = (pathId, runtime) => {\r\n    const registered = ComponentStateManager.doDeepCopyIfRequired(this.stateMap[pathId]);\r\n    if (registered !== undefined) return registered;\r\n\r\n    const rootFromPath = IndexPathHelper.getRootFromPath(pathId);\r\n    const rootInRuntime = runtime.taskManager.getCurrentStatePathRoot();\r\n    if (!rootFromPath === rootInRuntime) {\r\n      console.warn(`Cannot create state for ${pathId} since runtime is loaded for ${rootInRuntime}`);\r\n      return undefined;\r\n    }\r\n\r\n    const initialState = ComponentStateManager.buildStateFromConfig(pathId, runtime);\r\n    this.registerStateByPathId(pathId, initialState, runtime);\r\n\r\n    return initialState;\r\n  }\r\n\r\n  // Methods for building new initial state ...............................\r\n\r\n  /**\r\n   * Build a new, initial state for a component instance based on the configuration data for \r\n   * the component in the page definition. \r\n   * \r\n   * We put a standard set of attributes into the new state. \r\n   * For some component types we call the component's class to add specific attributes.\r\n   */\r\n  static buildStateFromConfig(pathId, runtime) {\r\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(pathId);\r\n    if (pageSegment === undefined) {\r\n      console.warn(`Empty page segment chopped off from path id ${pathId}`);\r\n    }\r\n    const { pageConfigurationsManager } = runtime;\r\n    const componentConfiguration = pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (componentConfiguration === undefined) {\r\n      console.error(`Cannot find configuration for path ${pageSegment}`);\r\n      return undefined;\r\n    }\r\n    const { config, type } = componentConfiguration;\r\n    const result = {};\r\n\r\n    // store and return deep copies of state per default (components may change this in their addAttributesToInitialState methods):\r\n    StateAttributeAccess.setDeepCopy(result, true);\r\n    // mark state as 'not volatile' per default (components may change this in their addAttributesToInitialState methods):\r\n    StateAttributeAccess.setVolatile(result, false);\r\n\r\n    StateAttributeAccess.setDisabled(result, CommonConfigHelper.getDisabled(config));\r\n    StateAttributeAccess.setHidden(result, CommonConfigHelper.getHidden(config));\r\n    StateAttributeAccess.setVisited(result, false);\r\n    StateAttributeAccess.setSelected(result, CommonConfigHelper.getSelected(config));\r\n    const positionInConfig = CommonConfigHelper.getPosition(config);\r\n    if (positionInConfig !== undefined) {\r\n      StateAttributeAccess.setPosition(result, {\r\n        x: positionInConfig.x,\r\n        y: positionInConfig.y\r\n      });\r\n    }\r\n    StateAttributeAccess.setDefaultLinkReceiver(result, ComponentStateManager.calculateDefaultLinkReceiver(pathId, pageConfigurationsManager));\r\n    if (config.text !== undefined && config.text.label !== undefined) {\r\n      StateAttributeAccess.setTextValue(result, config.text.label)\r\n    }\r\n    const dragAndDropInConfig = CommonConfigHelper.getDragAndDrop(config);\r\n    StateAttributeAccess.setDragAndDrop(result, {\r\n      isSender: (dragAndDropInConfig !== undefined && dragAndDropInConfig.sender !== undefined),\r\n      isReceiver: (dragAndDropInConfig !== undefined && dragAndDropInConfig.receiver !== undefined)\r\n    });\r\n    PropagationHelper.addPropagationGroupControllerState(result, config);\r\n    SelectGroupHelper.addSelectGroupControllerState(result, type, pathId, config);\r\n    SelectGroupHelper.addSelectGroupMemberInfo(result, type, pathId, runtime);\r\n    switch (type) {\r\n      case \"CbaSingleLineInputField\":\r\n        InputComponent.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaSimpleTextField\":\r\n        CbaSimpleTextField.addAttributesToInitialState(result, config, runtime);\r\n        break;\r\n      case \"CbaPageArea\":\r\n        CbaPageArea.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaRichTextField\":\r\n        CbaRichTextField.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaMedia\":\r\n        CbaMedia.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaTable\":\r\n        CbaTable.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaInputField\":\r\n        InputComponent.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaTree\":\r\n        CbaTree.addAttributesToInitialState(result, config, pathId, runtime);\r\n        break;\r\n      case \"CbaExternalPageFrame\":\r\n        CbaExternalPageFrame.addAttributesToInitialState(result, config);\r\n        break;\r\n      default:\r\n      // do nothing here\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate the default link receiver for page links that don't explicitly specify \r\n   * a receiver.\r\n   * \r\n   * The method calculates the default receiver as follows:\r\n   * - Starting from the given display component instance we climb up the\r\n   *   tree of embedding CbaPageAreas (i.e. the page segments in the index path).\r\n   * - The first CbaPageArea with its 'catchLinks' configuration option set to true \r\n   *   becomes the default receiver. \r\n   * - If there is not such CbaPageArea, the default receiver is 'undefined'. \r\n   * \r\n   * The method returns 'undefined' if an error occurs. \r\n   * \r\n   * @param {*} path The index path of the display component instance.\r\n   * @param {*} pageConfigurationManager The page configuration manager providing static display component configurations.\r\n   */\r\n  static calculateDefaultLinkReceiver(path, pageConfigurationsManager) {\r\n    // We ignore the last display component instance which can be any type of component, \r\n    // i.e. it might not even have a catch links configuration setting.\r\n    let remainingPath = IndexPathHelper.dropPageSegmentFromPath(path);\r\n\r\n    if (remainingPath !== undefined) {\r\n      let pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n      while (pageSegment !== undefined) {\r\n        const isLinkCatcher = ComponentStateManager.isLinkCatcher(pageSegment, pageConfigurationsManager, path);\r\n        if (isLinkCatcher === undefined) {\r\n          return undefined;\r\n        }\r\n        if (isLinkCatcher) {\r\n          return IndexPathHelper.trimRootAndPageAreaFromPath(remainingPath);\r\n        }\r\n        remainingPath = IndexPathHelper.dropPageSegmentFromPath(remainingPath);\r\n        pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Does the display component specified by the given index pageSegment catch links? \r\n   * \r\n   * The method returns undefined if the specified component does not have a catch link setting in its static configuration. \r\n   * \r\n   * @param {*} pageSegment The page segment specifying the display component.\r\n   * @param {*} pageConfigurationManager The page configuration manager providing static display component configurations.\r\n   * @param {*} path The full path (used for log messages only).\r\n   */\r\n  static isLinkCatcher(pageSegment, pageConfigurationsManager, path) {\r\n    // The last display component of a page segment that is followed by another page segment\r\n    // has to be a CbaPageArea component (or more specifically: it has to have a 'catchLink' property at least).\r\n    const linkCatcherConfiguration = pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (linkCatcherConfiguration === undefined) {\r\n      console.error(`Missing page embedding component at end of inner page segment: ${pageSegment} in path ${path}`);\r\n      return undefined;\r\n    }\r\n    const catchLinkSetting = linkCatcherConfiguration.config.catchLinks;\r\n    if (catchLinkSetting === undefined) {\r\n      console.error(`Missing catch link configuration for page embedding component at end of inner page segment: ${pageSegment} in path ${path}`);\r\n      return undefined;\r\n    }\r\n    return catchLinkSetting === true;\r\n  }\r\n\r\n\r\n  // Methods for cloning and serializable representations ...............................\r\n\r\n  /**\r\n   * Return a clone of the given state if the state is marked as cloneable by JSON.stringify/parse.\r\n   * Otherwise return the given state itself.\r\n   */\r\n  static doDeepCopyIfRequired(state) {\r\n    if (state === undefined) return undefined;\r\n\r\n    // set deepCopy per default:\r\n    if (StateAttributeAccess.extractDeepCopy(state) === undefined) {\r\n      StateAttributeAccess.setDeepCopy(state, true);\r\n    }\r\n\r\n    return StateAttributeAccess.extractDeepCopy(state) === false ? state : StateManagerHelper.deepCopy(state);\r\n  }\r\n\r\n  /**\r\n   * Apply updateVolatiles and toSnapshotRepresentation on those entries in our state map that match the given filter.\r\n   */\r\n  getSnapshot(entryFilter, componentDirectory) {\r\n    ComponentStateManager.updateVolatiles(Object.entries(this.stateMap).filter(entryFilter), componentDirectory);\r\n    return ComponentStateManager.toSnapshotRepresentation(Object.entries(this.stateMap).filter(entryFilter));\r\n  }\r\n\r\n  /**\r\n   * Update all state entries marked as 'volatile' by calling the update method on their component instances.\r\n   * \r\n   * The method skips component instances that are not visible currently. \r\n   * \r\n   * @param {*} entries The entries to be updated.\r\n   * @param {ComponentDirectory} componentDirectory The directory of all currently visible component instances.\r\n   */\r\n  static updateVolatiles(entries, componentDirectory) {\r\n    entries.forEach((entry) => {\r\n      const [path, state] = entry;\r\n      if (StateAttributeAccess.extractVolatile(state)) {\r\n        const componentInstance = componentDirectory.findComponent(path);\r\n        if (componentInstance !== undefined) {\r\n          // Components that set the 'volatile' flag to true must implement a 'updateStateInComponentStateManager method:\r\n          componentInstance.updateStateInComponentStateManager();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a snapshot representation for the given list of state entries.\r\n   * \r\n   * The snapshot representation is cloneable.\r\n   * \r\n   * @param {*} entries The entries to be transformed\r\n   */\r\n  static toSnapshotRepresentation(entries) {\r\n    const result = {};\r\n    entries.forEach((entry) => {\r\n      const [path, state] = entry;\r\n      result[path] = this.toSnapshotRepresentationForSingleEntry(path, state);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create a snapshot state representation for the given internal component state representation\r\n   * for the given path.\r\n   * \r\n   * @param {*} state The component state to be transformed.\r\n   */\r\n  static toSnapshotRepresentationForSingleEntry(path, state) {\r\n    if (StateAttributeAccess.extractDeepCopy(state)) {\r\n      return StateManagerHelper.deepCopy(state);\r\n    } else {\r\n      return ComponentStateManager.toSnapshotRepresentationByComponent(path, state);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a proper component state representation for the given list of snapshot entries.\r\n   * \r\n   * @param {*} entries The snapshot entries to be transformed.\r\n   */\r\n  static fromSnapshotRepresentation(entries) {\r\n    const result = {};\r\n    entries.forEach((entry) => {\r\n      const [path, state] = entry;\r\n      result[path] = this.fromSnapshotRepresentationForSingleEntry(path, state);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create a proper component state representation for the given snapshot state representation\r\n   * for the given path.\r\n   * \r\n   * @param {*} state The snapshot state to be transformed.\r\n   */\r\n  static fromSnapshotRepresentationForSingleEntry(path, state) {\r\n    if (StateAttributeAccess.extractDeepCopy(state)) {\r\n      return StateManagerHelper.deepCopy(state);\r\n    } else {\r\n      return ComponentStateManager.fromSnapshotRepresentationByComponent(path, state);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a proper component state representation for the given snapshot state\r\n   * representation, which is not cloneable and therefore needs a component specific\r\n   * transformation.  \r\n   * \r\n   * @param {*} state The snapshot state to be transformed.\r\n   */\r\n  static toSnapshotRepresentationByComponent(path, state) {\r\n    const componentClassName = StateAttributeAccess.extractComponentClassName(state);\r\n    if (componentClassName === undefined) {\r\n      console.error(`Cannot create snapshot for component state in path ${path}`, state);\r\n      return undefined;\r\n    } else {\r\n      switch (componentClassName) {\r\n        case \"CbaRichTextField\":\r\n          return CbaRichTextField.toSnapshot(path, state);\r\n        case \"CbaTable\": // this is probably unreachable: there is not CbaTable.toSnapshot and CbaTable does not set deepCopy flag -> verify in debugger\r\n          return CbaTable.toSnapshot(path, state);\r\n        default:\r\n          console.error(`Unexpected component class ${componentClassName} for snapshot in path ${path}`, state);\r\n          return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a snapshot representation for the given internal component state\r\n   * representation, which is not cloneable and therefore needs a component specific\r\n   * transformation.  \r\n   * \r\n   * @param {*} state The component state to be transformed.\r\n   */\r\n  static fromSnapshotRepresentationByComponent(path, state) {\r\n    const componentClassName = StateAttributeAccess.extractComponentClassName(state);\r\n    if (componentClassName === undefined) {\r\n      console.error(`Cannot extract component state from snapshot for path ${path}`, state);\r\n      return undefined;\r\n    } else {\r\n      switch (componentClassName) {\r\n        case \"CbaRichTextField\":\r\n          return CbaRichTextField.fromSnapshot(path, state);\r\n        case \"CbaTable\":\r\n          return CbaTable.fromSnapshot(path, state);\r\n        default:\r\n          console.error(`Unexpected component class ${componentClassName} in snapshot in path ${path}`, state);\r\n          return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * A catalog of components. \r\n * \r\n * Components are identified by their index path. \r\n * \r\n * While the different instances of this catalog could be used \r\n * we currently have a single instance of it only that \r\n * keeps a catalog of all currently rendering components.\r\n */\r\nexport default class ComponentDirectory {\r\n\r\n  constructor() {\r\n    this.componentList = {};\r\n\r\n    this.clear = this.clear.bind(this);\r\n    this.registerComponent = this.registerComponent.bind(this);\r\n    this.deregisterComponent = this.deregisterComponent.bind(this);\r\n    this.findComponent = this.findComponent.bind(this);\r\n  }\r\n\r\n  clear() {\r\n    this.componentList = {};\r\n  }\r\n\r\n  registerComponent(path, component) {\r\n    this.componentList[path] = component;\r\n  }\r\n\r\n  deregisterComponent(path) {\r\n    this.componentList[path] = undefined;\r\n  }\r\n\r\n  findComponent(path) {\r\n    return this.componentList[path];\r\n  }\r\n\r\n  findByComponentType(componentType) {\r\n    return Object.values(this.componentList).filter(c => c instanceof componentType);\r\n  }\r\n\r\n  /**\r\n   * don't use this method in constructor, because page isn't loaded yet, hence an empty array will be return\r\n   * @param {*} pageName \r\n   */\r\n  findComponentsByPageName(pageName) {\r\n    return Object.keys(this.componentList).map((path) => {\r\n      if (path.indexOf(`page=${pageName}`) !== -1) {\r\n        return this.componentList[path];\r\n      }\r\n      return undefined;\r\n    }).filter(x => !!x);\r\n  }\r\n\r\n  findSubTreeComponentsWithinAPage(pageName, treeInstnancesUserDefinedIds) {\r\n    const pageComponents = this.findComponentsByPageName(pageName);\r\n    const treeComnOnPage = [];\r\n    for (let i = 0, len = treeInstnancesUserDefinedIds.length; i < len; i += 1) {\r\n      for (let j = 0, lenComp = pageComponents.length; j < lenComp; j += 1) {\r\n        if (pageComponents[j].props.config.userDefinedId === treeInstnancesUserDefinedIds[i]) {\r\n          treeComnOnPage.push(pageComponents[j]);\r\n        }\r\n      }\r\n    }\r\n    return treeComnOnPage;\r\n  }\r\n\r\n\r\n  findTreeViewComponentsWithinAPage(pageName, treeInstnancesUserDefinedIds, treeChildAreaIdToIgnore) {\r\n    const cbaTrees = this.findSubTreeComponentsWithinAPage(pageName, treeInstnancesUserDefinedIds);\r\n    const subTreeIds = cbaTrees[0].props.config.treeInstnancesUserDefinedIds;\r\n    const subTreeViewIds = subTreeIds.filter(comp => comp !== treeChildAreaIdToIgnore);\r\n    const pageComponents = this.findComponentsByPageName(pageName);\r\n\r\n    const treeViewComnOnPage = [];\r\n    for (let i = 0, len = subTreeViewIds.length; i < len; i += 1) {\r\n      for (let j = 0, lenComp = pageComponents.length; j < lenComp; j += 1) {\r\n        if (pageComponents[j].props.config.userDefinedId === subTreeViewIds[i]) {\r\n          treeViewComnOnPage.push(pageComponents[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return treeViewComnOnPage;\r\n  }\r\n\r\n\r\n}\r\n","import StateManagerHelper from './StateManagerHelper';\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\nexport default class IncidentsAccumulator {\r\n\r\n  constructor() {\r\n    this.taskValuesList = {};\r\n    this.currentTaskPath = undefined;\r\n    this.startTimeOfCurrentTask = undefined;\r\n    this.startOfCurrentPause = undefined;\r\n    this.timeSpentPausedInCurrentTask = undefined;\r\n    this.firstReactionSeen = undefined;\r\n    this.lastContinuingInteractionKey = undefined;\r\n  }\r\n\r\n  // update values ------------------------------------------------------------------\r\n\r\n  enterTask = (taskPath, atTime, runtime) => {\r\n    this.leaveTask(atTime, runtime);\r\n\r\n    this.currentTaskPath = taskPath;\r\n    this.startTimeOfCurrentTask = atTime;\r\n    this.startTimeOfCurrentPause = undefined;\r\n    this.timeSpentPausedInCurrentTask = 0;\r\n    this.firstReactionSeen = false;\r\n    this.lastContinuingInteractionKey = undefined;\r\n    const values = this.getOrInitializeValuesForTask(taskPath);\r\n    values.nbUserInteractions = 0;\r\n    values.firstReactionTime = undefined;\r\n    values.taskExecutionTime = 0;\r\n    IncidentsAccumulator.dumpStateChangeToTrace(this.currentTaskPath, values, runtime);\r\n  }\r\n\r\n  /**\r\n   * Count a single user interaction. \r\n   * \r\n   * If a continuingInteractionKey is given \r\n   * the method will ignore all but the first call of a consecutive sequence of calls \r\n   * that use the same continuingInteractionKey.  \r\n   * \r\n   * @param {*} atTime The timestamp of the interaction, used for first reaction timing.\r\n   * @param {{type: String, value: String}} continuingInteractionKey The key used to identify a user interaction that might trigger \r\n   *  several consecutive calls to this method but should be counted once only. \r\n   */\r\n  userInteraction = (atTime, continuingInteractionKey, runtime) => {\r\n    if (this.lastContinuingInteractionKey\r\n      && continuingInteractionKey\r\n      && this.lastContinuingInteractionKey.type === continuingInteractionKey.type\r\n      && this.lastContinuingInteractionKey.value === continuingInteractionKey.value) {\r\n      return;\r\n    }\r\n    this.lastContinuingInteractionKey = continuingInteractionKey;\r\n    if (this.currentTaskPath !== undefined) {\r\n      const values = this.getOrInitializeValuesForTask(this.currentTaskPath);\r\n      values.nbUserInteractions += 1;\r\n      values.nbUserInteractionsTotal += 1;\r\n\r\n      if (!this.firstReactionSeen) {\r\n        values.firstReactionTime = IncidentsAccumulator.getNonPausedTimeSpentInCurrentTask(atTime, this.startTimeOfCurrentTask, this.timeSpentPausedInCurrentTask, this.startTimeOfCurrentPause);\r\n        values.firstReactionTimeTotal += values.firstReactionTime;\r\n        this.firstReactionSeen = true;\r\n      }\r\n      IncidentsAccumulator.dumpStateChangeToTrace(this.currentTaskPath, values, runtime);\r\n    }\r\n  }\r\n\r\n  leaveTask = (atTime, runtime) => {\r\n    if (this.currentTaskPath !== undefined) {\r\n      const values = this.getOrInitializeValuesForTask(this.currentTaskPath);\r\n      values.taskExecutionTime = IncidentsAccumulator.getNonPausedTimeSpentInCurrentTask(atTime, this.startTimeOfCurrentTask, this.timeSpentPausedInCurrentTask, this.startTimeOfCurrentPause);\r\n      values.taskExecutionTimeTotal += values.taskExecutionTime;\r\n      IncidentsAccumulator.dumpStateChangeToTrace(this.currentTaskPath, values, runtime);\r\n    }\r\n    this.currentTaskPath = undefined;\r\n    this.startTimeOfCurrentTask = undefined;\r\n    this.startTimeOfCurrentPause = undefined;\r\n    this.timeSpentPausedInCurrentTask = undefined;\r\n    this.firstReactionSeen = undefined;\r\n    this.lastContinuingInteractionKey = undefined;\r\n  }\r\n\r\n  pauseTask = (atTime) => {\r\n    if (this.startTimeOfCurrentPause === undefined) {\r\n      this.startTimeOfCurrentPause = atTime;\r\n    }\r\n  }\r\n\r\n  resumeTask = (atTime) => {\r\n    if (this.startTimeOfCurrentPause !== undefined) {\r\n      // tolerate resume calls without any active task:\r\n      if (this.timeSpentPausedInCurrentTask !== undefined) {\r\n        this.timeSpentPausedInCurrentTask += atTime - this.startTimeOfCurrentPause;\r\n      }\r\n      this.startTimeOfCurrentPause = undefined;\r\n    }\r\n  }\r\n\r\n\r\n  // get values --------------------------------------------------------------------\r\n  nbUserInteractions = taskPath => this.getValuesForTask(taskPath).nbUserInteractions\r\n\r\n  nbUserInteractionsTotal = taskPath => this.getValuesForTask(taskPath).nbUserInteractionsTotal\r\n\r\n  firstReactionTime = taskPath => this.getValuesForTask(taskPath).firstReactionTime\r\n\r\n  firstReactionTimeTotal = taskPath => this.getValuesForTask(taskPath).firstReactionTimeTotal\r\n\r\n  taskExecutionTime = (taskPath, atTime) => {\r\n    if (taskPath === this.currentTaskPath) {\r\n      return IncidentsAccumulator.getNonPausedTimeSpentInCurrentTask(atTime, this.startTimeOfCurrentTask, this.timeSpentPausedInCurrentTask, this.startTimeOfCurrentPause);\r\n    } else {\r\n      return this.getValuesForTask(taskPath).taskExecutionTime;\r\n    }\r\n  }\r\n\r\n  taskExecutionTimeTotal = taskPath => this.getValuesForTask(taskPath).taskExecutionTimeTotal\r\n\r\n  /**\r\n   * Get a structure containing all values for the given task (for use in trace log e.g.).\r\n   */\r\n  getAllValuesForTask = (taskPath, atTime) => {\r\n    // The taskExecutionTime in the values array is not updated until we leave a task.\r\n    // -> Get the the current value for our result:\r\n    const result = StateManagerHelper.deepCopy(this.getValuesForTask(taskPath));\r\n    result.taskExecutionTime = this.taskExecutionTime(taskPath, atTime);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the historical state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.taskValuesList);\r\n\r\n  /**\r\n   * Drop history for all tasks.\r\n   */\r\n  clearTasksState = () => { this.taskValuesList = {}; };\r\n\r\n  /**\r\n   * Preload the historical tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.taskValuesList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change for a task triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, state) => {\r\n    this.taskValuesList[taskPath] = state;\r\n  }\r\n\r\n\r\n  // private stuff --------------------------------------------------------------------\r\n  static getTimeSpentInPausedState(atTime, timeSpentInEarlierPauses, startTimeOfCurrentPause) {\r\n    return timeSpentInEarlierPauses + (startTimeOfCurrentPause === undefined ? 0 : atTime - startTimeOfCurrentPause);\r\n  }\r\n\r\n  static getNonPausedTimeSpentInCurrentTask(atTime, startTimeOfCurrentTask, timeSpentPausedInCurrentTask, startTimeOfCurrentPause) {\r\n    return atTime - startTimeOfCurrentTask - IncidentsAccumulator.getTimeSpentInPausedState(atTime, timeSpentPausedInCurrentTask, startTimeOfCurrentPause);\r\n  }\r\n\r\n  getValuesForTask = (taskPath) => {\r\n    if (this.taskValuesList[taskPath] === undefined) {\r\n      return IncidentsAccumulator.buildInitialValues();\r\n    }\r\n    return this.taskValuesList[taskPath];\r\n  }\r\n\r\n  getOrInitializeValuesForTask = (taskPath) => {\r\n    if (this.taskValuesList[taskPath] === undefined) {\r\n      this.taskValuesList[taskPath] = IncidentsAccumulator.buildInitialValues();\r\n    }\r\n    return this.taskValuesList[taskPath];\r\n  }\r\n\r\n  static buildInitialValues() {\r\n    return {\r\n      nbUserInteractions: 0,\r\n      nbUserInteractionsTotal: 0,\r\n      firstReactionTime: undefined,\r\n      firstReactionTimeTotal: 0,\r\n      taskExecutionTime: 0,\r\n      taskExecutionTimeTotal: 0\r\n    }\r\n  }\r\n\r\n  static dumpStateChangeToTrace(taskPath, state, runtime) {\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'IncidentsAccumulatorState',\r\n      {\r\n        taskPath,\r\n        state\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","import TermEvaluator from './TermEvaluator';\r\n\r\nexport default class ConditionalLinkHelper {\r\n\r\n  static evaluateConditionalLink(conditionalLink, runtime) {\r\n    if (conditionalLink === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    // find the first branch that fulfills its condition:\r\n    const { branches } = conditionalLink;\r\n    if (branches === undefined) {\r\n      ConditionalLinkHelper.logUndefinedMessage('branches array');\r\n      ConditionalLinkHelper.logCalculation('undefined (branches undefined)');\r\n      return undefined;\r\n    }\r\n\r\n    const chosenBranch = branches.find((branch, index) => {\r\n      if (branch.condition === undefined) {\r\n        ConditionalLinkHelper.logUndefinedMessage('condition in branch');\r\n        return false;\r\n      }\r\n      return TermEvaluator.evaluateTerm(branch.condition, runtime, [], `guard[${index}]`) === true\r\n    });\r\n    if (chosenBranch === undefined) {\r\n      ConditionalLinkHelper.logCalculation('undefined (no branch chosen)');\r\n      return undefined;\r\n    }\r\n\r\n    // execute the actions of the fulfilling branch:\r\n    if (chosenBranch.actions === undefined) {\r\n      ConditionalLinkHelper.logUndefinedMessage('actions in chosen branch');\r\n    } else {\r\n      chosenBranch.actions.forEach((action, index) => {\r\n        if (action === undefined) {\r\n          ConditionalLinkHelper.logUndefinedMessage('action in action array of chosen branch');\r\n        } else {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `action[${index}]`);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (chosenBranch.page === undefined) {\r\n      ConditionalLinkHelper.logUndefinedMessage('page in selected branch');\r\n      ConditionalLinkHelper.logCalculation('undefined (no page in chosen branch)');\r\n      return undefined;\r\n    }\r\n\r\n    const result = chosenBranch.page;\r\n    ConditionalLinkHelper.logCalculation(result);\r\n    return result;\r\n  }\r\n\r\n\r\n  static logUndefinedMessage(propertyName) {\r\n    console.log(`Conditional link definition contains undefined ${propertyName}`);\r\n  }\r\n\r\n  static logCalculation(result) {\r\n    console.log(`Conditional link evaluates to `, result);\r\n  }\r\n\r\n}\r\n","import CommonConfigHelper from \"./CommonConfigHelper\";\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport CbaComboBox from '../components/CbaComboBox';\r\nimport CbaRichTextField from '../components/CbaRichTextField/CbaRichTextField';\r\nimport CbaCalculatorInput from \"../components/calculator/CbaCalculatorInput\";\r\nimport CbaTableCell from \"../components/table/CbaTableCell\";\r\nimport CbaList from \"../components/list/CbaList\";\r\n\r\n/**\r\n * Provide access to the configuration of the currently active item.\r\n */\r\nexport default class PageConfigurationsManager {\r\n\r\n  /**\r\n   * Create a configuration manager to provide access to the configuration of the given item.\r\n   * \r\n   * @param {*} item The configuration of the item. \r\n   */\r\n  constructor(item) {\r\n    this.pagesList = item.pages;\r\n    this.buildMappings(item.pages);\r\n\r\n    this.findPage = this.findPage.bind(this);\r\n    this.findPageSegmentForUserDefId = this.findPageSegmentForUserDefId.bind(this);\r\n    this.findConfigurationForPageSegment = this.findConfigurationForPageSegment.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Get the configuration object for the specified page.\r\n   */\r\n  findPage(pageName) {\r\n    return this.pagesList.find((value, index, theArray) => value.name === pageName);\r\n  }\r\n\r\n  /**\r\n   * Get page segment (for use in index paths) of the display component specified by the given UserDefinedId.\r\n   * \r\n   * The page segment starts with the name of the parent page followed by an index \r\n   * into the children array for each CbaContainer from the page root to the display component identified\r\n   * by the UserDefinedId, e.g. \r\n   *   /page=pageA/index=3/index=1\r\n   */\r\n  findPageSegmentForUserDefId(userDefinedId) {\r\n    const result = this.userDefinedIdCatalog[userDefinedId];\r\n    if (result === undefined) {\r\n      console.warn(`Cannot find page segment for user defined id ${userDefinedId}`)\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get page segment (for use in index paths) of the text block specified by the given text block name.\r\n   * \r\n   * The page segment starts with the name the parent page followed by an index \r\n   * into the children array for each CbaContainer from the page root to the rich text component \r\n   * owning the text block, e.g. \r\n   *   /page=pageA/index=3/index=1\r\n   */\r\n  findPageSegmentForTextBlockOwner(blockName) {\r\n    // The method is called to test whether an ID is a block name, therefore not finding any hit is no error.\r\n    return this.textBlockNameCatalog[blockName];\r\n  }\r\n\r\n  /**\r\n   * Get the configuration object for the display component specified by the given page segment. \r\n   * \r\n   * You may obtain the page segment for a display component by calling findPageSegmentForUserDefId(...).\r\n   */\r\n  findConfigurationForPageSegment(pageSegment, supressWarning) {\r\n    const result = this.pageSegmentCatalog[pageSegment];\r\n    if (!supressWarning && result === undefined) {\r\n      console.warn(`Cannot find configuration for page segment ${pageSegment}`)\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  // private stuff --------------------------------------------------------------------------\r\n  buildMappings(pages) {\r\n\r\n    // map (userDefinedId) -> (page segment for component to be used in index path)\r\n    this.userDefinedIdCatalog = {};\r\n\r\n    // map (text block name) -> (page segment for CbaRichText component containing the text block to be used in index path)\r\n    this.textBlockNameCatalog = {}\r\n\r\n    // map (page segment from index path) -> (description structure for component as given in item description JSON)\r\n    this.pageSegmentCatalog = {};\r\n\r\n    pages.forEach((page, index, all) => {\r\n      this.addMappingsForPage(page);\r\n    })\r\n  }\r\n\r\n  addMappingsForPage(page) {\r\n    const pageName = page.name;\r\n    this.addMappingsForComponent(IndexPathHelper.buildPageSegment(pageName), page.content);\r\n  }\r\n\r\n\r\n  addMappingsForComponent(pageSegment, component) {\r\n    if (component === undefined || component.config === undefined) {\r\n      console.warn(`Found invalid component configuration at page segment ${pageSegment}`);\r\n    }\r\n\r\n    this.addMappings(pageSegment, component);\r\n\r\n    const { type, config } = component;\r\n    switch (type) {\r\n      case 'CbaContainer':\r\n        this.addMappingsForComponentList(pageSegment, component.config.cbaChildren);\r\n        break;\r\n      case 'CbaRegionMap':\r\n        this.addMappingsForComponentList(pageSegment, component.config.regions);\r\n        break;\r\n      case 'CbaComboBox':\r\n        this.addMappingsForComponentList(pageSegment, CbaComboBox.buildComboBoxItemsArray(component.config.items));\r\n        break;\r\n      case 'CbaList':\r\n        this.addMappingsForComponentList(pageSegment, CbaList.buildListItemsArray(component.config.items));\r\n        break;\r\n      case 'CbaRichTextField':\r\n        this.addMappingsForComponentList(CbaRichTextField.addLinkIndex(pageSegment), CbaRichTextField.buildLinkConfigurationsArray(component.config));\r\n        if (config.contentModifiers !== undefined) {\r\n          this.addMappingsForComponentList(CbaRichTextField.addContentModifierIndex(pageSegment), component.config.contentModifiers);\r\n        }\r\n        if (config.textBlocks !== undefined) {\r\n          component.config.textBlocks.forEach((textBlock, index, all) => {\r\n            this.textBlockNameCatalog[textBlock.name] = pageSegment;\r\n          });\r\n        }\r\n        break;\r\n      case 'CbaTable':\r\n        this.addMappingsForComponentList(pageSegment, config.cbaChildren);\r\n        break;\r\n      case 'CbaTableCell':\r\n        if (config.isSpreadsheet === true) {\r\n          if (config.items !== undefined) {\r\n            const comboboxCopy = CbaTableCell.createCellCopy(component, pageSegment, \"CbaComboBox\");\r\n            this.addMappings(comboboxCopy.path, comboboxCopy);\r\n            this.addMappingsForComponentList(comboboxCopy.path, CbaComboBox.buildComboBoxItemsArray(config.items));\r\n          } else {\r\n            const inputCopy = CbaTableCell.createCellCopy(component, pageSegment, \"CbaSingleLineInputField\");\r\n            this.addMappings(inputCopy.path, inputCopy);\r\n          }\r\n        }\r\n        this.addMappingsForComponentList(pageSegment, config.cbaChildren);\r\n        break;\r\n      case 'CbaCalculatorInput':\r\n      {\r\n        const { delegatePath, delegateComponent } = CbaCalculatorInput.createDelegateComponent(component, pageSegment, 'CbaSimpleTextField')\r\n        this.addMappings(delegatePath, delegateComponent);\r\n        break;\r\n      }\r\n      case 'CbaCalculatorHistory':\r\n      {\r\n        const { delegatePath, delegateComponent } = CbaCalculatorInput.createDelegateComponent(component, pageSegment, 'CbaSimpleTextField')\r\n        this.addMappings(delegatePath, delegateComponent);\r\n        break;\r\n      }\r\n      case 'CbaMedia':\r\n        this.addMappingsForComponentList(pageSegment, config.cbaChildren);\r\n        break;\r\n      default:\r\n        // nothing to do for other component types.\r\n    }\r\n  }\r\n\r\n  addMappings(pageSegment, component) {\r\n    this.pageSegmentCatalog[pageSegment] = component;\r\n    const userDefinedId = CommonConfigHelper.getUserDefinedId(component.config);\r\n    if (userDefinedId !== undefined) {\r\n      this.userDefinedIdCatalog[userDefinedId] = pageSegment;\r\n    }\r\n  }\r\n\r\n  addMappingsForComponentList(rootPath, components) {\r\n    if (components !== undefined) {\r\n      components.forEach((component, index, all) => {\r\n        const path = IndexPathHelper.appendIndexToPageSegment(rootPath, index);\r\n        this.addMappingsForComponent(path, component);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","export default class CalculationsConfigurationManager {\r\n\r\n  constructor(item) {\r\n    this.tasksList = item.tasks;\r\n    this.variables = item.variables;\r\n    this.implicitVariables = item.implicitVariables;\r\n  }\r\n\r\n  /**\r\n   * Find the calculation with the given name configured for the given task.\r\n   * \r\n   * The method returns 'undefined' if no matching calculation exists.\r\n   * \r\n   */\r\n  findCalculationByTaskName = (taskName, calculationName) => {\r\n    const calculationEntry = this.findAllCalculationsByTaskName(taskName).find((value, index, all) => value.name === calculationName);\r\n    return calculationEntry === undefined ? undefined : calculationEntry.calculation;\r\n  }\r\n\r\n  /**\r\n   * Find all named calculations configured for the given task.\r\n   * \r\n   * The method returns a list of calculation configurations.\r\n   * \r\n   */\r\n  findAllCalculationsByTaskName = (taskName) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n    return task.namedCalculations;\r\n  }\r\n\r\n  /**\r\n   * Find the score result list with the given name for the given task.\r\n   */\r\n  findScoreResultListByTaskName = (taskName, listName) => {\r\n    const allResultLists = this.findAllScoreResultListsByTaskName(taskName);\r\n    const list = allResultLists.find((value, index, theArray) => value.name === listName);\r\n    if (list === undefined) {\r\n      console.log(`Cannot find score result list configuration for task name ${taskName} and list name ${listName}`);\r\n      return [];\r\n    }\r\n    return list.elements;\r\n  }\r\n\r\n\r\n  /**\r\n   * Find all result lists that are part of the score result for a given task.\r\n   * \r\n   */\r\n  findAllScoreResultListsByTaskName = (taskName) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n    return task.scoreResult.lists;\r\n  }\r\n\r\n  /**\r\n   * Find the attributes structure of the score result for a given task.\r\n   */\r\n  findScoreResultAttributesByTaskName = (taskName) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n    return task.scoreResult.attributes;\r\n  }\r\n\r\n  /**\r\n   * Find the relevant variables that must be provided as result variables in the scoring result structure for a given task.\r\n   * Not Relevant -> the variables that are used in hit conditions for the given task.\r\n   *              -> their names are provided in the 'excludedVariablesList' structure.\r\n   */\r\n  findRelevantVariablesForTask = (taskName, implicitVariables) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n\r\n    let targetVariables = this.variables;\r\n    if (implicitVariables) targetVariables = this.implicitVariables;\r\n\r\n    const excludedVariables = this.findScoreResultListByTaskName(taskName, 'excludedVariablesList');\r\n    return targetVariables.filter(obj => !excludedVariables.includes(obj.name));\r\n  }\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\n/**\r\n * Keep the state of all tasks. \r\n * \r\n * The task state contains:\r\n * - The names of the currently loaded pages in the standard and xPage areas.\r\n * - The list of dialog windows and the name of the page loaded in each.\r\n * - The size (width and height) of the item defining the task.\r\n * - The layout configuration (space used for xPage area, size and color of divider etc.) of the task.\r\n * - The highlight color of the item defining the task.\r\n */\r\nexport default class PresenterStateManager {\r\n\r\n  constructor() {\r\n    this.taskEntriesList = {};\r\n  }\r\n\r\n\r\n  /**\r\n   * Save the given task state for the task identified by the task path.\r\n   */\r\n  saveTaskState = (taskPath, state, runtime) => {\r\n    const newState = StateManagerHelper.deepCopy(state);\r\n    this.taskEntriesList[taskPath] = newState;\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'PresenterStateManagerState',\r\n      {\r\n        taskPath,\r\n        state: newState\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * Get the task state for the task identified by the task path.\r\n   */\r\n  getTaskState = taskPath => StateManagerHelper.deepCopy(this.taskEntriesList[taskPath]);\r\n\r\n  /**\r\n  * Remove a dialog or a modal dialog from task state.\r\n  *\r\n  * The method does nothing if no dialog with the given name and type exists.\r\n  * \r\n  * @param {string} pageAreaName The name of the dialog to be removed\r\n  * @param {string} pageAreaType The type of dialog being removed\r\n  * @param {string} taskPath The task from which is being removed\r\n  * \r\n  */\r\n  removeDialog = (pageAreaName, pageAreaType, taskPath, runtime) => {\r\n    const taskState = this.taskEntriesList[taskPath];\r\n\r\n    taskState.dialogs = taskState.dialogs.filter(dialog => dialog.pageAreaName !== pageAreaName || dialog.type !== pageAreaType);\r\n\r\n    this.saveTaskState(taskPath, taskState, runtime);\r\n  }\r\n\r\n  /**\r\n  * Mark a dialog or a modal dialog as not visible from task state.\r\n  *\r\n  * The method does nothing if no dialog with the given name and type exists.\r\n  * \r\n  * @param {string} pageAreaName The name of the dialog to be removed\r\n  * @param {string} pageAreaType The type of dialog being removed\r\n  * @param {string} taskPath The task from which is being removed\r\n  * \r\n  */\r\n  hideDialog = (pageAreaName, pageAreaType, taskPath, runtime) => {\r\n    const taskState = this.taskEntriesList[taskPath];\r\n\r\n    const removableDialog = taskState.dialogs.find(dialog => dialog.pageAreaName === pageAreaName && dialog.type === pageAreaType);\r\n    if (removableDialog) {\r\n      removableDialog.visible = false;\r\n    } else {\r\n      console.warn(\"Dialog not found - \", pageAreaType, pageAreaName);\r\n    }\r\n\r\n    this.saveTaskState(taskPath, taskState, runtime);\r\n  }\r\n\r\n  /**\r\n  * Mark a dialog or a modal dialog as not visible from task state.\r\n  *\r\n  * The method does nothing if no dialog with the given page name exists.\r\n  * \r\n  * @param {string} pageName The name of the specific dialog page to be removed\r\n  * @param {string} taskPath The task from which is being removed\r\n  * \r\n  */\r\n    hideSpecificPageDialog = (pageName, taskPath, runtime) => {\r\n      const taskState = this.taskEntriesList[taskPath];\r\n\r\n      const removableDialog = taskState.dialogs.find(dialog => dialog.pageName === pageName);\r\n      if (removableDialog) {\r\n        removableDialog.visible = false;\r\n      } else {\r\n        console.warn(\"Dialog not found - \", pageName);\r\n      }\r\n\r\n      this.saveTaskState(taskPath, taskState, runtime);\r\n    }\r\n\r\n  /**\r\n  * Update the position of a dialog or a modal dialog in task state.\r\n  * \r\n  * The method implicitly sets the focus flag to true for the given dialog \r\n  * and false for all other dialogs.\r\n  *\r\n  * The method does not complain if no dialog with the given name and type exists.\r\n  * \r\n  * @param {string} pageAreaName The name of the dialog to be modified\r\n  * @param {string} pageAreaType The type of the dialog to be modified\r\n  * @param {string} taskPath The task from which is being removed\r\n  * @param {x:int, y:int} newPosition The new position to set for the dialog\r\n  * \r\n  */\r\n  updatePositionAndFocusDialog = (pageAreaName, pageAreaType, taskPath, newPosition, runtime) => {\r\n    const currentTaskState = this.taskEntriesList[taskPath];\r\n\r\n    currentTaskState.dialogs.forEach((dialog, index) => {\r\n      if (dialog.pageAreaName === pageAreaName && dialog.type === pageAreaType) {\r\n        dialog.position = newPosition;\r\n        dialog.focused = true;\r\n      } else {\r\n        dialog.focused = false;\r\n      }\r\n    });\r\n\r\n    this.saveTaskState(taskPath, currentTaskState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Build an initial task state object. \r\n   * \r\n   * @param {string} standardPage The name of the page loaded in the standard area.\r\n   * @param {string} xPage The name of the page loaded in the XPage area.\r\n   * @param {number} itemWidth The width of the item defining the task.\r\n   * @param {number} itemHeight The height of the item defining the task.\r\n   * @param {boolean} withEditContextMenu Should we include the edit context menu (and the keyboard shortcuts for cut/copy/paste)?\r\n   * @param {*} itemLayout The layout of the task (i.e. standard vs. xPage division).\r\n   * @param {string} itemHighlightColor The highlight color of the item defining the task.\r\n   * @param {string} cssStyles The string containing task CSS styles\r\n   */\r\n  static buildInitialTaskStateObject(standardPage, xPage, itemWidth, itemHeight, itemLayout, withEditContextMenu, itemHighlightColor, highlightColors, cssStyles) {\r\n    return {\r\n      standardPage,\r\n      xPage,\r\n      itemWidth,\r\n      itemHeight,\r\n      itemLayout,\r\n      withEditContextMenu,\r\n      dialogs: [],\r\n      itemHighlightColor,\r\n      highlightColors,\r\n      cssStyles\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Modify the page name and position for the given page area in the given task state.\r\n   * \r\n   * @param {string} pageName The new page name to set.\r\n   * @param {{ x: integer, y: integer}} position The new position of the page area to set. Not used for main page areas.\r\n   * @param {string} pageAreaType The type of the page area to modify.\r\n   * @param {string} pageAreaName The name of the page area to modify.\r\n   * @param {*} taskState The task state object containing the page area configurations to be changed.\r\n   */\r\n  static setPageForPageAreaInTaskState(pageName, position, pageAreaType, pageAreaName, taskState) {\r\n    switch (pageAreaType) {\r\n      case 'main':\r\n        PresenterStateManager.setMainAreaPage(pageName, pageAreaName, taskState);\r\n        break;\r\n      case 'dialog':\r\n        PresenterStateManager.changeOrCreatePageArea(pageName, position, pageAreaName, \"dialog\", taskState.dialogs);\r\n        break;\r\n      case 'modal':\r\n        PresenterStateManager.changeOrCreatePageArea(pageName, position, pageAreaName, \"modal\", taskState.dialogs);\r\n        break;\r\n      default:\r\n        console.error(`Unknown page area type: ${pageAreaType}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the page name for the standard or xPage area.\r\n   * \r\n   * @param {string} pageName The new page name to set.\r\n   * @param {string} pageAreaName The name of the page area: 'standard' or 'xPage'.\r\n   * @param {string} taskState \r\n   * @param {*} taskState The task state object containing the page area configurations to be changed.\r\n   */\r\n  static setMainAreaPage(pageName, pageAreaName, taskState) {\r\n    switch (pageAreaName) {\r\n      case 'standard':\r\n        taskState.standardPage = pageName;\r\n        break;\r\n      case 'xPage':\r\n        taskState.xPage = pageName;\r\n        break;\r\n      default:\r\n        console.error(`Unknown page area name for 'main' page area type: ${pageAreaName}`);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Set the page name and position for a page area identified by the given area name and area type residing in the given page area list.\r\n   * \r\n   * The method implicitly creates an entry for the page area if there is no such entry yet.\r\n   * \r\n   * @param {string} pageName The new page name to set.\r\n   * @param {{ x: integer, y: integer}} position The new position of the page area to set.\r\n   * @param {string} pageAreaName The name of the page area.\r\n   * @param {string} pageAreaType The type of the page area.\r\n   * @param {[]} pageAreaList The list of page areas to modify.\r\n   */\r\n  static changeOrCreatePageArea(pageName, position, pageAreaName, pageAreaType, pageAreaList) {\r\n    const pageAreaEntry = pageAreaList.find(value => value.pageAreaName === pageAreaName && value.type === pageAreaType);\r\n    if (pageAreaEntry === undefined) {\r\n      pageAreaList.push({\r\n        pageAreaName,\r\n        type: pageAreaType,\r\n        pageName,\r\n        position,\r\n        visible: true\r\n      });\r\n    } else {\r\n      pageAreaEntry.pageName = pageName;\r\n      pageAreaEntry.position = position;\r\n      pageAreaEntry.visible = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.taskEntriesList);\r\n\r\n  /**\r\n   * Drop all tasks.\r\n   */\r\n  clearTasksState = () => { this.taskEntriesList = {}; };\r\n\r\n  /**\r\n   * Preload the tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.taskEntriesList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change for a task triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, state) => {\r\n    this.taskEntriesList[taskPath] = state;\r\n  }\r\n\r\n}\r\n","import TermEvaluator from \"./TermEvaluator\";\r\n\r\n/**\r\n * Service to map values to strings using value maps configured in the item configuration.\r\n */\r\nexport default class ValueMapper {\r\n\r\n  // ---------- public API ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build a value mapper service. \r\n   */\r\n  constructor(item, runtime) {\r\n    this.valueMaps = item.valueMaps;\r\n    this.runtime = runtime;\r\n  }\r\n\r\n  /**\r\n   * Map a value using the specified map.\r\n   * \r\n   * The method returns undefined if the specified value map does not exist \r\n   * or the given value cannot not find an accepting guard.\r\n   */\r\n  getMappedValue = (valueMapName, valueToMap) => {\r\n    const valueMapToUse = this.valueMaps.find(valueMap => valueMap.name === valueMapName);\r\n    if (valueMapToUse === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const acceptingGuard = valueMapToUse.guards.find(\r\n      (guard, index) => TermEvaluator.evaluateTerm(guard.guardTerm, this.runtime, [valueToMap], `guard[${index}]_${valueMapName}`) === true\r\n    );\r\n    if (acceptingGuard === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    return acceptingGuard.value;\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from './IndexPathHelper';\r\nimport ConditionalLinkHelper from '../eval/ConditionalLinkHelper';\r\nimport PageConfigurationsManager from '../config/PageConfigurationsManager';\r\nimport CalculationsConfigurationManager from '../config/CalculationsConfigurationManager';\r\nimport PresenterStateManager from './PresenterStateManager';\r\nimport TraceLogHelper from './TraceLogHelper';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\nimport CommonActionsHelper from '../components/CommonActionsHelper';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport TermEvaluator from '../eval/TermEvaluator';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport ValueMapper from '../eval/ValueMapper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\nimport Utils from '../utils/Utils';\r\nimport ComponentStateHelper from './ComponentStateHelper';\r\n\r\nexport default class TaskManager {\r\n\r\n  /**\r\n   * @param {*} runtime Access to the global services. \r\n   */\r\n  constructor(runtime) {\r\n\r\n    this.itemInfoEntries = [];\r\n    this.handleTopLevelPageChange = undefined;\r\n    this.switchCallback = undefined;\r\n    this.availabilityCallback = undefined;\r\n    this.runtime = runtime;\r\n\r\n    this.activeTestName = undefined;\r\n    this.activeItemName = undefined;\r\n    this.activeTaskName = undefined;\r\n\r\n    this.activeResourcePath = undefined;\r\n    this.activeExternalResourcePath = undefined;\r\n  }\r\n\r\n\r\n  // -------- public API -------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Set the callback that we will call each time a top level page changes.\r\n   */\r\n  setTopLevelPageChangeHandler = (topLevelPageChangeHandler) => {\r\n    this.handleTopLevelPageChange = topLevelPageChangeHandler;\r\n  }\r\n\r\n  /**\r\n   * Add an item to our item configurations array.\r\n   */\r\n  addItem = (itemConfiguration, resourcePath, externalResourcePath) => {\r\n    this.itemInfoEntries.push({\r\n      itemConfiguration, resourcePath, externalResourcePath\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Clear all items in our item configurations array.\r\n   */\r\n  clearItems = () => {\r\n    this.itemInfoEntries = [];\r\n  }\r\n\r\n  /**\r\n   * Set the callback that we will use to trigger task switches.\r\n   */\r\n  setSwitchCallback = (switchCallback) => {\r\n    this.switchCallback = switchCallback;\r\n  }\r\n\r\n  /**\r\n   * Set the callback that we will ask about availability of task switches.\r\n   */\r\n  setAvailabilityCallback = (availabilityCallback) => {\r\n    this.availabilityCallback = availabilityCallback;\r\n  }\r\n\r\n\r\n  /**\r\n   * Trigger a switch to the first task with the given name inside a specific test (i.e. we ignore the source item).\r\n   */\r\n  switchFirstMatchingTaskInterTest = (newTestName, newTaskName) => {\r\n    this.triggerGoToTask(newTestName, undefined, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to the first task with a matching name in the current test (i.e. we ignore the source item). \r\n   */\r\n  switchFirstMatchingTaskIntraTest = (newTaskName) => {\r\n    this.switchFirstMatchingTaskInterTest(this.activeTestName, newTaskName);\r\n  };\r\n\r\n  /**\r\n   * Trigger a switch to the specified task in the specified test. \r\n   */\r\n  switchTaskInterTest = (newTestName, newItemName, newTaskName) => {\r\n    this.triggerGoToTask(newTestName, newItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to the specified task in the current test. \r\n   */\r\n  switchTaskIntraTest = (newItemName, newTaskName) => {\r\n    this.triggerGoToTask(this.activeTestName, newItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to another task inside the active item.\r\n   */\r\n  switchTaskIntraItem = (newTaskName) => {\r\n    this.triggerGoToTask(this.activeTestName, this.activeItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to the next task in our test course. \r\n   */\r\n  switchTaskNext = () => {\r\n    this.triggerTaskSwitch('nextTask', undefined, undefined, undefined);\r\n  }\r\n\r\n  /**\r\n   * Could we currently perform a switch to the next task?\r\n   */\r\n  nextTaskAvailable = () => this.checkAvailableTask('nextTask', undefined, undefined, undefined);\r\n\r\n  /**\r\n   * Trigger a switch to the previous task in our test course.\r\n   */\r\n  switchTaskPrevious = () => {\r\n    this.triggerTaskSwitch('previousTask', undefined, undefined, undefined);\r\n  }\r\n\r\n  /**\r\n   * Could we currently perform a switch to the previous task?\r\n   */\r\n  previousTaskAvailable = () => this.checkAvailableTask('previousTask', undefined, undefined, undefined);\r\n\r\n  /**\r\n   * Trigger to cancel the currently running task.\r\n   */\r\n  cancelTask = () => {\r\n    this.triggerTaskSwitch('cancelTask', undefined, undefined, undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to another page inside the same item (no task switch).\r\n   * \r\n   * This is a method combining all page switching types implied by the config.link configuration variants. \r\n   * // TODO: Simplify the link configuration structure and the TermEvaluator.switchPage operator parameters.\r\n   * \r\n   * @param {String} newPageName The name of a default page to load into the page area if no conditional link is given or it does not return a page.\r\n   * @param {Object} conditionalLink A conditional link configuration to be evaluated and to obtain a page to be loaded.\r\n   * @param {String} pageUrl The URL to use for the new page.\r\n   * @param {String} pageAreaType The type of the page area in the test presenter resp. containing the receiver.\r\n   * @param {String} pageAreaName The name of the page area in the test presenter resp. containing the receiver.\r\n   * @param {String} receiver The index path (without path root and page area type/name) of the CbaPageArea that should be modified.\r\n   * @param {{name: String, image: String}} receiverTab The tab in the CbaPageArea to load the page into (optional). \r\n   * @param {String} historyMove The kind of 'move' in the page history: 'forward', 'back' or 'home'\r\n   * @param {{x: integer, y: integer}} position The position where we should open the dialog window (not used for pageAreaType='main'). \r\n   * If not specified we will use the postion of the top level frame. \r\n   * If not specified the dialog will open at its previous position or centered if it was not opened before.\r\n   * \r\n   */\r\n  switchPage = (newPageName, conditionalLink, pageUrl, pageAreaType, pageAreaName, receiver, receiverTab, historyMove, position) => {\r\n    if (receiver === undefined) {\r\n      const evaluationResult = ConditionalLinkHelper.evaluateConditionalLink(conditionalLink, this.runtime);\r\n      if (evaluationResult === undefined) {\r\n        if (newPageName === undefined) {\r\n          console.error(`No page chosen by link specification: default page: ${newPageName} conditionalLink: ${conditionalLink}`);\r\n        } else {\r\n          const combinedPosition = (position === undefined)\r\n            ? CommonActionsHelper.getTopComponentPosition(newPageName, this.runtime.pageConfigurationsManager)\r\n            : position;\r\n          this.switchTopLevelPage(pageAreaType, pageAreaName, newPageName, combinedPosition);\r\n        }\r\n      } else {\r\n        this.switchTopLevelPage(\r\n          evaluationResult.pageAreaType,\r\n          evaluationResult.pageAreaName,\r\n          evaluationResult.pageName,\r\n          evaluationResult.position\r\n        );\r\n      }\r\n    } else {\r\n      const fullReceiverPath = IndexPathHelper.appendPageSegmentToPathRoot(this.getCurrentStatePathRoot(), pageAreaType, pageAreaName, receiver);\r\n      if (historyMove === undefined) {\r\n        const evaluationResult = ConditionalLinkHelper.evaluateConditionalLink(conditionalLink, this.runtime);\r\n        if (evaluationResult === undefined) {\r\n          if (newPageName === undefined) {\r\n            console.error(`No page chosen by link specification: default page: ${newPageName} conditionalLink: ${conditionalLink}`);\r\n          } else {\r\n            this.switchEmbeddedPage(fullReceiverPath, newPageName, pageUrl, receiverTab);\r\n          }\r\n        } else {\r\n          const { pageAreaType: evaluatedPageAreaType } = evaluationResult;\r\n          if (evaluatedPageAreaType === 'main') {\r\n            this.switchEmbeddedPage(fullReceiverPath, evaluationResult.pageName, evaluationResult.pageUrl, evaluationResult.receiverTab);\r\n          } else {\r\n            this.switchTopLevelPage(\r\n              evaluatedPageAreaType,\r\n              evaluationResult.pageAreaName,\r\n              evaluationResult.pageName,\r\n              evaluationResult.position\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        this.doHistoryMove(fullReceiverPath, historyMove);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch the top level page of a page area in the test presenter.\r\n   * \r\n   * @param {String} pageAreaType The type of the page area in the test presenter.\r\n   * @param {String} pageAreaName The name of the page area in the test presenter.\r\n   * @param {String} newPageName The name of the page to load into the page area.\r\n   * @param {{x: integer, y: interger}} position The position of the the page area (for 'dialog' page areas only).\r\n   */\r\n  switchTopLevelPage = (pageAreaType, pageAreaName, newPageName, position) => {\r\n    this.runtime.traceLogBuffer.reportEvent('PageSwitchTopLevel', new Date(),\r\n      {\r\n        pageAreaType,\r\n        pageAreaName,\r\n        newPageName,\r\n        position\r\n      });\r\n\r\n    TaskManager.preparePageSwitchInPresenterState(\r\n      this.activeTestName, this.activeItemName, this.activeTaskName,\r\n      pageAreaType, pageAreaName, newPageName, position,\r\n      this.runtime\r\n    );\r\n    if (this.handleTopLevelPageChange !== undefined) {\r\n      this.handleTopLevelPageChange();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch the currently embedded page in a CbaPageArea display component instance to an explicitly given page.\r\n   * \r\n   * @param {String} fullReceiverPath The full index path of the CbaPageArea display component instance to modify.\r\n   * @param {String} newPageName The name of the page to load into the page area.\r\n   * @param {String} pageUrl The URL to use for the new page.\r\n   * @param {{name: String, image: String}} receiverTab The tab in the CbaPageArea to load the page into (optional). \r\n   */\r\n  switchEmbeddedPage = (fullReceiverPath, newPageName, pageUrl, receiverTab) => {\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(fullReceiverPath, this.runtime);\r\n    this.runtime.traceLogBuffer.reportEvent('PageSwitchEmbedded', new Date(),\r\n      {\r\n        indexPath: fullReceiverPath,\r\n        userDefIdPath,\r\n        userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\r\n        tab: receiverTab === undefined ? undefined : receiverTab.name,\r\n        newPageName\r\n      });\r\n    CbaPageArea.setPageName(fullReceiverPath, receiverTab, newPageName, pageUrl, this.runtime);\r\n    RenderingHelper.triggerRenderingViaPath(fullReceiverPath, this.runtime);\r\n  }\r\n\r\n  /**\r\n   * Switch the currently embedded page in a CbaPageArea to the next or previous page in the page history.\r\n   * \r\n   * @param {String} fullReceiverPath The full index path of the CbaPageArea display component instance to modify.\r\n   * @param {String} historyMove The kind of 'move' in the page history: 'forward', 'back' or 'home'\r\n   */\r\n  doHistoryMove = (fullReceiverPath, historyMove) => {\r\n    CbaPageArea.doHistoryMove(fullReceiverPath, historyMove, this.runtime);\r\n    RenderingHelper.triggerRenderingViaPath(fullReceiverPath, this.runtime);\r\n  }\r\n\r\n  /**\r\n   * Get the path root for the current task (which is the same as the task ID returned by the methods above).\r\n   */\r\n  getCurrentStatePathRoot = () => IndexPathHelper.buildPathRoot(this.activeTestName, this.activeItemName, this.activeTaskName);\r\n\r\n  /**\r\n   * Get the path root for the given task (taking the current test and item for the other path components).\r\n   */\r\n  getStatePathRootForTask = taskName => IndexPathHelper.buildPathRoot(this.activeTestName, this.activeItemName, taskName);\r\n\r\n  /**\r\n   * The the names of the currently active test/item/task.\r\n   */\r\n  getCurrentTestTaskItemNames = () => ({\r\n    test: this.activeTestName,\r\n    item: this.activeItemName,\r\n    task: this.activeTaskName\r\n  });\r\n\r\n\r\n  /**\r\n   * Get the names of the pages currently displayed in the standard page area and the Xpage area.\r\n   */\r\n  getCurrentPageNames = () => {\r\n    const taskId = IndexPathHelper.buildPathRoot(this.activeTestName, this.activeItemName, this.activeTaskName);\r\n    const taskEntry = this.runtime.presenterStateManager.getTaskState(taskId);\r\n    return {\r\n      standardPage: taskEntry === undefined ? undefined : taskEntry.standardPage,\r\n      xPage: taskEntry === undefined ? undefined : taskEntry.xPage\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Calculate the results for all named calculations of the current task and save them in the task results manager. \r\n   */\r\n  saveCurrentTaskResults = () => {\r\n    const calculations = this.runtime.calculationsConfigurationManager.findAllCalculationsByTaskName(this.activeTaskName);\r\n    this.runtime.taskResultsManager.saveTaskResults(this.getCurrentStatePathRoot(), calculations, this.runtime);\r\n  }\r\n\r\n  /**\r\n   * Calculate the results for all named calculations of the current task, save them in the task results manager\r\n   * and return them as an object.\r\n   * The result object has one attribute per named calculation:\r\n   * The attribute name is the calculation name, the attribute's value is the calculation result. \r\n   */\r\n  getCurrentTaskResults = () => {\r\n    this.saveCurrentTaskResults();\r\n    return this.runtime.taskResultsManager.getResultsListForTask(this.getCurrentStatePathRoot());\r\n  }\r\n\r\n  /**\r\n   * Get the results for all named calculations of the given task from the task results manager\r\n   * and return them as an object.\r\n   * The result object has one attribute per named calculation:\r\n   * The attribute name is the calculation name, the attribute's value is the calculation result. \r\n   * \r\n   * The method does not recalculate anything. You should probably not use it for the currently running task!\r\n   * Use getCurrentTaskResults() to get up-to-date results for the currently running task. \r\n   */\r\n  getOldTaskResults = (task, item, test) => this.runtime.taskResultsManager.getResultsListForTask(IndexPathHelper.buildPathRoot(test, item, task));\r\n\r\n\r\n  /**\r\n   * Calculate the scoring results as specified in the scoring results configuration.\r\n   */\r\n  getScoring = () => {\r\n\r\n    const evaluationResult = {\r\n      hitRows: this.buildScoringHitMissListEvaluationResult('hitList'),\r\n      missRows: this.buildScoringHitMissListEvaluationResult('missList'),\r\n      hitClassRows: this.buildScoringClassListEvaluationResult('hitClassList'),\r\n      missClassRows: this.buildScoringClassListEvaluationResult('missClassList')\r\n    }\r\n\r\n    this.addScoringAttributesEvaluationResult(evaluationResult);\r\n    this.addResultVariablesEvaluationResult(evaluationResult);\r\n\r\n    return evaluationResult;\r\n  }\r\n\r\n\r\n  /*\r\n  * Gets the top level configuration of the current item\r\n  */\r\n  getTopLevelConfiguration = () => this.runtime.presenterStateManager.getTaskState(this.getCurrentStatePathRoot());\r\n\r\n\r\n  /**\r\n   * Get the resource path for the currently active item.\r\n   */\r\n  getResourcePath = () => this.activeResourcePath;\r\n\r\n  /**\r\n   * Get the external resource path for the currently active item.\r\n   */\r\n  getExternalResourcePath = () => this.activeExternalResourcePath;\r\n\r\n  /**\r\n   * Stop the currently running task.\r\n   * \r\n   * When calling this method you should make sure that the App does not show the LoggedInView\r\n   * since there will be no current task available after the call.\r\n   */\r\n  stopTask = () => {\r\n    // nothing to do if there is no task currently running\r\n    if (this.activeTaskName === undefined) {\r\n      return;\r\n    }\r\n\r\n    const { runtime } = this;\r\n    this.saveCurrentTaskResults();\r\n    TraceLogHelper.dumpSnapshotToTrace(runtime);\r\n\r\n    // Trace task switch\r\n    runtime.traceLogBuffer.reportEvent('TaskSwitch', new Date(),\r\n      {\r\n        oldTask: this.activeTaskName,\r\n        oldItem: this.activeItemName,\r\n        oldTest: this.activeTestName,\r\n        newTask: undefined,\r\n        newItem: undefined,\r\n        newTest: undefined,\r\n        taskResult: runtime.taskResultsManager.getResultsListForTask(this.getCurrentStatePathRoot()),\r\n      });\r\n\r\n    runtime.incidentsAccumulator.leaveTask(new Date().getTime(), runtime);\r\n    runtime.statemachinesManager.stopCurrentStatemachine();\r\n    this.activeTaskName = undefined;\r\n    runtime.traceLogBuffer.setTestItemTaskNames(this.activeTestName, this.activeItemName, this.activeTaskName);\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to a new test/task setting.\r\n   * \r\n   * The method returns the task ID or undefined if it could not do the switch.\r\n   * \r\n   * In replay mode the method does not run a state machine and does not configure\r\n   * the managers dealing the state that may change while running a task. \r\n   * (It switches the purely item configuration related managers to the new item \r\n   * in both modes.) \r\n   */\r\n  switchTask = (newTestName, newItemName, newTaskName, replayMode) => {\r\n    const { runtime } = this;\r\n    if (!(this.activeTaskName === undefined)) {\r\n      this.saveCurrentTaskResults();\r\n      TraceLogHelper.dumpSnapshotToTrace(runtime);\r\n    }\r\n\r\n    // Make sure we know the new item and task:\r\n    const itemInfo = TaskManager.getItemInfoForName(this.itemInfoEntries, newItemName);\r\n    if (itemInfo === undefined) {\r\n      return undefined;\r\n    }\r\n    const { itemConfiguration } = itemInfo;\r\n\r\n    const newTask = TaskManager.getTaskForName(itemConfiguration, newTaskName);\r\n    if (newTask === undefined) {\r\n      return undefined;\r\n    }\r\n    const newTaskId = IndexPathHelper.buildPathRoot(newTestName, newItemName, newTaskName);\r\n\r\n    // Do the switch: We cannot bail out now anymore...\r\n\r\n\r\n    // Trace task switch\r\n    runtime.traceLogBuffer.reportEvent('TaskSwitch', new Date(),\r\n      {\r\n        oldTask: this.activeTaskName,\r\n        oldItem: this.activeItemName,\r\n        oldTest: this.activeTestName,\r\n        newTask: newTaskName,\r\n        newItem: newItemName,\r\n        newTest: newTestName,\r\n        taskResult: runtime.taskResultsManager.getResultsListForTask(this.getCurrentStatePathRoot()),\r\n      });\r\n    runtime.traceLogBuffer.setTestItemTaskNames(newTestName, newItemName, newTaskName);\r\n\r\n\r\n    // Switch configurations managers to new item if necessary:\r\n    if (newItemName !== this.activeItemName) {\r\n      runtime.pageConfigurationsManager = new PageConfigurationsManager(itemConfiguration);\r\n      runtime.calculationsConfigurationManager = new CalculationsConfigurationManager(itemConfiguration);\r\n      runtime.valueMapper = new ValueMapper(itemConfiguration, runtime);\r\n      runtime.traceLogBuffer.reportEvent('ItemSwitch', new Date(), {\r\n        item: itemConfiguration,\r\n      })\r\n      this.activeResourcePath = itemInfo.resourcePath;\r\n      this.activeExternalResourcePath = itemInfo.externalResourcePath;\r\n    }\r\n\r\n    this.activeTestName = newTestName;\r\n    this.activeItemName = newItemName;\r\n    this.activeTaskName = newTaskName;\r\n\r\n    if (replayMode) {\r\n      runtime.statemachinesManager.stopCurrentStatemachine();\r\n      runtime.calculatorsManager.setOrInitializeCurrentCalculator(newTaskId, runtime);\r\n      runtime.statemachinesManager.switchCurrentStatemachineWithoutStarting(newTaskId);\r\n    } else {\r\n      runtime.incidentsAccumulator.enterTask(newTaskId, new Date().getTime(), runtime);\r\n\r\n      runtime.statemachinesManager.stopCurrentStatemachine();\r\n      runtime.variableManager.initializeVariablesForTask(\r\n        newTaskId, itemConfiguration.variables, TaskManager.getTaskForName(itemConfiguration, newTaskName).traceVariableValues, runtime\r\n      );\r\n      TaskManager.prepareTaskSwitchInPresenterAndNavigatorState(newTestName, newItemName, newTaskName, newTaskId, newTask, runtime);\r\n      runtime.calculatorsManager.setOrInitializeCurrentCalculator(newTaskId, runtime);\r\n      runtime.statemachinesManager.startOrInitializeCurrentStatemachine(newTaskId, itemConfiguration.statemachine, runtime);\r\n      TraceLogHelper.dumpFullStateToTrace(runtime);\r\n    }\r\n\r\n\r\n    return newTaskId;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => {\r\n    const {\r\n      componentStateManager,\r\n      componentDirectory,\r\n      variableManager,\r\n      statemachinesManager,\r\n      incidentsAccumulator,\r\n      presenterStateManager,\r\n      taskNavigatorStateManager,\r\n      taskResultsManager,\r\n      clipboardManager,\r\n      calculatorsManager\r\n    } = this.runtime;\r\n\r\n    return {\r\n      componentsState: componentStateManager.getStateSnapshot(componentDirectory),\r\n      statemachines: statemachinesManager.getStatemachinesPreloadData(),\r\n      variables: variableManager.getAllTasksState(),\r\n      incidents: incidentsAccumulator.getAllTasksState(),\r\n      presenterState: presenterStateManager.getAllTasksState(),\r\n      taskNavigatorState: taskNavigatorStateManager.getAllTasksState(),\r\n      taskResults: taskResultsManager.getAllTasksState(),\r\n      clipboard: clipboardManager.getAllTasksState(),\r\n      calculators: calculatorsManager.getAllTasksState()\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clear the current state of all state managers.\r\n   */\r\n  clearTasksState = () => {\r\n    const {\r\n      componentStateManager,\r\n      variableManager,\r\n      statemachinesManager,\r\n      incidentsAccumulator,\r\n      presenterStateManager,\r\n      taskNavigatorStateManager,\r\n      taskResultsManager,\r\n      clipboardManager,\r\n      calculatorsManager\r\n    } = this.runtime;\r\n    componentStateManager.clear();\r\n    variableManager.clearTasksState();\r\n    statemachinesManager.clearStatemachines(this.runtime);\r\n    incidentsAccumulator.clearTasksState();\r\n    presenterStateManager.clearTasksState();\r\n    taskNavigatorStateManager.clearTasksState();\r\n    taskResultsManager.clearTasksState();\r\n    clipboardManager.clearTasksState();\r\n    calculatorsManager.clearTasksState();\r\n  }\r\n\r\n  /**\r\n   * Preload the state managers with the state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    const {\r\n      componentStateManager,\r\n      variableManager,\r\n      statemachinesManager,\r\n      incidentsAccumulator,\r\n      presenterStateManager,\r\n      taskNavigatorStateManager,\r\n      taskResultsManager,\r\n      clipboardManager,\r\n      calculatorsManager\r\n    } = this.runtime;\r\n    componentStateManager.preloadWithStateSnapshot(allTasksState.componentsState);\r\n    variableManager.preloadTasksState(allTasksState.variables);\r\n    statemachinesManager.preloadStatemachinesData(allTasksState.statemachines, this.runtime);\r\n    incidentsAccumulator.preloadTasksState(allTasksState.incidents);\r\n    presenterStateManager.preloadTasksState(allTasksState.presenterState);\r\n    taskNavigatorStateManager.preloadTasksState(allTasksState.taskNavigatorState);\r\n    taskResultsManager.preloadTasksState(allTasksState.taskResults);\r\n    clipboardManager.preloadTasksState(allTasksState.clipboard);\r\n    calculatorsManager.preloadTasksState(allTasksState.calculators);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} itemName Name of the item.\r\n   * \r\n   * @returns {Array} Item resources\r\n   */\r\n  getItemResources = (itemName) => {\r\n    const itemInfo = this.getItemInfo(itemName);\r\n\r\n    if (!itemInfo) {\r\n      console.error(\"Could not find item\", itemName);\r\n      return null;\r\n    }\r\n    const { itemConfiguration, externalResourcePath, resourcePath } = itemInfo;\r\n    const { usedResources } = itemConfiguration;\r\n\r\n    const externalResources = Utils.mapResourcePath(usedResources.externalResources, externalResourcePath, true);\r\n    const internalResources = Utils.mapResourcePath(usedResources.resources, resourcePath, false);\r\n    const resources = externalResources.concat(internalResources);\r\n\r\n    return resources;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} itemName Name of the item.\r\n   * \r\n   * @returns {Array} Font file/font family name Objects\r\n   */\r\n  getCustomFontMappings = (itemName) => {\r\n    const itemInfo = this.getItemInfo(itemName);\r\n\r\n    if (!itemInfo) {\r\n      console.error(\"Could not find item\", itemName);\r\n      return null;\r\n    }\r\n    const { itemConfiguration } = itemInfo;\r\n    const { usedResources } = itemConfiguration;\r\n\r\n    return usedResources.fontMappings;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} itemName Name of the item.\r\n   * \r\n   * @returns {*} Item configuration object.\r\n   */\r\n  getItemInfo = itemName => this.itemInfoEntries.find(itemInfoEntry => itemInfoEntry.itemConfiguration.name === itemName);\r\n\r\n  // --- private stuff -------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Check the availability of a task switch using the availabilty callback.\r\n   */\r\n  checkAvailableTask = (requestType, newTestName, newItemName, newTaskName) => {\r\n    const callback = this.availabilityCallback;\r\n    return (callback !== undefined\r\n      ? callback(requestType, newTestName, newItemName, newTaskName)\r\n      : false);\r\n  }\r\n\r\n  /**\r\n   * Trigger a task switch to the specified task using the swich callback.\r\n   */\r\n  triggerGoToTask = (newTestName, newItemName, newTaskName) => {\r\n    this.triggerTaskSwitch('goToTask', newTestName, newItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a task switch using the swich callback.\r\n   */\r\n  triggerTaskSwitch = (requestType, newTestName, newItemName, newTaskName) => {\r\n    const callback = this.switchCallback;\r\n    if (callback !== undefined) {\r\n      callback(requestType, newTestName, newItemName, newTaskName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evaluate the given conditional link and return the calculated target page name. \r\n   * \r\n   * The method returns the given default page name if there is no conditional link \r\n   * or none of the guard conditions evaluate to true.\r\n   */\r\n  static evaluateConditionalLink(defaultPageName, conditionalLink, runtime) {\r\n    if (conditionalLink === undefined) return defaultPageName;\r\n\r\n    const conditionalLinkResult = ConditionalLinkHelper.evaluateConditionalLink(conditionalLink, runtime);\r\n    return conditionalLinkResult === undefined ? defaultPageName : conditionalLinkResult;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the item info object for the specified item.\r\n   * \r\n   * The method returns the item info object, i.e. an object with attributes \r\n   *  - itemConfiguration (which has attributes name, pages, statemachine, tasks)\r\n   *  - resourcePath\r\n   *  - externalResourcePath\r\n   */\r\n  static getItemInfoForName(items, itemName) {\r\n    const result = items.find((value, index, theArray) => value.itemConfiguration.name === itemName);\r\n    if (result === undefined) {\r\n      console.error(`Could not find info for item ${itemName}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the task configuration object for the specified task defined by the specified \r\n   * item configuration object.\r\n   * \r\n   * The method returns the task configuration object, i.e. an object with attributes \r\n   *  - name\r\n   *  - initialPage\r\n   *  - itemWidth\r\n   *  - ...\r\n   */\r\n  static getTaskForName(item, taskName) {\r\n    const result = item.tasks.find((value, index, theArray) => value.name === taskName);\r\n    if (result === undefined) {\r\n      console.error(`Could not find task ${taskName} in item ${item.name}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the state of the given test and task in the TaskNavigatorStateManager and the PresenterStateManager\r\n   * according to the current task switch.\r\n   * \r\n   * The method will always set the new item/task name in the test state.\r\n   * The method will not change an already existing task state but will create an initial task state if there is none yet.\r\n   * To build the initial task state it will evaluate the task initialization rule.\r\n   */\r\n  static prepareTaskSwitchInPresenterAndNavigatorState(\r\n    testName, itemName, taskName,\r\n    taskId, task, runtime\r\n  ) {\r\n    const { taskNavigatorStateManager, presenterStateManager } = runtime;\r\n    taskNavigatorStateManager.saveTestState(\r\n      testName,\r\n      {\r\n        itemName,\r\n        taskName,\r\n      },\r\n      runtime\r\n    );\r\n\r\n    const oldTaskEntry = presenterStateManager.getTaskState(taskId);\r\n    if (oldTaskEntry === undefined) {\r\n      const initialTaskEntry = PresenterStateManager.buildInitialTaskStateObject(\r\n        task.initialPage, task.initialXPage,\r\n        task.itemWidth, task.itemHeight, task.itemLayout,\r\n        task.withEditContextMenu,\r\n        task.itemHighlightColor, task.highlightColors,\r\n        task.cssStyles\r\n      );\r\n      presenterStateManager.saveTaskState(taskId, initialTaskEntry, runtime);\r\n\r\n      const conditionResult = ConditionalLinkHelper.evaluateConditionalLink(task.initRule, runtime);\r\n      if (conditionResult !== undefined) {\r\n        const afterConditionEvaluationTaskEntry = presenterStateManager.getTaskState(taskId);\r\n        PresenterStateManager.setPageForPageAreaInTaskState(\r\n          conditionResult.pageName,\r\n          conditionResult.position,\r\n          conditionResult.pageAreaType,\r\n          conditionResult.pageAreaName,\r\n          afterConditionEvaluationTaskEntry\r\n        );\r\n        presenterStateManager.saveTaskState(taskId, afterConditionEvaluationTaskEntry, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the state of the current task in the PresenterStateManager\r\n   * according to the current page switch.\r\n   * \r\n   * The method will set the new page (and for dialogs the new position) in the task state.\r\n   */\r\n  static preparePageSwitchInPresenterState(testName, itemName, taskName, pageAreaType, pageAreaName, newPage, position, runtime) {\r\n    const taskId = IndexPathHelper.buildPathRoot(testName, itemName, taskName);\r\n    const taskEntry = runtime.presenterStateManager.getTaskState(taskId);\r\n    if (taskEntry === undefined) {\r\n      console.error(`Switch to page ${newPage} for not existing task: ${taskId}`);\r\n    } else {\r\n      PresenterStateManager.setPageForPageAreaInTaskState(newPage, position, pageAreaType, pageAreaName, taskEntry);\r\n      runtime.presenterStateManager.saveTaskState(taskId, taskEntry, runtime);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Helper method that calculates the attributes of a scoring result configuration.\r\n   */\r\n  addScoringAttributesEvaluationResult = (evaluationResult) => {\r\n    const attributes = this.runtime.calculationsConfigurationManager.findScoreResultAttributesByTaskName(this.activeTaskName);\r\n    Object.keys(attributes).forEach((key) => {\r\n      evaluationResult[key] = TermEvaluator.evaluateTerm(attributes[key], this.runtime, [], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the elements of a hit/miss scoring results list.\r\n   */\r\n  buildScoringHitMissListEvaluationResult = (scoringListName) => {\r\n    const scoringList = this.runtime.calculationsConfigurationManager.findScoreResultListByTaskName(this.activeTaskName, scoringListName);\r\n\r\n    const resultRows = [];\r\n    scoringList.forEach((calculation) => {\r\n      if (TermEvaluator.evaluateTerm(calculation.result, this.runtime, [], calculation.name)) {\r\n        const resultText = TermEvaluator.evaluateTerm(calculation.resultText, this.runtime, [], `${calculation.name}_text`);\r\n        resultRows.push({\r\n          name: calculation.name,\r\n          weight: calculation.weight,\r\n          class: calculation.class,\r\n          resultText\r\n        });\r\n      }\r\n    });\r\n    return resultRows;\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the elements of a class scoring results list.\r\n   */\r\n  buildScoringClassListEvaluationResult = (scoringListName) => {\r\n    const scoringList = this.runtime.calculationsConfigurationManager.findScoreResultListByTaskName(this.activeTaskName, scoringListName);\r\n\r\n    return scoringList.map(calculation => ({\r\n      name: calculation.name,\r\n      comment: calculation.comment,\r\n      value: TermEvaluator.evaluateTerm(calculation.value, this.runtime, [], calculation.name),\r\n      result: calculation.result === undefined ? undefined : TermEvaluator.evaluateTerm(calculation.result, this.runtime, [], `${calculation.name}_result`)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the result variables included in the scoring result structure.\r\n   */\r\n  addResultVariablesEvaluationResult = (evaluationResult) => {\r\n    // compute result variables for classes\r\n    const classResultVariables = this.computeClassResultVariables(evaluationResult);\r\n\r\n    // compute result variables for explicit variables \r\n    const explicitResultVariables = this.computeExplicitResultVariables();\r\n\r\n    // compute result variables for implicit variables \r\n    const implicitResultVariables = this.simplifyImplicitVariablesName(this.computeImplicitResultVariables());\r\n\r\n    const sortedClassResultVariables = [...classResultVariables].sort((a, b) => a.name.localeCompare(b.name));\r\n    evaluationResult.resultVariables = [...sortedClassResultVariables, ...explicitResultVariables, ...implicitResultVariables];\r\n  }\r\n\r\n  simplifyImplicitVariablesName = implicitVariablesResult => implicitVariablesResult.map(implicitVariableResult => ({\r\n    ...implicitVariableResult,\r\n    name: this.simplifyImplicitVariableName(implicitVariableResult)\r\n  }))\r\n\r\n  simplifyImplicitVariableName = implicitVariableResult => UserDefPathHelper.simplifyUserDefIdPath(implicitVariableResult.name);\r\n\r\n  computeClassResultVariables = (evaluationResult) => {\r\n    const { hitRows, hitClassRows } = evaluationResult;\r\n    const attributes = this.runtime.calculationsConfigurationManager.findScoreResultAttributesByTaskName(this.activeTaskName);\r\n    const isFirstActiveMode = (attributes.classScoringModeHit === 'firstActive');\r\n\r\n    return hitClassRows.map((hitClass) => {\r\n      const winnerHit = this.retrieveWinnerHit(hitRows, hitClass, isFirstActiveMode);\r\n      const textResult = this.computeTextResultForClassVariable(winnerHit);\r\n      const nameResult = this.computeNameResultForClassVariable(winnerHit);\r\n      const labelResult = this.computeLabelResultForClassVariable(winnerHit);\r\n      return this.createResultVariable(hitClass.name, textResult, nameResult, labelResult);\r\n    });\r\n  }\r\n\r\n  computeExplicitResultVariables = () => {\r\n    const explicitVariables = this.runtime.calculationsConfigurationManager.findRelevantVariablesForTask(this.activeTaskName, false);\r\n    return explicitVariables.map((variable) => {\r\n      const { name, calculatedValue } = variable;\r\n      const value = TermEvaluator.evaluateTerm(calculatedValue, this.runtime, [], name);\r\n      return this.createResultVariable(name, value, value, '');\r\n    });\r\n  }\r\n\r\n  computeImplicitResultVariables = () => {\r\n    const implicitVariables = this.runtime.calculationsConfigurationManager.findRelevantVariablesForTask(this.activeTaskName, true);\r\n    return implicitVariables.flatMap((variable) => {\r\n      const { name } = variable;\r\n      const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(name, this.runtime);\r\n      const { scoringResultPerMember } = this.runtime.pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config;\r\n\r\n      return scoringResultPerMember ? this.createPerMemberImplicitResultVariablesFor(variable) : this.createDefaultImplicitResultVariablesFor(variable);\r\n    });\r\n  }\r\n\r\n  createDefaultImplicitResultVariablesFor = (variable) => {\r\n    const { name, calculatedValue, selectGroupNumber } = variable;\r\n    const variableName = (selectGroupNumber === undefined) ? name : (`${name}_${selectGroupNumber}`);\r\n    const variableValue = TermEvaluator.evaluateTerm(calculatedValue, this.runtime, [], name);\r\n    const resultVariable = this.createResultVariable(variableName, variableValue, variableValue, '');\r\n\r\n    // variable embedded in page areas\r\n    const retrieveImplicitVariablesEmbeddedInPageAreas = this.retrieveImplicitVariablesEmbeddedInPageAreasAsAbsoluteUDI(name);\r\n    const resultVariablesInPageAreas = retrieveImplicitVariablesEmbeddedInPageAreas.map((variableUdi) => {\r\n      const adaptedCalculatedValue = this.adaptValueForCalculation(calculatedValue, name, variableUdi);\r\n      const pageAreaVariableName = (selectGroupNumber === undefined) ? variableUdi : (`${variableUdi}_${selectGroupNumber}`);\r\n      const pageAreaVariableValue = TermEvaluator.evaluateTerm(adaptedCalculatedValue, this.runtime, [], name);\r\n      return this.createResultVariable(pageAreaVariableName, pageAreaVariableValue, pageAreaVariableValue, '');\r\n    })\r\n\r\n    return [resultVariable, ...resultVariablesInPageAreas];\r\n  }\r\n\r\n  createPerMemberImplicitResultVariablesFor = (variable) => {\r\n    const { name, calculatedValue, selectGroupNumber } = variable;\r\n    const adaptedCalculatedValue = this.adaptValueForCalculation(calculatedValue, 'getImplicitVariable', 'getInternalImplicitVariable');\r\n    const perMemberState = TermEvaluator.evaluateTerm(adaptedCalculatedValue, this.runtime, [], name);\r\n    const resultVariables = perMemberState.map((memberState) => {\r\n      const { userDefIdPath, selected } = memberState;\r\n      const variableName = (selectGroupNumber === undefined) ? (`${name}_${userDefIdPath}`) : (`${name}_${selectGroupNumber}_${userDefIdPath}`);\r\n      return this.createResultVariable(variableName, selected, selected, '');\r\n    })\r\n\r\n    // variable embedded in page areas\r\n    const retrieveImplicitVariablesEmbeddedInPageAreas = this.retrieveImplicitVariablesEmbeddedInPageAreasAsAbsoluteUDI(name);\r\n    const resultVariablesInPageAreas = retrieveImplicitVariablesEmbeddedInPageAreas.flatMap((variableUdi) => {\r\n      const adaptedIdCalculatedValue = this.adaptValueForCalculation(calculatedValue, name, variableUdi);\r\n      const adaptedOpCalculatedValue = this.adaptValueForCalculation(adaptedIdCalculatedValue, 'getImplicitVariable', 'getInternalImplicitVariable');\r\n      const pageAreaValuesPerMember = TermEvaluator.evaluateTerm(adaptedOpCalculatedValue, this.runtime, [], name);\r\n      const resultVariablesInPageAreasPerMember = pageAreaValuesPerMember.map((memberState) => {\r\n        const { userDefIdPath, selected } = memberState;\r\n        const pageAreaVariableName = (selectGroupNumber === undefined) ? (`${variableUdi}_${userDefIdPath}`) : (`${variableUdi}_${selectGroupNumber}_${userDefIdPath}`);\r\n        return this.createResultVariable(pageAreaVariableName, selected, selected, '');\r\n      })\r\n      return resultVariablesInPageAreasPerMember;\r\n    })\r\n\r\n    return [...resultVariables, ...resultVariablesInPageAreas];\r\n  }\r\n\r\n  createResultVariable = (nameValue, textResultValue, nameResultValue, labelResultValue) => ({\r\n    name: nameValue,\r\n    value: textResultValue,\r\n    valueHit: nameResultValue,\r\n    valueLabel: labelResultValue\r\n  })\r\n\r\n  adaptValueForCalculation = (obj, oldValue, newValue) => {\r\n    let jsonString = JSON.stringify(obj);\r\n    jsonString = jsonString.replace(new RegExp(`\"${oldValue}\"`, 'g'), `\"${newValue}\"`);\r\n    return JSON.parse(jsonString);\r\n  }\r\n\r\n  retrieveImplicitVariablesEmbeddedInPageAreasAsAbsoluteUDI = (implicitVariableAbsoluteUdi) => {\r\n    const implicitVariablesEmbeddedInPageAreas = [];\r\n    const implicitVariableUdi = UserDefPathHelper.getLastUserDefIdFromPath(implicitVariableAbsoluteUdi);\r\n    const pageAreaPathList = ComponentStateHelper.findIndexPathsInCurrentTaskOfComponentWithType('CbaPageArea', this.runtime);\r\n    pageAreaPathList.forEach((path) => {\r\n      const pageAreaAbsoluteUserDefId = PathTranslationHelper.getUserDefPathForIndexPath(path, this.runtime);\r\n      const pageAreaUserDefId = UserDefPathHelper.getLastUserDefIdFromPath(pageAreaAbsoluteUserDefId);\r\n      if (pageAreaUserDefId !== undefined && !pageAreaUserDefId.startsWith('$')) {\r\n        const memberPaths = ComponentStateHelper.findIndexPathsOfDescendants(path, this.runtime);\r\n        memberPaths.forEach((memberPath) => {\r\n          const memberAbsoluteUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(memberPath, this.runtime);\r\n          const memberUserDefId = UserDefPathHelper.getLastUserDefIdFromPath(memberAbsoluteUserDefPath);\r\n          if (memberUserDefId === implicitVariableUdi && !implicitVariablesEmbeddedInPageAreas.includes(memberAbsoluteUserDefPath)) {\r\n            implicitVariablesEmbeddedInPageAreas.push(memberAbsoluteUserDefPath);\r\n          }\r\n        });\r\n      }\r\n    })\r\n    return implicitVariablesEmbeddedInPageAreas;\r\n  }\r\n\r\n  retrieveWinnerHit = (hitRows, hitClass, isFirstActiveMode) => {\r\n    const findWinnerHitForAccumulatedMode = (rows, targetClass) => {\r\n      const filteredRows = rows.filter(row => row.class === targetClass);\r\n      return filteredRows.reduce((maxObject, currentObject) => {\r\n        if (currentObject.weight > (maxObject ? maxObject.weight : -Infinity)) {\r\n          return currentObject;\r\n        }\r\n        return maxObject;\r\n      }, null);\r\n    };\r\n\r\n    const findWinnerHitForFirstActiveMode = (rows, hitName, targetClass) => {\r\n      const filteredRows = rows.filter(row => row.class === targetClass && row.name === hitName);\r\n      if (filteredRows.length !== 1) return null;\r\n      return filteredRows[0];\r\n    };\r\n\r\n    const { name, value } = hitClass;\r\n    const winnerHit = (isFirstActiveMode ? findWinnerHitForFirstActiveMode(hitRows, value, name)\r\n      : findWinnerHitForAccumulatedMode(hitRows, name));\r\n    return winnerHit;\r\n  }\r\n\r\n  computeTextResultForClassVariable = (winnerHit) => {\r\n    if (winnerHit === undefined || winnerHit === null) return '';\r\n    return (winnerHit.resultText !== '') ? winnerHit.resultText : winnerHit.name;\r\n  }\r\n\r\n  computeNameResultForClassVariable = (winnerHit) => {\r\n    if (winnerHit === undefined || winnerHit === null) return '';\r\n    return winnerHit.name;\r\n  }\r\n\r\n  computeLabelResultForClassVariable = (winnerHit) => {\r\n    if (winnerHit === undefined || winnerHit === null) return '';\r\n\r\n    let labelResult = '';\r\n    const scoringList = this.runtime.calculationsConfigurationManager.findScoreResultListByTaskName(this.activeTaskName, 'hitList');\r\n    scoringList.map((calculation) => {\r\n      if (calculation.name === winnerHit.name) {\r\n        labelResult = TermEvaluator.evaluateTerm(calculation.resultLabel, this.runtime, [], calculation.name);\r\n      }\r\n      return labelResult;\r\n    });\r\n    return labelResult;\r\n  }\r\n\r\n  computeResultVariablesEvaluationResult = (currentResults) => {\r\n    const evaluationStructure = {};\r\n    evaluationStructure.hitRows = this.buildHitRowsFromCalculations(currentResults);\r\n    evaluationStructure.hitClassRows = this.buildHitClassRowsFromCalculations(currentResults);\r\n    this.addResultVariablesEvaluationResult(evaluationStructure);\r\n    return evaluationStructure;\r\n  }\r\n\r\n  buildHitRowsFromCalculations = (results) => {\r\n    const hitRows = [];\r\n    Object.keys(results).forEach((key) => {\r\n      if (key.startsWith('hit.')) {\r\n        const suffix = key.split('.')[1];\r\n        if (results[`hit.${suffix}`]) {\r\n          const hitRow = {\r\n            name: `${suffix}`,\r\n            class: results[`hitClass.${suffix}`],\r\n            weight: results[`hitWeighted.${suffix}`],\r\n            resultText: results[`hitText.${suffix}`]\r\n          };\r\n          hitRows.push(hitRow);\r\n        }\r\n      }\r\n    });\r\n    return hitRows;\r\n  }\r\n\r\n  buildHitClassRowsFromCalculations = (results) => {\r\n    const hitClassRows = [];\r\n    Object.keys(results).forEach((key) => {\r\n      if (key.startsWith('classHitWeighted.')) {\r\n        const suffix = key.split('.')[1];\r\n        const firstActiveHit = results[`classFirstActiveHit.${suffix}`];\r\n        const hitClassRow = {\r\n          name: `${suffix}`,\r\n          value: (firstActiveHit !== undefined) ? firstActiveHit : results[`classHitWeighted.${suffix}`],\r\n        };\r\n        hitClassRows.push(hitClassRow);\r\n      }\r\n    });\r\n    return hitClassRows;\r\n  }\r\n\r\n}\r\n","import TermEvaluator from '../eval/TermEvaluator';\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\nexport default class TaskResultsManager {\r\n\r\n  constructor() {\r\n    this.taskEntriesList = {};\r\n  }\r\n\r\n  // set values ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Calculate the results of all given named calculations for the given task and\r\n   * store them in the task results catalog.\r\n   * \r\n   * Note: Be aware that some operators in the TermEvaluator use the currently active task implicitly. \r\n   * So you cannot freely use a taskPath here if those operators are involved (and they are involved usually).\r\n   * You have to use the current task path then.\r\n   */\r\n  saveTaskResults = (taskPath, calculations, runtime) => {\r\n    // We start with a cleared task result, i.e. we calculate everything from sratch:\r\n    this.taskEntriesList[taskPath] = {};\r\n    const resultsForTask = this.taskEntriesList[taskPath];\r\n\r\n    calculations.forEach((value, index, all) => {\r\n      // Performance improvement:\r\n      // Since we calculate everything from scratch we can assume that already calculated values are up-to-date\r\n      // -> activate reuse of existing calculation results in the evaluateNamedCalculation operator:\r\n      resultsForTask[value.name] = TermEvaluator.evaluateTerm(value.calculation, runtime, [{\r\n        useExistingCalculationResults: true, taskPath\r\n      }], value.name);\r\n    });\r\n\r\n    const { resultVariables } = runtime.taskManager.computeResultVariablesEvaluationResult(resultsForTask);\r\n    // eslint-disable-next-line dot-notation\r\n    resultsForTask['resultVariables'] = resultVariables;\r\n  }\r\n\r\n\r\n  // get values --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get a stored result for a given named calculation in the given task.\r\n   */\r\n  getResult = (taskPath, calculationName) => this.getResultsListForTask(taskPath)[calculationName];\r\n\r\n\r\n  /**\r\n   * Get all stored calculation results for the given task.\r\n   */\r\n  getResultsListForTask = (taskPath) => {\r\n    if (this.taskEntriesList[taskPath] === undefined) {\r\n      return {};\r\n    }\r\n    return this.taskEntriesList[taskPath];\r\n  }\r\n\r\n  /**\r\n   * Get the stored calculation results for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.taskEntriesList);\r\n\r\n  /**\r\n   * Drop stored calculation results for all tasks.\r\n   */\r\n  clearTasksState = () => { this.taskEntriesList = {}; };\r\n\r\n  /**\r\n   * Preload the stored calculation results for all tasks returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.taskEntriesList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n}\r\n","\r\n/**\r\n * A catalog of all timed events of a single statemachine.\r\n * \r\n * A timed event in our catalog always keeps these attributes:\r\n *  - name\r\n *  - trigger interval\r\n *  - accepting states list\r\n * While a timed event is 'running' it also keeps these attributes\r\n *  - handle of the 'timeout' scheduled on the global 'window'\r\n *  - planned point in time for the 'timeout' to trigger\r\n * While a timed event is 'paused' it also keeps these attributes:\r\n *  - remaining milli seconds when 'pause' state was entered\r\n * \r\n * The lifecycle states of an event entry are:\r\n *  - stopped: The timed event is declared but was stopped or was never started at all.\r\n *  - running: The timed event was started and now waits for the timeout interval to run out.\r\n *  - paused: A previously started event was paused, i.e. it has interrupted the run down of the timeout interval.\r\n * \r\n * The lifecycle state changes are:\r\n * - An event is created in the 'stopped' state: name, trigger interval and accepting states list are given explicitly.\r\n * - Starting an event establishes a timeout on the global window and stores the planned trigger time (planned time is 'now' + 'trigger interval').\r\n * - Pausing an event clears the timeout on the global window and stores the remaining interval (by comparing the current time with the planned trigger time).\r\n * - Resuming an event establishes a timeout on the global window with a new planned trigger time (planned time is 'now' + 'remaining millis').\r\n * - Stopping an event clears the timeout on the global window (if 'running') and clears the remaining millis (if 'paused').\r\n * - A triggering timeout sets the event back to 'stopped' state before triggering the statemachine action. \r\n * \r\n * An event in state 'running' or 'paused' is filtered as 'scheduled', an event in 'stopped' state is 'unscheduled'.\r\n */\r\nexport default class TimedEventsCatalog {\r\n\r\n  constructor() {\r\n    this.timedEventsList = [];\r\n  }\r\n\r\n  // ------------- public API -------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Put a timed event entry into our catalog.\r\n   * \r\n   * The method will update the entry if an entry for the given name exists already.\r\n   * \r\n   * @param {String} name The name of the timed event.\r\n   * @param {Number} triggerInterval The interval (in milliseconds) that will elapse between starting the timer and triggering the event.\r\n   * @param {[String]} acceptingStatesList The list of state machine states accepting the timed event.\r\n   */\r\n  putEntry = (name, triggerInterval, acceptingStatesList) => {\r\n    const oldEntry = this.getEntry(name);\r\n    if (oldEntry !== undefined) {\r\n      console.warn(`Updating already existing timed event with name ${name}`);\r\n      oldEntry.triggerInterval = triggerInterval;\r\n      oldEntry.acceptingStatesList = acceptingStatesList;\r\n    } else {\r\n      this.timedEventsList.push(TimedEventsCatalog.buildTimedEventEntry(name, triggerInterval, acceptingStatesList, undefined, undefined, undefined));\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Find a timed event entry in our catalog by event name.\r\n   * \r\n   * @param {String} name The name of the timed event.\r\n   */\r\n  getEntry = name => this.timedEventsList.find(entry => entry.name === name);\r\n\r\n  /**\r\n   * Get an excerpt of the event entry for logging purposes.\r\n   * \r\n   * @param {*} eventEntry The event entry to get the excerpt from.\r\n   * @param {*} now The current point in time as base for remaining time calculation.\r\n   */\r\n  static getEventData(eventEntry, now) {\r\n    const isRunning = eventEntry.scheduledTimeoutHandle !== undefined;\r\n    const remainingInterval = isRunning ? eventEntry.scheduledTriggerTime.getTime() - now.getTime() : eventEntry.remainingInterval;\r\n    return {\r\n      totalTime: eventEntry.triggerInterval,\r\n      isRunning,\r\n      remainingTime: remainingInterval\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is the given event paused currently?\r\n   * \r\n   * @param {*} eventEntry \r\n   */\r\n  static isPaused(eventEntry) {\r\n    return eventEntry.remainingInterval !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Find the entries of the timed events that the given state accepts and that are not scheduled currently.\r\n   * \r\n   * @param {String} stateName The name of the state that must accept the matching events.\r\n   */\r\n  findUnscheduledEventsByState(stateName) {\r\n    return this.timedEventsList.filter(\r\n      eventEntry => eventEntry.acceptingStatesList.includes(stateName)\r\n      && eventEntry.scheduledTimeoutHandle === undefined\r\n      && eventEntry.scheduledTriggerTime === undefined\r\n      && eventEntry.remainingInterval === undefined\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Find the entries of the timed events that the given state accepts and that are scheduled currently.\r\n   * \r\n   * @param {String} stateName The name of the state that must accept the matching events.\r\n   */\r\n  findScheduledEventsByState(stateName) {\r\n    return this.timedEventsList.filter(\r\n      eventEntry => eventEntry.acceptingStatesList.includes(stateName)\r\n      && (\r\n        eventEntry.scheduledTimeoutHandle !== undefined\r\n        || eventEntry.scheduledTriggerTime !== undefined\r\n        || eventEntry.remainingInterval !== undefined)\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * Find the entries of all timed events that are scheduled currently.\r\n   */\r\n  findScheduledEvents() {\r\n    return this.timedEventsList.filter(\r\n      eventEntry => eventEntry.scheduledTimeoutHandle !== undefined\r\n      || eventEntry.scheduledTriggerTime !== undefined\r\n      || eventEntry.remainingInterval !== undefined\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a map eventName -> interval of the current event interval settings.\r\n   */\r\n  getTimerIntervals = () => {\r\n    const result = {};\r\n    this.timedEventsList.forEach((entry) => {\r\n      result[entry.name] = entry.triggerInterval;\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * (Re)start the timed event. \r\n   * \r\n   * The method will schedule the event with a full trigger interval.\r\n   * \r\n   * @param {*} timedEventEntry \r\n   * @param {*} statemachine \r\n   */\r\n  startTimedEvent(timedEventEntry, statemachine) {\r\n    this.scheduleTimedEvent(timedEventEntry, timedEventEntry.triggerInterval, statemachine);\r\n  }\r\n\r\n  /**\r\n   * Resume the timed event. \r\n   * \r\n   * The method will schedule the event with the remaining interval\r\n   * as calculated when the event was paused.\r\n   * \r\n   * @param {*} timedEventEntry \r\n   * @param {*} statemachine \r\n   */\r\n  resumeTimedEvent(timedEventEntry, statemachine) {\r\n    // Don't try to resume an event that is not paused (should not happen):\r\n    if (timedEventEntry.remainingInterval !== undefined) {\r\n      this.scheduleTimedEvent(timedEventEntry, timedEventEntry.remainingInterval, statemachine);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the running timer for the given timer info structure.\r\n   * \r\n   * @param {*} timedEventEntry \r\n   */\r\n  stopTimedEvent(timedEventEntry) {\r\n    // The event might be 'paused': handle is undefined but remainingInterval is set.\r\n    // -> Reset to fully stopped state.\r\n    if (timedEventEntry.scheduledTimeoutHandle !== undefined) {\r\n      this.clearTimeoutHook(timedEventEntry.scheduledTimeoutHandle);\r\n    }\r\n    TimedEventsCatalog.setScheduledDataInTimedEventEntry(undefined, undefined, undefined, timedEventEntry);\r\n  }\r\n\r\n  /**\r\n   * Pause the running timer for the given timer info structure.\r\n   * \r\n   * @param {*} timedEventEntry The timed event entry to modify.\r\n   * @param {Date} now The current time (as base to calculate the remaining time).\r\n   */\r\n  pauseTimedEvent(timedEventEntry, now) {\r\n    // There is nothing to do if the event is paused already or is not scheduled at all:\r\n    if (timedEventEntry.scheduledTimeoutHandle !== undefined) {\r\n      this.clearTimeoutHook(timedEventEntry.scheduledTimeoutHandle);\r\n      const remainingInterval = timedEventEntry.scheduledTriggerTime.getTime() - now.getTime();\r\n      TimedEventsCatalog.setScheduledDataInTimedEventEntry(undefined, undefined, remainingInterval, timedEventEntry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change the trigger interval in a timed event entry.\r\n   * \r\n   * @param {Number} triggerInterval The new value for the trigger interval.\r\n   * @param {*} entryToModify The timer entry that the method will modify.\r\n   */\r\n  static setTriggerIntervalInEventEntry(triggerInterval, entryToModify) {\r\n    entryToModify.triggerInterval = triggerInterval;\r\n  }\r\n\r\n\r\n  // ------------ private stuff ----------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Schedule the given event to trigger at the given interval from now. \r\n   * \r\n   * Due to the startInterval parameter we can use this method to restart \r\n   * an event completely or to just resume the event after a pause.\r\n   * \r\n   * @param {*} timedEventEntry The event to schedule.\r\n   * @param {*} startInterval The interval (in milliseconds) from now to the triggering point in time.\r\n   * @param {*} statemachine The statemachine providing the 'now' time and the callback to be triggered.\r\n   */\r\n  scheduleTimedEvent(timedEventEntry, startInterval, statemachine) {\r\n\r\n    // Determine point in time to trigger event action:\r\n    const now = statemachine.getNow();\r\n    const targetTime = new Date(now.getTime() + startInterval);\r\n    if (targetTime === undefined) {\r\n      console.error(`Invalid target time to schedule event: ${timedEventEntry.name} with start interval ${startInterval}`);\r\n      return;\r\n    }\r\n\r\n    // Check and normalize event scheduling status: \r\n    if (timedEventEntry.scheduledTimeoutHandle !== undefined) {\r\n      console.warn(`Rescheduling scheduled event: ${timedEventEntry.name} from ${timedEventEntry.scheduledTriggerTime} to ${targetTime}`);\r\n      this.clearTimeoutHook(timedEventEntry.scheduledTimeoutHandle);\r\n    }\r\n\r\n    // Schedule event in global event loop:\r\n    const timeoutId = this.setTimeoutHook((eventEntry) => {\r\n      // Drop schedule handler in event entry in timed events catalog as soon as scheduled event is triggered.\r\n      // Do this before triggering the event on the state machine since this might restart the timeout!\r\n      TimedEventsCatalog.setScheduledDataInTimedEventEntry(undefined, undefined, undefined, eventEntry);\r\n      // Actually trigger the event. \r\n      statemachine.triggerEvent(eventEntry.name);\r\n    },\r\n    startInterval,\r\n    timedEventEntry);\r\n\r\n    // Set scheduling data in event entry:\r\n    TimedEventsCatalog.setScheduledDataInTimedEventEntry(timeoutId, targetTime, undefined, timedEventEntry);\r\n  }\r\n\r\n  /**\r\n   * Update the scheduling related data in a timed event entry.\r\n   * \r\n   * @param {*} scheduledTimeoutHandle The handle to the object keeping track of the scheduled action that will trigger the event.\r\n   * @param {Date} scheduledTriggerTime The point in time when the timer will trigger the event the next time.\r\n   * @param {Number} remainingInterval The new value for the remaining interval.\r\n   * @param {*} entryToModify The timer entry that the method will modify.\r\n   */\r\n  static setScheduledDataInTimedEventEntry(scheduledTimeoutHandle, scheduledTriggerTime, remainingInterval, entryToModify) {\r\n    entryToModify.scheduledTimeoutHandle = scheduledTimeoutHandle;\r\n    entryToModify.scheduledTriggerTime = scheduledTriggerTime;\r\n    entryToModify.remainingInterval = remainingInterval;\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a timed event entry to be kept in our catalog.\r\n   * \r\n   * @param {String} name The name of the timed event.\r\n   * @param {Number} triggerInterval The interval (in milliseconds) that will elapse between starting the timer and triggering the event.\r\n   * @param {[String]} acceptingStatesList The list of state machine states accepting the timed event.\r\n   * @param {*} scheduledTimeoutHandle The handle to the object keeping track of the scheduled action that will trigger the event.\r\n   * @param {Date} scheduledTriggerTime The point in time when the timer will trigger the event the next time.\r\n   * @param {Number} remainingInterval The rest of the triggerInterval (in milliseconds) remaining once the state machine resumes operation after a pause. \r\n   * This is undefined while the state machine is not paused.\r\n   */\r\n  static buildTimedEventEntry(name, triggerInterval, acceptingStatesList, scheduledTimeoutHandle, scheduledTriggerTime, remainingInterval) {\r\n    const statesList = acceptingStatesList === undefined ? [] : acceptingStatesList.map(value => value);\r\n    return {\r\n      name,\r\n      triggerInterval,\r\n      acceptingStatesList: statesList,\r\n      scheduledTimeoutHandle,\r\n      scheduledTriggerTime,\r\n      remainingInterval\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Test helper: Mock hook for window.clearTimeout calls.\r\n   */\r\n  clearTimeoutHook = (handle) => {\r\n    window.clearTimeout(handle);\r\n  }\r\n\r\n  /**\r\n   * Test helper: Mock hook for window.setTimeout calls.\r\n   */\r\n  setTimeoutHook = (callback, interval, argument) => window.setTimeout(callback, interval, argument);\r\n\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\n\r\n/**\r\n * A history of triggered events for a single state machine.\r\n */\r\nexport default class StatemachineEventHistory {\r\n\r\n  constructor(snapshot) {\r\n    // all events that were given to the interpreter.gen() method (in triggerEvent)\r\n    const initialValues = (snapshot !== undefined) ? StateManagerHelper.deepCopy(snapshot) : {\r\n      raisedEvents: [],\r\n      raisedEventsPerState: [],\r\n      totalNbOfRaisedEvents: 0,\r\n      visitedStates: [],\r\n      valuesPerVariable: [],\r\n      valuesPerVariableAfterLastArtificialEvent: []\r\n    }\r\n\r\n    this.raisedEvents = initialValues.raisedEvents;\r\n\r\n    // all events that were raised in a given state, each entry is: {state, [events]}\r\n    this.raisedEventsPerState = initialValues.raisedEventsPerState;\r\n\r\n    // the total number of events raised\r\n    this.totalNbOfRaisedEvents = initialValues.totalNbOfRaisedEvents;\r\n\r\n    // all states that were visited\r\n    this.visitedStates = initialValues.visitedStates;\r\n\r\n    // all values that were assigned to a given variable, each entry is: {variable, [values]}\r\n    this.valuesPerVariable = initialValues.valuesPerVariable;\r\n\r\n    // the values of all variables that were assigned after the last artificial event (i.e. event name starts with dot: '.init' etc.)\r\n    this.valuesPerVariableAfterLastArtificialEvent = initialValues.valuesPerVariableAfterLastArtificialEvent;\r\n\r\n  }\r\n\r\n  // ------------- public API -------------------------------------------------------------------------\r\n\r\n  getHistoryDataForSnapshot = () => (\r\n    StateManagerHelper.deepCopy(\r\n      {\r\n        raisedEvents: this.raisedEvents,\r\n        raisedEventsPerState: this.raisedEventsPerState,\r\n        totalNbOfRaisedEvents: this.totalNbOfRaisedEvents,\r\n        visitedStates: this.visitedStates,\r\n        valuesPerVariable: this.valuesPerVariable,\r\n        valuesPerVariableAfterLastArtificialEvent: this.valuesPerVariableAfterLastArtificialEvent\r\n      }\r\n    )\r\n  )\r\n\r\n\r\n  /**\r\n   * Report the status before processing an event.\r\n   * \r\n   * @param {String} eventName The name of the event that was processed.\r\n   * @param {[String]} activeStates The list of states that were active when the event occured.\r\n   * @param {[{variable, value}]} variableValues The list of statemachine variables with their values when the event occured.\r\n   */\r\n  reportBeforeEvent = (eventName, activeStates, variableValues) => {\r\n    this.addVisitedStates(activeStates);\r\n\r\n    if (!StatemachineEventHistory.isArtificialEvent(eventName)) {\r\n      this.addRaisedEvent(eventName);\r\n      this.addRaisedEventPerStates(activeStates, eventName);\r\n\r\n      // Insert the variable values from the end of the last preceeding event now:\r\n      if (this.valuesPerVariableAfterLastArtificialEvent.length !== 0) {\r\n        this.addVariableValues(this.valuesPerVariableAfterLastArtificialEvent);\r\n        this.valuesPerVariableAfterLastArtificialEvent = [];\r\n      }\r\n      this.addVariableValues(variableValues);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report the status after processing an event.\r\n   * \r\n   * @param {String} eventName The name of the event that was processed.\r\n   * @param {[String]} activeStates The list of states that were active when the event processing finished.\r\n   * @param {[{variable, value}]} variableValues The list of statemachine variables with their values when the event processing finished.\r\n   */\r\n  reportAfterEvent = (eventName, activeStates, variableValues) => {\r\n    this.addVisitedStates(activeStates);\r\n\r\n    // If that is the last event before the next real event\r\n    // we should put the variable values to the history. \r\n    // --> Remember values now and put them into history if the next event is not artificial.\r\n    // Copy memorized entries to detach from statemachine's variable table:\r\n    this.valuesPerVariableAfterLastArtificialEvent = variableValues.map(entry => ({\r\n      name: entry.name,\r\n      value: entry.value\r\n    }));\r\n  }\r\n\r\n\r\n  /**\r\n   * Get an array of all events that were raised. \r\n   */\r\n  getRaisedEvents = () => this.raisedEvents.slice();\r\n\r\n  /**\r\n   * Get an array of all events that were raised while the given state was active.\r\n   */\r\n  getRaisedEventsInState = (state) => {\r\n    const match = this.raisedEventsPerState.find(entry => entry.state === state);\r\n    return match === undefined ? [] : match.events.slice();\r\n  };\r\n\r\n  /**\r\n   * Get the total number of events that were raised. \r\n   */\r\n  getTotalNbOfRaisedEvents = () => this.totalNbOfRaisedEvents;\r\n\r\n  /**\r\n   * Get an array of all states that were visited.\r\n   */\r\n  getVisitedStates = () => this.visitedStates.slice();\r\n\r\n  /**\r\n   * Get an array of all values that a variable had before or after triggering an event.\r\n   */\r\n  getValuesOfVariable = (variable) => {\r\n    const matchInHistory = this.valuesPerVariable.find(entry => entry.name === variable);\r\n    const matchInPendingMemory = this.valuesPerVariableAfterLastArtificialEvent.find(entry => entry.name === variable);\r\n    if (matchInHistory === undefined && matchInPendingMemory === undefined) {\r\n      return [];\r\n    }\r\n    if (matchInHistory === undefined) {\r\n      return [matchInPendingMemory.value];\r\n    }\r\n    // Copy result to detach from our history:\r\n    const result = matchInHistory.values.slice();\r\n    if (matchInPendingMemory !== undefined && !result.includes(matchInPendingMemory.value)) {\r\n      result.push(matchInPendingMemory.value);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // ------------ private stuff ----------------------------------------------------------------------------\r\n  static isArtificialEvent(eventName) {\r\n    return eventName.startsWith('.');\r\n  }\r\n\r\n  static isArtificialVariable(variableName) {\r\n    return variableName.indexOf('.') !== -1;\r\n  }\r\n\r\n  addRaisedEvent = (event) => {\r\n    this.totalNbOfRaisedEvents += 1;\r\n    if (!this.raisedEvents.includes(event)) {\r\n      this.raisedEvents.push(event);\r\n    }\r\n  }\r\n\r\n  addRaisedEventPerState = (state, event) => {\r\n    const oldEntry = this.raisedEventsPerState.find(entry => entry.state === state);\r\n    if (oldEntry === undefined) {\r\n      this.raisedEventsPerState.push({\r\n        state,\r\n        events: [event]\r\n      })\r\n    } else if (!oldEntry.events.includes(event)) {\r\n      oldEntry.events.push(event);\r\n    }\r\n  }\r\n\r\n  addRaisedEventPerStates = (states, event) => {\r\n    states.forEach((state) => {\r\n      this.addRaisedEventPerState(state, event)\r\n    });\r\n  }\r\n\r\n  addVisitedState = (state) => {\r\n    if (!this.visitedStates.includes(state)) {\r\n      this.visitedStates.push(state);\r\n    }\r\n  }\r\n\r\n  addVisitedStates = (states) => {\r\n    states.forEach((stateToAdd) => {\r\n      this.addVisitedState(stateToAdd)\r\n    });\r\n  }\r\n\r\n  addValuePerVariable = (variable, value) => {\r\n    if (!StatemachineEventHistory.isArtificialVariable(variable)) {\r\n      const oldEntry = this.valuesPerVariable.find(entry => entry.name === variable);\r\n      if (oldEntry === undefined) {\r\n        this.valuesPerVariable.push({\r\n          name: variable,\r\n          values: [value]\r\n        })\r\n      } else if (!oldEntry.values.includes(value)) {\r\n        oldEntry.values.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  addVariableValues = (variableInfos) => {\r\n    variableInfos.forEach((variableInfo) => { this.addValuePerVariable(variableInfo.name, variableInfo.value); });\r\n  }\r\n\r\n}\r\n","import 'babel-polyfill';\r\nimport scxml from '../../node_modules/scxml/dist/scxml';\r\nimport TermEvaluator from '../eval/TermEvaluator';\r\nimport TimedEventsCatalog from './TimedEventsCatalog';\r\nimport StatemachineEventHistory from './StatemachineEventHistory';\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\n/**\r\n * A state machine for a single task.\r\n * \r\n * Our implementation is a wrapper around the SCXML state machine \r\n * provided by the SCXML library.\r\n * \r\n * This wrapper transforms our state machine model configuration\r\n * to the configuration exepected by the SCXML implementation \r\n * and provides additional functionality: \r\n *  - state machine variables\r\n *  - timed events\r\n */\r\nexport default class Statemachine {\r\n\r\n  /**\r\n   * @param {*} model The statemachine model as provided by the item config structure.\r\n   * @param {*} timedEventDefaults A map eventName -> interval of changes for event intervals that should override the intervals given in the model.\r\n   * @param {*} statePageMapDefaults A map stateName -> {pageName, areaType, areaName} that defines an (optional) page switch assigned to each state.\r\n   * @param {*} snapshot An (optional) snapshot to continue the state machine where we left off the last time. Use the result of a getSnapshot() call.\r\n   * @param {*} historySnapshot An (optional) snapshot to restore the history where we left off the last time. Use the result of a getHistoryData() call.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  constructor(model, timedEventDefaults, statePageMapDefaults, snapshot, historySnapshot, runtime) {\r\n    this.interpreter = undefined;\r\n    this.pendingEventQueue = [];\r\n    this.pendingTaskSwitch = undefined;\r\n    this.timedEvents = new TimedEventsCatalog();\r\n    this.statePageMap = Statemachine.buildStatePageMap(model.statePageAssignments, statePageMapDefaults);\r\n    this.history = new StatemachineEventHistory(historySnapshot);\r\n    this.running = false;\r\n    this.paused = false;\r\n    this.eventProcessingRuns = false;\r\n    this.runtime = runtime;\r\n\r\n    this.buildStateMachine(model, timedEventDefaults, runtime, snapshot);\r\n    if (snapshot === undefined || snapshot === null) {\r\n      this.interpreter.start();\r\n    }\r\n  }\r\n\r\n\r\n  // public API ---------------------------------------------------------------------------------------------------\r\n  /**\r\n   * Start the state machine for the first time. \r\n   * \r\n   * The method triggers the special .init. event.\r\n   */\r\n  start = () => {\r\n    this.running = true;\r\n    this.triggerEvent(\".init.\");\r\n  }\r\n\r\n  /**\r\n   * Stop the state machine. \r\n   * \r\n   * The method stops all timed events.\r\n   */\r\n  stop = () => {\r\n    this.stopTimedEvents();\r\n    this.running = false;\r\n  }\r\n\r\n  /**\r\n   * Continue state machine (after having stopped it).\r\n   * \r\n   * The method will start the timed events again.\r\n   * The method will quit a 'paused' state implicitly.\r\n   * \r\n   */\r\n  continue = () => {\r\n    this.running = true;\r\n    this.paused = false;\r\n    this.getCurrentStates().forEach((state) => {\r\n      this.startTimedEvents(state)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Pause the state machine: Pause all timed events.\r\n   * \r\n   * Use the resume method to restart the state machine execution.\r\n   */\r\n  pause = () => {\r\n    this.paused = true;\r\n    this.pauseTimedEvents();\r\n  }\r\n\r\n  /**\r\n   * Resume the state machine after a pause.\r\n   * \r\n   * Call this after a call to pause to resume the state machine execution.\r\n   */\r\n  resume = () => {\r\n    this.resumeTimedEvents();\r\n    this.paused = false;\r\n  }\r\n\r\n  /**\r\n   * Trigger the event with the given event name.\r\n   * \r\n   * The method triggers the given event and all events\r\n   * created by executing the given event:\r\n   * Execution of the initial event might put one or more \r\n   * new events on the pending events queue. \r\n   * We will execute these new events one by one which might\r\n   * put more events on the queue. \r\n   * \r\n   * Event execution is blocked while the statemachine\r\n   * is stopped or 'paused'.\r\n   * \r\n   * @param {String} event Name of event to be triggered.\r\n   */\r\n  triggerEvent = (event) => {\r\n    if (this.running === true && this.paused === false) {\r\n      if (this.eventProcessingRuns) {\r\n        this.enqueueEventLastOut(event);\r\n      } else {\r\n\r\n        this.eventProcessingRuns = true;\r\n        this.runSingleEventWithHistoryReports(event);\r\n        this.eventProcessingRuns = false;\r\n\r\n        const pendingEventFromQueue = this.pendingEventQueue.pop();\r\n        if (pendingEventFromQueue !== undefined) {\r\n          this.triggerEvent(pendingEventFromQueue);\r\n        } else if (this.pendingTaskSwitch !== undefined) {\r\n          const switchToExecute = this.pendingTaskSwitch;\r\n          this.pendingTaskSwitch = undefined;\r\n          Statemachine.executePendingTaskSwitch(switchToExecute, this.runtime);\r\n\r\n        }\r\n      }\r\n    } else {\r\n      console.warn(`Event ${event} ignored since statmachine is not running currently.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a task switch call to be executed as soon as the last event in the pending events queue is finished.\r\n   * \r\n   * The method will not trigger any event or the pending event queue processing. \r\n   */\r\n  setPostponedTaskSwitch = (switchCall) => {\r\n    this.pendingTaskSwitch = switchCall;\r\n  }\r\n\r\n  /**\r\n   * Get the timer data for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n   */\r\n  getTimerData = (eventName) => {\r\n    const eventEntry = this.timedEvents.getEntry(eventName);\r\n    if (eventEntry === undefined) {\r\n      return undefined;\r\n    }\r\n    return TimedEventsCatalog.getEventData(eventEntry, this.getNow());\r\n  }\r\n\r\n  /**\r\n   * Set the trigger interval for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n  */\r\n  setTimedEventInterval = (eventName, interval) => {\r\n    const eventEntry = this.timedEvents.getEntry(eventName);\r\n    if (eventEntry !== undefined) {\r\n      TimedEventsCatalog.setTriggerIntervalInEventEntry(\r\n        interval,\r\n        eventEntry\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a map of the current timed event interval settings. \r\n   * \r\n   * You may use the returned structure as timed event defaults parameter\r\n   * in our constructor to restore the timed event intervals to \r\n   * the point in time of this call. \r\n   */\r\n  getCurrentTimerIntervals = () => this.timedEvents.getTimerIntervals();\r\n\r\n  /**\r\n   * Get the full map of state page assignments. \r\n   * \r\n   * You may use the returned structure as statePageMap defaults parameter\r\n   * in our constructor to restore the state page assignments to \r\n   * the point in time of this call. \r\n   */\r\n  getStatePageAssignments = () => StateManagerHelper.deepCopy(this.statePageMap);\r\n\r\n  /**\r\n   * Set the page assignment for a state.\r\n   * \r\n   * @param {String} state The name of the state to assign the page to.\r\n   * @param {String} pageName The page to assign to the state.\r\n   * @param {String} areaType The type of the page area that will get the new page at the state switch.\r\n   * @param {String} areaName The name of the page area that will get the new page at the state switch.\r\n   */\r\n  setStatePageAssignment = (state, pageName, areaType, areaName) => {\r\n    const oldEntryIndex = this.statePageMap.findIndex(entry => entry.state === state);\r\n    if (oldEntryIndex === -1) {\r\n      this.statePageMap.push({\r\n        state, pageName, areaType, areaName\r\n      });\r\n    } else {\r\n      this.statePageMap[oldEntryIndex] = {\r\n        state, pageName, areaType, areaName\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a map of all variables with their current values. \r\n   * \r\n   * You may use the returned structure as variable default values parameter\r\n   * in our constructor to restore the variable values to \r\n   * the point in time of this call. \r\n   */\r\n  getCurrentVariableValues = () => {\r\n    const { taskManager, variableManager } = this.runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const currentVariableValues = variableManager.getVariableValuesMapForTask(currentTaskId);\r\n\r\n    return StateManagerHelper.deepCopy(currentVariableValues);\r\n  }\r\n\r\n  /**\r\n   * Get the history data like raised events, variable values and visited states.\r\n   * \r\n   * You may use the returned structure as parameter \r\n   * in our constructor to restore the statemachine history to \r\n   * the point in time of this call. \r\n   */\r\n  getHistoryData = () => this.history.getHistoryDataForSnapshot()\r\n\r\n  /**\r\n   * Get the currently active leaf states.\r\n   */\r\n  getCurrentLeafStates = () => this.interpreter.getConfiguration();\r\n\r\n  /**\r\n   * Get the currently active states including non-leaf states.\r\n   */\r\n  getCurrentStates = () => this.interpreter.getFullConfiguration().filter(state => !state.startsWith('$generated-state-'));\r\n\r\n  /**\r\n   * Get the currently active states including non-leaf states.\r\n   * \r\n   * States returned contain also some generated by the library : \"$generated-state-0\", \"$generated-state-1\"\r\n   */\r\n  getAllCurrentStates = () => this.interpreter.getFullConfiguration();\r\n\r\n  /**\r\n   * Get an array of all events that were raised. \r\n   */\r\n  getRaisedEvents = () => this.history.getRaisedEvents();\r\n\r\n  /**\r\n   * Get an array of all events that were raised while the given state was active.\r\n   */\r\n  getRaisedEventsInState = state => this.history.getRaisedEventsInState(state);\r\n\r\n  /**\r\n   * Get the total number of events that were raised. \r\n   */\r\n  getTotalNbOfRaisedEvents = () => this.history.getTotalNbOfRaisedEvents();\r\n\r\n  /**\r\n   * Get an array of all states that were visited.\r\n   */\r\n  getVisitedStates = () => this.history.getVisitedStates();\r\n\r\n  /**\r\n   * Get an array of all values that a variable had before or after triggering an event.\r\n   */\r\n  getValuesOfVariable = variable => this.history.getValuesOfVariable(variable);\r\n\r\n\r\n  /**\r\n   * Get a 'snapshot' of the state machine. \r\n   * \r\n   * You may use the returned snapshot as parameter \r\n   * in our constructor to restore the statemachine to \r\n   * the point in time of the snapshot. (Make sure you use the same model value as before!)\r\n   */\r\n  getSnapshot = () => StateManagerHelper.deepCopy(this.interpreter.getSnapshot());\r\n\r\n\r\n  // private stuff -------------------------------------------------------------------------------------------------\r\n  static buildStatePageMap(modelPageAssignments, dynamicPageAssignments) {\r\n    const result = [];\r\n    modelPageAssignments.forEach((value) => {\r\n      result.push({\r\n        state: value.state,\r\n        pageName: value.pageName,\r\n        areaType: value.areaType,\r\n        areaName: value.areaName\r\n      })\r\n    })\r\n    if (dynamicPageAssignments !== undefined) {\r\n      dynamicPageAssignments.forEach((dynamicAssignment) => {\r\n        const oldAssignmentIndex = result.findIndex(existingAssignment => existingAssignment.state === dynamicAssignment.state);\r\n        if (oldAssignmentIndex === -1) {\r\n          result.push({\r\n            state: dynamicAssignment.state,\r\n            pageName: dynamicAssignment.pageName,\r\n            areaType: dynamicAssignment.areaType,\r\n            areaName: dynamicAssignment.areaName\r\n          });\r\n        } else {\r\n          result[oldAssignmentIndex] = {\r\n            state: dynamicAssignment.state,\r\n            pageName: dynamicAssignment.pageName,\r\n            areaType: dynamicAssignment.areaType,\r\n            areaName: dynamicAssignment.areaName\r\n          };\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  buildStateMachine = (machineModel, timedEventDefaults, runtime, snapshot) => {\r\n    this.timedEvents = Statemachine.buildTimedEventsCatalog(machineModel.timedEvents, machineModel.states);\r\n    Object.keys(timedEventDefaults).forEach((event) => { this.setTimedEventInterval(event, timedEventDefaults[event]); });\r\n\r\n    this.interpreter = new scxml.scion.Statechart(this.transformMachineModel(machineModel.states, runtime), {\r\n      snapshot\r\n    });\r\n\r\n    this.interpreter.on(\"onError\", (errorInfo) => {\r\n      console.error(`Caught statemachine error on ${errorInfo.tagname} in line/col ${errorInfo.line}/${errorInfo.column} : ${errorInfo.reason}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Build our interval catalog of timed events.\r\n   * \r\n   * @param {[{String, Number}]} timedEventsList The list of timed events as given in the item config structure.\r\n   * @param {[*]} statesList The list of statemachine states as given in the item config structure.\r\n   */\r\n  static buildTimedEventsCatalog(timedEventsList, statesList) {\r\n    const catalog = new TimedEventsCatalog();\r\n    timedEventsList.forEach((event) => {\r\n      const acceptingStatesList = Statemachine.findAcceptingStates(event.name, statesList);\r\n      catalog.putEntry(event.name, event.interval, acceptingStatesList);\r\n    });\r\n    return catalog;\r\n  }\r\n\r\n  /**\r\n   * Find a list of states (as list of state names) that accept the given event.\r\n   * \r\n   * @param {String} eventName The name of the event to find accepting states for.\r\n   * @param {[*]} statesList The list of statemachine states as given in the item config structure.\r\n   */\r\n  static findAcceptingStates(eventName, statesList) {\r\n    const result = [];\r\n    statesList.forEach((state) => {\r\n      if (state.transitions !== undefined && state.transitions.some(transition => transition.event === eventName)) {\r\n        result.push(state.id);\r\n      }\r\n      if (state.states !== undefined) {\r\n        const recursionResult = this.findAcceptingStates(eventName, state.states);\r\n        recursionResult.forEach((recursionResultState) => {\r\n          result.push(recursionResultState);\r\n        })\r\n      }\r\n    })\r\n    return result;\r\n  }\r\n\r\n  transformMachineModel = (originalStates, runtime) => {\r\n    // Transform configuration machine model to SCION machine model:\r\n    //   Copy all arrays and attributes 1:1\r\n    //   After that change all \r\n    //   - cond attributes in all transition objects\r\n    //   - action array attributes in all transition objects\r\n    //   For these inject function definitions calling the TermEvaluator with the terms given in the original model.\r\n    //   Add a state entry action for each state that triggers a page switch according to our state->page map. \r\n    const statesCopy = Statemachine.modelCopy(originalStates);\r\n    this.transformStates(statesCopy, \"\", runtime);\r\n    return {\r\n      states: statesCopy\r\n    };\r\n  }\r\n\r\n\r\n  transformStates = (stateArray, parentStatePath, runtime) => {\r\n    stateArray.forEach((state) => {\r\n      const hasSubstates = state.states !== undefined && state.states.length > 0;\r\n      const statePath = Statemachine.buildStatePath(parentStatePath, state.id);\r\n      this.transformEntryExitActions(state, hasSubstates ? Statemachine.buildInitEventName(statePath) : undefined, runtime);\r\n      state.transitions.forEach((transition) => {\r\n        Statemachine.transformTransition(state, transition, parentStatePath, runtime);\r\n      });\r\n      // recursive call for substates\r\n      if (hasSubstates) {\r\n        this.transformStates(state.states, statePath, runtime);\r\n      }\r\n    });\r\n  }\r\n\r\n  static buildStatePath(parentPath, stateId) {\r\n    return `${parentPath}.${stateId}`;\r\n  }\r\n\r\n  static buildInitEventName(parentStatePath) {\r\n    return `.init${parentStatePath}`;\r\n  }\r\n\r\n  transformEntryExitActions = (state, initEventName, runtime) => {\r\n    state.onEntry = this.buildOnEntryFunction(state, state.onEntry, initEventName, runtime);\r\n    if (state.onExit !== undefined) {\r\n      state.onExit = Statemachine.buildOnExitFunction(state, state.onExit, runtime);\r\n    }\r\n  }\r\n\r\n  static transformTransition(state, transition, parentStatePath, runtime) {\r\n    if (transition.event === undefined) {\r\n      transition.event = Statemachine.buildInitEventName(parentStatePath);\r\n    }\r\n    if (transition.cond !== undefined) {\r\n      transition.cond = Statemachine.buildConditionFunction(transition.cond, runtime);\r\n    }\r\n    transition.onTransition = Statemachine.buildOnTransitionFunction(state, transition.target, transition.actions, runtime);\r\n    delete transition.actions;\r\n  }\r\n\r\n\r\n  buildOnEntryFunction = (state, actions, initEventName, runtime) => {\r\n    const putEventOnQueue = this.enqueueEventFirstOut;\r\n    const startMyTimedEvents = this.startTimedEvents;\r\n    const stateToPageMap = this.statePageMap;\r\n    const result = (event) => {\r\n      if (actions !== undefined) {\r\n        actions.forEach((action, index, all) => {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `in-action:${event.name}[${index}]`);\r\n        })\r\n      }\r\n      const assignedPageSwitch = stateToPageMap\r\n        .filter(value => value.state === state.id)\r\n        .map(value => ({\r\n          pageName: value.pageName, areaType: value.areaType, areaName: value.areaName\r\n        }))\r\n        .find(value => true);\r\n      if (assignedPageSwitch !== undefined) {\r\n        runtime.taskManager.switchPage(\r\n          assignedPageSwitch.pageName,\r\n          undefined, undefined,\r\n          assignedPageSwitch.areaType,\r\n          assignedPageSwitch.areaName,\r\n          undefined, undefined, undefined, undefined\r\n        );\r\n      }\r\n      if (initEventName !== undefined) {\r\n        putEventOnQueue(initEventName);\r\n      }\r\n      startMyTimedEvents(state.id);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static buildOnExitFunction(state, actions, runtime) {\r\n    const result = (event) => {\r\n      if (actions !== undefined) {\r\n        actions.forEach((action, index, all) => {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `ex-action:${event.name}[${index}]`);\r\n        })\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  static buildOnTransitionFunction(sourceState, targetState, actions, runtime) {\r\n    const result = (event) => {\r\n      if (actions !== undefined) {\r\n        actions.forEach((action, index, all) => {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `tr-action:${event.name}[${index}]`);\r\n        })\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static buildConditionFunction(term, runtime) {\r\n    const result = event => TermEvaluator.evaluateTerm(term, runtime, [], `event:${event.name}`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * (Re-)start all timed events that the given state can accept.\r\n   * \r\n   * The method schedules execution of the triggerEvent method\r\n   * using window.setTimeout(...) and registers the schedule handlers in the event catalog.\r\n   * \r\n   * The method overrides the 'paused' state of the affected events.\r\n   * \r\n   * @param {*} timedEventsArray \r\n   */\r\n  startTimedEvents = (stateName) => {\r\n\r\n    // stop all accepted timed events that are already running:\r\n    this.timedEvents.findScheduledEventsByState(stateName).forEach((timedEventEntry) => {\r\n      this.timedEvents.stopTimedEvent(timedEventEntry);\r\n    });\r\n\r\n    // start all accepted timed events:\r\n    this.timedEvents.findUnscheduledEventsByState(stateName).forEach((timedEventEntry) => {\r\n      this.timedEvents.startTimedEvent(timedEventEntry, this);\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n   * Stop all currently scheduled timed events. \r\n   * \r\n   * The method uses the timed events catalog to find all schedule handles to be cleared. \r\n   * The method overrides the 'paused' state of the events.\r\n   */\r\n  stopTimedEvents = () => {\r\n    this.timedEvents.findScheduledEvents().forEach((timedEventEntry) => {\r\n      this.timedEvents.stopTimedEvent(timedEventEntry);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Pause all currently scheduled timed events. \r\n   * \r\n   * The method uses the timed events catalog to find all schedule handles to be paused. \r\n   */\r\n  pauseTimedEvents = () => {\r\n    const now = this.getNow();\r\n    this.timedEvents.findScheduledEvents().forEach((timedEventEntry) => {\r\n      this.timedEvents.pauseTimedEvent(timedEventEntry, now);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Resume all currently scheduled timed events. \r\n   * \r\n   * The method uses the timed events catalog to find all schedule handles to be resumed. \r\n   */\r\n  resumeTimedEvents = () => {\r\n    this.timedEvents.findScheduledEvents().forEach((timedEventEntry) => {\r\n      if (TimedEventsCatalog.isPaused(timedEventEntry)) {\r\n        this.timedEvents.resumeTimedEvent(timedEventEntry, this);\r\n      }\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n   * Run a single event on the statemachine interpreter and report \r\n   * the before and after states/variables to our history.\r\n   */\r\n  runSingleEventWithHistoryReports = (event) => {\r\n    this.history.reportBeforeEvent(\r\n      event,\r\n      this.getCurrentStates(),\r\n      this.buildVariablesInfoArray()\r\n    )\r\n\r\n    this.interpreter.gen({\r\n      name: event,\r\n      data: undefined\r\n    });\r\n\r\n    this.history.reportAfterEvent(\r\n      event,\r\n      this.getCurrentStates(),\r\n      this.buildVariablesInfoArray()\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Put an event on the 'last out' positon of our pending events queue.\r\n   * \r\n   * @param {*} event Name of the event to be put on the queue. \r\n   */\r\n  enqueueEventLastOut = (event) => {\r\n    this.pendingEventQueue.unshift(event);\r\n  }\r\n\r\n  /**\r\n   * Put an event on the 'first out' position of our event queue.\r\n   * \r\n   * @param {String} event Name of the event to put on the queue.\r\n   */\r\n  enqueueEventFirstOut = (event) => {\r\n    this.pendingEventQueue.push(event);\r\n  }\r\n\r\n  /**\r\n   * Build an array of variable/value pairs describing our variables.\r\n   */\r\n  buildVariablesInfoArray = () => {\r\n    const { taskManager, variableManager } = this.runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    return variableManager.buildVariablesInfoArrayForTask(currentTaskId);\r\n  }\r\n\r\n\r\n  static executePendingTaskSwitch(switchToExecute, runtime) {\r\n    TermEvaluator.evaluateTerm(switchToExecute, runtime, [], 'postp-task');\r\n  }\r\n\r\n  /**\r\n   * Build a deep copy of the given model structure.\r\n   */\r\n  static modelCopy(model) {\r\n    if (model === undefined) return undefined;\r\n    return JSON.parse(JSON.stringify(model));\r\n  }\r\n\r\n  /**\r\n   * Test hook: get Date representing 'now'.\r\n   */\r\n  getNow = () => new Date();\r\n\r\n}\r\n","import Statemachine from \"./Statemachine\";\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\n/**\r\n * Manager for all state machines.\r\n * \r\n * We keep one state machine per task. \r\n * Our operations targeting a single state machine operate on the state machine \r\n * assigned to the currently running task. We call this state machine the 'currently active' \r\n * state machine. \r\n * We need to be informed about the currently running task to switch our 'currently active' \r\n * state machine accordingly.\r\n */\r\nexport default class StatemachinesManager {\r\n\r\n  constructor() {\r\n    this.statemachinesList = {};\r\n    this.statemachineModelsList = {};\r\n    this.currentMachine = undefined;\r\n    this.timedEventDefaults = {};\r\n    this.statePageMapDefaults = [];\r\n    this.preInitTriggeredEvents = [];\r\n  }\r\n\r\n  /**\r\n   * Stop the currently running state machine. \r\n   */\r\n  stopCurrentStatemachine = () => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.stop();\r\n      this.currentMachine = undefined;\r\n    }\r\n    this.timedEventDefaults = {};\r\n    this.statePageMapDefaults = [];\r\n    this.preInitTriggeredEvents = [];\r\n  }\r\n\r\n  /**\r\n   * Start a state machine as currently active state machine.\r\n   * \r\n   * The method will: \r\n   *  - Create and start a new state machine for the given task if no such state machine exists yet.\r\n   *  - Continue the state machine for the given task if it does exist already.\r\n   * \r\n   * @param taskPath The path of the new task to switch to.\r\n   * @param model The state machine model to create a new state machine with. We will use this only if there is no state machine for the given task yet.\r\n   * @param runtime The common runtime context structure. \r\n   */\r\n  startOrInitializeCurrentStatemachine = (taskPath, model, runtime) => {\r\n    if (this.currentMachine !== undefined) {\r\n      console.error('Cannot run two state machines in parallel.', taskPath);\r\n      this.stopCurrentStatemachine();\r\n    }\r\n    const existingMachine = this.statemachinesList[taskPath];\r\n    if (existingMachine === undefined) {\r\n      this.statemachineModelsList[taskPath] = model;\r\n      const newMachine = model === undefined ? undefined : new Statemachine(model, this.timedEventDefaults, this.statePageMapDefaults, undefined, undefined, runtime);\r\n      this.statemachinesList[taskPath] = newMachine;\r\n      this.currentMachine = newMachine;\r\n      // The new state machine must be the 'current' state machine before we start it (Term evaluation!)\r\n      if (this.currentMachine !== undefined) {\r\n        this.currentMachine.start();\r\n        this.preInitTriggeredEvents.forEach((event) => { this.currentMachine.triggerEvent(event); });\r\n      }\r\n    } else {\r\n      this.currentMachine = existingMachine;\r\n      this.currentMachine.continue();\r\n    }\r\n    this.timedEventDefaults = {};\r\n    this.statePageMapDefaults = [];\r\n    this.preInitTriggeredEvents = [];\r\n\r\n    // rerender each variable observer. DNI: could be unnecessary\r\n    runtime.variableManager.triggerRerenderForAllChangeObservers(runtime);\r\n  }\r\n\r\n  /**\r\n   * Switch the current state machine without starting it. \r\n   * \r\n   * @param {*} taskPath \r\n   */\r\n  switchCurrentStatemachineWithoutStarting = (taskPath) => {\r\n    this.currentMachine = this.statemachinesList[taskPath];\r\n  }\r\n\r\n  /**\r\n   * Pause the currently running state machine. \r\n   * \r\n   * Pausing the state machines pauses all timed events and blocks event execution. \r\n   * Use resumeCurrentStatemachine() to finish the pause. This will continue the \r\n   * paused timed events where they left off. (A stop-continue sequence will \r\n   * restart all interrupted timed events from the start instead.)\r\n   */\r\n  pauseCurrentStatemachine = () => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.pause();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resume the currently running but 'paused' state machine. \r\n   * \r\n   * This will continue the paused timed events where they left off. \r\n   * (A stop-continue sequence will restart all interrupted timed events from their start instead.)\r\n   * In a sequence pause-continue the 'continue' call will switch the state machine to a non-paused, \r\n   * running state and restart all paused timed events from their start.\r\n   */\r\n  resumeCurrentStatemachine = () => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.resume();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Trigger an event on the currently running state machine.\r\n   * \r\n   * The method implicitly triggers all events on the queue of pending events of the currently running state machine.\r\n   * \r\n   * If there is no state machine running yet the method keeps the event in a buffer to be exectued as soon as\r\n   * a state machine is created.\r\n   */\r\n  triggerEvent = (event) => {\r\n    if (this.currentMachine === undefined) {\r\n      this.preInitTriggeredEvents.push(event);\r\n    } else {\r\n      this.currentMachine.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Postpone a task switch on the currently running state machine.\r\n   * \r\n   * The method sets the postponed task switch member of the current state machine.\r\n   * \r\n   * If there is no state machine running yet the method ignores the call.\r\n   */\r\n  setPostponedTaskSwitch = (taskSwitchCall) => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.setPostponedTaskSwitch(taskSwitchCall);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the timer data for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n   */\r\n  getTimerData = (eventName) => {\r\n    if (this.currentMachine === undefined) {\r\n      // Note: We cannot return our buffered value here since the state machine will return more details than we have.\r\n      return undefined;\r\n    } else {\r\n      return this.currentMachine.getTimerData(eventName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the trigger interval for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n  */\r\n  setTimedEventInterval = (eventName, interval) => {\r\n    if (this.currentMachine === undefined) {\r\n      this.timedEventDefaults[eventName] = interval;\r\n    } else {\r\n      this.currentMachine.setTimedEventInterval(eventName, interval);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign a page to a state. \r\n   * \r\n   * @param {*} state The name of the state to assign the page to.\r\n   * @param {*} pageName The name of the page to assign to the state.\r\n   * @param {*} areaType The type of the area that will get the page assigned at the state switch.\r\n   * @param {*} areaName The name of the area that will get the page assigned at the state switch. \r\n   */\r\n  setStatePageAssignment = (state, pageName, areaType, areaName) => {\r\n    if (this.currentMachine === undefined) {\r\n      const existingEntryIndex = this.statePageMapDefaults.findIndex(value => value.state === state);\r\n      if (existingEntryIndex === -1) {\r\n        this.statePageMapDefaults.push({\r\n          state, pageName, areaType, areaName\r\n        });\r\n      } else {\r\n        this.statePageMapDefault[existingEntryIndex] = {\r\n          state, pageName, areaType, areaName\r\n        };\r\n      }\r\n    } else {\r\n      this.currentMachine.setStatePageAssignment(state, pageName, areaType, areaName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The states array contains the currently active leaf-states.\r\n   */\r\n  getCurrentStateMachineLeafStates = () => ((this.currentMachine === undefined) ? [] : this.currentMachine.getCurrentLeafStates());\r\n\r\n  /**\r\n   * Get the history data accumulated by the current state machine.\r\n   */\r\n  getHistoryStatemachineData = () => ((this.currentMachine === undefined) ? {} : this.currentMachine.getHistoryData());\r\n\r\n  /**\r\n   * Get an array of all events that were raised in the current statemachine. \r\n   */\r\n  getRaisedEvents = () => ((this.currentMachine === undefined) ? [] : this.currentMachine.getRaisedEvents());\r\n\r\n  /**\r\n   * Get an array of all events that were raised while the given state was active in the current statemachine.\r\n   */\r\n  getRaisedEventsInState = state => ((this.currentMachine === undefined) ? [] : this.currentMachine.getRaisedEventsInState(state));\r\n\r\n  /**\r\n   * Get the total number of events that were raised in the current statemachine. \r\n   */\r\n  getTotalNbOfRaisedEvents = () => ((this.currentMachine === undefined) ? 0 : this.currentMachine.getTotalNbOfRaisedEvents());\r\n\r\n  /**\r\n   * Get an array of all states that were visited in the current statemachine.\r\n   */\r\n  getVisitedStates = () => ((this.currentMachine === undefined) ? [] : this.currentMachine.getVisitedStates());\r\n\r\n  /**\r\n   * Get an array of all values that a variable had before or after triggering an event in the current statemachine.\r\n   */\r\n  getValuesOfVariable = variable => ((this.currentMachine === undefined) ? [] : this.currentMachine.getValuesOfVariable(variable));\r\n\r\n  /**\r\n   * Get a snapshot of our statemachines that is compatible \r\n   * as parameter for the preloadStatemachinesData method.\r\n   */\r\n  getStatemachinesPreloadData = () => {\r\n    const result = {};\r\n    Object.keys(this.statemachinesList).forEach((taskPath) => {\r\n      const machine = this.statemachinesList[taskPath];\r\n      if (machine !== undefined) {\r\n        result[taskPath] = {\r\n          timerIntervals: machine.getCurrentTimerIntervals(),\r\n          statePageMap: machine.getStatePageAssignments(),\r\n          snapshot: machine.getSnapshot(),\r\n          historyData: machine.getHistoryData(),\r\n          model: StateManagerHelper.deepCopy(this.statemachineModelsList[taskPath]),\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Drop all exisiting state machines.\r\n   */\r\n  clearStatemachines = (runtime) => {\r\n    this.stopCurrentStatemachine();\r\n    this.statemachinesList = {};\r\n    this.statemachineModelsList = {};\r\n  }\r\n\r\n  /**\r\n   * Preload statemachines.\r\n   * \r\n   * The method implicitly drops all existing state machines before creating new machines according \r\n   * to the preload data.\r\n   * \r\n   * @param preloadData: Preload data obtained by calling getStatemachinesPreloadData on another instance.\r\n   */\r\n  preloadStatemachinesData = (preloadData, runtime) => {\r\n    this.clearStatemachines(runtime);\r\n\r\n    Object.keys(preloadData).forEach((taskPath) => {\r\n      const machineData = preloadData[taskPath];\r\n      this.statemachinesList[taskPath] = new Statemachine(\r\n        machineData.model,\r\n        machineData.timerIntervals,\r\n        machineData.statePageMap,\r\n        machineData.snapshot,\r\n        machineData.historyData,\r\n        runtime\r\n      );\r\n      this.statemachineModelsList[taskPath] = machineData.model;\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\nexport default class TaskNavigatorStateManager {\r\n\r\n  constructor() {\r\n    this.testEntriesList = {};\r\n  }\r\n\r\n  saveTestState = (testName, state, runtime) => {\r\n    this.testEntriesList[testName] = StateManagerHelper.deepCopy(state);\r\n\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'TaskNavigatorStateManagerState',\r\n      {\r\n        name: testName,\r\n        value: this.testEntriesList[testName]\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n\r\n  }\r\n\r\n  getTestState = testName => StateManagerHelper.deepCopy(this.testEntriesList[testName])\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n   getAllTasksState = () => StateManagerHelper.deepCopy(this.testEntriesList);\r\n\r\n   /**\r\n    * Drop all state.\r\n    */\r\n   clearTasksState = () => {\r\n     this.testEntriesList = {};\r\n   };\r\n\r\n   /**\r\n    * Preload the state returned by a call to getAllTasksState.\r\n    */\r\n   preloadTasksState = (allTasksState) => {\r\n     this.testEntriesList = StateManagerHelper.deepCopy(allTasksState);\r\n   }\r\n\r\n  /**\r\n   * Inject a change for a test entry triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (testName, state) => {\r\n    this.testEntriesList[testName] = StateManagerHelper.deepCopy(state)\r\n  }\r\n\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\n\r\nexport default class TraceLogBuffer {\r\n\r\n  constructor() {\r\n    this.logEntriesList = [];\r\n    this.entryCounter = 0;\r\n    this.newEntryListener = undefined;\r\n    this.withReplaySupport = false;\r\n    this.withExtendedMetaData = false;\r\n    this.withoutItemConfiguration = false;\r\n    this.withoutSnapshot = false;\r\n    this.withoutScoring = false;\r\n    this.item = undefined;\r\n    this.task = undefined;\r\n    this.scope = undefined;\r\n    this.traceContextId = undefined;\r\n  }\r\n\r\n  // public API for components ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Report an event that is relevant for the trace log.\r\n   * \r\n   * The method expects these parameters:\r\n   * - entryType: A String representing the type of the event.\r\n   * - timestamp: A Date representing the timestamp to log for the event.\r\n   * - entryContent: All further attributes of the event to be logged.\r\n   * \r\n   * The method will implicitly assign a unique log entry counter to the logged event.\r\n   * The method will create a deep copy of the given entryContent to decouple the log\r\n   * from further modifications on the entryContent.\r\n   * \r\n   * The method filters entries according to their entry type if a filter configuration\r\n   * is active (like \"filter out all replay support entries\").\r\n   * \r\n   */\r\n  reportEvent = (entryType, timestamp, entryContent) => {\r\n    if (!this.withReplaySupport && TraceLogBuffer.isReplaySupportType(entryType)) {\r\n      return;\r\n    }\r\n    if (this.withoutSnapshot && entryType === 'Snapshot') {\r\n      return;\r\n    }\r\n\r\n    const newEntry = {\r\n      entryId: this.getNextCount().toString(),\r\n      timestamp: TraceLogBuffer.buildTimeString(timestamp),\r\n      type: entryType,\r\n      details: StateManagerHelper.deepCopy(entryContent)\r\n    }\r\n\r\n    if (this.withExtendedMetaData) {\r\n      newEntry.item = this.item;\r\n      newEntry.task = this.task;\r\n      newEntry.scope = this.scope;\r\n      newEntry.sessionId = this.traceContextId;\r\n    }\r\n    if (this.withoutItemConfiguration && entryType === 'ItemSwitch') {\r\n      newEntry.details.item = undefined;\r\n    }\r\n    if (this.withoutScoring && entryType === 'TaskSwitch') {\r\n      newEntry.details.taskResult = undefined;\r\n    }\r\n\r\n    this.logEntriesList.push(newEntry);\r\n    if (this.newEntryListener !== undefined) {\r\n      this.newEntryListener();\r\n    }\r\n  }\r\n\r\n\r\n  // public API for log consumers --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the next bunch of log entries for delivery to the server and drop them from our queue.\r\n   * \r\n   * Note: This method must be called from the GUI thread to avoid multithreading issues!\r\n   * \r\n   * The method returns a list of log entry objects. I returns an empty list of no log entries are pending.\r\n   */\r\n  popEntries = () => {\r\n    const deliveredEntries = this.logEntriesList;\r\n    this.logEntriesList = [];\r\n    return deliveredEntries;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the list of current log entries (without dropping them).\r\n   * \r\n   * The method returns a list of log entry objects. I returns an empty list of no log entries are pending.\r\n   */\r\n  peekEntries = () => StateManagerHelper.deepCopy(this.logEntriesList);\r\n\r\n  /**\r\n   * Set a function to call each time we receive a new entry.\r\n   * \r\n   * We support a single entry listener only. The entry listener is called after the new log entry is put into our buffer.\r\n   * \r\n   * @param callback The function to call each time a new entry is put into our buffer.\r\n   */\r\n  setNewEntryListener = (callback) => {\r\n    this.newEntryListener = callback;\r\n  }\r\n\r\n  // public API for task player  ------------------------------------------------------------------\r\n  /**\r\n   * (De)Activate additional trace log entries required for replay functionality.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithReplaySupport = (value) => {\r\n    this.withReplaySupport = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate the additional header fields in each trace log entry.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithExtendedMetaData = (value) => {\r\n    this.withExtendedMetaData = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate dropping the item configuration attribute from ItemSwitch log entries.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithoutItemConfiguration = (value) => {\r\n    this.withoutItemConfiguration = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate dropping the Snapshot log entries.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithoutSnapshot = (value) => {\r\n    this.withoutSnapshot = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate dropping the task result attribute (i.e. scoring) from TaskSwitch log entries.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithoutScoring = (value) => {\r\n    this.withoutScoring = value;\r\n  }\r\n\r\n  /**\r\n   * Set the current trace context id (=sessionId) to be included in each trace log entry header.\r\n   * @param {*} value \r\n   */\r\n  setTraceContextId = (value) => {\r\n    this.traceContextId = value;\r\n  }\r\n\r\n  // public API for task manager  ------------------------------------------------------------------\r\n  /**\r\n   * Set the currently running test/task/item to be included in each trace log entry header.\r\n   */\r\n  setTestItemTaskNames = (test, item, task) => {\r\n    this.scope = test;\r\n    this.item = item;\r\n    this.task = task;\r\n  }\r\n\r\n  // private stuff --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Is the given type one of the entry types used exclusively the replay support feature?\r\n   */\r\n  static isReplaySupportType =\r\n    entryType => entryType === 'FullState'\r\n              || entryType === 'StateChange'\r\n              || entryType === 'RenderTriggered'\r\n              || entryType === 'ContextMenu'\r\n              || entryType === 'ScrollTriggered';\r\n\r\n\r\n  /**\r\n   * Get a string representation of the given time which is helpful in the trace log:\r\n   */\r\n  static buildTimeString(date) {\r\n    // Hint: We could use the momentjs library here:\r\n    // DNI: example: return moment(date).format(\"YYYY-MM-DD THH:mm:ss.SSS Z\");\r\n    return `${\r\n      TraceLogBuffer.padLeadingZeroes(date.getFullYear(), 4)}-${\r\n      TraceLogBuffer.padLeadingZeroes((date.getMonth() + 1), 2)}-${\r\n      TraceLogBuffer.padLeadingZeroes(date.getDate(), 2)}T${\r\n      TraceLogBuffer.padLeadingZeroes(date.getHours(), 2)}:${\r\n      TraceLogBuffer.padLeadingZeroes(date.getMinutes(), 2)}:${\r\n      TraceLogBuffer.padLeadingZeroes(date.getSeconds(), 2)}.${\r\n      TraceLogBuffer.padLeadingZeroes(date.getMilliseconds(), 3)}${\r\n      TraceLogBuffer.buildTimeZoneOffsetString(date.getTimezoneOffset())}`;\r\n  }\r\n\r\n  static buildTimeZoneOffsetString(offsetInMinutes) {\r\n    const absoluteOffsetInMinutes = Math.abs(offsetInMinutes);\r\n    const minutesOffset = absoluteOffsetInMinutes % 60;\r\n    const hoursOffset = (absoluteOffsetInMinutes - minutesOffset) / 60;\r\n    return (offsetInMinutes > 0 ? '-' : '+') + TraceLogBuffer.padLeadingZeroes(hoursOffset.toString(), 2) + TraceLogBuffer.padLeadingZeroes(minutesOffset.toString(), 2);\r\n  }\r\n\r\n  static padLeadingZeroes(number, size) {\r\n    let result = `${number}`;\r\n    while (result.length < size) {\r\n      result = `0${result}`;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the next entry count value and increase the counter.\r\n   */\r\n  getNextCount = () => {\r\n    this.entryCounter += 1;\r\n    return this.entryCounter;\r\n  }\r\n\r\n}\r\n","import StateManagerHelper from './StateManagerHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\nimport TraceLogHelper from './TraceLogHelper';\r\n\r\n/**\r\n * Manage a global clipboard. \r\n */\r\nexport default class ClipboardManager {\r\n\r\n  constructor(traceLogBuffer) {\r\n    this.traceLog = traceLogBuffer;\r\n    this.clipboardContent = undefined;\r\n    this.currentSelectionHolder = undefined;\r\n    this.currentInsertPosition = undefined;\r\n  }\r\n\r\n  // public API ------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Do the cut operation: Grab the current selection from the current selection holder and put\r\n   * it into our clipboard buffer. Tell the current selection holder to drop the selected text.\r\n   * \r\n   * If no selection is registered currently or the selection is read-only \r\n   * the method will write just a trace log and skip the operation.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  cut = (triggeringType, indexPath, runtime) => {\r\n    // keep a reference to the selection holder: the getSelectionCallback might deregister the selection holder!\r\n    const selectionHolderEntry = this.currentSelectionHolder;\r\n    if (selectionHolderEntry !== undefined && selectionHolderEntry.isReadOnlyCallback() === false) {\r\n      this.setClipboardContent(selectionHolderEntry.getSelectionCallback(true));\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'cut',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        true,\r\n        runtime\r\n      );\r\n      this.currentSelectionHolder = undefined;\r\n      this.currentInsertPosition = undefined;\r\n    } else {\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'cut',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        false,\r\n        runtime\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Could we perform a cut operation currently? \r\n   */\r\n  cutEnabled = () => this.currentSelectionHolder !== undefined && this.currentSelectionHolder.isReadOnlyCallback() === false\r\n\r\n  /**\r\n   * Do the copy operation: Grab the current selection from the current selection holder and put\r\n   * it into our clipboard buffer.\r\n   * \r\n   * If no selection is registered currently the method will write just a trace log and skip the operation.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  copy = (triggeringType, indexPath, runtime) => {\r\n    // keep a reference to the selection holder: the getSelectionCallback might deregister the selection holder!\r\n    const selectionHolderEntry = this.currentSelectionHolder;\r\n    if (selectionHolderEntry !== undefined) {\r\n      this.setClipboardContent(selectionHolderEntry.getSelectionCallback(false));\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'copy',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        true,\r\n        runtime\r\n      );\r\n      this.currentSelectionHolder = undefined;\r\n      this.currentInsertPosition = undefined;\r\n    } else {\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'copy',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        false,\r\n        runtime\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Could we perform a copy operation currently? \r\n   */\r\n  copyEnabled = () => this.currentSelectionHolder !== undefined\r\n\r\n\r\n  /**\r\n   * Do the paste operation: Tell the current insert position holder to put in the text in our clipboard buffer.\r\n   * \r\n   * If no insert position is registered currently or we do not have any content in the clipboard buffer yet\r\n   * the method will just write a trace log entry and skip the operation.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  paste = (triggeringType, indexPath, runtime) => {\r\n    // keep a reference to the input position: the insertCallback might deregister the input position!\r\n    const insertPositionEntry = this.currentInsertPosition;\r\n    if (this.currentInsertPosition !== undefined && this.clipboardContent !== undefined) {\r\n      this.currentInsertPosition.insertCallback(this.clipboardContent);\r\n      this.tracePaste(\r\n        triggeringType,\r\n        indexPath,\r\n        insertPositionEntry,\r\n        true,\r\n        runtime\r\n      );\r\n      this.currentSelectionHolder = undefined;\r\n      this.currentInsertPosition = undefined;\r\n    } else {\r\n      this.tracePaste(\r\n        triggeringType,\r\n        indexPath,\r\n        insertPositionEntry,\r\n        false,\r\n        runtime\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Could we perform a paste operation currently? \r\n   */\r\n  pasteEnabled = () => this.currentInsertPosition !== undefined && this.clipboardContent !== undefined\r\n\r\n  /**\r\n   * Register the currently active selection.\r\n   * \r\n   * @param {String} indexPath The index path of the display component instance carrying the currently active selection.\r\n   * @param {*} getSelectionCallback A method to obtain the currently selected text. \r\n   *    The method supports a boolean flag to drop the selected content in the source component. \r\n   * @param {*} isReadOnlyCallback A method to obtain the current read only status of the component instance. \r\n   */\r\n  registerSelection = (indexPath, getSelectionCallback, isReadOnlyCallback) => {\r\n    this.currentSelectionHolder = {\r\n      indexPath,\r\n      getSelectionCallback,\r\n      isReadOnlyCallback\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deregister a previously registered selection.\r\n   * \r\n   * @param indexPath The index path of the display component instance deregistering the selection.\r\n   */\r\n  deregisterSelection = (indexPath) => {\r\n    if (this.currentSelectionHolder !== undefined && this.currentSelectionHolder.indexPath === indexPath) {\r\n      this.currentSelectionHolder = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register the current paste insert position.\r\n   * \r\n   * The registering component should not be read-only, i.e. it should be possible to really insert content\r\n   * at the insert position.\r\n   * \r\n   * @param indexPath The index path of the display component instance carrying the current insert position.\r\n   * @param insertCallback A method to insert text at the insert position.\r\n   */\r\n  registerInsertPosition = (indexPath, insertCallback) => {\r\n    this.currentInsertPosition = {\r\n      indexPath,\r\n      insertCallback\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deregister a previously registered insert position.\r\n   * \r\n   * @param indexPath The index path of the display component instance deregistering the insert position.\r\n   */\r\n  deregisterInsertPosition = (indexPath) => {\r\n    if (this.currentInsertPosition !== undefined && this.currentInsertPosition.indexPath === indexPath) {\r\n      this.currentInsertPosition = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register that a component recieved the input focus. \r\n   * \r\n   * We will deregister any other component as selection or insert position provider.\r\n   */\r\n  registerFocus = (indexPath) => {\r\n    if (this.currentInsertPosition !== undefined && this.currentInsertPosition.indexPath !== indexPath) {\r\n      this.currentInsertPosition = undefined;\r\n    }\r\n    if (this.currentSelectionHolder !== undefined && this.currentSelectionHolder.indexPath !== indexPath) {\r\n      this.currentSelectionHolder = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a representation of our internal state that can be written to the trace log.\r\n   */\r\n  getStateForTracing = () => (\r\n    StateManagerHelper.deepCopy({\r\n      clipboardContent: this.clipboardContent,\r\n      selectionHolder: this.currentSelectionHolder === undefined ? undefined : {\r\n        indexPath: this.currentSelectionHolder.indexPath\r\n      },\r\n      insertPosition: this.currentInsertPosition === undefined ? undefined : {\r\n        indexPath: this.currentInsertPosition.indexPath\r\n      }\r\n    })\r\n  )\r\n\r\n  /**\r\n   * Get the full state. (Our state is not task specific.)\r\n   * \r\n   * The current selections for cut/copy and paste operations don't survive a state preload. \r\n   * The user will have to restart an interrupted cut/copy or paste command. \r\n   * But she may reuse the content put into the clipboard by a cut/copy operation before the interruption\r\n   * for a paste operation after the interruption.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.clipboardContent);\r\n\r\n  /**\r\n    * Drop all state (our state is not task specific).\r\n   */\r\n  clearTasksState = () => {\r\n    this.clipboardContent = undefined;\r\n    this.currentSelectionHolder = undefined;\r\n    this.currentInsertPosition = undefined;\r\n  };\r\n\r\n  /**\r\n    * Preload the tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.clipboardContent = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (state) => {\r\n    this.clipboardContent = state;\r\n  }\r\n\r\n  // private stuff ------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Change our clipboard content and trace a state change log entry.\r\n   */\r\n  setClipboardContent = (newContent) => {\r\n    this.clipboardContent = newContent;\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'ClipboardState',\r\n      {\r\n        state: newContent\r\n      },\r\n      this.traceLog\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a trace log entry for a cut or copy operation\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} operationType The operation type to trace: CUT, COPY\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance.\r\n   * @param {*} selectionHolderEntry The selection holder entry that was used to perform the operation. \r\n   * @param {boolean} wasPerformed A flag indicating whether the requested action was performed or denied.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  traceCutCopy = (triggeringType, operation, indexPath, selectionHolderEntry, wasPerformed, runtime) => {\r\n    this.trace(\r\n      triggeringType,\r\n      operation,\r\n      indexPath,\r\n      selectionHolderEntry === undefined ? undefined : selectionHolderEntry.indexPath,\r\n      wasPerformed ? this.clipboardContent : undefined,\r\n      wasPerformed,\r\n      runtime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a trace log entry for a cut or copy operation\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance.\r\n   * @param {*} insertPositionEntry The insert position entry that was used to perform the operation. \r\n   * @param {boolean} wasPerformed A flag indicating whether the requested action was performed or denied.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  tracePaste = (triggeringType, indexPath, insertPositionEntry, wasPerformed, runtime) => {\r\n    this.trace(\r\n      triggeringType,\r\n      'paste',\r\n      indexPath,\r\n      insertPositionEntry === undefined ? undefined : insertPositionEntry.indexPath,\r\n      wasPerformed ? this.clipboardContent : undefined,\r\n      wasPerformed,\r\n      runtime\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a trace log entry.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} operationType The operation type to trace: 'cut', 'copy', 'paste'\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance. Might be undefined (keyboard triggers).\r\n   * @param {String} contentDealerIndexPath The index path of the display component instance providing resp. accepting content.\r\n   * @param {String} content The content that was transferred\r\n   * @param {boolean} wasPerformed A flag indicating whether the requested action was performed or denied.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  trace = (triggeringType, operationType, triggeringIndexPath, contentDealerIndexPath, content, wasPerformed, runtime) => {\r\n    const triggerUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(triggeringIndexPath, runtime);\r\n    const contentUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(contentDealerIndexPath, runtime);\r\n    this.traceLog.reportEvent(\r\n      'CutCopyPaste',\r\n      new Date(),\r\n      {\r\n        triggerType: triggeringType,\r\n        triggerIndexPath: triggeringIndexPath,\r\n        triggerUserDefIdPath,\r\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggerUserDefIdPath),\r\n        operation: operationType,\r\n        contentIndexPath: contentDealerIndexPath,\r\n        contentUserDefIdPath,\r\n        contentUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(contentUserDefIdPath),\r\n        content,\r\n        isPerformed: wasPerformed\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * Basic helper methods for string usage.\r\n */\r\nexport default class StringUtils {\r\n\r\n  /**\r\n   * This is a helper function that can be used to capitalize the first letter of the received argument. \r\n   * @param {*} word \r\n   */\r\n  static toFirstUpper(word) {\r\n    if (typeof word !== 'string') return ''\r\n    return word.charAt(0).toUpperCase() + word.slice(1)\r\n  }\r\n\r\n}\r\n","import axios from 'axios';\r\nimport moment from 'moment';\r\nimport { notify } from 'react-notify-toast';\r\nimport StringUtils from '../utils/StringUtils';\r\n\r\n/**\r\n * Manage the transfer of user session related result data (trace log, media recordings) to the server. \r\n * \r\n * This is a base implementation used by the two specific uploaders that we currently have: TraceLogUploader and RecordingUploader.\r\n * \r\n * We support transmission of user result data entries \r\n *  - via HTTP PUT calls or\r\n *  - window.postMessage events sent to the given target domain origin or\r\n *  - writing the user result data to the console.\r\n */\r\nexport default class UserDataUploader {\r\n\r\n  constructor(userDataBuffer, buildUserDataPostContentCallback, dataType) {\r\n    this.dataType = dataType;\r\n    this.userDataBuffer = userDataBuffer;\r\n    this.buildUserDataPostContentCallback = buildUserDataPostContentCallback;\r\n\r\n    this.userDataEntriesList = [];\r\n    this.lastSentFailCount = 0;\r\n    this.isMaxFailCountError = false;\r\n    this.notificationToaster = notify;\r\n\r\n    this.transmitterPromise = undefined;\r\n    this.transmitterPromiseIsResolved = false;\r\n\r\n    this.sessionContext = {};\r\n\r\n    this.transmissionChannel = 'console';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = undefined;\r\n\r\n    this.transmitInterval = undefined;\r\n    this.currentTimer = undefined;\r\n\r\n  }\r\n\r\n  // ------- public API -----------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Set the session context that we will use in the meta data of our transmissions to the server.\r\n   * \r\n   * The session context consists of \r\n   * - the session id\r\n   * - the user name\r\n   * - the timestamp of the user login\r\n   */\r\n  setSessionContext = (sessionId, username, loginTimestamp) => {\r\n    this.sessionContext = {\r\n      sessionId,\r\n      username,\r\n      loginTimestamp\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the session context that we use in the meta data of our transmissions to the server.\r\n   */\r\n  getSessionContext = () => this.sessionContext;\r\n\r\n  /**\r\n   * Start the scheduled automatic transmissions. \r\n   */\r\n  startAutomaticTransmissions = () => {\r\n    if (this.transmitInterval > 0) {\r\n      this.setNewTimer();\r\n    } else {\r\n      this.setImmediateCallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the scheduled automatic transmissions.\r\n   * \r\n   * We will run a final transmission after cancelling the scheduled one.\r\n   */\r\n  stopAutomaticTransmissions = () => {\r\n    this.stopOldTimer();\r\n    this.dropImmediateCallback();\r\n  }\r\n\r\n  /**\r\n   * Grab all userData entries from user data buffer and put them onto our internal list of entries to transmit.\r\n   * Start transmission of all entries on our internal list. \r\n   * \r\n   * The method will not start another transmission attempt if the maximum failures threshold is reached. \r\n   * The method triggers an asynchronous transmission: It returns immediately after initiating the transmission\r\n   * and will not wait for the transmission to be completed.\r\n   * \r\n   */\r\n  collectEntriesAndTriggerTransmission = () => {\r\n    if (this.transmitterPromise === undefined || this.transmitterPromiseIsResolved === true) {\r\n      this.transmitterPromiseIsResolved = false;\r\n      this.transmitterPromise = this.collectEntriesAndBuildTransmitPromise().then(() => { this.transmitterPromiseIsResolved = true; });\r\n    } else {\r\n      this.transmitterPromise = this.transmitterPromise.then(() => {\r\n        this.transmitterPromiseIsResolved = false;\r\n        return this.collectEntriesAndBuildTransmitPromise().then(() => { this.transmitterPromiseIsResolved = true; });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Grab all user data entries from user data buffer and put them onto our internal list of entries to transmit.\r\n   * Return a promise that transmits all entries on our internal list and clips the internal list accordingly. \r\n   * \r\n   * The method will return a resolved promise if the maximum failures threshold is reached or no user data entries are to be transmitted. \r\n   * \r\n   */\r\n  collectEntriesAndBuildTransmitPromise = () => {\r\n    const { notificationToaster } = this;\r\n\r\n    // Grab all user data entries from user data buffer and add them to our internal list of user data entries to be sent to the server.\r\n    this.addUserDataEntries(this.userDataBuffer.popEntries());\r\n\r\n    if (this.getUserDataEntriesList().length === 0) {\r\n      // No user data entries pending -> do nothing this time.\r\n      return Promise.resolve();\r\n    }\r\n\r\n    if (!this.shouldTryAgainToSend()) {\r\n      // Maximum number of failed transmission attempts reached -> Display error message if we did not do so already.\r\n\r\n      if (!this.isMaxFailCountErrorDisplayed()) {\r\n        const notifyErrorMsg = `Max tries of error send occurred on the ${this.getFailCount()}th time and will not try again.`;\r\n        console.log('postTrace: ', notifyErrorMsg);\r\n        this.setMaxFailCountErrorDisplayed();\r\n\r\n        // to not be overridden with earlier toasts, just delay for 3 seconds the output of the toast\r\n        setTimeout(() => {\r\n          try {\r\n            notificationToaster.show(notifyErrorMsg, 'error')\r\n          } catch (ex) {\r\n            console.warn(`Did not inform user about max transmission failures. This might happen when an error occurs before we have a task running.`)\r\n          }\r\n        }, 3000);\r\n      }\r\n      return Promise.resolve();\r\n    }\r\n\r\n    // Build message to transmit.\r\n    const userDataRequestBody = this.buildUserDataPostContentCallback(moment().format(), this.getSessionContext(), this.getUserDataEntriesList());\r\n    // Return a promise that transmits the messages and clips our pending entries list:\r\n    return this.getTransmittingPromise(userDataRequestBody).then((response) => {\r\n      this.updateUserDataEntriesListAfterSuccessfulSend(response.noOfEntriesTransmitted);\r\n    }, (error) => {\r\n      console.log(error)\r\n      this.increaseNextSentFailCount();\r\n      try {\r\n        notificationToaster.show(`Error sending ${this.dataType}s! Fail count:${this.getFailCount()}`, 'warning');\r\n      } catch (ex) {\r\n        console.warn(`Did not inform user about the previous transmission failure. This might happen when an error occurs before we have a task running.`)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set our transmission channel to 'postMessage'. \r\n   * \r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window)\r\n   * @param {String} domainUri The domain URI we should use as target origin to post messages to.\r\n   */\r\n  setPostMessageTransmissionChannel = (targetWindowType, domainUri, interval) => {\r\n    this.transmissionChannel = 'postMessage';\r\n    this.targetWindowType = targetWindowType;\r\n    this.domainUri = domainUri;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = undefined;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n  /**\r\n   * Set our transmission channel to 'callback'.\r\n   */\r\n  setCallbackTransmissionChannel = (transmitCallback, interval) => {\r\n    this.transmissionChannel = 'callback';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = transmitCallback;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n\r\n  /**\r\n   * Set our transmission channel to 'console'.\r\n   */\r\n  setConsoleTransmissionChannel = (interval) => {\r\n    this.transmissionChannel = 'console';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = undefined;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n  /**\r\n   * Set our transmission channel to 'http'. \r\n   * \r\n   * @param {*} transmitUrl The target URL to put user data entries to.\r\n   */\r\n  setHttpTransmissionChannel = (transmitUrl, interval, httpTimeout) => {\r\n    this.transmissionChannel = 'http';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n\r\n    this.axiosInstance = axios.create({\r\n      baseURL: transmitUrl,\r\n      timeout: httpTimeout === undefined ? 30000 : httpTimeout,\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n\r\n    this.transmitCallback = undefined;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n\r\n  /**\r\n   * Set a non-standard notification toaster mechanism. \r\n   * \r\n   * This is useful for testing without a GUI where the standard notify toaster is not available. \r\n   * The given toaster must provide a method show(messageString, levelString)\r\n   * \r\n   * @param {*} toaster A callback that we use to send notifications to the user. \r\n   */\r\n  setNotificationToaster = (toaster) => {\r\n    this.notificationToaster = toaster;\r\n  }\r\n\r\n  // ------- private stuff --------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Reset our maximum failure count to 0. \r\n   * \r\n   * This is used when a new transmission configuration is established since \r\n   * the new configuration might solve the underlying problem.\r\n   */\r\n  resetMaxFailCount = () => {\r\n    this.isMaxFailCountError = false;\r\n    this.lastSentFailCount = 0;\r\n  }\r\n\r\n  /**\r\n   * Set our transmit interval. \r\n   * \r\n   * If necessary we stop and restart our automatic transmissions to take a new transmit interval into account.\r\n   */\r\n  setTransmitInterval = (newTransmitInterval) => {\r\n    if (newTransmitInterval !== this.transmitInterval) {\r\n      this.stopOldTimer();\r\n      this.dropImmediateCallback();\r\n      this.transmitInterval = newTransmitInterval;\r\n      if (this.transmitInterval > 0) {\r\n        this.setNewTimer();\r\n      } else {\r\n        this.setImmediateCallback();\r\n      }\r\n    }\r\n  }\r\n\r\n  setImmediateCallback = () => {\r\n    this.userDataBuffer.setNewEntryListener(this.collectEntriesAndTriggerTransmission);\r\n  }\r\n\r\n  dropImmediateCallback = () => {\r\n    if (this.traceLogBuffer !== undefined) {\r\n      this.traceLogBuffer.setNewEntryListener(undefined);\r\n    }\r\n  }\r\n\r\n  stopOldTimer = () => {\r\n    if (this.currentTimer !== undefined) {\r\n      clearInterval(this.currentTimer);\r\n      this.currentTimer = undefined;\r\n      this.collectEntriesAndTriggerTransmission();\r\n    }\r\n  }\r\n\r\n  setNewTimer = () => {\r\n    this.stopOldTimer();\r\n    this.currentTimer = setInterval(() => this.collectEntriesAndTriggerTransmission(), this.transmitInterval);\r\n  }\r\n\r\n  /**\r\n   *  Increase the transmission failures counter.\r\n   */\r\n  increaseNextSentFailCount = () => {\r\n    this.lastSentFailCount += 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of failed transmission attempts.\r\n   */\r\n  getFailCount = () => this.lastSentFailCount;\r\n\r\n\r\n  isMaxFailCountErrorDisplayed = () => this.isMaxFailCountError;\r\n\r\n\r\n  setMaxFailCountErrorDisplayed = () => {\r\n    this.isMaxFailCountError = true;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the number of failed transmission attempts has not yet reached our threshold.\r\n   */\r\n  shouldTryAgainToSend = () => this.getFailCount() < 10;\r\n\r\n  /**\r\n   * Retuns our internal list of user data entries to be sent to the server.\r\n   */\r\n  getUserDataEntriesList = () => this.userDataEntriesList;\r\n\r\n  /**\r\n   * Add the given user data entries to our internal list of entries to be sent to the server.\r\n   */\r\n  addUserDataEntries = (newUserDataEntries) => {\r\n    if (newUserDataEntries.length > 0) {\r\n      this.userDataEntriesList = this.userDataEntriesList.concat(newUserDataEntries);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update our internal structures after a successful transmission of data to the server:\r\n   * \r\n   * Remove the transmitted user data entries from our internal entries list.\r\n   * Reset the last failure count to zero.\r\n   * \r\n   * @param noOfTransmittedEntries The number of entries that were transmitted by the successful transmission.\r\n   */\r\n  updateUserDataEntriesListAfterSuccessfulSend = (noOfTransmittedEntries) => {\r\n    this.userDataEntriesList = this.userDataEntriesList.filter((data, index) => index > noOfTransmittedEntries);\r\n    this.lastSentFailCount = 0;\r\n  }\r\n\r\n  /**\r\n   * Get the appropriate Promise to transmit our user data data.\r\n   */\r\n  getTransmittingPromise = (dataToTransmit) => {\r\n    switch (this.transmissionChannel) {\r\n      case 'postMessage':\r\n        return UserDataUploader.transmitViaPostMessage(dataToTransmit, this.targetWindowType, this.domainUri, this);\r\n      case 'callback':\r\n        return UserDataUploader.transmitViaCallback(dataToTransmit, this.transmitCallback, this);\r\n      case 'console':\r\n        return UserDataUploader.transmitViaConsole(dataToTransmit, this);\r\n      case 'http':\r\n        return UserDataUploader.transmitViaHttp(dataToTransmit, this.axiosInstance, this)\r\n      default:\r\n        return UserDataUploader.transmitViaConsole(dataToTransmit, this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket via a postMessage event.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToTransmit The bucket of user data entries with wrapping meta data ready to be sent to the server.\r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window, useful for testing only)\r\n   * @param {String} targetOriginUri The domain URI we should use as target origin to post messages to.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaPostMessage(dataToTransmit, targetWindowType, targetOriginUri, uploaderInstance) {\r\n    return new Promise((resolve, reject) => {\r\n      const messageToSend = {\r\n        eventType: `${uploaderInstance.dataType}Transmission`,\r\n        [`${uploaderInstance.dataType}Data`]: dataToTransmit\r\n      }\r\n      const targetWindow = UserDataUploader.getTargetWindow(targetWindowType)\r\n      if (targetWindow === undefined) {\r\n        console.error(`Cannot find target window for target window type ${targetWindowType}`);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s via post message.`);\r\n      }\r\n      try {\r\n        targetWindow.postMessage(JSON.stringify(messageToSend), targetOriginUri);\r\n        resolve({\r\n          noOfEntriesTransmitted: dataToTransmit[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`].length\r\n        });\r\n      } catch (e) {\r\n        console.error(`Cannot deliver ${uploaderInstance.dataType}s via postMessage`, e);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s via post message.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the target window specified by the given target window type.\r\n   * \r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window, useful for testing only)\r\n   */\r\n  static getTargetWindow(targetWindowType) {\r\n    switch (targetWindowType) {\r\n      case 'parent':\r\n        return window.parent;\r\n      case 'opener':\r\n        return window.opener;\r\n      case 'self':\r\n        return window;\r\n      default:\r\n        console.error('Unknown target window type!')\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket via the externally given transmission callback.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToTransmit The bucket of user data entries with wrapping meta data ready to be sent to the callback.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaCallback(dataToTransmit, transmitCallback, uploaderInstance) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        transmitCallback(dataToTransmit);\r\n      } catch (e) {\r\n        console.error(`Cannot deliver ${uploaderInstance.dataType}s via callback`, e);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s via callback`);\r\n      }\r\n      resolve({\r\n        noOfEntriesTransmitted: dataToTransmit[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`].length\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n  static getDataType = dataType => (dataType === \"recording\" ? dataType : \"log\")\r\n\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket via a HTTP POST request.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToTransmit The bucket of user data entries with wrapping meta data ready to be sent to the server.\r\n   * @param {*} axiosInstance The instance of the axios transmission library to put the user data entries to.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaHttp(dataToTransmit, axiosInstance, uploaderInstance) {\r\n    const nbOfEntriesInTransmission = dataToTransmit[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`].length;\r\n    return axiosInstance.post('', dataToTransmit)\r\n      .then(response => (\r\n        {\r\n          noOfEntriesTransmitted: nbOfEntriesInTransmission\r\n        }\r\n      ))\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          // that falls out of the range of 2xx\r\n          console.error(error.response.status, `Error: Cannot deliver ${uploaderInstance.dataType}s to URL ${error.response.config.url}`);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n          // http.ClientRequest in node.js\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          console.log('Error', error.message);\r\n        }\r\n        console.log(error.config);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s to server.`);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket to the console.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToLog The bucket of user data entries with wrapping meta data ready to be user dataged to the console.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaConsole(dataToLog, uploaderInstance) {\r\n    const entriesList = dataToLog[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`]\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const capitalizedDataType = StringUtils.toFirstUpper(uploaderInstance.dataType);\r\n        // force the browser to not show a 'live' view of the data in the console -> JSON.parse(JSON.stringify(...))\r\n        // (see https://developer.mozilla.org/en-US/docs/Web/API/console/log, chapter 'Logging objects')\r\n        console.log(`${capitalizedDataType} message sent to console: `, JSON.parse(JSON.stringify(dataToLog)));\r\n      } catch (e) {\r\n        console.error(`Cannot deliver ${uploaderInstance.dataType}s to console`, e);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s to console`);\r\n      }\r\n      resolve({\r\n        noOfEntriesTransmitted: entriesList.length\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import Utils from '../utils/Utils';\r\nimport UserDataUploader from './UserDataUploader';\r\n\r\n/**\r\n * Manage the transfer of the trace log to the server. \r\n * \r\n * We support transmission of the trace log entries \r\n *  - via HTTP PUT calls or\r\n *  - window.postMessage events sent to the given target domain origin or\r\n *  - writing the trace logs to the console.\r\n */\r\nexport default class TraceLogUploader extends UserDataUploader {\r\n\r\n  constructor(traceLogBuffer) {\r\n    super(traceLogBuffer, TraceLogUploader.buildTracePostContent, \"traceLog\")\r\n    this.transmitInterval = 20000;\r\n  }\r\n\r\n  // ------- public API -----------------------------------------------------------------------------\r\n\r\n  // See the base class UserDataUploader for our public API.\r\n\r\n  // ------- private stuff --------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build the content of a trace transmission to the server. \r\n   * \r\n   * This consists of a meta data structure and the list of log entries to transmit.\r\n   * We take the list of log entries from our internal log entries list but\r\n   * we do not drop the entries from this list yet.\r\n   * \r\n   * @param {String} sendTimestamp The time of send operation.\r\n   * @param {*} runtime \r\n   */\r\n  static buildTracePostContent = (sendTimestamp, sessionContext, logEntriesList) => {\r\n    const { sessionId, username, loginTimestamp } = sessionContext;\r\n    if (sessionId === undefined) {\r\n      console.warn(\"Sending trace log with dummy session id!\");\r\n    }\r\n    const metaData = {\r\n      userId: username,\r\n      sessionId: sessionId === undefined ? 'dummySessionId' : sessionId,\r\n      loginTimestamp,\r\n      sendTimestamp,\r\n      cbaVers: Utils.getCbaVersion()\r\n    };\r\n\r\n    const tracePostContent = {\r\n      metaData,\r\n      logEntriesList\r\n    };\r\n\r\n    return tracePostContent;\r\n  }\r\n\r\n}\r\n","import UrlLib from 'url';\r\nimport Utils from '../utils/Utils';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\n\r\n\r\n/**\r\n * Receive Windows.postMessage() events.\r\n */\r\nexport default class PostMessageReceiver {\r\n\r\n  constructor() {\r\n    this.acceptedExternalPageFrameUrlsList = [];\r\n    this.defaultAcceptedUrl = undefined;\r\n\r\n    this.availableTaskSwitches = [];\r\n\r\n    // Access point for test code to intercept the response event sending:\r\n    this.responder = (eventToSend, triggeringEventOrigin, triggeringEventSourceWindow) => {\r\n      try {\r\n        const messageString = JSON.stringify(eventToSend);\r\n        const eventOrigin = (triggeringEventOrigin === undefined || triggeringEventOrigin == null || triggeringEventOrigin.length === 0 || triggeringEventOrigin === 'null') ? '*' : triggeringEventOrigin;\r\n        triggeringEventSourceWindow.postMessage(messageString, eventOrigin);\r\n      } catch (error) {\r\n        console.error('Sending a response message failed.', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ---------- public API ---------------------------------------\r\n\r\n\r\n  /**\r\n   * Register a URL as source of events from external JavaScript code involved via an external page frame component.\r\n   * \r\n   * We don't accept runtime control events (i.e. events that are part of the task player API) from these registered URLs.\r\n   */\r\n  registerAcceptableUrlForExternalPageFrameEvent = (url) => {\r\n\r\n    // trim to the http(s)://<host>:<port> part:\r\n    const parsedUrl = PostMessageReceiver.tryToParseURL(url);\r\n    if (parsedUrl === undefined) {\r\n      console.log(`We don't accept invalid URLs as source URLs for post message events.  Ignored URL is: ${url}`);\r\n      return;\r\n    }\r\n    const { origin } = parsedUrl;\r\n\r\n    if (origin === undefined || origin.length < 1) {\r\n      console.log(`We only accept http(s) protocols as source URLs for post message events.  Ignored URL is: ${url}`);\r\n      return;\r\n    }\r\n\r\n    if (!this.acceptedExternalPageFrameUrlsList.includes(origin)) {\r\n      this.acceptedExternalPageFrameUrlsList.push(origin);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Start to receive events.\r\n   * \r\n   * @param runtime The global runtime context structure.\r\n   */\r\n  startReceiving = (runtime, taskPlayer) => {\r\n    if (runtime === undefined) {\r\n      console.error('Cannot start receiving events without a runtime context.')\r\n      return;\r\n    }\r\n    if (taskPlayer === undefined) {\r\n      console.error('Cannot start receiving events without a task player reference.')\r\n      return;\r\n    }\r\n    this.runtime = runtime;\r\n    this.taskPlayer = taskPlayer;\r\n    const href = Utils.getCallingUrlWithoutPath();\r\n    this.defaultAcceptedUrl = (href === 'file:' || href === 'atom:') ? 'null' : href;\r\n    this.acceptedExternalPageFrameUrlsList.push(this.defaultAcceptedUrl);\r\n    window.addEventListener('message', this.receiveEvent, false);\r\n  }\r\n\r\n  /**\r\n   * Send the 'task player is ready' message to the given window using the given target origin URI.\r\n   */\r\n  sendTaskPlayerReadyEvent = (domainUri, windowType) => {\r\n    PostMessageReceiver.sendResponseEvent(\r\n      {\r\n        eventType: 'taskPlayerReady'\r\n      },\r\n      domainUri,\r\n      this.getTargetWindow(windowType),\r\n      this.responder\r\n    );\r\n  }\r\n\r\n  // ---------- private stuff ---------------------------------------\r\n\r\n  static tryToParseURL(url) {\r\n    try {\r\n      const parsedUrl = new URL(url);\r\n      return parsedUrl;\r\n    } catch (ex) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Process an icoming event.\r\n   */\r\n  receiveEvent = (event) => {\r\n    const { origin, source, data: dataInEvent } = event;\r\n\r\n    // check event origin\r\n    if (this.defaultAcceptedUrl !== origin && !this.acceptedExternalPageFrameUrlsList.includes(origin)) {\r\n      console.log(`PostMessageReceiver ignored event from origin ${origin}, our default accepted url is ${this.defaultAcceptedUrl}, additional accepted URLs:`, this.acceptedExternalPageFrameUrlsList);\r\n      return;\r\n    }\r\n\r\n    const data = PostMessageReceiver.tryJsonParse(dataInEvent);\r\n    if (data === undefined) {\r\n      console.log(`PostMessageReceiver ignored event with non-JSON data: ${dataInEvent}`);\r\n      return;\r\n    }\r\n\r\n    const eventTime = new Date();\r\n\r\n    // chain of event processors starts here: \r\n    let eventProcessed = false;\r\n    if (!eventProcessed) {\r\n      eventProcessed = this.processRuntimeControlEvent(origin, source, data);\r\n    }\r\n    if (!eventProcessed) {\r\n      eventProcessed = this.processIfExternalPageFrameEvent(eventTime, origin, source, data);\r\n    }\r\n    if (!eventProcessed) {\r\n      console.log(`PostMessageReceiver ignored unknown event with data: ${dataInEvent}`);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Try to parse the given string as JSON object. \r\n   * \r\n   * The method silently returns undefined if parsing fails.\r\n   * @param {String} data \r\n   */\r\n  static tryJsonParse(data) {\r\n    try {\r\n      return JSON.parse(data);\r\n    } catch (e) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Try to process the event as event coming from code in an external page frame. \r\n   * \r\n   * The method silently ignores the event if it does \r\n   * neither contain trace log data nor state machine event nor variable get/set data.\r\n   * \r\n   * @param {Date} eventTime The time the event is processed.\r\n   * @param {String} origin The event origin.\r\n   * @param {*} source The window the event came from.\r\n   * @param {*} data The data contained in the event.\r\n   * @return True if the event was processed, false otherwise.\r\n   */\r\n  processIfExternalPageFrameEvent = (eventTime, origin, source, data) => {\r\n\r\n    // check event origin\r\n    if (!this.acceptedExternalPageFrameUrlsList.includes(origin)) {\r\n      return false;\r\n    }\r\n\r\n    const { traceMessage, traceType, microfinEvent, microfinVariable, setVariable, getVariable, indexPath, userDefIdPath } = data;\r\n    const { taskManager, variableManager } = this.runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    if (PostMessageReceiver.isEmptyOrNoValue(traceMessage)\r\n      && PostMessageReceiver.isEmptyOrNoValue(microfinEvent)\r\n      && PostMessageReceiver.isEmptyOrNoValue(microfinVariable)\r\n      && PostMessageReceiver.isNoValue(setVariable)\r\n      && PostMessageReceiver.isEmptyOrNoValue(getVariable)) {\r\n      return false;\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(traceMessage)) {\r\n      const safeIndexPath = PostMessageReceiver.isEmptyOrNoValue(indexPath) ? undefined : indexPath;\r\n      const safeUserDefIdPath = PostMessageReceiver.isEmptyOrNoValue(userDefIdPath) ? undefined : userDefIdPath;\r\n      // create an entry in the trace log\r\n      this.runtime.traceLogBuffer.reportEvent('JavaScriptInjected', eventTime, {\r\n        indexPath: safeIndexPath,\r\n        userDefIdPath: safeUserDefIdPath,\r\n        userDefId: safeUserDefIdPath === undefined ? undefined : UserDefPathHelper.getLastUserDefIdFromPath(safeUserDefIdPath),\r\n        origin,\r\n        message: traceMessage,\r\n        type: traceType\r\n      })\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(microfinVariable)) {\r\n      const { variableName, newValue } = microfinVariable;\r\n      if (!PostMessageReceiver.isEmptyOrNoValue(variableName) && !PostMessageReceiver.isEmptyOrNoValue(newValue)) {\r\n        variableManager.setVariable(currentTaskId, variableName, newValue, undefined, this.runtime);\r\n      }\r\n    }\r\n\r\n    if (!PostMessageReceiver.isNoValue(setVariable)) {\r\n      const { variableName, newValue, newType } = setVariable;\r\n      if (!PostMessageReceiver.isEmptyOrNoValue(variableName) && !PostMessageReceiver.isNoValue(newValue)) {\r\n        variableManager.setVariable(currentTaskId, variableName, newValue, newType, this.runtime);\r\n      }\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(microfinEvent)) {\r\n      this.runtime.statemachinesManager.triggerEvent(microfinEvent);\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(getVariable)) {\r\n      const { variableName, callId } = getVariable;\r\n      if (!PostMessageReceiver.isEmptyOrNoValue(variableName) && !PostMessageReceiver.isEmptyOrNoValue(callId)) {\r\n\r\n        // obtain variable value\r\n        const result = variableManager.getVariable(currentTaskId, variableName, true);\r\n\r\n        const messagePayload = {\r\n          result,\r\n          callId\r\n        }\r\n\r\n        // send back result via acceptor method\r\n        if (source !== undefined) {\r\n          try {\r\n            source.postMessage(JSON.stringify(messagePayload), origin)\r\n          } catch (e) {\r\n            console.error(`Cannot send variable value result,`, e);\r\n            throw new Error(`Cannot send variable value result.`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // signal user interactions\r\n    for (let index = 0; index < PostMessageReceiver.getUserInteractionCount(data); index += 1) {\r\n      this.runtime.incidentsAccumulator.userInteraction(eventTime, undefined, this.runtime);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check whether a parameter coming in from external JavaScript code\r\n   * does not contain a 'substantial' value, i.e. \r\n   *  - it is undefined or\r\n   *  - it is null or\r\n   *  - it is empty\r\n   * @param {*} value \r\n   */\r\n  static isEmptyOrNoValue(value) {\r\n    return value === undefined || value === null || value === '';\r\n  }\r\n\r\n  /**\r\n   * Check whether a parameter coming in from external JavaScript code\r\n   * does not contain any value, i.e. \r\n   *  - it is undefined or\r\n   *  - it is null \r\n   * @param {*} value \r\n   */\r\n  static isNoValue(value) {\r\n    return value === undefined || value === null;\r\n  }\r\n\r\n  /**\r\n   * Process an arriving message setting the \r\n   * availability of a task switch. \r\n   * \r\n   * @param {*} data The data contained in the availability setting event.\r\n   */\r\n  processAvailabilityMessage = (data) => {\r\n    const oldEntry = this.availableTaskSwitches.find(entry => (\r\n      entry.request === data.request\r\n      && entry.scope === data.scope\r\n      && entry.item === data.item\r\n      && entry.task === data.task));\r\n    if (oldEntry === undefined) {\r\n      this.availableTaskSwitches.push({\r\n        request: data.request,\r\n        scope: data.scope,\r\n        item: data.item,\r\n        task: data.task,\r\n        value: data.value\r\n      })\r\n    } else {\r\n      oldEntry.value = data.value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is the requested task switch available currently?\r\n   * \r\n   * We do a lookup in our availability map. If there is \r\n   * not entry for the given request we return false as default.\r\n   */\r\n  isTaskSwitchAvailable = (request, scope, item, task) => {\r\n    const existingEntry = this.availableTaskSwitches.find(entry => (\r\n      entry.request === request\r\n      && entry.scope === scope\r\n      && entry.item === item\r\n      && entry.task === task));\r\n    return existingEntry === undefined ? false : existingEntry.value;\r\n  }\r\n\r\n  /**\r\n   * Try to process the event as event coming from some runtime controller. \r\n   * \r\n   * The method silently ignores the event if \r\n   *  - the data does not contain the eventType field.\r\n   *  - the event origin is not our defaultAcceptedUrl.\r\n   * \r\n   * @param {String} origin The event origin.\r\n   * @param {*} sourceWindow The source window where the event came from.\r\n   * @param {*} data The data contained in the event.\r\n   * @return True if the event was processed, false otherwise.\r\n   */\r\n  processRuntimeControlEvent = (origin, sourceWindow, data) => {\r\n    const { runtime } = this;\r\n\r\n    // check event origin\r\n    if (this.defaultAcceptedUrl !== origin) {\r\n      return false;\r\n    }\r\n\r\n    if (data.eventType === undefined) {\r\n      return false;\r\n    }\r\n\r\n    switch (data.eventType) {\r\n      // ---- Initialization ---------------------------------------------\r\n      case 'taskPlayerReady':\r\n        // ignore my own initialization done event (happens when running together with controller in one window)\r\n        console.info('Task player ready (outgoing event) ignored.');\r\n        break;\r\n      // ---- Configuration Control ---------------------------------------------\r\n      case 'setWaitMessages':\r\n        this.taskPlayer.setWaitMessages(data.primary, data.secondary);\r\n        break;\r\n      case 'addItem':\r\n        this.taskPlayer.addItem(data.itemConfig, data.resourcePath, data.externalResourcePath, data.libraryPathsMap);\r\n        break;\r\n      case 'clearItems':\r\n        this.taskPlayer.clearItems();\r\n        break;\r\n      case 'setScalingConfiguration':\r\n        this.taskPlayer.setScalingConfiguration({\r\n          scalingMode: data.scalingMode, alignmentHorizontal: data.alignmentHorizontal, alignmentVertical: data.alignmentVertical\r\n        });\r\n        break;\r\n      case 'setPreload':\r\n        {\r\n          const preloadPromise = this.taskPlayer.setPreload(data.itemName);\r\n          if (preloadPromise !== undefined) {\r\n            preloadPromise.then((resources) => {\r\n              PostMessageReceiver.sendResponseEvent(\r\n                {\r\n                  eventType: 'setPreloadReturn',\r\n                  requestId: data.requestId,\r\n                  isSuccess: true,\r\n                  message: {\r\n                    images: resources[0],\r\n                    videos: resources[1],\r\n                    audios: resources[2]\r\n                  }\r\n                },\r\n                origin,\r\n                sourceWindow,\r\n                this.responder\r\n              );\r\n            }, (error) => {\r\n              PostMessageReceiver.sendResponseEvent(\r\n                {\r\n                  eventType: 'setPreloadReturn',\r\n                  requestId: data.requestId,\r\n                  isSuccess: false,\r\n                  message: error\r\n                },\r\n                origin,\r\n                sourceWindow,\r\n                this.responder\r\n              );\r\n            });\r\n          }\r\n        }\r\n        break;\r\n      case 'setPreloadReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for setPreload request (outgoing event) ignored.');\r\n        break;\r\n      // ---- Trace Control ---------------------------------------------\r\n      case 'insertMessageInTrace':\r\n        this.taskPlayer.insertMessageInTrace(data.message);\r\n        break;\r\n      case 'logStateToTrace':\r\n        this.taskPlayer.logStateToTrace();\r\n        break;\r\n      case 'flushTrace':\r\n        this.taskPlayer.flushTrace();\r\n        break;\r\n      case 'setTraceLogTransmissionChannel':\r\n        if (data.channel === 'http') {\r\n          runtime.traceLogUploader.setHttpTransmissionChannel(data.transmitUrl, data.interval, data.httpTimeout);\r\n        } else if (data.channel === 'postMessage') {\r\n          if (PostMessageReceiver.isValidTargetOrigin(data.targetOrigin)) {\r\n            runtime.traceLogUploader.setPostMessageTransmissionChannel(data.targetWindowType, data.targetOrigin, data.interval);\r\n          } else {\r\n            console.warn(`Trace log channel configuration with invalid target origin setting ignored: ${data.targetOrigin}`);\r\n          }\r\n        } else if (data.channel === 'console') {\r\n          runtime.traceLogUploader.setConsoleTransmissionChannel(data.interval);\r\n        } else {\r\n          console.error(`Invalid trace log channel setting ignored: ${data.channel}`);\r\n        }\r\n        break;\r\n      case 'traceLogTransmission':\r\n        // this is a trace log event not meant for us -> ignore.\r\n        console.info('Trace log event echo (outgoing event) ignored.');\r\n        break;\r\n      case 'setTraceContextId':\r\n        this.taskPlayer.setTraceContextId(data.contextId);\r\n        break;\r\n      case 'setTraceContentFilter':\r\n        this.taskPlayer.setTraceContentFilter(data.replaySupport, data.withExtendedMetaData, data.withoutItemConfiguration, data.withoutSnapshot, data.withoutScoring);\r\n        break;\r\n        // ---- Recordings Control -------------------------------------\r\n      case 'setRecordingTransmissionChannel':\r\n        if (data.channel === 'http') {\r\n          runtime.recordingUploader.setHttpTransmissionChannel(data.transmitUrl, undefined, data.httpTimeout);\r\n        } else if (data.channel === 'postMessage') {\r\n          if (PostMessageReceiver.isValidTargetOrigin(data.targetOrigin)) {\r\n            runtime.recordingUploader.setPostMessageTransmissionChannel(data.targetWindowType, data.targetOrigin, undefined);\r\n          } else {\r\n            console.warn(`Recording channel configuration with invalid target origin setting ignored: ${data.targetOrigin}`);\r\n          }\r\n        } else if (data.channel === 'console') {\r\n          runtime.recordingUploader.setConsoleTransmissionChannel(undefined);\r\n        } else {\r\n          console.error(`Invalid trace log channel setting ignored: ${data.channel}`);\r\n        }\r\n        break;\r\n      case 'recordingTransmission':\r\n        // this is a recording transmission event not meant for us -> ignore.\r\n        console.info('Recording transmission event echo (outgoing event) ignored.');\r\n        break;\r\n      case 'setRecordingContextId':\r\n        this.taskPlayer.setRecordingContextId(data.contextId);\r\n        break;\r\n      // ---- User Control ---------------------------------------------\r\n      case 'setUserId':\r\n        this.taskPlayer.setUserId(data.id);\r\n        break;\r\n      case 'logout':\r\n        this.taskPlayer.logout();\r\n        break;\r\n      case 'getUserId':\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getUserIdReturn',\r\n            requestId: data.requestId,\r\n            id: this.taskPlayer.getUserId()\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      case 'getUserIdReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getUserId request (outgoing event) ignored.');\r\n        break;\r\n      case 'showLogin':\r\n        this.taskPlayer.showLogin(\r\n          data.titleLabel,\r\n          data.fieldLabel,\r\n          data.buttonLabel,\r\n          (fieldValue) => {\r\n            PostMessageReceiver.sendResponseEvent(\r\n              {\r\n                eventType: 'loginDialogClosed',\r\n                requestId: data.requestId,\r\n                fieldValue\r\n              },\r\n              origin,\r\n              sourceWindow,\r\n              this.responder\r\n            )\r\n          }\r\n        );\r\n        break;\r\n      case 'loginDialogClosed':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for showLogin request (outgoing event) ignored.');\r\n        break;\r\n        // ---- Task Control ---------------------------------------------\r\n      case 'startTask':\r\n        this.taskPlayer.startTask(data.scope, data.item, data.task);\r\n        break;\r\n      case 'stopTask':\r\n        this.taskPlayer.stopTask();\r\n        break;\r\n      case 'pauseTask':\r\n        this.taskPlayer.pauseTask();\r\n        break;\r\n      case 'resumeTask':\r\n        this.taskPlayer.resumeTask();\r\n        break;\r\n      case 'getTask': {\r\n        const taskInfo = this.taskPlayer.getTask();\r\n        const { scope, item, task } = (taskInfo === undefined ? {} : taskInfo);\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getTaskReturn',\r\n            requestId: data.requestId,\r\n            scope,\r\n            item,\r\n            task\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      }\r\n      case 'getTaskReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getTask request (outgoing event) ignored.');\r\n        break;\r\n      case 'setTaskSequencer': {\r\n        const responderFunction = this.responder;\r\n        const targetWindow = this.getTargetWindow(data.targetWindowType);\r\n        if (!PostMessageReceiver.isValidTargetOrigin(data.targetOrigin)) {\r\n          console.warn(`Task sequencer configuration with invalid target origin ignored: ${data.targetOrigin}`);\r\n        } else {\r\n          this.taskPlayer.setTaskSequencer(\r\n            (request, scope, item, task) => {\r\n              PostMessageReceiver.sendResponseEvent(\r\n                {\r\n                  eventType: 'taskSwitchRequest',\r\n                  request,\r\n                  scope,\r\n                  item,\r\n                  task\r\n                },\r\n                data.targetOrigin,\r\n                targetWindow,\r\n                responderFunction\r\n              );\r\n            },\r\n            (request, scope, item, task) => this.isTaskSwitchAvailable(request, scope, item, task)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case 'taskSwitchRequest':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Task switch request (outgoing event) ignored.');\r\n        break;\r\n      case 'setSwitchAvailability':\r\n        this.processAvailabilityMessage(data);\r\n        break;\r\n      // ---- Task State Control ---------------------------------------------\r\n      case 'getTasksState':\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getTasksStateReturn',\r\n            requestId: data.requestId,\r\n            userId: this.taskPlayer.getUserId(),\r\n            state: this.taskPlayer.getTasksState()\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      case 'getTasksStateReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getTasksState request (outgoing event) ignored.');\r\n        break;\r\n      case 'clearTasksState':\r\n        this.taskPlayer.clearTasksState();\r\n        break;\r\n      case 'preloadTasksState':\r\n        this.taskPlayer.preloadTasksState(data.state);\r\n        break;\r\n      case 'replay':\r\n        this.taskPlayer.replay(data.story);\r\n        break;\r\n        // ---- Scoring Control -------------------------------------------------\r\n      case 'getScoringResult': {\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getScoringResultReturn',\r\n            requestId: data.requestId,\r\n            result: this.taskPlayer.getScoringResult(),\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      }\r\n      case 'getScoringResultReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getScoringResult request (outgoing event) ignored.');\r\n        break;\r\n      case 'getOldScoringResult': {\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getOldScoringResultReturn',\r\n            requestId: data.requestId,\r\n            result: this.taskPlayer.getOldScoringResult(data.scope, data.item, data.task),\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      }\r\n      case 'getOldScoringResultReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getOldScoringResult request (outgoing event) ignored.');\r\n        break;\r\n      // ---- Statemachine Control ---------------------------------------------\r\n      case 'sendStatemachineEvent':\r\n        this.taskPlayer.sendStatemachineEvent(data.event);\r\n        break;\r\n      // ---- Header Control ---------------------------------------------\r\n      case 'setHeaderButtons':\r\n        this.taskPlayer.setHeaderButtons(data.headerButtons);\r\n        break;\r\n      case 'setMenuCarousels':\r\n        this.taskPlayer.setMenuCarousels(data.course, data.scopes);\r\n        break;\r\n      // ---- Developer Mode Control ---------------------------------------------\r\n      case 'activateDebuggingWindows':\r\n        this.taskPlayer.activateDebuggingWindows(data.scoreHotKey, data.traceHotKey, data.statemachineHotKey);\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  static sendResponseEvent(eventToSend, triggeringEventOrigin, triggeringEventSourceWindow, responder) {\r\n    responder(eventToSend, triggeringEventOrigin, triggeringEventSourceWindow);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the posting window specified by the given target window type.\r\n   * \r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window, useful for testing only)\r\n   */\r\n  getTargetWindow = (targetWindowType) => {\r\n    switch (targetWindowType) {\r\n      case 'parent':\r\n        return window.parent;\r\n      case 'opener':\r\n        return window.opener;\r\n      case 'self':\r\n        return window;\r\n      default:\r\n        console.error(`Unknown target window type ${targetWindowType}`)\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the number of user interactions to signal for this event. \r\n   * \r\n   * The method return 0 if it cannot detect a valid trace count in the event data.\r\n   * \r\n   * @param {*} data The data contained in the event.\r\n   */\r\n  static getUserInteractionCount(data) {\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(data.traceCount) && data.traceCount >= 0) {\r\n      return data.traceCount;\r\n    }\r\n    console.warn(`Invalid traceCount in external page frame event ignored: ${data.traceCount}`);\r\n    return 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * Check whether the given string is a valid target origin for postMessage calls.\r\n   */\r\n  static isValidTargetOrigin(originAsString) {\r\n\r\n    if (originAsString === '*') return true;\r\n\r\n    try {\r\n      const parsedUrl = UrlLib.parse(originAsString);\r\n      return originAsString === `${parsedUrl.protocol}//${parsedUrl.host}`;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n}\r\n","export default class EvaluatorHelper {\n\n  static ANGLE_DEGREE = \"Degree\";\n\n  static ANGLE_RADIAN = \"Radian\";\n\n  static fak = (n) => {\n    if (n < 0 || n > 170) {\n      return NaN;\n    } else if (!EvaluatorHelper.isInt(n)) {\n      return NaN;\n    } else if (n <= 1) {\n      return 1;\n    } else {\n      return n * EvaluatorHelper.fak(n - 1);\n    }\n  }\n\n  static nthroot = (x, n) => {\n    const negate = n % 2 === 1 && x < 0;\n    if (negate) x = -x;\n    const possible = x ** (1 / n);\n    const check = possible ** n;\n    if (Math.abs(x - check) < 1 && ((x > 0) === (check > 0))) {\n      return negate ? -possible : possible;\n    }\n    return NaN;\n  }\n\n  static isInt = n => n % 1 === 0;\n\n  static isBigger = displayWidth => displayWidth > 10;\n\n\n  static isMultipleOfPi(value, frequency, offset, deg) {\n    const unit = deg ? 180 : Math.PI;\n    return ((value - offset*unit) / frequency / unit) % 1 === 0;\n  }\n\n}\n","import StateManagerHelper from '../../state/StateManagerHelper';\nimport EvaluatorHelper from \"./EvaluatorHelper\"\n\n/**\n * Mechanism to evaluate formulas built with binary operators\n * taking operator precedence (ranking) into account.\n * \n * Formulas are built by sending pairs of a value and a (value terminating) operator \n * via calls of calc(operator, value). \n * \n * Supported operators are (with ascending precedence):\n *  '=', \n *  '+', '-' (with alternate symbol '–' (long dash)),  \n *  '*' (with alternate symbol '×'), '/' (with alternate symbol '÷')\n *  'yx' (calculating x^y), 'x√y', 'log' and 'EE'\n *\n * The calc(operator, value) call will evaluate the formula given up till now\n * as far as possible taking operator precedence into account.\n * \n * Sending the '=' operator will calculate the final result and erase the formula.\n * \n * The mechanism supports a special feature for repeated '=' calls:\n * If multiple '=' calls follow each other without any other operators between,\n * the calc method will return the following calculation result:\n *  <operand of current '=' call> <operator before first '=' call> <operand of first '=' call>\n * Example call sequence:\n *  - call('+', 420) returns 420 (nothing to caculate yet)\n *  - call('-', 30)  returns 450 (same precedence, can calculate 420 + 30 already)\n *  - call('=', 70)  returns 380 (formula complete, total result is 420 + 30 - 70)\n *  - call('=', 200) returns 130 (applies - 70 to new given value 200, i.e. 200 - 70)\n *  - call('=', 100) returns  30 (applies - 70 to new given value 100, i.e. 100 - 70)\n */ \nexport default class ExpressionEvaluator {\n\n  static RANK = {\n    '=': 0,\n    '+': 1,\n    '-': 1,\n    '/': 2,\n    '*': 2,\n    yx: 3,\n    'x√y': 3,\n    log: 3,\n    EE: 3\n  };\n\n  constructor() {\n    this.reset();\n  }\n\n  // ------------------ public API --------------------------------------------------\n\n  /**\n   * Get our full state for the task state backup/restore mechanism.\n   */\n  getFullState = () => ({\n    stack: StateManagerHelper.deepCopy(this.stack),\n    num: this.num,\n    repeatingRunStatus: StateManagerHelper.deepCopy(this.repeatingRunStatus)\n  });\n\n  /**\n   * Set our internal full state (obtained by getFullState()) to be used by the task state backup/restore mechanism.\n   */\n  restoreState = (state) => {\n    this.stack = StateManagerHelper.deepCopy(state.stack);\n    this.num = state.num;\n    this.repeatingRunStatus = StateManagerHelper.deepCopy(state.repeatingRunStatus);\n  }\n\n  /**\n   * Extend the current formula with the given value followed by the given operator\n   * and return the result of the formula evaluation (as far as evaluation is possible already\n   * due to operator precedences).\n   */\n  calc = (val, operator) => {\n\n    const key = this.translateKey(operator);\n\n    this.updateRepeatingRunStatus(key, val);\n\n    if (this.isStackEmpty()) {\n\n      if (key === '=') {\n        // New operand with '=' operator received.\n        if (this.repeatingRunIsActive()) {\n          // Operator and second operand for the repeating runs are there already.\n          // -> Do a repeating '=' calculation with the new first operand and return that as result.\n          //    (The stack remains empty.)\n          return `${this.calcValue(val, this.getRepeatingRunKey(), this.getRepeatingRunValue())}`;\n        } else {\n          // pressing '=' without anything in stack\n          // -> Return given value as result.\n          //    (The stack remains empty.)\n          return `${val}`;\n        }\n      } else {\n        // First operand with first binary operator received (maybe after stack reset by the last '=' operator).\n        // -> Create first stack entry waiting for second operand and return the given value as result.\n        this.pushStackEntry(val, key);\n        return `${val}`;\n      }\n\n    } else {\n\n      let returnValue = 0;\n\n      // the rank of the new key\n      const newRank = this.getRankForKey(key);\n\n      // the previous key and its rank\n      const previousKey = this.peekStackKey();\n      const previousValue = this.peekStackValue();\n\n      if (newRank > this.getRankForKey(previousKey)) {\n        // The new operation has higher precendence than the previous one (e.g. +, *)\n        // -> An operator with even higher precedence might follow. Therefore the given value might belong to that one\n        //    and we have to postpone the evaluation.\n        // -> Add a new pending entry to the stack.\n        this.pushStackEntry(val, key);\n        returnValue = val;\n      } else {\n        // The new operation has same or lower precendence than the previous one (e.g. *, + or *, *)\n        // -> Evaluate previous operator with its first operand and the current value as second operand\n        //    and pop the pending operation\n        const result = this.calcValue(previousValue, previousKey, val);\n        this.popStackEntry();\n\n        // We might be able to go even further down the stack:\n        if (!this.isStackEmpty() && newRank <= this.getRankForKey(this.peekStackKey())) {\n          // The new operation has lower precendence than 2 steps ago -> (e.g.  +, *, = or *, yx, +)\n          // -> Recursive call with the calculated value and our current operator.\n          returnValue = this.calc(result, key);\n        } else {\n          // The new operation has a higher precedence the the one 2 steps ago (or there is nothing left in the stack). \n          // -> We have to wait for further input.\n          // -> Push the result as first operand together with the new operator on the stack. \n          this.pushStackEntry(result, key);\n          returnValue = result;\n        }\n      }\n\n      // erase the stack if we got a '='\n      if (key === '=') {\n        this.resetStack();\n      }\n\n      return `${returnValue}`;\n\n    }\n\n\n  }\n\n  /**\n   * Erase the formula given so far and drop the repeating run status.\n   */\n  reset = () => {\n    this.resetStack();\n    this.resetRepeatingRun();\n  }\n\n  // ----------------- calculate complete operator expression -----------------------\n\n  // operands are strings!\n  calcValue = (o1, operator, o2) => {\n    let result;\n    switch (operator) {\n      case 'log':\n        result = Math.log(o1) / Math.log(o2);\n        break;\n      case 'yx':\n        result = o1 ** o2;\n        break;\n      case 'x√y':\n        result = EvaluatorHelper.nthroot(o1, o2);\n        break;\n      case 'EE':\n        result = o1 * (10 ** o2);\n        break;\n      case '+':\n        result = (+o1) + (+o2);\n        break;\n      case '-':\n        result = o1 - o2;\n        break;\n      case '*':\n        result = o1 * o2;\n        break;\n      case '/':\n        result = o1 / o2;\n        break;\n      default:\n        throw new Error(`NO case for operator ${operator}`);\n    }\n    return result;\n  }\n\n\n  // ------------ the repeating run status structure ------------------\n  // The repeating run status is used to process repeated inputs of an operand with a '='-key \n  // It contains the operator to evaluate and the static second operand to use for each operand that arrives with '='-key.\n  // The lifecycle is: \n  //  - Operator other than '=' arrives: Remember operator in run status, drop second operand value in run status. \n  //    The repeat feature is inactive now.\n  //  - First operator '=' arrives after any other operator: Save operand value in run status. \n  //    The repeat feature is active now.\n  //  - Another operator '=' arrives after an '=' operator: Use the accompanying value as first operand, the \n  //    operator stored in the run status as operator and the value stored in the run status as second operand\n  //    and evaluate that as result. (After an '=' operator the stack is always empty.)\n\n  resetRepeatingRun = () => {\n    this.repeatingRunStatus = {\n      key: undefined,\n      value: undefined\n    };\n  }\n\n  updateRepeatingRunStatus = (key, val) => {\n    if (key !== '=') {\n      // repeating run is broken by new operator\n      // -> erase old second operand and remember new operator for potential next run\n      this.setRepeatingRunValue(undefined);\n      this.setRepeatingRunKey(key);\n    } else if (this.getRepeatingRunValue() === undefined) {\n      // first '=' operator after another operator sets second operand for repeat calculations\n      this.setRepeatingRunValue(val);\n    }\n  }\n\n  repeatingRunIsActive = () => this.getRepeatingRunKey() !== undefined && this.getRepeatingRunValue !== undefined;\n\n  getRepeatingRunValue = () => this.repeatingRunStatus.value;\n\n  getRepeatingRunKey = () => this.repeatingRunStatus.key;\n\n  setRepeatingRunKey = (key) => {\n    this.repeatingRunStatus.key = key;\n  }\n\n  setRepeatingRunValue = (value) => {\n    this.repeatingRunStatus.value = value;\n  }\n\n\n  // ------------ the stack structure --------------------------\n  // The stack is an array of [val, key] entries. \n  // Each entry represents a calculation step with a binary operator \n  // that waits for the second operand to become available:\n  // Due to the operator ranking the value following the operator in the\n  // input stream might belong as first operand to a higher ranking operator following later.\n  // The val is the first operand and the key is the binary operator of the pending calculation.\n  // The num member is the index of the top of the stack. \n  // (We don't drop entries from the array. We just decrease the num pointer to move 'top' of the stack.)\n\n  resetStack = () => {\n    this.stack = [];\n    this.num = 0;\n  }\n\n  isStackEmpty = () => this.num <= 0;\n\n  peekStackValue = () => this.stack[this.num - 1][0];\n\n  peekStackKey = () => this.stack[this.num - 1][1];\n\n  pushStackEntry = (val, key) => {\n    this.stack[this.num] = [val, key];\n    this.num += 1;\n  }\n\n  popStackEntry = () => {\n    this.num -= 1;\n    return this.stack[this.num];\n  }\n\n  // -------------- other helper methods ------------------------\n\n  translateKey = (key) => {\n    if (key === '×') return '*';\n    if (key === '÷') return '/';\n    if (key === '–') return '-';\n    return key;\n  }\n\n  getRankForKey = key => ExpressionEvaluator.RANK[key];\n\n\n}\n","import EvaluatorHelper from './EvaluatorHelper';\nimport ExpressionEvaluator from './ExpressionEvaluator';\nimport StateManagerHelper from '../../state/StateManagerHelper';\n\n/* \n * This evaluator calculates the current value that the calculator should display\n * and then sends commands to history and input display to render the new value. \n * TODO: These commands look like a depedendency between evaluator and history/input display. \n *       In some cases the evaluator knows that sending AC will reset the history.\n *       Should we remove this dependency somehow?\n */\nexport default class Evaluator {\n\n  static getSupportedOperations = () => Object.keys(Evaluator.buildHardcodedCommandsList(undefined));\n\n  constructor(displayWidth, angle) {\n\n    // A boolean flag signalling an error that will block the calculator until AC clears everything.\n    this.isError = false;\n\n    // The memory of values that is used by M+/M-/MS/MR/MC operations.\n    this.memory = {};\n\n    // The stack of nested expressions.\n    // The top level expression has level 0, each open bracket pair adds another level. \n    this.resetExpressionsStack();\n\n    // The current result that is to be displayed.\n    // We use strings for this since we need to represent things like '-0' or '12.' while building number values.\n    this.setCurrentEvaluationResult('0');\n\n    // A buffer that contains all key inputs until '=' is hit.\n    // The buffer is reset at the first key after the '=' or at a 'AC' key.\n    // Useful for backspace implementation and getting the previous key in some cases.\n    // Entry structure is: {key, isEndOfTerm, shouldResetHistoryIfDigitOnNextKey, }\n    this.resetKeysBuffer();\n\n    // The (hard coded) list of supported actions triggered by key inputs.\n    // Each triggered function receives an object { key, operand, dispVal } and returns the new evaluated value.\n    this.operations = Evaluator.buildHardcodedCommandsList(this);\n\n    this.setConfiguration(displayWidth, angle);\n  }\n\n  // ------------------ public API -----------------------------------------------------------\n  /**\n   * Set our configuration.\n   */\n  setConfiguration = (displayWidth, angle, silentOnErrors = true) => {\n    this.angle = angle || EvaluatorHelper.ANGLE_DEGREE;\n    this.bigger = EvaluatorHelper.isBigger(displayWidth);\n    this.silentOnErrors = silentOnErrors;\n  }\n\n  /**\n   * Get our full state for the task state backup/restore mechanism.\n   */\n  getFullState = () => {\n    const state = {};\n    state.expressions = StateManagerHelper.deepCopy(this.expressions.map(expression => expression.getFullState()));\n    state.expressionNestingDepth = this.expressionNestingDepth;\n    state.isError = this.isError;\n    state.memory = StateManagerHelper.deepCopy(this.memory);\n    state.resultBuffer = this.resultBuffer;\n    state.keysBuffer = StateManagerHelper.deepCopy(this.keysBuffer);\n    state.angle = this.angle;\n    state.bigger = this.bigger;\n    return state;\n  }\n\n  /**\n   * Set our internal full state (obtained by getFullState()) to be used by the task state backup/restore mechanism.\n   */\n  restoreState = (state) => {\n\n    this.expressions = state.expressions.map((s) => {\n      const calc = new ExpressionEvaluator();\n      calc.restoreState(s);\n      return calc;\n    });\n    this.expressionNestingDepth = state.expressionNestingDepth;\n\n    this.isError = state.isError;\n    this.memory = state.memory;\n    this.resultBuffer = state.resultBuffer;\n    this.keysBuffer = state.keysBuffer;\n    this.angle = state.angle;\n    this.bigger = state.bigger;\n  }\n\n  /**\n   * Get a number value from our memory. The value is rounded to an integer. \n   */\n  getMem = (memIdx) => {\n    memIdx = memIdx || 0;\n    if (this.memory[memIdx]) {\n      return Math.round(Number(this.memory[memIdx]))\n    }\n    return 0;\n  }\n\n  /**\n   * Parse the given string as number, put it into the result buffer \n   * and return the required render commands.\n   * (naive implementation - same in library)\n   */\n  paste = (text) => {\n    this.initRenderCommands();\n\n    const newValue = Number.parseFloat(text).toString();\n    this.setCurrentEvaluationResult(newValue)\n    this.sendToRender(newValue);\n\n    return this.getRenderCommands();\n  }\n\n  /**\n   * Process the given key and operand and return the required render commands.\n   */\n  evalKey = (key, operand) => {\n    this.initRenderCommands();\n    this.evalKeyInternal(key, operand);\n    return this.getRenderCommands();\n  }\n\n  // ----------------- private stuff ---------------------------------------------- \n\n  // hardcoded commands list -------------------------------------------------\n\n  /*\n   * Create the hardcoded list of calculation commands. \n   * \n   * The methods creates two variants of the same list:\n   *  - Called with valid this pointer it returns the full list for use in the class instance doing actual calculations.\n   *  - Called without this pointer it returns a dummy list that contains the supported keys only with now calculation actions assigned. \n   */\n  static buildHardcodedCommandsList(withThis) {\n    return {\n      // trignonometry\n      sin: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsin),\n      csc: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcsc),\n      \"sin-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsin1),\n      cos: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcos),\n      sec: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsec),\n      \"cos-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcos1),\n      tan: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltan),\n      cot: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcot),\n      \"tan-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltan1),\n      sinh: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsinh),\n      \"sinh-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsinh1),\n      cosh: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcosh),\n      \"cosh-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcosh1),\n      tanh: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltanh),\n      \"tanh-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltanh1),\n      π: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalPI),\n      // special arithmetics\n      \"1/x\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval1perx),\n      x2: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalx2),\n      x3: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalx3),\n      yx: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"2x\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval2x),\n      ex: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalex),\n      operandyx: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandyx),\n      operandex: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandex),\n      \"2√\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval2root),\n      \"3√\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval3root),\n      \"x√y\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"operandx√y\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandxrooty),\n      \"x!\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalfactorial),\n      ln: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalln),\n      log: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      log2: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evallog2),\n      log10: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evallog10),\n      operandlog: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandlog),\n      Rand: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalRandom),\n      // basic arithmetics\n      \"(\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalLeftBracket),\n      \")\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalRightBracket),\n      \"×\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"÷\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"+\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"–\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"+/–\": withThis === undefined ? null : withThis.evalPlusMinus,\n      \"=\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalEquals),\n      // number input\n      0: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      1: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      2: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      3: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      4: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      5: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      6: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      7: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      8: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      9: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      \".\": withThis === undefined ? null : withThis.evalDecimalPoint,\n      // memory\n      mc: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMClear),\n      ms: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMSave),\n      \"m+\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMAdd),\n      \"m-\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMMinus),\n      mr: withThis === undefined ? null : withThis.evalOperation(withThis.evalMRead),\n      // basic input\n      AC: withThis === undefined ? null : withThis.evalOperation(withThis.evalAC),\n      C: withThis === undefined ? null : withThis.evalOperation(withThis.evalC),\n      back: withThis === undefined ? null : withThis.evalOperation(withThis.evalBackspace),\n    }\n  }\n\n  static buildUnaryOperatorCommand(withThis, calcFunction) {\n    return withThis.evalEndOfTerm(withThis.evalShouldResetHistoryIfDigitOnNextKey(withThis.evalOperation(calcFunction)));\n  }\n\n  // TODO: improve the name of this method once we fully understand the things going on here.\n  static buildBinaryOperatorCommand(withThis, calcFunction) {\n    return withThis.evalEndOfTerm(withThis.evalOperation(calcFunction));\n  }\n\n\n  // render commands management ------------------------------------\n  /**\n   * (Re-)initialize the renderCommands member.\n   */\n  initRenderCommands = () => {\n    this.renderCommands = {\n      render: [],\n      history: []\n    }\n  }\n\n  /**\n   * Get the current render commands structure\n   */\n  getRenderCommands = () => this.renderCommands;\n\n  /**\n   * Add an entry with a value to display to the render commands list in the renderCommands member. \n   */\n  sendToRender = (value) => {\n    this.renderCommands.render.push(value);\n  }\n\n  /**\n   * Add an entry with with a key, an operand and a value to the render-history commands list in the renderCommands member. \n   * \n   * The operand parameter is the operand used in immediate operations(like x3 => operand is 3).\n   * The value is the result to be displayed currently.\n   * The method pushes an AC key instead if there is an error registered currently in the isError member. \n   */\n  sendToRenderHistory = (key, operand, value) => {\n    // there was an error in evaluation\n    if (this.isError) {\n      this.renderCommands.history.push({\n        key: \"AC\"\n      });\n    } else {\n      this.renderCommands.history.push({\n        key,\n        operand,\n        value\n      });\n    }\n  }\n\n  // nested expressions stack --------------------------------------\n  // The stack is an array of entries. Each entry contains an ExpressionEvaluator instance.\n  // Each entry represents a nested level. \n  // The top level expression has level 0, each open bracket pair adds another level. \n\n  resetExpressionsStack = () => {\n    this.expressionNestingDepth = 0;\n    this.expressions = [];\n    this.expressions[0] = new ExpressionEvaluator();\n  }\n\n  pushNestedExpression = () => {\n    this.expressionNestingDepth += 1;\n    this.expressions[this.expressionNestingDepth] = new ExpressionEvaluator();\n  }\n\n  popNestedExpression = () => {\n    const result = this.expressions[this.expressionNestingDepth];\n    this.expressionNestingDepth -= 1;\n    return result;\n  }\n\n  peekNestedExpression = () => this.expressions[this.expressionNestingDepth];\n\n  /**\n   * Is there any nested expression or are we at the top level of the expressions stack?\n   */\n  hasNestedExpression = () => this.expressionNestingDepth > 0;\n\n\n  // result buffer ------------------------------------\n\n  /**\n   * Set a number value to the result buffer. \n   * \n   * If the given value is a pseudo number (NaN, Inf, Error) \n   * the method implicitly sets '0' instead and registers an error in the isError member.\n   */\n  setCurrentEvaluationResult = (value) => {\n    if (value.match(/NaN|Inf|Error/)) {\n      this.resultBuffer = '0';\n      this.isError = true;\n    } else {\n      this.resultBuffer = value;\n    }\n  }\n\n  getCurrentEvaluationResult = () => this.resultBuffer;\n\n  // keysBuffer --------------------------\n\n  resetKeysBuffer = () => {\n    this.keysBuffer = [];\n  }\n\n  /**\n   * Push the given key to the keysBuffer member.\n   * \n   * If the key is AC it will replace the whole key buffer content.\n   * If \n   *  - the last key in the buffer was '=' (i.e. the last formula was completely evaluated and dropped) and\n   *  - the new key is not '=' (i.e. we are not in repeating '=' mode but starting a new formula instead)\n   * the new key replaces the whole buffer content.\n   */\n  pushKeyToKeysBuffer = (key) => {\n\n    // add the key to buffer\n    this.keysBuffer.push({\n      key\n    });\n\n    const { key: previousKey } = this.getPreviousKey();\n    // reset keys buffer if previous key was 'equals' or current key is 'AC'\n    if ((previousKey === '=' && key !== '=') || this.isKeyAC(key)) {\n      this.keysBuffer = [{\n        key\n      }];\n    }\n  }\n\n  popKeyFromKeysBuffer = () => this.keysBuffer.pop();\n\n  getKeysBufferLength = () => this.keysBuffer.length;\n\n  /**\n   * Returns the second last entry in the keysBuffer (or {} if there is no second last entry).\n   */\n  getPreviousKey = () => this.keysBuffer[this.keysBuffer.length - 2] || {};\n\n  /**\n   * Returns last entry in the keysBuffer (or {} if there is no entry).\n   */\n  getCurrentKey = () => this.keysBuffer[this.keysBuffer.length - 1] || {};\n\n\n  // evaluation of keys ------------------------------\n\n  /**\n   * Process the given key and operand. \n   * \n   * The method implicitly puts required render commands in the renderCommands member.\n   * \n   * If we currently have an error registered in the isError we don't process any\n   * keys except AC and C. \n   * We clear the isError flag before starting the actual processing.\n   * \n   * Steps to process the key/operand are:\n   * - push the key to the keysBuffer\n   * - select the operation for the key from the operations array \n   * - call the selected operation with the given key, the given operand and the current evaluation result value.\n   * \n   */\n  evalKeyInternal = (key, operand) => {\n\n    if (this.isError && !this.isKeyAC(key) && !this.isKeyC(key)) {\n      return;\n    }\n\n    this.isError = false;\n\n    this.pushKeyToKeysBuffer(key);\n\n    this.operations[key]({\n      key,\n      operand,\n      dispVal: this.getCurrentEvaluationResult()\n    });\n\n  }\n\n\n  // ---- higher order functions wrapping basic evaluator functions to add general behaviour ------------\n  /**\n   * Puts a wrapper around the given function which does the following:\n   * - Enclose all actions in a try-catch that will return undefined if anything goes wrong.\n   * - Put the function call result in the result buffer.\n   * - Put the function call result to the render command list in the renderCommands member.\n   * - Put the key and operand given as parameters to the history-render command list in the renderCommands member.\n   * - Return the function call result as string.\n   * \n   * The wrapping function expects the same parameters as the wrapped function (dispVal, key and operand)\n   * and transfers these down to the wrapped function.\n   * \n   * The wrapped function should return the new current value of the calculator.\n   * If sending events to render/history is to be avoided the wrapped function should throw an exception.\n   */\n  evalOperation = (functionForEval) => {\n    const result = ({ dispVal, key, operand }) => {\n      try {\n        // it changes the  type of the value => maybe some function up the stream needs it originally\n        const originalResult = functionForEval({\n          key,\n          operand,\n          dispVal\n        });\n        const resultAsString = originalResult === undefined ? undefined : originalResult.toString();\n\n        this.setCurrentEvaluationResult(resultAsString);\n        this.sendToRender(resultAsString);\n        this.sendToRenderHistory(key, operand, this.getCurrentEvaluationResult());\n\n        return resultAsString;\n\n      } catch (ex) {\n        if (!this.silentOnErrors) {\n          console.warn(`---> Ignored key ${key} with operand ${operand} at current value ${dispVal}: ${ex.toString()}`)\n        }\n        return undefined;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Puts a wrapper around the given function that does the following:\n   *  - Call the wrapped function.\n   *  - Set the flag 'shouldResetHistoryIfDigitOnNextKey' in the current key in the keysBuffer. \n   *  \n   * If that flag is set and the next key is a digit we should reset the entire history.\n   * Example: 90, sin, 23 => 23 resets the history. \n   * (TODO: i think this behaviour should be in history renderer.)\n   */\n  evalShouldResetHistoryIfDigitOnNextKey = functionForEval => (\n    (dispValKeyOperand) => {\n      const value = functionForEval(dispValKeyOperand);\n      this.getCurrentKey().shouldResetHistoryIfDigitOnNextKey = true;\n      return value;\n    }\n  )\n\n  /**\n   * Puts a wrapper around the given function that does the following:\n   *  - Call the wrapped function\n   *  - Set the flag 'isEndOfTerm' in the current key in the keysBuffer. \n   * \n   * If the flag is set on a key the next digit input will start a new value. \n   * The flag is set by all operators except those that help to build up a number \n   * value: digits, +/-, backspace.\n  */\n  evalEndOfTerm = functionForEval => (\n    (dispValKeyOperand) => {\n      const value = functionForEval(dispValKeyOperand);\n      this.getCurrentKey().isEndOfTerm = true;\n      return value;\n    }\n  )\n\n\n  // --- basic evaluator functions implementing the specific keys -------------------------------------------\n\n  // trigonometry\n\n  // sinus\n  evalsin = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return 0;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0.5, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1.5, this.deg())) return -1;\n    return Math.sin(this.getRadiantValue(dispVal));\n  }\n\n  // cosecans\n  evalcsc = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return NaN;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0.5, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1.5, this.deg())) return -1;\n    return 1/Math.sin(this.getRadiantValue(dispVal));\n  }\n\n  // arcus sinus\n  evalsin1 = ({ dispVal }) => this.getDisplayValueFromRadiant(Math.asin(dispVal));\n\n  // cosinus\n  evalcos = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return 0;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1, this.deg())) return -1;\n    return Math.cos(this.getRadiantValue(dispVal));\n  }\n\n  // secans\n  evalsec = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return NaN;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1, this.deg())) return -1;\n    return 1/Math.cos(this.getRadiantValue(dispVal));\n  }\n\n  // arcus cosinus\n  evalcos1 = ({ dispVal }) => this.getDisplayValueFromRadiant(Math.acos(dispVal));\n\n  // tangens\n  evaltan = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return 0;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return NaN;\n    return Math.tan(this.getRadiantValue(dispVal));\n  }\n\n  // cotangens\n  evalcot = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return NaN;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return 0;\n    return 1/Math.tan(this.getRadiantValue(dispVal));\n  }\n\n  // arcus tangens\n  evaltan1 = ({ dispVal }) => this.getDisplayValueFromRadiant(Math.atan(dispVal));\n\n  // sinus hyperbolicus\n  evalsinh = ({ dispVal }) => (((Math.E ** dispVal) - (Math.E ** -dispVal)) / 2);\n\n  // area sinus hyperbolicus\n  evalsinh1 = ({ dispVal }) => Math.log(+dispVal + Math.sqrt(1 + (dispVal ** 2)));\n\n  // cosinus hyperbolicus\n  evalcosh = ({ dispVal }) => (((Math.E ** dispVal) + (Math.E ** -dispVal)) / 2);\n\n  // area cosinus hyperbolicus\n  evalcosh1 = ({ dispVal }) => 2 * Math.log(Math.sqrt((+dispVal + 1) / 2) + Math.sqrt((+dispVal - 1) / 2));\n\n  // tangens hyperbolicus\n  evaltanh = ({ dispVal }) => {\n    const e1 = (Math.E ** dispVal);\n    const e2 = (Math.E ** -dispVal);\n    return (e1 - e2) / (e1 + e2);\n  }\n\n  // area tangens hyperbolicus\n  evaltanh1 = ({ dispVal }) => (Math.log(+dispVal + 1) - Math.log(1 - dispVal)) / 2;\n\n  // pi\n  evalPI = ({ dispVal }) => Math.PI;\n\n  /**\n   * Translate the given display value (given as specified by the this.deg() flag) to a radiant value.\n  */\n  getRadiantValue(displayValue) {\n    return displayValue * (this.deg() ? Math.PI/180 : 1);\n  }\n\n  /**\n   * Translate the given radiant value to a display value as specified by the this.deg() flag.\n   */\n  getDisplayValueFromRadiant(radiantValue) {\n    return radiantValue * (this.deg() ? 180/Math.PI : 1);\n  }\n\n  /**\n   * Returns true if we expect display values for cos/sin/tan to be given as angle values in degrees (like 45, 90, 360), \n   * returns false if we expect them to be radiant values (like PI, 0.5*PI, 2*PI).\n   */\n  deg = () => this.angle === EvaluatorHelper.ANGLE_DEGREE;\n\n\n  // special arithmetics\n\n  // 1/x\n  eval1perx = ({ dispVal }) => (1 / dispVal);\n\n  // x^2\n  evalx2 = ({ dispVal }) => dispVal ** 2;\n\n  // x^3\n  evalx3 = ({ dispVal }) => dispVal ** 3;\n\n  // 2^x\n  eval2x = ({ dispVal }) => (2 ** (dispVal));\n\n  // e^x \n  evalex = ({ dispVal }) => Math.exp(dispVal);\n\n  // x^operand\n  evaloperandyx = ({ dispVal, operand }) => dispVal ** operand;\n\n  // operand^x \n  evaloperandex = ({ dispVal, operand }) => operand ** dispVal;\n\n  // 2√x\n  eval2root = ({ dispVal }) => Math.sqrt(dispVal);\n\n  // 3√x\n  eval3root = ({ dispVal }) => EvaluatorHelper.nthroot(dispVal, 3);\n\n  // operand√x\n  evaloperandxrooty = ({ dispVal, operand }) => EvaluatorHelper.nthroot(dispVal, operand);\n\n  // x!\n  evalfactorial = ({ dispVal }) => EvaluatorHelper.fak(dispVal);\n\n  // ln(x)\n  evalln = ({ dispVal }) => Math.log(dispVal);\n\n  // log2(x)\n  evallog2 = ({ dispVal }) => Math.log(dispVal) / Math.log(2);\n\n  // log10(x)\n  evallog10 = ({ dispVal }) => Math.log(dispVal) / Math.log(10);\n\n  // logoperand(x)\n  evaloperandlog = ({ dispVal, operand }) => Math.log(dispVal) / Math.log(operand);\n\n  // rand()\n  evalRandom = ({ dispVal }) => Math.random();\n\n  // basic arithmetics\n\n  /**\n   * Start a new nested expression level for the bracket content.\n   */\n  evalLeftBracket = ({ dispVal }) => {\n    this.pushNestedExpression();\n    return dispVal;\n  }\n\n  /**\n   * Evaluate the expression in the brackets. Ignore the call if there is no matching opening bracket.\n   */\n  evalRightBracket = ({ dispVal }) => (this.hasNestedExpression() ? this.popNestedExpression().calc(dispVal, '=') : dispVal);\n\n  evalPlusMinus = ({ dispVal, key }) => {\n    const { isEndOfTerm } = this.getPreviousKey();\n\n    const displayValue = isEndOfTerm ? '0' : dispVal;\n\n    // change the sign (Note: we may return '-0' to prepend a minus sign to the digits that may follow.)\n    const resultValue = !(displayValue.replace(/e[+|-]/, '')).match('-')\n      ? `-${displayValue}`\n      : displayValue.replace(/^-/, '');\n\n    // Note: Since we return a string we don't want to use the generic evalOperation method to do this post processing:\n    //       The originalResult there could be a String without doing any harm. But the code in evalOperation does not look \n    //      like a String would be returned. \n    this.setCurrentEvaluationResult(resultValue);\n    this.sendToRender(resultValue);\n    this.sendToRenderHistory(key, undefined, this.getCurrentEvaluationResult());\n\n    return resultValue;\n  }\n\n  evalEquals = ({ dispVal }) => {\n    // Heal inconsistent input: evaluate all nested brackets that are left open when '=' arrives. \n    let resultValue = dispVal;\n    while (this.hasNestedExpression()) {\n      resultValue = this.popNestedExpression().calc(resultValue, '=')\n      // NOTE: This implicitly sets the error flag:\n      this.setCurrentEvaluationResult(resultValue);\n    }\n    // Evaluate the top level formula:\n    resultValue = this.peekNestedExpression().calc(resultValue, '=')\n    this.setCurrentEvaluationResult(resultValue);\n\n    return resultValue;\n  }\n\n  // number input\n\n  evalDigitOrDecimalPoint = ({ dispVal, key }) => {\n    const { shouldResetHistoryIfDigitOnNextKey, isEndOfTerm } = this.getPreviousKey();\n    // resets the current value if it is end-of-term (e.g a completed pair of brackets, a sin operation) \n    // or if there is nothing in the keysBuffer except this key (e.g. keysBuffer was reset by previous key '=')\n\n    const displayValue = (isEndOfTerm || this.getKeysBufferLength() === 1) ? '0' : dispVal;\n\n    if (this.willOverflow(displayValue, key)) {\n      // remove last key inserted in buffer\n      this.popKeyFromKeysBuffer();\n      throw Error(`cannot add key ${key} to number due to value overflow`)\n    }\n\n    if (this.isAlreadyDecimalPoint(displayValue, key)) {\n      // remove last key inserted in buffer\n      this.popKeyFromKeysBuffer();\n      throw Error(`cannot add key ${key} to number since we have a decimal point already`)\n    }\n\n    // resets the history after an immediate function\n    // e.g user does 90 , sin, 23 => 23 will reset the history\n    if (shouldResetHistoryIfDigitOnNextKey) {\n      this.sendToRenderHistory('AC');\n    }\n\n    // Append the key and drop the 0 in the initial -0 once the first real digit appears, e.g. -09 becomes -9:\n    return (displayValue + key).replace(/^(-)*?0(\\d)$/, '$1$2');\n  }\n\n  evalDecimalPoint = ({ dispVal, key }) => {\n    let value;\n    try {\n      value = this.evalDigitOrDecimalPoint({\n        dispVal,\n        key\n      });\n      this.setCurrentEvaluationResult(value);\n      this.sendToRender(value);\n      this.sendToRenderHistory(key, undefined, this.getCurrentEvaluationResult());\n    } catch (err) {\n      value = dispVal;\n    }\n\n    return value;\n  }\n\n  willOverflow = (dispVal, key) => (Math.abs(+(dispVal + key)) > (this.bigger ? 1e15 : 1e9)\n  || dispVal.replace(/^-/, '').length > 15\n  || (dispVal.replace('-', '').replace(/\\./g, '').length > (this.bigger ? 14 : 8)));\n\n  isAlreadyDecimalPoint = (dispVal, key) => dispVal.match(/\\.|e\\+/) && key === '.';\n\n  // memory\n\n  evalMClear = ({ dispVal, operand }) => {\n    delete this.memory[operand];\n    return dispVal;\n  }\n\n  evalMSave = ({ dispVal, operand }) => {\n    this.memory[operand] = dispVal;\n    return dispVal;\n  }\n\n  evalMAdd = ({ dispVal, operand }) => {\n    this.doMemoryOperation(operand, '+', dispVal);\n    return dispVal;\n  }\n\n  evalMMinus = ({ dispVal, operand }) => {\n    this.doMemoryOperation(operand, '-', dispVal);\n    return dispVal;\n  }\n\n  evalMRead = ({ operand }) => {\n    if (this.memory[operand] === undefined) {\n      throw new Error(`No value in memory for key ${operand}`);\n    }\n    const valueFromMemory = this.getMemoryValue(operand);\n    return `${valueFromMemory}`;\n  }\n\n  /** \n   * Use an ExpressionEvaluator to evaluate the given operation with the \n   * value obtained from the memory as first operand and the given operand parameter\n   * as second operand. \n   * Put the result back into the memory.\n   */\n  doMemoryOperation = (location, operation, operand) => {\n    const calculator = new ExpressionEvaluator();\n    calculator.calc(this.getMemoryValue(location), operation);\n    const res = calculator.calc(operand, '=');\n    this.memory[location] = res;\n  }\n\n  getMemoryValue = location => this.memory[location] || 0;\n\n\n  // basic input  \n\n  evalAC = ({ key }) => {\n    this.resetExpressionsStack();\n    // TODO: Should AC clear memory values too?\n    return \"0\"\n  }\n\n  evalC = ({ key }) => \"0\"\n\n  /**\n   *  Delete the last digit or decimal point or the last +/- operation from the number currently built up.\n   *  Drop the corresponding keys from the keys buffer.\n   */ \n  evalBackspace = ({ dispVal }) => {\n    // remove \"back\" key from keysbuffer\n    this.popKeyFromKeysBuffer();\n\n    const { isEndOfTerm } = this.getCurrentKey();\n    if (isEndOfTerm) {\n      throw Error(\"Cannot delete beyond last number's input.\");\n    }\n\n    let currentValue = dispVal;\n    if (this.getCurrentKey().key === '+/–') {\n      // Last operation on number was a sign toggle.\n      // -> Evaluate the sign toggle operation once more in order to invert the sign.\n      this.evalKeyInternal('+/–');\n      this.popKeyFromKeysBuffer();// removes the inverting +/- from keysBuffer\n      this.popKeyFromKeysBuffer();// removes the orginal +/- from keysBuffer\n      currentValue = this.getCurrentEvaluationResult()\n    } else if (dispVal.match(/-\\d$/)) {\n      // The current value is a negative, single digit value.\n      // -> replace the value by '-0' (i.e. retain the negative sign).\n      this.popKeyFromKeysBuffer();\n      currentValue = \"-0\";\n    } else if (dispVal.match(/^\\d$/)) {\n      // The current value is a positive, single digit value.\n      // -> replace that digit by a plain 0.\n      this.popKeyFromKeysBuffer();\n      currentValue = \"0\";\n    } else if (dispVal.length > 0) {\n      // The current value contains more than one digit.\n      // -> Just drop the last digit (or decimal point).\n      this.popKeyFromKeysBuffer();\n      currentValue = currentValue.substring(0, currentValue.length - 1);\n    } else {\n      throw Error(\"Cannot delete beyond last number's input.\");\n    }\n\n    // If after deletion there is decimal point, delete that also.\n    if (this.getCurrentKey().key === '.') {\n      this.popKeyFromKeysBuffer();\n      currentValue = currentValue.substring(0, currentValue.length - 1);\n    }\n\n    return currentValue;\n  }\n\n\n  /**\n   * Process the given input via the expression at the current nesting level.\n   */\n  evalViaExpressionEvaluator = ({ dispVal, key }) => {\n    const { key: lastKey } = this.getPreviousKey()\n    if (lastKey === '(') {\n      switch (key) {\n        case '+':\n        case '–':\n        case '×':\n        case '÷':\n        case 'yx':\n        case 'x√y':\n          dispVal = 0;\n          break;\n        case 'log':\n          dispVal = 1;\n          break;\n        default:\n          // do not change dispVal\n      }\n    }\n    // Delegate evaluation to expression evaluator for current nested expression:\n    return (this.peekNestedExpression().calc(dispVal, key));\n  }\n\n  // --------------------- further helper methods ----------------------------------------\n\n  isKeyAC = key => key === \"AC\";\n\n  isKeyC = key => key === \"C\";\n\n}\n","import Evaluator from './Evaluator';\n\nexport default class KeyboardHelper {\n\n  // TODO: there might be a problem with bindings - if the calculator does not contain ln for example  - user can still press l to get it\n  // (same problem exists in RAP -  but there only numbers and simple operators are bind - so having a calculator without those is improbable to have)\n  // 1. find a way itembuilder calculates what it supports (it is not so trivial) OR\n  // 2. implement keybindings for buttons\n  // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n  static fromKeyStrokeToCalculatorSupportedOperation = (pressedKey) => {\n    // it can be that some operations are not in the keyboards -  (e.g. mr -> is not supported without a memory index)\n    const keyboardShortcutsWithOperations = '+|+|=|=|,|.|-|–|/|÷|*|×|#|+/–|x|x!|E|EE|e|ex| |2nd|r|x√y|R|2√|^|yx|\\'|yx|\"|yx|m|mr|v|mc|b|m+|n|m-|'\n      + 's|sin|c|cos|t|tan|S|sin-1|C|cos-1|T|tan-1|l|ln|L|log|\\\\|1/x|X|2x|'\n      + 'Enter|=|Backspace|back|0|0|1|1|2|2|3|3|4|4|5|5|6|6|7|7|8|8|9|9|0|0';\n\n    // maybe to added by using maybe a alt, ctrl or shift\n    // p|π|d|Degree|°|Degree\n    // keyMatchHold = ('sin|sinh|cos|cosh|tan|tanh|m-|Rand|Deg|Rand|sin-1|sinh-1|cos-1|cosh-1|tan-1|tanh-1|' +\n    // '1|1/x|2|x2|3|x3|x√y|√|ln|log2|ex|2x').split('|');\n\n\n    let calculatorOperation = KeyboardHelper.isSupportedOperation(pressedKey) ? pressedKey : undefined;\n    if (!calculatorOperation) {\n      calculatorOperation = KeyboardHelper.lookupForOperation(pressedKey, keyboardShortcutsWithOperations);\n    }\n    return calculatorOperation;\n  }\n\n  static fromStatemachineToCalculatorSupportedOperation = (operation) => {\n    const statemachineOperations = 'clear|C|clearall|AC|equals|=|add|+|subtract|–|multiply|×|divide|÷|power|operandyx|'\n      + 'npower|yx|root|operandx√y|nroot|x√y|sin|sin|cos|cos|tan|tan|csc|csc|sec|sec|cot|cot|'\n      + 'e|ex|exp|operandex|ln|ln|log|operandlog|invmult|1/x|invpower|log|leftbr|(|rightbr|)|fact|x!|'\n      + 'mclear|mc|mread|mr|msave|ms|madd|m+|msubtract|m-';\n    const calculatorOperation = KeyboardHelper.lookupForOperation(operation, statemachineOperations);\n    return calculatorOperation;\n  }\n\n  static isSupportedOperation = calculatorOperation => Evaluator.getSupportedOperations().includes(calculatorOperation);\n\n  static isDigitKey = key => '0123456789'.indexOf(key) !== -1;\n\n  // private \n\n  static lookupForOperation(key, operationsString) {\n    let calculatorOperation;\n    const operationsArray = operationsString.split('|');\n    for (let n = 0, m = operationsArray.length; n < m; n += 2) {\n      if (key === operationsArray[n]) {\n        calculatorOperation = operationsArray[n + 1];\n        break;\n      }\n    }\n    return KeyboardHelper.isSupportedOperation(calculatorOperation) ? calculatorOperation : undefined;\n  }\n\n}\n","import * as ValueFormatter from \"./ValueFormatter\";\nimport EvaluatorHelper from \"./EvaluatorHelper\";\n\n/**\n * Render a value given as string with dot as decimal separator (and maybe a trailing decimal dot)\n * to the string representation used for display to the user.\n * \n * The transformation takes into account: \n *  - the format (specifying the characters to use as decimal separator and thousands grouping separator)\n *  - whether to include thousands grouping separators\n *  - the display width \n * \n * The renderer compresses the value (by rounding) if it would take too much space in the display. \n * (In fact we support two display width classes only: small/big. And the compressing is a bit weird, see below...)\n */\nexport default class Renderer {\n\n  static msg = {\n    errorMessage: \"Err\",\n    nroot: \"nroot\"\n  };\n\n  /**\n   * Format a value given as string with dot as decimal separator\n   * according to our format and withThousandSeparator members. \n   * \n   * We implicitly translate 'NaN, 'Inf', 'Error' to the string 'Err'.\n   * We implicitly translate very long numbers to an exponential notation that fits into our display width.\n   * We preserve a trainling dot by translating it into a trailing decimal separator character.\n   */\n  static render = (value, displayWidth, withThousandSeparator, format) => {\n    const bigger = EvaluatorHelper.isBigger(displayWidth);\n\n    if (value.match(/NaN|Inf|Error/)) {\n      return Renderer.msg.errorMessage;\n    }\n\n    const trailingDot = value.match(/\\.$/);\n    const valueWithoutTrailingDot = trailingDot ? value.substring(0, value.length - 1) : value;\n\n    if (valueWithoutTrailingDot.length === 0) {\n      return value;\n    }\n\n    const shortenedResult = Renderer.shortenValue(valueWithoutTrailingDot, bigger);\n    const unformattedResult = Renderer.limitFractionalDigits(shortenedResult, bigger);\n    const formattedResult = ValueFormatter.formatValue(unformattedResult, withThousandSeparator, trailingDot, format);\n\n    return formattedResult;\n  }\n\n  // ----------------- private stuff ------------------------------------------------\n\n  static shortenValue = (value, bigger) => {\n    const valAbs = Math.abs(+value);\n    if (!bigger && valAbs >= 1e+10) {\n      return (+value).toExponential(8).toString();\n    }\n    if (valAbs >= 1e+16) {\n      return (+value).toExponential(13).toString();\n    }\n    return value;\n  }\n\n  /**\n   * Returns a string representation of the given numerical value with a limited number of fractional digits.\n   * \n   * If bigger is true, it allows up to 15 fractional digits.\n   * If bigger is false and there is an exponent, it allows 6 fractional digits.\n   * If bigger is false and there is no exponent, it allows 8 fractional digits.\n   * \n   * The method applies proper rounding to reduce the number of fractional digits.\n   * \n   */\n  static limitFractionalDigits(value, bigger) {\n    const valueComponents = Renderer.splitValue(value);\n\n    if (valueComponents.fractionalPart === undefined) {\n      // the easy case: nothing to change:\n      return value;\n    }\n\n    const targetDigitsCount = Renderer.calculateTargetDigitCount(bigger, valueComponents.exponentPart !== undefined);\n    const { digits: reducedFractionalDigits, overflow: roundingOverflow } = Renderer.roundFractionalDigits(valueComponents.fractionalPart, targetDigitsCount);\n\n    const integralPart = +valueComponents.integralPart + (roundingOverflow ? 1 : 0); // transfer overflow from digits rounding\n    const fractionalPart = reducedFractionalDigits !== '' ? `.${reducedFractionalDigits}` : ''; // drop decimal point if no fractional digits are left\n    const exponentPart = valueComponents.exponentPart === undefined ? '' : `e${valueComponents.exponentPart}`; // rebuild the exponent part\n\n    return `${valueComponents.sign}${integralPart}${fractionalPart}${exponentPart}`;\n\n  }\n\n  static splitValue(value) {\n    if (value === undefined || value === null) return {};\n\n    const [beforeDecimalPart, postDecimalPart] = value.split('.');\n    const sign = (beforeDecimalPart[0] === '-') ? '-' : '';\n    const integralPart = beforeDecimalPart.replace(/^-/, '');\n    const [fractionalPart, exponentPart] = postDecimalPart ? postDecimalPart.split('e') : [postDecimalPart, undefined];\n    return {\n      sign,\n      integralPart,\n      fractionalPart,\n      exponentPart\n    };\n  }\n\n  static calculateTargetDigitCount(bigger, withExponent) {\n    if (bigger) return 15;\n    if (withExponent) return 6;\n    return 8;\n  }\n\n\n  /**\n   * Round the given fractional digits to the given number of digits remaining.\n   */\n  static roundFractionalDigits(digits, targetDigitsCount) {\n    if (targetDigitsCount > digits.length) {\n      // digits fit in -> nothing to change\n      return {\n        digits,\n        overflow: false\n      }\n    }\n    const numberForRounding = +(`1.${digits}`);\n    // add one digit for the integral 1:\n    const roundedValue = numberForRounding.toPrecision(targetDigitsCount + 1).toString();\n    const overflowOccured = roundedValue >= 2;\n    return {\n      digits: overflowOccured ? '' : roundedValue.substr(2).padEnd(targetDigitsCount, \"0\"), // skip integral part and pad trailing 0s.\n      overflow: overflowOccured\n    }\n  }\n\n\n}\n","import StateManagerHelper from '../../state/StateManagerHelper';\nimport Renderer from \"./Renderer\";\n\nexport default class HistoryRenderer {\n\n  constructor(displayWidth, withThousandSeparator, format) {\n    this.displayWidth = displayWidth;\n    this.withThousandSeparator = withThousandSeparator;\n    this.format = format;\n\n    this.historyEntries = [];\n  }\n\n  calcSettings = (displayWidth, withThousandSeparator, format) => {\n    this.displayWidth = displayWidth;\n    this.withThousandSeparator = withThousandSeparator;\n    this.format = format;\n  }\n\n  getFullState = () => {\n    const state = {}\n    state.historyEntries = StateManagerHelper.deepCopy(this.historyEntries);\n    state.displayWidth = this.displayWidth;\n    state.withThousandSeparator = this.withThousandSeparator;\n    state.format = StateManagerHelper.deepCopy(this.format);\n    return state;\n  }\n\n  restoreState = (state) => {\n    this.historyEntries = state.historyEntries;\n    this.displayWidth = state.displayWidth;\n    this.withThousandSeparator = state.withThousandSeparator;\n    this.format = state.format;\n  }\n\n  /** \n   * @param key - current key pressed\n   * @param value - the current value calculator is displaying. It is the value used by history when equals is pressed.\n   * @param operand - fixed operand used for functions like exponential, log, square.\n  */\n  render = (key, value, operand) => {\n    this.pushToHistory(key, value, operand);\n    return this.recalculateHistoryString();\n  }\n\n  // private \n\n  pushToHistory = (key, value, operand) => {\n    if (this.isKeyAC(key)) {\n      this.pushToHistoryAC(key, value);\n    } else if (this.isKeyC(key)) {\n      this.pushToHistoryC(key, value);\n    } else if (this.isKeyOneOperatorAfterAnotherOperator(key)) {\n      this.pushToHistoryOneOperatorAfterAnotherOperator(key, value);\n    } else if (this.isKeyBackspace(key, value)) {\n      this.pushToHistoryBackspace();\n    } else if (this.isKeyEquals(key)) {\n      this.pushKeyToHistoryEquals(key, value);\n    } else if (key.match(/2nd|Degree|Radian|m/)) {\n      // ignore it -> do not add anything to history\n    } else if (this.isKeyUsingOperand(operand)) {\n      this.pushToHistoryKey(`operand${operand}`, value);\n      this.pushToHistoryKey(key, value);\n    } else {\n      this.pushToHistoryKey(key, value);\n    }\n  }\n\n  // Do not log operators multiple times in succession / last replaces previous ones\n  pushToHistoryOneOperatorAfterAnotherOperator = (key, value) => {\n    this.historyEntries[this.historyEntries.length - 1] = key;\n  }\n\n  pushToHistoryBackspace = (key, value) => {\n    const len = this.historyEntries.length;\n    const prevKey = (len > 0) ? this.historyEntries[len - 1] : undefined;\n\n    if (prevKey !== undefined && prevKey.match(/^(\\.|\\d|\\(|\\))/)) {\n      this.historyEntries.pop();\n      if (this.historyEntries[this.historyEntries.length - 1] === '.') {\n        this.historyEntries.pop();\n      }\n    }\n  }\n\n  pushKeyToHistoryEquals = (key, value) => {\n    this.historyEntries = [`=${value}`];\n  }\n\n\n  pushToHistoryAC = (key, value) => {\n    // AC drops everything\n    this.historyEntries = [];\n  }\n\n  pushToHistoryC = (key, value) => {\n    // C drops the last number, i.e. all digits, dots and commas in a row\n    // TODO: What about a leading minus sign? We should drop that too but \n    // we cannot decide whether this is a minus sign or a minus operator.\n    let lastPopped = this.historyEntries.pop();\n    while (lastPopped !== undefined && lastPopped.match(/\\d/)) {\n      lastPopped = this.historyEntries.pop();\n    }\n    // put back the first key we should not have popped:\n    if (lastPopped !== undefined) {\n      this.historyEntries.push(lastPopped);\n    }\n  }\n\n  pushToHistoryKey = (key, value) => {\n    this.handleCaseOfEqualsFollowedByAnOperationOrByAnOperand(key);\n    this.historyEntries.push(key);\n  }\n\n  handleCaseOfEqualsFollowedByAnOperationOrByAnOperand = (key) => {\n    const previousKey = this.historyEntries[this.historyEntries.length - 1];\n    // previous key was a number starting with = (it was inserted when = was pressed)\n    if (previousKey !== undefined && previousKey.match(/^=-?\\d/)) {\n      if (Number.isNaN(Number(key))) {\n        // is it a function ?\n        this.historyEntries[this.historyEntries.length - 1] = previousKey.substring(1);\n      } else {\n        // is it an operand ?\n        this.historyEntries = [];\n      }\n    }\n  }\n\n  isKeyC = key => key === 'C';\n\n  isKeyAC = key => key === 'AC';\n\n  isKeyOneOperatorAfterAnotherOperator = (key) => {\n    const len = this.historyEntries.length;\n    const prevKey = (len > 0) ? this.historyEntries[len - 1] : undefined;\n    const isOperatorOneAfterTheOther = prevKey !== undefined && prevKey.match(/^(\\+|–|÷|×|yx|log|x√y|E)+$/) && key.match(/^(\\+|–|÷|×|yx|log|x√y|E)+$/);\n    return isOperatorOneAfterTheOther;\n  }\n\n  isKeyBackspace = key => key === \"back\";\n\n  isKeyEquals = key => key === \"=\";\n\n  isKeyUsingOperand = operand => operand !== undefined;\n\n  recalculateHistoryString = () => {\n    let historyString = \"\";\n    let brackets = 0;\n    let betweenOperatorsStack = [];\n\n    this.historyEntries.forEach((key) => {\n      key = key.replace('÷', '/').replace('-', '–');\n      if (key === '+' || key === '×' || key === '/' || key === '–') {\n        historyString += this.recalculateHistoryForStackBetweenOperators(betweenOperatorsStack);\n        historyString += key;\n        betweenOperatorsStack = [];\n      } else if (key === '(') {\n        brackets += 1;\n        betweenOperatorsStack.push(key);\n      } else if (key === ')') {\n        if (brackets > 0) {\n          brackets -= 1;\n          betweenOperatorsStack.push(key);\n        }\n      } else if (key.startsWith(\"=\")) {\n        // handleCaseOfEqualsFollowedByAnOperationOrByAnOperand + pushKeyToHistoryEquals\n        betweenOperatorsStack.push(key.substring(1));\n      } else {\n        betweenOperatorsStack.push(key);\n      }\n    });\n\n    historyString += this.recalculateHistoryForStackBetweenOperators(betweenOperatorsStack);\n\n    historyString = this.formatAllNumbers(historyString);\n    return historyString;\n  }\n\n  recalculateHistoryForStackBetweenOperators = (stack) => {\n    let ret = \"\";\n    for (let i = 0; i < stack.length; i += 1) {\n      const key = stack[i];\n      if (key === \"ex\") {\n        ret = `e^(${ret})`;\n      } else if (key === \"ln\") {\n        ret = `ln(${ret})`;\n      } else if (key === \"x3\") {\n        ret = `${ret}^3`;\n      } else if (key === \"x2\") {\n        ret = `${ret}^2`;\n      } else if (key === \"yx\") {\n        ret = `${ret}^`;\n      } else if (key === \"x√y\") {\n        ret = `${ret} ${Renderer.msg.nroot} `;\n      } else if (key === \"3√\") {\n        ret = `${ret} ${Renderer.msg.nroot} 3`;\n      } else if (key === \"2√\") {\n        ret = `${ret} ${Renderer.msg.nroot} 2`;\n      } else if (key === \"x!\") {\n        ret = `${ret}!`;\n      } else if (key === \"+/–\") {\n        // switch minus\n        ret = ret.startsWith(\"-\") ? ret.substring(1) : `-${ret}`;\n      } else if (key === \"1/x\") {\n        ret = `1/${ret}`;\n      } else if (key === \"sin\" || key === \"csc\" || key === \"cos\" || key === \"sec\" || key === \"tan\" || key === \"cot\" || key === \"sin–1\" || key === \"cos–1\" || key === \"tan–1\") {\n        ret = `${key}(${ret})`;\n      } else if (key === \"operandlog\") {\n        ret = `${ret}log${this.getOperandValue(stack, i)}`;\n      } else if (key === \"operandyx\") {\n        ret = `${ret}^${this.getOperandValue(stack, i)}`;\n      } else if (key === \"operandx√y\") {\n        ret = `${ret} ${Renderer.msg.nroot} ${this.getOperandValue(stack, i)}`;\n      } else if (key === \"operandex\") {\n        ret = `${this.getOperandValue(stack, i)}^(${ret})`;\n      } else if (key.startsWith(\"operand\")) {\n        // it is the base of a log or the power of an exponent\n        // ignore it as it is needed in operator evaluation\n      } else {\n        ret += key;\n      }\n    }\n    return ret;\n  }\n\n  getOperandValue = (stack, index) => {\n    let operand = index > 0 ? stack[index - 1] : \"\";\n    operand = operand.startsWith(\"operand\") ? operand : \"\";\n    const ret = operand.substring(\"operand\".length);\n    return ret;\n  }\n\n  /**\n   * The regular expression we use to detect numbers in the history string.\n   */\n  numberDetectorRegEx = new RegExp(`([0-9]+\\\\.?[0-9]*)`, \"g\");\n\n  /**\n   * formats all numbers in the history string\n   */\n   formatAllNumbers = historyString => historyString.replace(this.numberDetectorRegEx, (str, value) => Renderer.render(value, this.displayWidth, this.withThousandSeparator, this.format));\n\n\n}\n","\nimport CbaCalculatorHistory from \"./CbaCalculatorHistory\";\nimport CbaCalculatorInput from \"./CbaCalculatorInput\";\nimport RenderingHelper from \"../RenderingHelper\";\nimport StateManagerHelper from '../../state/StateManagerHelper';\nimport KeyboardHelper from \"./KeyboardHelper\";\nimport Renderer from \"./Renderer\";\nimport HistoryRenderer from \"./HistoryRenderer\";\nimport Evaluator from \"./Evaluator\";\nimport * as ValueFormatter from \"./ValueFormatter\";\nimport EvaluatorHelper from \"./EvaluatorHelper\";\n\n/**\n * Using the algorithm from https://github.com/DIPFtba/calculator\n */\nexport default class CbaCalculatorEngine {\n\n  constructor(taskPath, runtime) {\n    this.taskPath = taskPath;\n    this.runtime = runtime;\n\n    this.settings = {\n      angle: EvaluatorHelper.ANGLE_DEGREE,\n      // used only to calculate bigger flag which is used by algorithm toPrecision the result\n      displayWidth: 10,\n      // displays each digit in history or only the whole number when an operator is hit\n      includeOperandInHistory: true,\n      withThousandSeparator: true,\n      // not used - library does its scaling\n      scale: 0,\n      format: ValueFormatter.FORMATS.EN,\n      // don't log error messages in production\n      silentOnErrors: true,\n    };\n\n    this.evaluator = new Evaluator(this.settings.displayWidth, this.settings.angle);\n    this.historyRenderer = new HistoryRenderer(this.settings.displayWidth, this.settings.withThousandSeparator, this.settings.format);\n\n\n    this.displayingValue = '0'; // maybe evalKey 0 should be called\n    this.historyDisplayingValue = undefined;\n  }\n\n  getFullState = () => {\n    const state = {}\n    state.evaluator = StateManagerHelper.deepCopy(this.evaluator.getFullState());\n    state.historyRenderer = StateManagerHelper.deepCopy(this.historyRenderer.getFullState());\n    state.settings = StateManagerHelper.deepCopy(this.settings);\n\n    state.displayingValue = this.displayingValue;\n    state.historyDisplayingValue = this.historyDisplayingValue;\n    return state;\n  }\n\n  restoreState = (state) => {\n    this.evaluator.restoreState(state.evaluator);\n    this.historyRenderer.restoreState(state.historyRenderer);\n    this.settings = state.settings;\n\n    this.displayingValue = state.displayingValue;\n    this.historyDisplayingValue = state.historyDisplayingValue;\n  }\n\n  calcGetMem = memIdx => this.evaluator.getMem(memIdx);\n\n  calcOp = (operation, baseOrExponentOrMemIdx) => {\n    const key = KeyboardHelper.fromStatemachineToCalculatorSupportedOperation(operation);\n    if (key) {\n      this.evalKey(key, baseOrExponentOrMemIdx);\n    }\n  }\n\n  calcOpnd = (operation, digits) => {\n    switch (operation) {\n      case \"add\":\n        digits = `${digits}`;\n        for (let i = 0, iMax = digits.length; i < iMax; i += 1) {\n          this.evalKey(digits.charAt(i));\n        }\n        break;\n      case \"decimal\":\n        this.evalKey(\".\");\n        break;\n      case \"back\":\n        this.evalKey(\"back\");\n        break;\n      case \"invadd\":\n        this.evalKey(\"+/–\");\n        break;\n      default:\n        // ignore operation\n        break;\n    }\n  }\n\n  calcSettings = (calcEngineParams) => {\n    this.settings = Object.assign(this.settings, calcEngineParams);\n    this.historyRenderer.calcSettings(this.settings.displayWidth, this.settings.withThousandSeparator, this.settings.format);\n    this.evaluator.setConfiguration(this.settings.displayWidth, this.settings.angle, this.settings.silentOnErrors);\n  }\n\n  // the key pressed events (and paste events) are not going through the statemachine (RAP is doing the same thing) \n  keypress = (pressedKey) => {\n    const key = KeyboardHelper.fromKeyStrokeToCalculatorSupportedOperation(pressedKey);\n    if (key) {\n      this.evalKey(key);\n    }\n  }\n\n  paste = (text) => {\n    const renderCommands = this.evaluator.paste(text);\n    this.triggerRendering(renderCommands);\n  }\n\n  evalKey = (key, operand) => {\n    const renderCommands = this.evaluator.evalKey(key, operand);\n    this.triggerRendering(renderCommands);\n  }\n\n  triggerRendering = (renderCommands) => {\n    renderCommands.render.forEach(command => this.render(command));\n    renderCommands.history.forEach(command => this.renderHistory(command));\n  }\n\n  render = (value) => {\n    this.displayingValue = value === undefined ? undefined : Renderer.render(value, this.settings.displayWidth, this.settings.withThousandSeparator, this.settings.format);\n    const inputs = this.runtime.componentDirectory.findByComponentType(CbaCalculatorInput);\n    inputs.forEach((input) => {\n      CbaCalculatorInput.setDisplayValueInState(input, this.displayingValue);\n      RenderingHelper.triggerRendering(input);\n    });\n  }\n\n  renderHistory = ({ key, value, operand }) => {\n    this.historyDisplayingValue = this.historyRenderer.render(key, value, operand);\n    // trigger rendering when includeOperandInHistory should display the operand when typing\n    if (!KeyboardHelper.isDigitKey(key) || (KeyboardHelper.isDigitKey(key) && this.settings.includeOperandInHistory)) {\n      this.triggerHistoryRendering(this.historyDisplayingValue);\n    }\n  }\n\n  /**\n   * rerenders only calculator history components\n   */\n  triggerHistoryRendering = (value) => {\n    const histories = this.runtime.componentDirectory.findByComponentType(CbaCalculatorHistory);\n    histories.forEach((history) => {\n      CbaCalculatorHistory.setDisplayValueInState(history, value);\n      RenderingHelper.triggerRendering(history);\n    });\n  }\n\n  getTaskPath = () => this.taskPath;\n\n\n}\n","import CbaCalculatorEngine from '../components/calculator/CbaCalculatorEngine';\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\n\r\n/**\r\n * Manager for all calculators.\r\n * \r\n * We keep one calculator per task. \r\n * We need to be informed about the currently running task to switch our 'currently active' \r\n * calculator accordingly.\r\n */\r\nexport default class CalculatorsManager {\r\n\r\n  constructor() {\r\n    this.calculatorsStateList = {};\r\n    this.currentCalculator = undefined;\r\n    this.runtime = undefined;\r\n  }\r\n\r\n  /**\r\n   * Inform the manager about a task switch. \r\n   * \r\n   * @param taskPath The path of the new task to switch to.\r\n   * @param runtime The common runtime context structure. \r\n   */\r\n  setOrInitializeCurrentCalculator = (taskPath, runtime) => {\r\n    this.currentCalculator = new CbaCalculatorEngine(taskPath, runtime);\r\n    this.runtime = runtime;\r\n    this.restoreState(this.calculatorsStateList[taskPath]);\r\n  }\r\n\r\n  /** \r\n  * @returns string to be displayed by calculator history components\r\n  */\r\n  getHistoryDisplayingValue = () => this.safeCall(() => this.currentCalculator.historyDisplayingValue);\r\n\r\n  /**\r\n   * @returns string value to be display by the calculator input\r\n   */\r\n  getDisplayingValue = () => this.safeCall(() => this.currentCalculator.displayingValue);\r\n\r\n  /**\r\n   * @param memIdx - memory index from where to fetch data\r\n   */\r\n  calcGetMem = memIdx => this.safeCall(() => this.currentCalculator.calcGetMem(memIdx));\r\n\r\n  /**\r\n   * Calls an operation on the calculator engine.\r\n   * @param operation - what operation to call (e.g. clear, sin, multiply etc.)\r\n   * @param  baseOrExponentOrMemIdx - some operation need a second parameter (e.g. msave needs a memory index, log needs the base)\r\n   * \r\n   * @see CBA-TutorialReference.docx for more information.\r\n   */\r\n  calcOp = (operation, baseOrExponentOrMemIdx) => this.safeCall(() => this.currentCalculator.calcOp(operation, baseOrExponentOrMemIdx))\r\n\r\n  /**\r\n   * Modifies the current operand of the calculator engine.\r\n   * @param operation - what operation to be performed on current operand (e.g. 'add' – append Digits to the current operand)\r\n   * @param  digits - what digits to append (may be optional e.g. invadd operation just reverts the sign)\r\n   * \r\n   * @see CBA-TutorialReference.docx for more information.\r\n   */\r\n  calcOpnd = (operation, digits) => this.safeCall(() => this.currentCalculator.calcOpnd(operation, digits))\r\n\r\n  /**\r\n   * Initializes the CalculationEngine and sets parameters.  \r\n   * \r\n   * @see CBA-TutorialReference.docx for more information.\r\n   */\r\n  calcSettings = calcEngineParams => this.safeCall(() => this.currentCalculator.calcSettings(calcEngineParams))\r\n\r\n  /** \r\n   * @param pressedKey - KeyboardEvent.key representation as described here https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n  */\r\n  keypress = pressedKey => this.safeCall(() => this.currentCalculator.keypress(pressedKey))\r\n\r\n  /**\r\n   * @param text - text representation of clipboard data\r\n   */\r\n  paste = text => this.safeCall(() => this.currentCalculator.paste(text));\r\n\r\n  getStateForTask = taskPath => this.calculatorsStateList[taskPath]\r\n\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.calculatorsStateList);\r\n\r\n  /**\r\n   * Drop all state.\r\n   */\r\n  clearTasksState = () => {\r\n    this.calculatorsStateList = {};\r\n    this.currentCalculator = undefined;\r\n  };\r\n\r\n  /**\r\n   * Preload the tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.calculatorsStateList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change for a calculator triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, state) => {\r\n    this.calculatorsStateList[taskPath] = state;\r\n    if (this.currentCalculator !== undefined && this.currentCalculator.getTaskPath() === taskPath) {\r\n      this.currentCalculator.restoreState(state);\r\n    }\r\n  }\r\n\r\n  // private \r\n\r\n  safeCall = (func) => {\r\n    if (this.currentCalculator !== undefined) {\r\n      const value = func();\r\n      this.saveState();\r\n      return value;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n\r\n  saveState = () => {\r\n    // cannot use ComponentStateManager\r\n    if (this.currentCalculator !== undefined) {\r\n      const calculatorTaskPath = this.currentCalculator.taskPath;\r\n      const newCalculatorState = this.currentCalculator.getFullState();\r\n      this.calculatorsStateList[calculatorTaskPath] = newCalculatorState;\r\n      TraceLogHelper.dumpStateChangeToTrace(\r\n        'CalculatorState',\r\n        {\r\n          taskPath: calculatorTaskPath,\r\n          state: newCalculatorState\r\n        },\r\n        this.runtime.traceLogBuffer\r\n      );\r\n    }\r\n  }\r\n\r\n  restoreState = (state) => {\r\n    if (this.currentCalculator !== undefined) {\r\n      if (state !== undefined) {\r\n        this.currentCalculator.restoreState(state);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * Utility class meant to store actions that need to be applied over components that were not rendered yet.\r\n * We store the wanted actions in map where the component indexPath is the key \r\n * and the list of actions to be applied once the component was render is the value.  \r\n */\r\nexport default class ActionRegister {\r\n\r\n  constructor() {\r\n    this.actionsMap = new Map();\r\n  }\r\n\r\n  registerAction = (indexPath, action) => {\r\n    let actions = [];\r\n    if (this.actionsMap.has(indexPath)) {\r\n      actions = this.actionsMap.get(indexPath);\r\n    }\r\n\r\n    actions.push(action);\r\n    this.actionsMap.set(indexPath, actions);\r\n  }\r\n\r\n  hasActionsRegisteredForPath = indexPath => this.actionsMap.has(indexPath) && this.actionsMap.get(indexPath).length !== 0;\r\n\r\n  getRegisteredActionsForPath = indexPath => this.actionsMap.get(indexPath);\r\n\r\n  clearRegisteredActionsForPath = indexPath => this.actionsMap.delete(indexPath);\r\n\r\n}\r\n","/**\r\n * Utility class meant to store focus registration per page.\r\n * We store the focus in a map where the page indexPath is the key \r\n * and the value is a boolean.  \r\n */\r\nexport default class ActionRegister {\r\n\r\n  constructor() {\r\n    this.focusMap = new Map();\r\n  }\r\n\r\n  registerFocus = (indexPath) => {\r\n    this.focusMap.set(indexPath, true);\r\n  }\r\n\r\n  hasActionsRegisteredForPath = indexPath => this.focusMap.has(indexPath) && this.focusMap.get(indexPath);\r\n\r\n}\r\n","import React from 'react'\r\nimport { useDragLayer } from 'react-dnd'\r\nimport PropTypes from 'prop-types';\r\nimport { DndItemTypes } from './DragAndDropHelper'\r\nimport Utils from '../utils/Utils';\r\n\r\n/**\r\n * A component to use as custom made drag layer for the drag&drop library.\r\n * \r\n * We use this for the touch screen scenario since the touch backend of the dnd library\r\n * does not show feedback during the drag operation out of the box (as the HTML5 backend does).\r\n */\r\n\r\nconst layerStyles = {\r\n  position: 'fixed',\r\n  pointerEvents: 'none',\r\n  zIndex: 100,\r\n  left: 0,\r\n  top: 0,\r\n  width: '100%',\r\n  height: '100%',\r\n}\r\n\r\nfunction getItemStyles(initialOffset, currentOffset) {\r\n  if (!initialOffset || !currentOffset) {\r\n    return {\r\n      display: 'none',\r\n    }\r\n  }\r\n  const { x, y } = currentOffset\r\n  const transform = `translate(${x}px, ${y}px)`\r\n  return {\r\n    transform,\r\n    WebkitTransform: transform,\r\n  }\r\n}\r\n\r\nconst CustomDragLayer = (props) => {\r\n  const { runtime } = props;\r\n  const {\r\n    itemType,\r\n    isDragging,\r\n    item,\r\n    initialOffset,\r\n    currentOffset,\r\n  } = useDragLayer(monitor => ({\r\n    item: monitor.getItem(),\r\n    itemType: monitor.getItemType(),\r\n    initialOffset: monitor.getInitialSourceClientOffset(),\r\n    currentOffset: monitor.getSourceClientOffset(),\r\n    isDragging: monitor.isDragging(),\r\n  }))\r\n  function renderItem() {\r\n    switch (itemType) {\r\n      case DndItemTypes.VALUE_DISPLAY:\r\n      {\r\n        // The drag source (a SimpleTextField in the value display case) \r\n        // fills the 'previewData' field in the item structure\r\n        // so that we can show a similar textarea as the SimpleTextField does\r\n        // during the drag operation.\r\n        // The left/top coordinates should be zero since the div used\r\n        // for all drag&drop item types follows the \r\n        // mouse pointer via the 'translate' technique already.\r\n        const scaleValue = runtime.app ? runtime.app.state.scaleValue : 1;\r\n        const clippedStyle = Utils.safeDeepCopy(item.previewData.style);\r\n        const augmentedWidth = parseFloat(item.previewData.style.width) * scaleValue;\r\n        const augmentedHeight = parseFloat(item.previewData.style.height) * scaleValue;\r\n        const augmentedFontSize = parseFloat(item.previewData.style.fontSize) * scaleValue;\r\n        const augmentedStyle = Object.assign(clippedStyle, {\r\n          width: augmentedWidth,\r\n          height: augmentedHeight,\r\n          fontSize: augmentedFontSize,\r\n          left: 0,\r\n          top: 0\r\n        })\r\n        return (\r\n          <textarea\r\n            readOnly\r\n            title={item.previewData.title}\r\n            style={augmentedStyle}\r\n            value={item.previewData.value}\r\n            className=\"hide-selection\"\r\n          />\r\n        )\r\n      }\r\n      default:\r\n        // We drag some item type that is not supported by the drag layer yet.\r\n        // (Should never happen.)\r\n        return <div>Dragging...</div>\r\n    }\r\n  }\r\n  if (!isDragging) {\r\n    return null\r\n  }\r\n  return (\r\n    <div style={layerStyles}>\r\n      <div\r\n        style={getItemStyles(initialOffset, currentOffset)}\r\n      >\r\n        {renderItem()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCustomDragLayer.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default CustomDragLayer\r\n","import axios from 'axios';\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\n\r\nexport default class RecordingBuffer {\r\n\r\n  constructor() {\r\n    this.recordingList = [];\r\n    this.newEntryListener = undefined;\r\n  }\r\n\r\n  // public API for components ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Report recording.\r\n   * \r\n   * The method expects these parameters:\r\n   * - userDefId: A String representing the userDefinedId of the media component.\r\n   * - timestamp: A Date representing the timestamp for the recording ending.\r\n   * - recordingNumber: A Number representing the number of the created recording.\r\n   * - blobUrl: The recording blob URL.\r\n   * \r\n   * The method will retrieve the blob content as base64 data and store it internally.\r\n   * \r\n   */\r\n  reportRecording = (userDefId, timestamp, recordingNumber, blobUrl, taskInfo, userDefinedIDPath) => new Promise((resolve, reject) => {\r\n    axios.get(blobUrl, {\r\n      responseType: 'blob'\r\n    }).then((response) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(response.data);\r\n      reader.onloadend = () => {\r\n        const data = reader.result;\r\n        const { test, item, task } = taskInfo;\r\n        const recordingInfo = {\r\n          sourceComponent: userDefId,\r\n          userDefinedIDPath,\r\n          nbOfRecordingOnComponentInstance: recordingNumber,\r\n          recordingStartTime: timestamp,\r\n          test,\r\n          item,\r\n          task\r\n        }\r\n        const newEntry = {\r\n          recordingInfo,\r\n          data\r\n        }\r\n        this.recordingList.push(newEntry);\r\n        if (this.newEntryListener !== undefined) {\r\n          this.newEntryListener();\r\n        }\r\n        resolve();\r\n      }\r\n    })\r\n  })\r\n\r\n\r\n  // public API for recording consumers --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the next bunch of recording entries for delivery to the server and drop them from our queue.\r\n   * \r\n   * Note: This method must be called from the GUI thread to avoid multithreading issues!\r\n   * \r\n   * The method returns a list of recording entry objects. I returns an empty list of no recording entries are pending.\r\n   */\r\n  popEntries = () => {\r\n    const deliveredEntries = this.recordingList;\r\n    this.recordingList = [];\r\n    return deliveredEntries;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the list of current recording entries (without dropping them).\r\n   * \r\n   * The method returns a list of recording entry objects. It returns an empty list of no recording entries are pending.\r\n   */\r\n  peekEntries = () => StateManagerHelper.deepCopy(this.recordingList);\r\n\r\n  /**\r\n   * Set a function to call each time we receive a new entry.\r\n   * \r\n   * We support a single entry listener only. The entry listener is called after the new recording entry is put into our buffer.\r\n   * \r\n   * @param callback The function to call each time a new entry is put into our buffer.\r\n   */\r\n  setNewEntryListener = (callback) => {\r\n    this.newEntryListener = callback;\r\n  }\r\n\r\n}\r\n","import Utils from '../utils/Utils';\r\nimport UserDataUploader from './UserDataUploader';\r\n\r\n/**\r\n * Manage the transfer of the media stream recordings to the server. \r\n * \r\n * We support transmission of recording entries \r\n *  - via HTTP PUT calls or\r\n *  - window.postMessage events sent to the given target domain origin or\r\n *  - writing the trace logs to the console.\r\n */\r\nexport default class RecordingUploader extends UserDataUploader {\r\n\r\n  constructor(recordingBuffer) {\r\n    super(recordingBuffer, RecordingUploader.buildRecordingPostContent, \"recording\");\r\n    this.transmitInterval = undefined;\r\n    this.startAutomaticTransmissions();\r\n  }\r\n\r\n  // ------- public API -----------------------------------------------------------------------------\r\n\r\n  // See the base class UserDataUploader for our public API.\r\n\r\n  // ------- private stuff --------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build the content of a recording transmission to the server. \r\n   * \r\n   * This consists of a meta data structure and the list of recording entries to transmit.\r\n   * We take the list of recording entries from our internal recording entries list but\r\n   * we do not drop the entries from this list yet.\r\n   * \r\n   * @param {String} sendTimestamp The time of send operation.\r\n   * @param {*} runtime \r\n   */\r\n   static buildRecordingPostContent = (sendTimestamp, sessionContext, recordingEntriesList) => {\r\n     const { sessionId, username, loginTimestamp } = sessionContext;\r\n     if (sessionId === undefined) {\r\n       console.warn(\"Sending recording with dummy session id!\");\r\n     }\r\n     const metaData = {\r\n       userId: username,\r\n       sessionId: sessionId === undefined ? 'dummySessionId' : sessionId,\r\n       loginTimestamp,\r\n       sendTimestamp,\r\n       cbaVers: Utils.getCbaVersion()\r\n     };\r\n\r\n     const recordingPostContent = {\r\n       metaData,\r\n       recordingEntriesList\r\n     };\r\n\r\n     return recordingPostContent;\r\n   }\r\n\r\n}\r\n","\r\nexport default class LibraryManager {\r\n\r\n  constructor() {\r\n    this.librariesUsedMap = {}\r\n  }\r\n\r\n  // ----- public API --------------------------------------------------------------------------\r\n\r\n  addLibrariesForItem(itemLibraries, libraryPathsMap) {\r\n    if (!itemLibraries || (itemLibraries && !itemLibraries.length > 0)) return;\r\n    if (!libraryPathsMap || (libraryPathsMap && !Object.keys(libraryPathsMap).length > 0)) return;\r\n    if (!LibraryManager.checkLibraryPaths(itemLibraries, libraryPathsMap)) return;\r\n\r\n    itemLibraries.forEach((library) => {\r\n      switch (library.name) {\r\n        case \"MathJax\": this.addMathJax(libraryPathsMap[library.name]); break;\r\n        default: console.error(\"Unexpected library provied\", library.name); break;\r\n      }\r\n    })\r\n\r\n\r\n  }\r\n\r\n  // ----- private stuff -----------------------------------------------------------------------\r\n\r\n  static checkLibraryPaths(itemLibraries, libraryPathsMap) {\r\n    const checker = itemLibraries.map(library => !!libraryPathsMap[library.name]);\r\n\r\n    return checker.every(c => c === true);\r\n  }\r\n\r\n  addMathJax(libraryPath) {\r\n    // check if MathJax is already in use\r\n    if (this.librariesUsedMap.MathJax) {\r\n      return;\r\n    }\r\n\r\n    this.librariesUsedMap.MathJax = libraryPath;\r\n\r\n    const scriptTag = document.createElement('script');\r\n    scriptTag.setAttribute('src', libraryPath);\r\n    scriptTag.setAttribute('async', true);\r\n    scriptTag.setAttribute('id', \"MathJax-script\")\r\n\r\n    document.head.appendChild(scriptTag);\r\n\r\n  }\r\n\r\n}\r\n","import RenderingHelper from \"../components/RenderingHelper\";\r\nimport Utils from \"../utils/Utils\";\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\nexport default class VariableManager {\r\n\r\n  constructor() {\r\n    this.variableMap = {};\r\n    this.variableObservers = [];\r\n    this.tracing = false;\r\n  }\r\n\r\n  /**\r\n   * Initialize all variables when starting a task\r\n   * \r\n   * @param {String} taskPath the task path for which to init variables\r\n   * @param {*} variablesConfig the configuration object\r\n   * @param {*} runtime runtime object\r\n   */\r\n  initializeVariablesForTask(taskPath, variablesConfig, withTrace, runtime) {\r\n    // do not initialize for existing taskPath or no variable config\r\n    if (variablesConfig && !this.variableMap[taskPath]) {\r\n      variablesConfig.forEach((variableConfig) => {\r\n        const { name, value, type } = variableConfig;\r\n        this.setVariable(taskPath, name, value, type, runtime)\r\n      });\r\n    }\r\n    this.tracing = withTrace;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Get the variable value from a specific task\r\n   * Flag could be provided to get all data (type, name, value)\r\n   * \r\n   * @param {String} taskPath the task path where the variable is located\r\n   * @param {String} variableName the variable name \r\n   * @param {Boolean} getFullData flag to specify whether to provide the full object or not\r\n   * @returns {Object | String | Number | Boolean} Variable object or value\r\n   */\r\n  getVariable(taskPath, variableName, getFullData) {\r\n\r\n    const taskEntry = this.variableMap[taskPath];\r\n    if (taskEntry === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const variableEntry = taskEntry[variableName];\r\n    if (variableEntry === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    return getFullData ? variableEntry : variableEntry.value;\r\n  }\r\n\r\n  /**\r\n   * Set the variable value from a specific task\r\n   * \r\n   * - check whether var exists already\r\n   * - if variable exists:\r\n   *   + type of value is compatible with type of variable\r\n   *   + if type is given it must match the existing type\r\n   * - if variable does not exist:\r\n   *   + type must be specified\r\n   *   + type of value is compatible with type of variable\r\n   * \r\n   * @param {String} taskPath the task path where the variable is located\r\n   * @param {String} name the variable name \r\n   * @param {*} value value to set\r\n   * @param {String} type variable type \r\n   * @param {*} runtime runtime object\r\n   */\r\n  setVariable(taskPath, name, value, type, runtime) {\r\n    if (!this.variableMap[taskPath]) {\r\n      this.variableMap[taskPath] = {};\r\n    }\r\n\r\n    const oldVariable = this.variableMap[taskPath][name];\r\n\r\n    if (oldVariable) {\r\n\r\n      if (!Utils.checkType(value, oldVariable.type)) {\r\n        console.error(`Provided variable value is of the wrong type. Expected ${oldVariable.type}`);\r\n        this.traceVariableChangeAttempt(name, oldVariable.type, type, oldVariable.value, value, 'valueWrongType', runtime);\r\n        return;\r\n      }\r\n\r\n      if (type && type !== oldVariable.type) {\r\n        console.error(`Provided type is wrong. Expected ${oldVariable.type}`);\r\n        this.traceVariableChangeAttempt(name, oldVariable.type, type, oldVariable.value, value, 'givenTypeNoMatch', runtime);\r\n        return;\r\n      }\r\n\r\n      // all checks passed, set variable value\r\n      const oldValue = oldVariable.value;\r\n      this.variableMap[taskPath][name].value = value;\r\n      this.traceVariableChangeAttempt(name, oldVariable.type, type, oldValue, value, 'ok', runtime);\r\n\r\n    } else {\r\n\r\n      if (!type) {\r\n        console.error('Provided variable must have a type');\r\n        this.traceVariableChangeAttempt(name, undefined, undefined, undefined, value, 'typeMissing', runtime);\r\n        return;\r\n      }\r\n\r\n      if (!Utils.checkType(value, type)) {\r\n        console.error(`Provided variable value has inconsistent type. Expected ${type}`);\r\n        this.traceVariableChangeAttempt(name, undefined, type, undefined, value, 'typeInconsistent', runtime);\r\n        return;\r\n      }\r\n\r\n      // all checks passed, set variable value\r\n      const newValue = {\r\n        name,\r\n        value,\r\n        type\r\n      }\r\n      this.variableMap[taskPath][name] = newValue;\r\n    }\r\n\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'VariableManagerState',\r\n      {\r\n        taskPath,\r\n        name,\r\n        value: this.variableMap[taskPath][name]\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n\r\n    this.variableObservers\r\n      .filter(entry => entry.variableName === name)\r\n      .forEach((entry) => {\r\n        RenderingHelper.triggerRenderingViaPath(entry.indexPath, runtime);\r\n      })\r\n  }\r\n\r\n  traceVariableChangeAttempt(variableName, variableType, newValueType, oldValue, newValue, operationStatus, runtime) {\r\n    if (this.tracing) {\r\n      runtime.traceLogBuffer.reportEvent(\r\n        'SetVariableValue',\r\n        new Date(),\r\n        {\r\n          variableName,\r\n          variableType,\r\n          newValueType,\r\n          oldValue: `${oldValue}`,\r\n          newValue: `${newValue}`,\r\n          operationStatus\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} taskPath the task path where the variables are located\r\n   * @returns {Object} a copy of the variableMap for that task VariableValuesMap\r\n   */\r\n  getVariableValuesMapForTask(taskPath, getFullData) {\r\n    const variableMap = this.variableMap[taskPath];\r\n    const variableValuesMap = {};\r\n\r\n    if (variableMap) {\r\n      Object.keys(variableMap).forEach((name) => {\r\n        variableValuesMap[name] = getFullData ? variableMap[name] : variableMap[name].value;\r\n      })\r\n    }\r\n\r\n    return Utils.safeDeepCopy(variableValuesMap);\r\n  }\r\n\r\n  /**\r\n  * Build an array of variable/value pairs describing variables for a task\r\n  * @param {String} taskPath the task path where the variable is located\r\n  */\r\n  buildVariablesInfoArrayForTask = (taskPath) => {\r\n    const variableMap = this.variableMap[taskPath];\r\n    const variablesArray = [];\r\n\r\n    if (variableMap) {\r\n      Object.keys(variableMap).forEach((variable) => {\r\n        variablesArray.push(variableMap[variable]);\r\n      });\r\n    }\r\n\r\n    return variablesArray;\r\n  }\r\n\r\n  /**\r\n   * Add a display component instance as observer on variable changes. \r\n   * \r\n   * The variable manager will trigger a rerendering on the component \r\n   * each time the given variable changes its value.\r\n   * \r\n   * @param {String} indexPath The index path of the observing component.\r\n   * @param {String} variableName The name of the variable to be observed.\r\n   */\r\n  addVariableChangeObserver = (indexPath, variableName) => {\r\n    if (this.variableObservers.find(entry => entry.indexPath === indexPath && entry.variableName === variableName) === undefined) {\r\n      this.variableObservers.push({\r\n        indexPath,\r\n        variableName\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop a display component instance from the list of observers. \r\n   * \r\n   * @param {String} indexPath The index path of the observing component.\r\n   * @param {String} variableName The name of the variable to be observed.\r\n   */\r\n  dropVariableChangeObserver = (indexPath, variableName) => {\r\n    const entryIndex = this.variableObservers.findIndex(entry => entry.indexPath === indexPath && entry.variableName === variableName);\r\n    if (entryIndex !== undefined) {\r\n      this.variableObservers.splice(entryIndex, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop all change observers from a path\r\n   * \r\n   * @param {String} indexPath The index path of the observing component.\r\n   */\r\n  dropChangeObserverForPath = (indexPath) => {\r\n    const entryList = this.variableObservers.filter(entry => entry.indexPath === indexPath);\r\n    if (entryList !== undefined && entryList.length > 0) {\r\n      entryList.forEach((entry) => {\r\n        this.dropVariableChangeObserver(indexPath, entry.variableName);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggers rerendering for all change observers\r\n   * \r\n   * @param {*} runtime our runtime object\r\n   */\r\n  triggerRerenderForAllChangeObservers = (runtime) => {\r\n    this.variableObservers\r\n      .forEach((entry) => {\r\n        RenderingHelper.triggerRenderingViaPath(entry.indexPath, runtime);\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Remove all change observers\r\n   */\r\n  clearAllChangeObservers = () => {\r\n    this.variableObservers = [];\r\n  }\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n   getAllTasksState = () => StateManagerHelper.deepCopy(this.variableMap);\r\n\r\n   /**\r\n    * Drop all tasks.\r\n    */\r\n   clearTasksState = () => {\r\n     this.variableMap = {};\r\n     this.clearAllChangeObservers();\r\n   };\r\n\r\n   /**\r\n    * Preload the tasks state returned by a call to getAllTasksState.\r\n    */\r\n   preloadTasksState = (allTasksState) => {\r\n     this.variableMap = StateManagerHelper.deepCopy(allTasksState);\r\n   }\r\n\r\n  /**\r\n   * Inject a change for a variable value triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, name, value) => {\r\n    if (!this.variableMap[taskPath]) {\r\n      this.variableMap[taskPath] = {}\r\n    }\r\n    this.variableMap[taskPath][name] = value;\r\n  }\r\n\r\n\r\n}\r\n","import MenuItemTree from '../components/MenuItemTree';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport Utils from '../utils/Utils';\r\n\r\n/**\r\n * Helper to run a story of trace log events as replay.\r\n */\r\nexport default class ReplayRunner {\r\n\r\n  // ---------- public API ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build a replay runner. \r\n   */\r\n  constructor() {\r\n    this.nowProvider = () => Date.now();\r\n    this.delayProcessor = (delayMillis, action) => {\r\n      console.info(`Replay step with delay: ${delayMillis}`);\r\n      setTimeout(action, delayMillis);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a non-standard \"now\" timestamp provider.\r\n   * \r\n   * Test code might wish control the value used for \"now\".\r\n   * Production code should not use this method but rely on the default standard implementation\r\n   * that we provide implicitly. \r\n   */\r\n  setNowProvider = (nowProvider) => {\r\n    this.nowProvider = nowProvider;\r\n  }\r\n\r\n  /**\r\n   * Set a non-standard delay processor.\r\n   * \r\n   * Test code might wish to shortcut delays and collect delay intervals explicitly instead.\r\n   * Production code should not use this method but rely on the default standard implementation\r\n   * that we provide implicitly. \r\n   */\r\n  setDelayProcessor = (processor) => {\r\n    this.delayProcessor = processor;\r\n  }\r\n\r\n\r\n  /**\r\n   * Run a replay of the given replay steps.\r\n   */\r\n  replay = (story, finishedAction, settings, headerButtons, courseForNavigator, testsForNavigator, runtime) => {\r\n\r\n    this.replayFromTaskStartingPoint(\r\n      story,\r\n      0,\r\n      {\r\n        settings, headerButtons, courseForNavigator, testsForNavigator\r\n      },\r\n      finishedAction,\r\n      runtime\r\n    );\r\n  }\r\n\r\n\r\n  // ---------- private stuff ---------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Run a replay of the given replay steps starting with the step at the given from index.\r\n   */\r\n  replayFromTaskStartingPoint = (story, fromIndex, appSettings, finishedAction, runtime) => {\r\n    // Get the initializing sequence for the next task:\r\n    const initializingTriple = ReplayRunner.grabInitializingTriple(story, fromIndex);\r\n    if (initializingTriple === undefined) {\r\n      console.info(`Could not find task start for replay -> replay command aborted.`);\r\n      return;\r\n    }\r\n\r\n    const { taskSwitchEntry, fullStateEntry, tasksViewVisibleEntry, stateChangeEntries, nextIndex } = initializingTriple;\r\n\r\n    const { taskManager, app } = runtime;\r\n\r\n    // Initialize the state before showing the initial task:\r\n    taskManager.preloadTasksState(fullStateEntry.details);\r\n    stateChangeEntries.forEach((step) => {\r\n      const { stateType, stateDelta } = step.details;\r\n      ReplayRunner.processStateChangeStep(stateType, stateDelta, runtime);\r\n    })\r\n\r\n    // Show the initial task:\r\n    const { newTest, newItem, newTask } = taskSwitchEntry.details;\r\n    // The execution environment might want to use different global settings than the original assessment.\r\n    // --> Ignore settings specified in TasksViewVisible entry and use current settings in TaskPlayer instead.\r\n    const { settings, headerButtons, courseForNavigator, testsForNavigator } = appSettings;\r\n    app.showReplay(newTest, newItem, newTask, settings, headerButtons, courseForNavigator, testsForNavigator);\r\n\r\n    // Replay the remaining steps:\r\n    const initialReplayTick = tasksViewVisibleEntry.details.replayTick === undefined ? 0 : tasksViewVisibleEntry.details.replayTick;\r\n    const initialTimestamp = this.nowProvider();\r\n\r\n    this.continueStoryExecution(\r\n      story,\r\n      nextIndex,\r\n      initialReplayTick,\r\n      initialTimestamp,\r\n      nextStepIndex => this.executeNextReplayStep(story, nextStepIndex, appSettings, finishedAction, runtime),\r\n      finishedAction\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * Continue to replay the given story of replay step entries. \r\n   * \r\n   * We run further steps in the story starting from the nextStepIndex. \r\n   *\r\n   * As long as \r\n   *  - the steps don't contain a replayTick value or \r\n   *  - their replayTick time is almost reached already\r\n   * we execute steps at once, i.e. we call the stepAction for them.\r\n   * \r\n   * At the first step that requires postponement due to its replayTick value,\r\n   * we schedule another call to ourself with an updated nextStepIndex.\r\n   * \r\n   * If we reach the end of the story we trigger the doneAction.\r\n   * \r\n   * @param {*} story The complete story of replay steps.\r\n   * @param {*} nextStepIndex The index of the next replay step to be executed.\r\n   * @param {*} initialReplayTick The replayTick of the initial TasksViewVisible step.\r\n   * @param {*} initialTimestamp The time when the replay of the complete story started.\r\n   * @param {*} appSettings The settings to use for starting the App for a task.\r\n   * @param {*} stepAction The action to perform on each replay step. This should return true if it takes over processing of all remaining steps, false otherwise.\r\n   * @param {*} doneAction The action to perform when the story ends.\r\n   */\r\n  continueStoryExecution = (story, nextStepIndex, initialReplayTick, initialTimestamp, stepAction, doneAction) => {\r\n    let currentStepIndex = nextStepIndex;\r\n    let currentStep = story[currentStepIndex];\r\n    let delayMillis = ReplayRunner.calculateDelayMillisByNow(initialReplayTick, initialTimestamp, currentStep, this.nowProvider);\r\n    while (currentStep !== undefined && delayMillis < 100) {\r\n      if (stepAction(currentStepIndex)) {\r\n        return;\r\n      }\r\n      currentStepIndex += 1;\r\n      currentStep = story[currentStepIndex]\r\n      delayMillis = ReplayRunner.calculateDelayMillisByNow(initialReplayTick, initialTimestamp, currentStep, this.nowProvider);\r\n    }\r\n\r\n    if (currentStep !== undefined) {\r\n      this.delayProcessor(delayMillis, () => {\r\n        this.continueStoryExecution(story, currentStepIndex, initialReplayTick, initialTimestamp, stepAction, doneAction);\r\n      })\r\n    } else {\r\n      doneAction();\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Execute the given replay step immediately.\r\n   * \r\n   * If it takes over all remaining steps the method returns true, otherwise false.\r\n   */\r\n  executeNextReplayStep(story, nextStepIndex, appSettings, doneAction, runtime) {\r\n    const currentStep = story[nextStepIndex];\r\n    let dummyEvent;\r\n\r\n    switch (currentStep.type) {\r\n      case 'StateChange':\r\n        {\r\n          const { stateType, stateDelta } = currentStep.details;\r\n          ReplayRunner.processStateChangeStep(stateType, stateDelta, runtime);\r\n        }\r\n        return false;\r\n      case 'FullState':\r\n        // TODO: ignore for now but we should validate this later on\r\n        return false;\r\n      case 'RenderTriggered':\r\n        {\r\n          const component = runtime.componentDirectory.findComponent(currentStep.details.indexPath);\r\n          if (component !== undefined) {\r\n            RenderingHelper.triggerRendering(component);\r\n          } else {\r\n            console.log(`Component missing for rendering -> trigger render from top`);\r\n            runtime.taskManager.handleTopLevelPageChange()\r\n          }\r\n        }\r\n        return false;\r\n      case 'TaskSwitch':\r\n        if (currentStep.details.newTask === undefined) {\r\n          // stop task entry \r\n          runtime.app.showWaiting();\r\n          return false;\r\n        } else {\r\n          // start task entry \r\n          this.replayFromTaskStartingPoint(story, nextStepIndex, appSettings, doneAction, runtime);\r\n          return true;\r\n        }\r\n      case 'ContextMenu':\r\n        if (currentStep.details.shouldOpen) {\r\n          dummyEvent = new Event(currentStep.details.event.type);\r\n          dummyEvent.clientX = currentStep.details.event.clientX;\r\n          dummyEvent.clientY = currentStep.details.event.clientY;\r\n\r\n          runtime.contextMenu.openMenuItemTree({\r\n            entries: currentStep.details.entries,\r\n            event: dummyEvent\r\n          });\r\n        } else {\r\n          MenuItemTree.closeMenuItemTree();\r\n        }\r\n\r\n        return false;\r\n      case 'ScrollTriggered': {\r\n        const component = runtime.componentDirectory.findComponent(currentStep.details.path);\r\n        const { scrollTop, scrollLeft } = currentStep.details;\r\n\r\n        if (!component && !component.containerRendererRef) {\r\n          return false;\r\n        }\r\n\r\n        let htmlElement = component.containerRendererRef.current;\r\n\r\n        while (getComputedStyle(htmlElement).overflow === 'hidden') {\r\n          htmlElement = htmlElement.parentElement;\r\n\r\n          if (htmlElement === document.body) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        Utils.doScroll(scrollTop, scrollLeft, htmlElement)\r\n        return false;\r\n      }\r\n      default:\r\n        // just ignore irrelevant story events\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the state managers due to a 'StateChange' step.\r\n   */\r\n  static processStateChangeStep(stateType, stateDelta, runtime) {\r\n    switch (stateType) {\r\n      case 'ComponentState':\r\n        {\r\n          const { pathId, state } = stateDelta;\r\n          runtime.componentStateManager.registerStateChangeFromSnapshot(pathId, state);\r\n        }\r\n        break;\r\n      case 'PresenterStateManagerState':\r\n        {\r\n          const { taskPath, state } = stateDelta;\r\n          runtime.presenterStateManager.injectStateChangeAtReplay(taskPath, state);\r\n        }\r\n        break;\r\n      case 'TaskNavigatorStateManagerState':\r\n        {\r\n          const { name, value } = stateDelta;\r\n          runtime.taskNavigatorStateManager.injectStateChangeAtReplay(name, value);\r\n        }\r\n        break;\r\n      case 'IncidentsAccumulatorState':\r\n        {\r\n          const { taskPath, state } = stateDelta;\r\n          runtime.incidentsAccumulator.injectStateChangeAtReplay(taskPath, state);\r\n        }\r\n        break;\r\n      case 'VariableManagerState':\r\n        {\r\n          const { taskPath, name, value } = stateDelta;\r\n          runtime.variableManager.injectStateChangeAtReplay(taskPath, name, value);\r\n        }\r\n        break;\r\n      case 'CalculatorState':\r\n        {\r\n          const { taskPath, state } = stateDelta;\r\n          runtime.calculatorsManager.injectStateChangeAtReplay(taskPath, state);\r\n        }\r\n        break;\r\n      case 'ClipboardState':\r\n        {\r\n          const { state } = stateDelta;\r\n          runtime.clipboardManager.injectStateChangeAtReplay(state);\r\n        }\r\n        break;\r\n      default:\r\n      {\r\n        console.warn(`Unknown StateChange replay step type ignored!`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the delay required before executing the given step.\r\n   * \r\n   * If the step does not specify a replay tick value, the delay is zero.\r\n   */\r\n  static calculateDelayMillisByNow(initialReplayTick, initialTimestamp, step, nowProvider) {\r\n    if (step === undefined || step.replayTick === undefined) return 0;\r\n    return ReplayRunner.calculateDelayMillis(initialReplayTick, initialTimestamp, step.replayTick, nowProvider());\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the delay required before executing a step with the given replay tick value.\r\n   * \r\n   * The delay is never negative. \r\n   */\r\n  static calculateDelayMillis(initialReplayTick, initialTimestamp, stepReplayTick, nowTimestamp) {\r\n    return Math.max(0, (stepReplayTick - initialReplayTick) - (nowTimestamp - initialTimestamp));\r\n  }\r\n\r\n  /**\r\n   * Helper method that extracts the initializing triple of log entries TaskSwitch+FullState+TasksViewVisible \r\n   * from the given replay trace file.\r\n   * \r\n   * The method returns undefined if it cannot detect a proper triple. \r\n   * Besides the initializing triple it returns all StateChange events \r\n   * appearing between the FullState and the TasksViewVisible log entries.\r\n   */\r\n  static grabInitializingTriple(story, nextIndex) {\r\n    let entryIndex;\r\n\r\n    // scroll down until we see the first TaskSwitch entry that starts a task:\r\n    let tripleStartFound = false;\r\n    for (entryIndex = nextIndex; entryIndex < story.length && !tripleStartFound;) {\r\n      const currentStep = story[entryIndex];\r\n      if (currentStep.type === 'TaskSwitch' && currentStep.details.newTask !== undefined) {\r\n        tripleStartFound = true;\r\n      } else {\r\n        entryIndex += 1;\r\n      }\r\n    }\r\n    if (!tripleStartFound) return undefined;\r\n    const taskSwitchEntry = story[entryIndex];\r\n\r\n    // scroll down through StateChange entries until we find the FullState entry:\r\n    entryIndex += 1;\r\n    let nextEntry = story[entryIndex];\r\n    while (nextEntry !== undefined && nextEntry.type === 'StateChange') {\r\n      entryIndex += 1;\r\n      nextEntry = story[entryIndex];\r\n    }\r\n    if (nextEntry === undefined || nextEntry.type !== 'FullState') return undefined;\r\n    const fullStateEntry = nextEntry;\r\n\r\n    // scroll down through StateChange entries and remember them until we find the TasksViewVisible entry:\r\n    entryIndex += 1;\r\n    const stateChangeEntries = [];\r\n    nextEntry = story[entryIndex];\r\n    while (nextEntry !== undefined && nextEntry.type === 'StateChange') {\r\n      stateChangeEntries.push(nextEntry);\r\n      entryIndex += 1;\r\n      nextEntry = story[entryIndex];\r\n    }\r\n    if (nextEntry === undefined || nextEntry.type !== 'TasksViewVisible') return undefined;\r\n    const tasksViewVisibleEntry = nextEntry;\r\n\r\n    return {\r\n      taskSwitchEntry,\r\n      fullStateEntry,\r\n      tasksViewVisibleEntry,\r\n      stateChangeEntries,\r\n      nextIndex: entryIndex + 1\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * Keep the currently active 'replay step'.\r\n */\r\nexport default class ReplayStepMonitor {\r\n\r\n  constructor() {\r\n    this.currentReplayStepId = 0;\r\n  }\r\n\r\n  // public API ------------------------------------------------------------------\r\n\r\n  incrementReplayStep = () => {\r\n    this.currentReplayStepId += 1;\r\n\r\n  }\r\n\r\n  getCurrentReplayStepId = () => this.currentReplayStepId;\r\n\r\n  // private stuff ------------------------------------------------------------------\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\nimport { EventEmitter } from 'fbemitter';\r\nimport moment from 'moment';\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\nimport TouchBackend from 'react-dnd-touch-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport App from './App';\r\nimport ComponentStateManager from '../state/ComponentStateManager';\r\nimport ComponentDirectory from '../state/ComponentDirectory';\r\nimport IncidentsAccumulator from '../state/IncidentsAccumulator';\r\nimport TaskManager from '../state/TaskManager';\r\nimport TaskResultsManager from '../state/TaskResultsManager';\r\nimport StatemachinesManager from '../state/StatemachinesManager';\r\nimport PresenterStateManager from '../state/PresenterStateManager';\r\nimport TaskNavigatorStateManager from '../state/TaskNavigatorStateManager';\r\nimport TraceLogBuffer from '../state/TraceLogBuffer';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\nimport ClipboardManager from '../state/ClipboardManager';\r\nimport TraceLogUploader from '../transmit/TraceLogUploader';\r\nimport PostMessageReceiver from '../transmit/PostMessageReceiver';\r\nimport RecommendationsManager from '../state/RecommendationsManager';\r\nimport CalculatorsManager from '../state/CalculatorsManager';\r\nimport Utils from '../utils/Utils';\r\nimport '../utils/polyfills';\r\nimport ActionRegister from '../state/ActionRegister';\r\nimport FocusRegister from '../state/FocusRegister';\r\nimport CustomDragLayer from '../config/CustomDragLayer';\r\nimport RecordingBuffer from '../state/RecordingBuffer';\r\nimport RecordingUploader from '../transmit/RecordingUploader';\r\nimport ServerCalls from '../controller/ServerCalls';\r\nimport LibraryManager from '../state/LibraryManager';\r\nimport VariableManager from '../state/VariableManager';\r\nimport ReplayRunner from './ReplayRunner';\r\nimport ReplayStepMonitor from '../state/ReplayStepMonitor';\r\n\r\n/**\r\n * Entry point of task player layer.\r\n */\r\nexport default class TaskPlayer {\r\n\r\n  // ---------- public API ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build a task player. \r\n   * \r\n   * The new task player will start to listen for postMessage events. \r\n   * You may configure and start the player via postMessage events or \r\n   * via the public API instance methods.\r\n   */\r\n  constructor(eventTargetWindow, eventDomainUri) {\r\n    this.runtime = TaskPlayer.buildRuntime();\r\n    this.runtime.postMessageReceiver.startReceiving(this.runtime, this);\r\n    this.eventTargetWindow = eventTargetWindow === undefined ? 'self' : eventTargetWindow;\r\n    this.eventDomainUri = eventDomainUri === undefined ? Utils.getCallingUrlWithoutPath() : eventDomainUri;\r\n\r\n    this.apiState = 'appNotRunning';\r\n\r\n    this.settings = {\r\n      debugScoreHotKey: undefined,\r\n      debugTraceHotKey: undefined,\r\n      debugStatemachineHotKey: undefined,\r\n      ShowTaskNavigationBars: false\r\n    };\r\n\r\n    this.headerButtons = [];\r\n    this.courseForNavigator = [];\r\n    this.testsForNavigator = [];\r\n  }\r\n\r\n  /**\r\n   * Run the task player, i.e. make it display the App component.\r\n   */\r\n  runPlayer = () => {\r\n    Utils.printCbaVersion();\r\n    this.apiState = 'notLoggedIn';\r\n    const runtimer = this.runtime;\r\n\r\n    // Use drag&drop technique adapted to screen type of the target device:\r\n    // - use specific touch backend for DnD library to capture touch events\r\n    // - use custom made drag layer for touch backend (html5 backend uses drag layer provided by browser)\r\n    const isTouchDevice = Utils.isTouchDevice()\r\n    const waitingMessageTexts = Utils.getWaitingMessageTexts();\r\n    ReactDOM.render(\r\n      <DndProvider\r\n        backend={isTouchDevice ? TouchBackend : HTML5Backend}\r\n        options={isTouchDevice ? {\r\n          enableMouseEvents: true\r\n        } : {}}\r\n      >\r\n        <App\r\n          runtime={runtimer}\r\n          waitingMessageTexts={waitingMessageTexts}\r\n        />\r\n        <CustomDragLayer runtime={runtimer} />\r\n      </DndProvider>,\r\n      document.getElementById('root')\r\n    );\r\n  }\r\n\r\n  // ------- Initialization ------------------------------------------------------------------------\r\n  sendPlayerReady = () => {\r\n    if (this.checkNotRunning) {\r\n      this.runtime.postMessageReceiver.sendTaskPlayerReadyEvent(this.eventDomainUri, this.eventTargetWindow);\r\n    }\r\n  }\r\n\r\n\r\n  // ------- Configuration Control -----------------------------------------------------------------------\r\n  setWaitMessages = (primary, secondary) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('waitMessages')) {\r\n      this.runtime.app.setWaitingMessageTexts({\r\n        primary,\r\n        secondary\r\n      })\r\n    }\r\n  }\r\n\r\n  addItem = (itemConfig, resourcePath, externalResourcePath, libraryPathsMap) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('addItem')) {\r\n      const itemConfigVersion = itemConfig.runtimeCompatibilityVersion;\r\n      if (TaskPlayer.isCompatibleVersion(itemConfigVersion)) {\r\n        this.runtime.taskManager.addItem(itemConfig, resourcePath, externalResourcePath);\r\n        this.runtime.libraryManager.addLibrariesForItem(itemConfig.dependencies, libraryPathsMap);\r\n      } else {\r\n        console.info(`Ignored item ${itemConfig.name} with incompatible version: ${itemConfigVersion}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearItems = () => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('clearItems')) {\r\n      this.runtime.taskManager.clearItems();\r\n    }\r\n  }\r\n\r\n  setScalingConfiguration = (config) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('scalingConfiguration')) {\r\n      let { scalingMode, alignmentHorizontal, alignmentVertical } = config;\r\n      const scalingModes = ['no-scaling', 'scale-up', 'scale-down', 'scale-up-down'];\r\n      const alignmentHorizontalModes = ['left', 'right', 'center'];\r\n      const alignmentVerticalModes = ['top', 'bottom', 'center'];\r\n\r\n      if (!scalingModes.includes(scalingMode)) {\r\n        console.log(\"scalingConfiguration not correct, scalingMode must be one of: \", scalingModes);\r\n        [scalingMode] = scalingModes\r\n      }\r\n\r\n      if (!alignmentHorizontalModes.includes(alignmentHorizontal)) {\r\n        console.log(\"scalingConfiguration not correct, alignmentHorizontal must be one of: \", alignmentHorizontalModes);\r\n        [alignmentHorizontal] = alignmentHorizontalModes;\r\n      }\r\n\r\n      if (!alignmentVerticalModes.includes(alignmentVertical)) {\r\n        console.log(\"scalingConfiguration not correct, alignmentVertical must be one of: \", alignmentVerticalModes);\r\n        [alignmentVertical] = alignmentVerticalModes;\r\n      }\r\n\r\n      this.runtime.app.setScalingConfig({\r\n        scalingMode, alignmentHorizontal, alignmentVertical\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * We return a Promise that can execute the preload and wait for the results.\r\n   * \r\n   * The caller must trigger the Promise and provide the success/failure handlers.\r\n   * \r\n   * @param {String} itemName \r\n   */\r\n  setPreload = itemName => (\r\n    this.checkNotLoggedInOrNoTaskRunning('setPreload')\r\n      ? this.preloadItemResources(itemName)\r\n      : undefined\r\n  );\r\n\r\n  // ------- Trace Control -----------------------------------------------------------------------\r\n\r\n  insertMessageInTrace = (message) => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('insertMessageInTrace')) {\r\n      TaskPlayer.dumpMessageToTraceLog(message, this.runtime.traceLogBuffer);\r\n    }\r\n  }\r\n\r\n  logStateToTrace = () => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('logStateToTrace')) {\r\n      TraceLogHelper.dumpSnapshotToTrace(this.runtime);\r\n    }\r\n  }\r\n\r\n  flushTrace = () => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('flushTrace')) {\r\n      this.runtime.traceLogUploader.collectEntriesAndTriggerTransmission();\r\n    }\r\n  }\r\n\r\n  setCallbackTraceTransmission = (callback, interval) => {\r\n    if (this.checkNotLoggedIn('setCallbackTraceTransmission')) {\r\n      this.runtime.traceLogUploader.setCallbackTransmissionChannel(callback, interval)\r\n    }\r\n  }\r\n\r\n  setHttpTraceTransmission = (transmitUrl, interval, httpTimeout) => {\r\n    if (this.checkNotLoggedIn('setHttpTraceTransmission')) {\r\n      this.runtime.traceLogUploader.setHttpTransmissionChannel(transmitUrl, interval, httpTimeout);\r\n    }\r\n  }\r\n\r\n  setConsoleTraceTransmission = (interval) => {\r\n    if (this.checkNotLoggedIn('setConsoleTraceTransmission')) {\r\n      this.runtime.traceLogUploader.setConsoleTransmissionChannel(interval);\r\n    }\r\n  }\r\n\r\n  setTraceContextId = (contextId) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setTraceContextId')) {\r\n      const { traceLogUploader, traceLogBuffer } = this.runtime;\r\n      const { username, loginTimestamp } = traceLogUploader.getSessionContext();\r\n      traceLogUploader.setSessionContext(contextId, username, loginTimestamp);\r\n      traceLogBuffer.setTraceContextId(contextId);\r\n    }\r\n  }\r\n\r\n  setTraceContentFilter = (replaySupport, withExtendedMetaData, withoutItemConfiguration, withoutSnapshot, withoutScoring) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setTraceContentFilter')) {\r\n      const { traceLogBuffer } = this.runtime;\r\n      traceLogBuffer.setWithReplaySupport(replaySupport);\r\n      traceLogBuffer.setWithExtendedMetaData(withExtendedMetaData);\r\n      traceLogBuffer.setWithoutItemConfiguration(withoutItemConfiguration);\r\n      traceLogBuffer.setWithoutSnapshot(withoutSnapshot);\r\n      traceLogBuffer.setWithoutScoring(withoutScoring);\r\n    }\r\n  }\r\n\r\n  // ------- Recordings Control -----------------------------------------------------------------------\r\n\r\n  setCallbackRecordingTransmission = (callback) => {\r\n    if (this.checkNotLoggedIn('setCallbackRecordingTransmission')) {\r\n      this.runtime.recordingUploader.setCallbackTransmissionChannel(callback, undefined);\r\n    }\r\n  }\r\n\r\n  setHttpRecordingTransmission = (transmitUrl, httpTimeout) => {\r\n    if (this.checkNotLoggedIn('setHttpRecordingTransmission')) {\r\n      this.runtime.recordingUploader.setHttpTransmissionChannel(transmitUrl, undefined, httpTimeout);\r\n    }\r\n  }\r\n\r\n  setConsoleRecordingTransmission = () => {\r\n    if (this.checkNotLoggedIn('setConsoleRecordingTransmission')) {\r\n      this.runtime.recordingUploader.setConsoleTransmissionChannel(undefined);\r\n    }\r\n  }\r\n\r\n  setRecordingContextId = (contextId) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setRecordingContextId')) {\r\n      const { recordingUploader } = this.runtime;\r\n      const { username, loginTimestamp } = recordingUploader.getSessionContext();\r\n      recordingUploader.setSessionContext(contextId, username, loginTimestamp);\r\n    }\r\n  }\r\n\r\n  // ------- User Control -----------------------------------------------------------------------\r\n  setUserId = (id) => {\r\n    if (this.checkNotLoggedIn('setUserId')) {\r\n      const timestamp = moment().format();\r\n      const { traceLogUploader, recordingUploader, traceLogBuffer } = this.runtime;\r\n      const { sessionId: traceSessionId } = traceLogUploader.getSessionContext();\r\n      traceLogUploader.setSessionContext(traceSessionId, id, timestamp);\r\n      const { sessionId: recordingSessionId } = recordingUploader.getSessionContext();\r\n      recordingUploader.setSessionContext(recordingSessionId, id, timestamp);\r\n      TaskPlayer.dumpLoginToTraceLog(id, timestamp, traceLogBuffer);\r\n      this.apiState = 'noTaskRunning';\r\n    }\r\n  }\r\n\r\n  logout = () => {\r\n    if (this.checkNoTaskRunning('logout')) {\r\n      const { traceLogUploader, componentStateManager } = this.runtime;\r\n\r\n      // Flush all pending trace messages before we drop the user id:\r\n      traceLogUploader.collectEntriesAndTriggerTransmission();\r\n\r\n      const { sessionId } = traceLogUploader.getSessionContext();\r\n      traceLogUploader.setSessionContext(sessionId, undefined, undefined);\r\n      componentStateManager.clear();\r\n      this.apiState = 'notLoggedIn';\r\n    }\r\n  }\r\n\r\n  getUserId = () => (this.apiState === 'notLoggedIn'\r\n    ? undefined\r\n    : this.runtime.traceLogUploader.getSessionContext().username\r\n  );\r\n\r\n  showLogin = (titleLabel, fieldLabel, buttonLabel, fieldValueCallback) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('showLogin')) {\r\n      const { app } = this.runtime;\r\n      app.showLogin(titleLabel, fieldLabel, buttonLabel, fieldValueCallback);\r\n    }\r\n  }\r\n\r\n  // ------- Task Control -----------------------------------------------------------------------\r\n  startTask = (scope, item, task) => {\r\n    if (this.checkNoTaskRunning('startTask')) {\r\n      const { app } = this.runtime;\r\n      app.showTask(scope, item, task, this.settings, this.headerButtons, this.courseForNavigator, this.testsForNavigator);\r\n      this.apiState = 'taskRunning';\r\n    }\r\n  }\r\n\r\n  stopTask = () => {\r\n    if (this.checkTaskRunning('stopTask')) {\r\n      const { app } = this.runtime;\r\n      app.showWaiting();\r\n      this.apiState = 'noTaskRunning';\r\n    }\r\n  }\r\n\r\n  pauseTask = () => {\r\n    if (this.checkTaskRunning('pauseTask')) {\r\n      TaskPlayer.pauseOrResume(true, this.runtime);\r\n    }\r\n  }\r\n\r\n  resumeTask = () => {\r\n    if (this.checkTaskRunning('resumeTask')) {\r\n      TaskPlayer.pauseOrResume(false, this.runtime);\r\n    }\r\n  }\r\n\r\n  getTask = () => {\r\n    if (this.apiState === 'taskRunning') {\r\n      const { taskManager } = this.runtime;\r\n      const { test, item, task } = taskManager.getCurrentTestTaskItemNames();\r\n      return {\r\n        scope: test,\r\n        item,\r\n        task\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  setTaskSequencer = (switchCallback, availabilityCallback) => {\r\n    if (this.checkNoTaskRunning('setTaskSequencer')) {\r\n      const { taskManager } = this.runtime;\r\n      taskManager.setSwitchCallback(switchCallback);\r\n      taskManager.setAvailabilityCallback(availabilityCallback);\r\n    }\r\n  }\r\n\r\n  // ------- Task State Control ----------------------------------------------------------------\r\n\r\n  getTasksState = () => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('getTasksState')) {\r\n      return this.runtime.taskManager.getAllTasksState();\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  clearTasksState = () => {\r\n    if (this.checkNoTaskRunning('clearTasksState')) {\r\n      this.runtime.taskManager.clearTasksState();\r\n    }\r\n  }\r\n\r\n  preloadTasksState = (state) => {\r\n    if (this.checkNoTaskRunning('preloadTasksState')) {\r\n      this.runtime.taskManager.preloadTasksState(state);\r\n      TraceLogHelper.dumpSnapshotToTrace(this.runtime);\r\n    }\r\n  }\r\n\r\n  replay = (story) => {\r\n    if (this.checkNoTaskRunning('replay')) {\r\n      this.apiState = 'taskRunning';\r\n      const replayRunner = new ReplayRunner();\r\n      replayRunner.replay(story, () => {\r\n        this.apiState = this.runtime.taskManager.getCurrentTestTaskItemNames().task === undefined ? 'noTaskRunning' : 'taskRunning';\r\n        // TODO: return a \"finished\" signal to the TaskPlayer client\r\n        console.info(`Replay finished. API state now is ${this.apiState}`);\r\n      },\r\n      this.settings, this.headerButtons, this.courseForNavigator, this.testsForNavigator,\r\n      this.runtime);\r\n    }\r\n  }\r\n\r\n\r\n  // ------- Scoring Control ----------------------------------------------------------------\r\n\r\n  getScoringResult = () => {\r\n    if (this.checkTaskRunning('getScoringResult')) {\r\n      const { taskManager } = this.runtime;\r\n      return taskManager.getCurrentTaskResults();\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  getOldScoringResult = (scope, item, task) => {\r\n    if (this.checkNoTaskRunning('getOldScoringResult')) {\r\n      const { taskManager } = this.runtime;\r\n      return taskManager.getOldTaskResults(task, item, scope);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  // ------- Statemachine Control --------------------------------------------------------------\r\n  sendStatemachineEvent = (event) => {\r\n    if (this.checkTaskRunning('sendStatemachineEvent')) {\r\n      const { statemachinesManager, traceLogBuffer } = this.runtime;\r\n      TaskPlayer.dumpStatemachineEventToTraceLog(event, traceLogBuffer);\r\n      statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n\r\n  // ------- Header Control --------------------------------------------------------------------\r\n  setHeaderButtons = (headerButtons) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setHeaderButtons')) {\r\n      this.headerButtons = headerButtons;\r\n    }\r\n  }\r\n\r\n  setMenuCarousels = (course, scopes) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setMenuCarousels')) {\r\n      this.settings.ShowTaskNavigationBars = course.length > 0;\r\n      this.courseForNavigator = course;\r\n      this.testsForNavigator = scopes.map(scope => ({\r\n        name: scope.name,\r\n        taskCourse: scope.tasks\r\n      }));\r\n    }\r\n  }\r\n\r\n  // ------- Developer Mode Control ------------------------------------------------------------\r\n  activateDebuggingWindows = (score, trace, statemachine) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('activateDebuggingWindows')) {\r\n      this.settings.debugScoreHotKey = TaskPlayer.normalizeHotKeySpecification(score, 'scoring');\r\n      this.settings.debugTraceHotKey = TaskPlayer.normalizeHotKeySpecification(trace, 'trace');\r\n      this.settings.debugStatemachineHotKey = TaskPlayer.normalizeHotKeySpecification(statemachine, 'state machine');\r\n    }\r\n  }\r\n\r\n  // ---------- private stuff ------------------------------------------------------------------\r\n\r\n\r\n  static buildRuntime() {\r\n    const traceLogBuffer = new TraceLogBuffer();\r\n    const recordingBuffer = new RecordingBuffer();\r\n    const result = {\r\n      componentStateManager: new ComponentStateManager(),\r\n      componentDirectory: new ComponentDirectory(),\r\n      incidentsAccumulator: new IncidentsAccumulator(),\r\n      taskResultsManager: new TaskResultsManager(),\r\n      statemachinesManager: new StatemachinesManager(),\r\n      presenterStateManager: new PresenterStateManager(),\r\n      taskNavigatorStateManager: new TaskNavigatorStateManager(),\r\n      traceLogBuffer,\r\n      traceLogUploader: new TraceLogUploader(traceLogBuffer),\r\n      recordingBuffer,\r\n      recordingUploader: new RecordingUploader(recordingBuffer),\r\n      eventEmitter: new EventEmitter(),\r\n      clipboardManager: new ClipboardManager(traceLogBuffer),\r\n      postMessageReceiver: new PostMessageReceiver(),\r\n      calculatorsManager: new CalculatorsManager(),\r\n      actionRegister: new ActionRegister(),\r\n      focusRegister: new FocusRegister(),\r\n      libraryManager: new LibraryManager(),\r\n      variableManager: new VariableManager(),\r\n      replayStepMonitor: new ReplayStepMonitor()\r\n    }\r\n    result.recommendationsManager = new RecommendationsManager(result);\r\n    result.taskManager = new TaskManager(result);\r\n\r\n    return result;\r\n  }\r\n\r\n  checkNotRunning = action => this.checkApiState(['appNotRunning'], action);\r\n\r\n  checkNotLoggedIn = action => this.checkApiState(['notLoggedIn'], action);\r\n\r\n  checkNoTaskRunning = action => this.checkApiState(['noTaskRunning'], action);\r\n\r\n  checkTaskRunning = action => this.checkApiState(['taskRunning'], action);\r\n\r\n  checkNotLoggedInOrNoTaskRunning = action => this.checkApiState(['notLoggedIn', 'noTaskRunning'], action);\r\n\r\n  checkNoTaskRunningOrTaskRunning = action => this.checkApiState(['noTaskRunning', 'taskRunning'], action);\r\n\r\n  checkApiState = (acceptedList, action) => {\r\n    const result = acceptedList.includes(this.apiState);\r\n    if (!result) {\r\n      console.info(`TaskPlayer API call ${action} denied in state ${this.apiState}`);\r\n    }\r\n    return result\r\n  }\r\n\r\n  static normalizeHotKeySpecification(hotKeySpecification, windowNameForErrorMessage) {\r\n    if (hotKeySpecification === undefined || hotKeySpecification === \"\") {\r\n      return undefined;\r\n    }\r\n    const withoutCtrl = hotKeySpecification.startsWith('ctrl+') ? hotKeySpecification.substring(5) : hotKeySpecification;\r\n    const withoutShift = withoutCtrl.startsWith('shift+') ? withoutCtrl.substring(6) : withoutCtrl;\r\n    if (withoutShift.length !== 1) {\r\n      console.error(`Invalid hot key for ${windowNameForErrorMessage} debugging window ignored: ${hotKeySpecification}`);\r\n      return undefined;\r\n    }\r\n    return hotKeySpecification;\r\n  }\r\n\r\n\r\n  /**\r\n   * Dump the login configuration to the trace log.\r\n   * \r\n   * @param {*} login The data obtained in login phase.\r\n   * @param {*} traceLogBuffer The trace log buffer to dump to.\r\n   */\r\n  static dumpLoginToTraceLog(username, timestamp, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('UserLogin', new Date(), {\r\n      user: username,\r\n      loginTimestamp: timestamp,\r\n      runtimeVersion: Utils.getCbaVersion(),\r\n      webClientUserAgent: window.navigator.userAgent\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Write a message from the runtime controller to the trace log buffer.\r\n   * \r\n   * @param {*} message The message to be written to the trace log\r\n   * @param {*} traceLogBuffer The trace log buffer to write to.\r\n   */\r\n  static dumpMessageToTraceLog(message, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('RuntimeController', new Date(), {\r\n      actionType: 'insertMessageInTrace',\r\n      details: message\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Write a statemachine event to the trace log buffer.\r\n   * \r\n   * @param {*} event The statemachine event to write to the trace log.\r\n   * @param {*} traceLogBuffer The trace log buffer to write to\r\n   */\r\n  static dumpStatemachineEventToTraceLog(event, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('RuntimeController', new Date(), {\r\n      actionType: 'sendStatemachineEvent',\r\n      details: event\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Write a pause/resume event to the trace log buffer.\r\n   * \r\n   * @param {boolean} enter Do we enter or leave the paused state?\r\n   * @param {*} traceLogBuffer The trace log buffer to write to.\r\n   */\r\n  static dumpPauseResumeToTraceLog(enter, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('PauseResume', new Date(), {\r\n      type: enter === true ? 'pause' : 'resume',\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Check that the given version number is compatible with our internal version.\r\n   */\r\n  static isCompatibleVersion(versionNumber) {\r\n    return versionNumber === Utils.getCbaVersionNumber();\r\n  }\r\n\r\n  /**\r\n   * Pause or resume the currently running task.\r\n   * \r\n   * @param {boolean} enterPause Should we pause (or resume)?\r\n   * @param {*} runtime The common runtime context structure. \r\n   */\r\n  static pauseOrResume(enterPause, runtime) {\r\n    const { testPresenter, traceLogBuffer, incidentsAccumulator, statemachinesManager, taskManager } = runtime;\r\n    TaskPlayer.dumpPauseResumeToTraceLog(enterPause, traceLogBuffer);\r\n    if (testPresenter !== null) {\r\n      if (enterPause) {\r\n        testPresenter.pause();\r\n      } else {\r\n        testPresenter.resume();\r\n      }\r\n    }\r\n    const atTime = new Date().getTime();\r\n    if (enterPause) {\r\n      incidentsAccumulator.pauseTask(atTime);\r\n      statemachinesManager.pauseCurrentStatemachine();\r\n    } else {\r\n      incidentsAccumulator.resumeTask(atTime);\r\n      statemachinesManager.resumeCurrentStatemachine();\r\n    }\r\n\r\n    // handle custom pausing for components that implement a \"handleTaskPauseOrResume\" method\r\n    const { standardPage, xPage } = taskManager.getCurrentPageNames();\r\n\r\n    [\r\n      ...runtime.componentDirectory.findComponentsByPageName(standardPage),\r\n      ...runtime.componentDirectory.findComponentsByPageName(xPage)\r\n    ].forEach((component) => {\r\n      if (component.handleTaskPauseOrResume) {\r\n        component.handleTaskPauseOrResume(enterPause);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {String} itemName Name of the item \r\n   * @param {Object} config Configuration object\r\n   * @param {Boolean} config.image \r\n   * @param {Boolean} config.video \r\n   * @param {Boolean} config.audio\r\n   *  \r\n   * @returns {Promise} Promise object that completes when all resources are preloaded. Of the form [ [images], [videos], [audios] ]\r\n   */\r\n  preloadItemResources = (itemName, config = {}) => new Promise((resolve, reject) => {\r\n    console.log(\"Starting preload for item\", itemName);\r\n\r\n    const defaultConfig = {\r\n      image: true,\r\n      video: true,\r\n      audio: true\r\n    }\r\n    const invalidConfigError = \"Wrong config? If no preload is required, a call to this function is not required.\";\r\n    const invalidItemError = \"No resources to preload\";\r\n\r\n    config = Object.assign(defaultConfig, config);\r\n\r\n    if (!config.image && !config.video && !config.audio) {\r\n      return reject(invalidConfigError);\r\n    }\r\n\r\n    const resources = this.runtime.taskManager.getItemResources(itemName);\r\n\r\n    if (!resources || resources.length === 0) {\r\n      return reject(invalidItemError);\r\n    }\r\n    const imageType = \"image\";\r\n    const videoType = \"video\";\r\n    const audioType = \"audio\";\r\n\r\n    let imagesPromise;\r\n    let videoPromise;\r\n    let audioPromise;\r\n\r\n    if (config.image) {\r\n      const assets = resources.filter(res => res.type === imageType);\r\n      imagesPromise = ServerCalls.preloadResources(assets, imageType);\r\n    }\r\n\r\n    if (config.video) {\r\n      const assets = resources.filter(res => res.type === videoType);\r\n      videoPromise = ServerCalls.preloadResources(assets, videoType);\r\n    }\r\n\r\n    if (config.audio) {\r\n      const assets = resources.filter(res => res.type === audioType);\r\n      audioPromise = ServerCalls.preloadResources(assets, audioType);\r\n    }\r\n\r\n    return resolve(Promise.all([imagesPromise, videoPromise, audioPromise]))\r\n  });\r\n\r\n\r\n}\r\n","import Controller from './controller/Controller';\nimport TaskPlayer from './preamble/TaskPlayer';\nimport Utils from './utils/Utils';\n\n\n/**\n * Determine whether we should use the internal controller to control the task player\n * or wait for an extenral controller to take over.\n * \n * The method checks settings given via the cba_runtime_config attribute\n * of the global window. \n */\nfunction shouldActivateInternalController() {\n  const controllerMode = Utils.getControllerMode();\n  const useExternalController = controllerMode === 'external-controller';\n  if (useExternalController) {\n    console.log('Wait for external controller to take over...');\n  }\n  return !useExternalController;\n}\n\n/**\n * Start the task player and send the ready signal.\n */\nfunction startTaskPlayer(taskPlayer) {\n  taskPlayer.sendPlayerReady();\n  taskPlayer.runPlayer();\n}\n\n/**\n * Start up the CBA runtime.\n */\nfunction startUp() {\n  const eventReceiverConfiguration = Utils.getEventReceiverConfiguration();\n  const taskPlayer = new TaskPlayer(eventReceiverConfiguration.eventTargetWindow, eventReceiverConfiguration.eventDomainUri);\n  if (shouldActivateInternalController()) {\n    // Activate the internal controller which will control the task player.\n    const internalController = new Controller();\n    internalController.runController(taskPlayer);\n  } else if (eventReceiverConfiguration.startTaskPlayerEvent) {\n    // Wait for the configured 'start' event and start the task player once the event arrives.\n    // The task player will wait for commands from an external controller.\n    window.addEventListener(eventReceiverConfiguration.startTaskPlayerEvent, (startEvent) => {\n      startTaskPlayer(taskPlayer);\n    });\n  } else {\n    // Start the task player immediately. The task player will wait for commands from an external controller.\n    startTaskPlayer(taskPlayer);\n  }\n}\n\nstartUp();\n"],"sourceRoot":""}
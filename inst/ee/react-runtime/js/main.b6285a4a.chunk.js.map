{"version":3,"sources":["utils/polyfills.js","utils/Utils.js","controller/ServerCalls.js","controller/StandardTaskSequencer.js","controller/Controller.js","state/IndexPathHelper.js","components/PropTypesHelper.js","state/UserDefPathHelper.js","state/StateAttributeAccess.js","state/StateManagerHelper.js","state/RecommendationsManager.js","config/AutoLayoutHelper.js","config/CommonConfigHelper.js","state/PathTranslationHelper.js","state/TraceLogHelper.js","components/RenderingHelper.js","state/ComponentStateHelper.js","components/PageHistoryHelper.js","components/BookmarkHelper.js","components/WebToolbar/WebTab.js","components/WebToolbar/WebToolbarHelper.js","components/MenuItemTree.js","components/WebToolbar/WebToolbar.js","components/table/TableHelper.js","components/CbaComboBox.js","eval/PropagationHelper.js","components/SelectGroupHelper.js","components/PageAreaRenderer.js","components/CbaPageArea.js","dialog/ScoringModalData.js","dialog/StatemachineModalData.js","dialog/TracingModalData.js","dialog/ManageBookmarksData.js","dialog/ModalDialog.js","dialog/ModalManager.js","components/SpecialClickActionsHelper.js","components/MenuBuildHelper.js","dialog/DialogPresenter.js","components/CommonActionsHelper.js","components/CbaRichTextField/PositionCalculationHelper.js","components/CbaRichTextField/EditorStateHelper.js","components/CbaRichTextField/DraftLink.js","components/CbaRichTextField/Media.js","components/CbaRichTextField/DraftBullet.js","components/MathJax/MathJaxTranspiler.js","components/CbaRichTextField/MathJaxEntity.js","components/CbaRichTextField/CbaRichTextField.js","components/CbaRichTextField/SelectionHelper.js","components/CbaRichTextField/TextBlockSelectHelper.js","components/InputComponent.js","components/CbaSingleLineInputField.js","components/table/CbaTableCell.js","components/CbaTree/DataGridRenderers/CbaTreeHeader.js","components/CbaTree/TreeTraceHelper.js","components/CbaTree/TreeContextMenuHelper.js","components/CbaTree/DataGridRenderers/CbaTreeCell.js","components/CbaTree/DataGridRenderers/CbaTreeRow.js","components/CbaTree/TreeUtils.js","components/calculator/ValueFormatter.js","components/CbaTree/CbaTreeChildArea.js","components/media/MediaPreview.js","components/media/CbaMedia.js","eval/TermEvaluator.js","config/DragAndDropHelper.js","components/CbaContainer.js","components/CbaRectangle.js","components/CbaSimpleTextField.js","components/CbaButton.js","components/CbaRadioButton.js","components/CbaCheckbox.js","components/CbaLink.js","components/CbaPolygon.js","components/CbaRegionMap.js","components/CbaInnerHtml.js","components/CbaExternalPageFrame.js","components/CbaTree/CbaTree.js","components/CbaTree/CbaTreeView.js","components/table/CellEvaluator.js","components/table/CbaTable.js","components/table/CbaTableCellEditor.js","components/calculator/CbaCalculatorHistory.js","components/calculator/CbaCalculatorInput.js","components/CbaInputField.js","components/CbaTimer/CbaStopWatch.js","components/variable/CbaScaleValueInput.js","components/variable/CbaSpinnerValueInput.js","components/CbaTimer/CbaTimer.js","components/list/ListItem.js","components/list/CbaList.js","components/CbaInterpreter.js","components/CbaTestPresenter.js","components/HeaderButtons.js","components/TopButtonToolbar.js","components/TaskNavigator.js","components/LoggedInView.js","preamble/Login.js","components/PageEventsObserver.js","preamble/App.js","state/ComponentStateManager.js","state/ComponentDirectory.js","state/IncidentsAccumulator.js","eval/ConditionalLinkHelper.js","config/PageConfigurationsManager.js","config/CalculationsConfigurationManager.js","state/PresenterStateManager.js","eval/ValueMapper.js","state/TaskManager.js","state/TaskResultsManager.js","state/TimedEventsCatalog.js","state/StatemachineEventHistory.js","state/Statemachine.js","state/StatemachinesManager.js","state/TaskNavigatorStateManager.js","state/TraceLogBuffer.js","state/ClipboardManager.js","utils/StringUtils.js","transmit/UserDataUploader.js","transmit/TraceLogUploader.js","transmit/PostMessageReceiver.js","components/calculator/EvaluatorHelper.js","components/calculator/ExpressionEvaluator.js","components/calculator/Evaluator.js","components/calculator/KeyboardHelper.js","components/calculator/Renderer.js","components/calculator/HistoryRenderer.js","components/calculator/CbaCalculatorEngine.js","state/CalculatorsManager.js","state/ActionRegister.js","state/FocusRegister.js","config/CustomDragLayer.js","state/RecordingBuffer.js","transmit/RecordingUploader.js","state/LibraryManager.js","state/VariableManager.js","preamble/ReplayRunner.js","state/ReplayStepMonitor.js","preamble/TaskPlayer.js","index.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","String","startsWith","searchString","position","_this","indexOf","Utils","_classCallCheck","this","_createClass","key","value","valueMightBeUndefined","defaultValue","baseObject","propertyName","candidate","constructor","Object","keys","length","array","arrayContainsNonEmptyEntry","some","toString","concat","packageJson","version","name","console","info","getCbaVersion","isMobileForced","getQueryParam","navigator","maxTouchPoints","settings","settingName","defaultMode","configFromWindowGlobal","cba_runtime_config","modeFromWindowGlobal","mode","warn","trim","getEventReceiverConfigurationInternal","location","href","urlString","eventTargetWindow","getParameterValueFromUrlOrConfigStructure","eventDomainUri","startTaskPlayerEvent","getWaitingMessageTextsInternal","primary","secondary","parameterName","urlQuery","UrlLib","parse","query","getUrlWithoutPathFromLocation","protocol","portAddOn","port","hostname","error","paramName","getQueryParams","getQueryParamsFromUrlString","elem","fullscreenEnabled","mozFullScreenEnabled","webkitFullscreenEnabled","msFullscreenEnabled","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","fullscreenElement","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","resources","path","isExternal","map","resource","resourceCopy","safeDeepCopy","expectedType","valueType","Number","isInteger","x","y","sizerElement","scrollingElement","iframe","scrollHeight","scrollWidth","scrollableHeight","clientHeight","scrollableWidth","clientWidth","_Utils$calculateFinal","calculateFinalScrollValue","finalX","finalY","doScroll","top","left","element","scroll","behavior","parseInt","includes","computePercentage","parseFloat","num","percentage","deepCopy","object","JSON","stringify","safeDeepCopyObjects","from","to","Array","Date","RegExp","Function","Boolean","forEach","isMobile","a","check","isMobileModeSetAsParameter","userAgent","vendor","opera","test","substr","keyCodes","Backspace","Tab","Enter","Shift","Ctrl","Alt","Escape","ServerCalls","getControllerMode","username","log","runWithSimplifiedPreviewServer","doGetCourseConfigurationStep","getFirstCourse","then","courseStepResult","doGetTestConfigurationsStep","testsStepResult","doGetItemConfigurationsStep","itemsStepResult","doBuildConfigurationStep","assets","arguments","type","resourcePromises","Promise","resolve","reject","linkTag","createElement","as","rel","size","Math","pow","onload","hadErrors","onerror","head","append","all","getCallingUrlWithoutParams","getCallingUrlWithoutPath","restApiTargets","CONFIGURATION_API","split","substring","lastIndexOf","courseName","getCourse","headerButtons","sessionId","courses","testsToRetrieve","buildArrayWithoutDuplicates","promisesForTests","testName","getTest","axiosAllWrapper","_testsStepResult$cont","contextData","tests","response","flaggedErrors","push","index","isEmptyRetrievedValue","collectedItemNames","filter","reduce","itemNamesArray","items","itemsToRetrieve","promisesForItems","itemName","getItem","_this2","_itemsStepResult$cont","validateJsonResults","success","payload","promisesArray","axios","catch","_toConsumableArray","Set","course","getDataFromServer","typeOfData","nameOfValue","urlPathExtension","addAsParam","instance","get","data","userId","ASSETS_API","TRACE_ENDPOINT","RECORDING_ENDPOINT","create","baseURL","getServerPath","timeout","headers","Content-Type","StandardTaskSequencer","findFirstMatchingTaskInTest","newTestName","newTaskName","withErrorLog","newTest","getTestForName","newTaskEntry","taskCourse","find","theArray","task","item","taskName","getNextTaskInfo","nextTaskAvailable","taskList","getCurrentTaskIndex","getPreviousTaskInfo","previousTaskAvailable","switchCurrentTask","activeTestName","activeItemName","activeTaskName","getCurrentTaskInfo","getConfigurationInfo","result","getIndexForTask","buildTaskList","initialTask","findIndex","entry","testsCourse","taskEntry","Controller","runController","taskPlayer","runPlayer","setHttpTraceTransmission","setHttpRecordingTransmission","showLogin","obtainConfigurationAndRunFirstTask","loginDialogClosedCallback","getJsonsData","processConfigurationAndRunFirstTask","configurationData","digestConfigurationResponse","startFirstTaskInTaskPlayer","sendItemConfigurationToTaskPlayer","setTraceContextId","setRecordingContextId","setUserId","setTaskSequencer","taskSwitchCallback","taskAvailableCallback","setHeaderButtons","_this$taskSequencer$g","taskSequencer","ShowTaskNavigationBars","setMenuCarousels","tasks","activateDebuggingWindows","scoreDebugging","hotKey","traceDebugging","statemachineDebugging","startTask","receivedData","dependenciesUrl","MathJax","prefix","libraryPathsMap","dependencies","dependency","addItem","stopOldTaskAndStartNewTask","stopTask","stopOldTaskLogoutAndShowLogin","logout","clearItems","alert","request","scope","switchTaskNext","switchTaskPrevious","switchFirstMatchingTaskInterTest","missingTaskErrorFeedback","buildCurrentTaskLogString","newTaskInfo","message","isTestSwitch","buildLogString","currentTaskInfo","IndexPathHelper","pageName","pageSegment","withNameInFront","endIndex","segmentIndex","getPageNameFromPageSegment","slice","pathRoot","pageAreaType","pageAreaName","pageSegments","lastPageSlashIndex","firstPageSlashIndex","remainingPath","getLastPageSegmentFromPath","splice","dropPageSegmentFromPath","lastSlashIndex","slashIndex","treePath","childPath","typeKeyIndex","trimmedPath","rootPath","dropAllPageSegments","getPageNameFromPath","appendPageSegmentsToPath","buildPageSegment","replace","PropertyMissingException","PropTypesHelper","propTypesRequirement","props","propName","componentName","PropTypes","checkPropTypes","exception","propTypes","toAdd","componentStateManager","isRequired","componentDirectory","incidentsAccumulator","taskResultsManager","statemachinesManager","presenterStateManager","taskNavigatorStateManager","traceLogBuffer","traceLogUploader","recordingBuffer","recordingUploader","clipboardManager","pageConfigurationsManager","taskManager","number","width","height","string","alignmentHorizontal","oneOf","bold","bool","italic","underlined","default","disabled","oneOfType","visited","selected","text","asOptional","getColorVariantsPropTypes","background","style","radius","color","rotate","transformOrigin","getTransformOriginPropTypes","hidden","label","mouseOver","dynamic","shape","variable","valueMap","displayMode","overlayType","standard","alternate","onFocusIn","onFocusOut","page","pageUrl","conditional","receiver","receiverTab","historyMove","addOn","skipTrace","image","withChildren","positionPropsCheck","font","fontPropsCheck","colorPropsCheck","border","borderPropsCheck","transform","transformPropsCheck","state","statePropsCheck","textPropsCheck","imagePropsCheck","cursor","cursorPropsCheck","eventPropsCheck","classifiers","link","linkPropsCheck","userDefinedId","pageEditId","trace","tracePropsCheck","cbaChildren","selectGroups","arrayOf","blockSelectionChanges","enforceSingleSelect","allowDeselect","initiallySelected","deselectTarget","selectGroupMember","controllerPathId","groupName","selectGroupMemberName","moveable","resizable","cells","expanded","nodes","imagePath","depth","onRowExpandClick","func","onRowSelect","distance","UserDefPathHelper","processor","forEachUserDefIdInPath","dropUserDefIdFromPath","lastId","getLastUserDefIdFromPath","pageAreaNameSlashIndex","pageAreaNameStartIndex","firstIdSlashIndex","firstUserDefId","userDefId","StateAttributeAccess","getStateAttribute","setStateAttribute","componentClassName","selectable","singleSelectStructure","controllerState","highlightable","selectedIds","defaultHighlightColor","editorState","selections","modifiersInEditorState","StateManagerHelper","RecommendationsManager","runtime","setRecommendations","recommendations","oldRecommendations","traceRecommendationChange","taskNavigator","highlightRecommendations","refreshRecommendedComponents","setTaskNavigator","isRecommended","indexPath","getCurrentTestTaskItemNames","absoluteUserDefId","userDefIDPath","PathTranslationHelper","getUserDefPathForIndexPath","processTaskSelected","firstRecommendation","findFirstRecommendationForTask","setSelectedOnRecommendedComponent","doRecommendedPageSwitch","newRecommendations","reportEvent","buildRecommendationListForTrace","recommendation","userDefIdPath","ComponentStateHelper","updateStateAttributeByUserDefPath","extractSelected","setSelected","targetPageSegment","findPageSegmentForUserDefId","targetComponentConfig","findConfigurationForPageSegment","pathState","findOrBuildStateByUserDefPath","defaultLinkReceiver","extractDefaultLinkReceiver","CommonActionsHelper","doPageSwitch","config","RenderingHelper","triggerRenderingViaUserDefPath","AutoLayoutHelper","configProps","orientation","autoLayoutLayer","assign","CommonConfigHelper","buildAbsoluteStyleFromConfig","buildStyleForAutoLayoutPanel","buildStyleForAutoLayoutCell","buildStyleForAutoLayoutElement","raiseError","keywords","keyword","endsWith","join","_configProps$autoLayo","autoLayout","rows","columns","blockAlignVertically","blockAlignHorizontally","gap","display","gridTemplateRows","transformTemplateKeywords","gridTemplateColumns","alignContent","justifyContent","rowGap","row","columnGap","column","_configProps$autoLayo2","columnStart","rowStart","columnSpan","rowSpan","alignVertically","alignHorizontally","gridColumnStart","gridRowStart","gridColumnEnd","gridRowEnd","alignItems","transformFlexAlignmentKeyword","alignment","resultStyle","useElementPosition","positionFromState","right","_configProps$autoLayo3","addVerticalElementValues","addHorizontalElementValues","dragAndDrop","getUserDefinedId","positionString","textFromVariable","getDynamicValueFromStatemachineAndMapper","textFromState","extractTextValue","extraStyle","extractDisabled","extractVisited","imageResource","getProperResourcePath","chooseImageOrColorVariant","imageStyle","float","opacity","React","src","alt","findOrBuildStateForPathId","recommended","recommendationsManager","buildStyleByState","_ref","positionInConfig","positionInState","extractPosition","orientationValue","_defineProperty","_Object$assign","paddingValue","padding","checkPosition","checkFont","checkState","buildStyleForAutoLayout","extractHidden","setStyleAttribute","getCursorValue","setBorderStyleAttributes","setBackgroundStyleAttributes","rotateDegrees","translateX","translateY","fontMappingsArray","css","fontFamilyName","fontFileName","setStyleAttributeWithUnits","pointsArray","accumulated","child","dynamicConfig","variableManager","valueMapper","currentTaskId","getCurrentStatePathRoot","variableValue","getVariable","getMappedValue","propsState","attributes","attributeName","valueOrUndefined","borderProps","north","south","west","east","backgroundImageUrl","imageFromVariable","imageVariant","getRecommendationColor","units","variantsEntry","chosenVariant","pickVariantPropertyFromEntry","isBlockDefaultValue","withDefault","variant","isEmptyObject","resourceFromConfig","getProperResourcePathWithFlag","flag","resourceFolder","getResourcePath","getExternalResourcePath","toLowerCase","aditionalClasses","configClassNames","cssClassNames","getPageSegmentArray","getUserDefIdForPageSegment","buildUserDefIdPath","getPageAreaTypeFromPath","getPageAreaNameFromPath","appendUserDefIdToPath","userDefPath","pathId","appendPageSegmentToPathRoot","textBlockNamePath","pageAreasPath","textBlockName","textBlockOwnerPageSegment","findPageSegmentForTextBlockOwner","componentConfig","TraceLogHelper","calculatorsManager","_taskManager$getCurre","currentStatePathRoot","now","components","buildComponentsSnapshot","presentation","getTaskState","incidents","getAllValuesForTask","getTime","clipboard","getStateForTracing","statemachine","current","states","getCurrentStateMachineLeafStates","history","getHistoryStatemachineData","calculator","getStateForTask","variables","buildVariablesInfoArrayForTask","getAllTasksState","stateType","stateDelta","replayStepMonitor","replayStepId","getCurrentReplayStepId","menuConfig","shouldOpen","entries","clientX","clientY","scrollLeft","scrollTop","currentScrollValue","currentOrientationValue","traceScroll","scrollTraceDetails","buildScrollTraceDetails","traceUserInteraction","incrementReplayStep","dumpScrollTriggeredToTrace","_TraceLogHelper$compu","computeScrollPosition","horizontal","vertical","traceDetails","direction","horizontalScroll","verticalScroll","lastScrollValue","isVerticalOrientation","round","_event$target","target","component","doRegistrations","doDeregistrations","nextProps","_component$props","registerComponent","getObservedStatemachineVariableNames","variableName","addVariableChangeObserver","applyRegisteredActions","deregisterComponent","dropChangeObserverForPath","triggerRenderingViaPath","getIndexPathForUserDefPath","receiverComponent","findComponent","triggerRendering","_component$props2","dumpRenderTriggeredToTrace","setState","previousState","buildCounterState","oldUpdateCount","updateCount","incrementCount","oldCount","line","hash64","str","hval","i","charCodeAt","shortHash","hashFnv32a","actionRegister","hasActionsRegisteredForPath","getRegisteredActionsForPath","action","call","clearRegisteredActionsForPath","fullState","registerStateByPathId","getter","setter","newValue","stateManager","registerStateByUserDefPath","formatSnapshotDump","getTaskSnapshot","componentType","rootInRuntime","filterExistingPathIds","id","getRootFromPath","getComponentTypeForIndexPath","parentIndexPath","parentPrefix","taskData","formatEntryForSnapshotDump","_entry","_slicedToArray","componentState","componentConfiguration","PageHistoryHelper","historyState","getHistoryState","currentCanGoBack","getRelevantPagesState","setHistoryState","currentCanGoForward","isHistoryModeWithTabs","isHistoryModeNoTabs","pagesState","pages","getCurrentPageFromPagesState","isHistoryModeSinglePage","tabName","currentTab","withTabs","noTabs","allTabs","pageInfo","getCurrentPageInfoForTab","currentIndex","getTab","tabConfig","pageImage","historyMode","Modes","withTabsMode","addPageToWithTabsHistory","noTabsMode","addPageToNoTabsHistory","singlePageMode","url","closable","tabWidth","createPagesState","addPageToPagesState","pageIndex","currentPage","pop","tabInfo","getInfoForTab","pageHistory","getFullState","withHistory","getHistoryModeKey","setFullState","BookmarkHelper","pageTab","triggeringType","requestingComponentPath","bookmarkState","getBookmarkState","bookmarks","bookmarkEntries","setBookmarkState","indexToDrop","pageToDrop","initializeBookmarkState","operationType","triggeringIndexPath","ownerIndexPath","tab","triggeringUserDefPath","ownerUserDefPath","triggerType","triggerIndexPath","triggerUserDefIdPath","triggerUserDefId","operation","ownerUserDefIdPath","ownerUserDefId","WebTab","closeTab","isActive","onClick","icon","webTabClass","webTabStyle","title","className","defaultProps","WebToolbarHelper","displayTabs","isInFirstHalf","leftVisibleTab","leftHiddenIndex","leftTab","rightVisibleTab","rightHiddenIndex","rightTab","hiddenTabs","newTab","displayTabsWidth","newWidth","allTabsInfo","totalWidth","accum","reducer","tabDict","isCurrentInFirstHalf","nextTab","getNextTopUpTab","topUpTabs","totalTabsMaxWidth","lowerLimit","upperLimit","scoreArray","indexOfCurrentTab","accumulatedWidth","currentTabScore","tabScore","showMoreButtonWidth","containerMarginWidth","buildTabDictionary","idx","getAllTabsInfo","parentPath","MenuItemTree","_Component","_possibleConstructorReturn","_getPrototypeOf","onMenuHide","dumpContextMenuTriggeredToTrace","contextTrigger","createRef","_inherits","staticMenuConfig","handleContextClick","dynamicMenuConfig","persist","staticConfig","transformDynamicEntries","openMenuItemTree","sendEvent","_this3","itemAttributes","minHeight","MenuItem","handleItemClick","MenuItemTreeIcon","altText","divider","SubMenu","buildEntries","submenu","ContextMenuTrigger","ref","ContextMenu","onHide","nodeName","parentNode","getBoundingClientRect","hideMenu","dynamicEntries","expandDynamicEntry","replacementEntry","transformedCopy","attribute","provider","providerParam","Component","maxHeight","maxWidth","margin","marginRight","WebToolbar","preventDefault","stopPropagation","_this$props","parentWidth","toolbarWidth","getAllTabs","topUpDisplayTabs","switchTab","_this$props2","CbaPageArea","switchHiddenTab","showMoreClickEvent","tabClickEvent","handleShowMoreTabs","_this$props3","buttonBoundingRect","buildTriggerBoundingRect","menuItems","getImageForTab","bottom","contextMenu","openMenuItemTreeWithDynamicConfig","_this$props4","_assertThisInitialized","getTabIconResource","_this$props5","iconForTab","renderTabs","_this$props6","firstTab","_this$props7","showMoreTabs","exceedsMaxTabsWidth","containerWidthWithShowMore","_WebToolbarHelper$bui","buildDisplayTabs","tabContainerRef","TableHelper","e","tablePath","isInEditMode","keyCode","which","arrow","ctrlKey","emitAutoFocusAndPreventDefault","eventEmitter","emit","n","isNaN","componentPath","tableCellPath","dropIndexFromPageSegment","tableUserDefIdPath","currentSelected","getStateAttributeByUserDefPath","extractSelectedCell","oldSelected","extractOldSelectedCell","CbaComboBox","getSelectedIdFromState","foundSelectedId","comboBoxPath","itemConfig","itemPath","appendIndexToPageSegment","itemState","SelectGroupHelper","extractSelectedState","setSelectedIdInState","newSelectedId","comboBoxState","getState","selectGroupControllerState","extractSelectGroupControllerState","delegateSetSelectedToController","comboBoxGroup","onChangeHandler","oldSelectedId","hasVisibleItemCount","oldSelectedItem","newSelectedItem","updateStateAndTriggerRendering","traceUserInteractionPerConfig","buildTraceDetailsAddOn","sendStandardEvent","getDefaultLinkReceiver","onClickHandler","doBasicOnClick","scrollCurrentOptionIntoViewIfVisibleItemCountOne","onContextMenuHandler","doContextMenuOpen","onKeyDownHandler","handleKeyDown","buildTablePath","onFocusHandler","handleCellFocus","onBlur","checkForInvalidItems","isArray","generateOptions","itemsConfig","generateOptionsForSelect","options","focus","comboRef","visibleItemCount","currentlySelectedId","portalMenuContainerElement","querySelectorAll","el","localName","firstChild","portalMenuElement","children","scrollIntoView","onMount","onUnmount","onReceiveProps","_this$props8","wrapperStyle","buildStyleByIndexPath","selectedId","boxShadow","maxHeightSize","customStyles","menu","provided","_objectSpread","marginTop","menuList","backgroundColor","option","isSelected","isFocused","lineHeight","fontSize","fontFamily","whiteSpace","overflow","textOverflow","control","borderColor","borderWidth","borderRadius","borderStyle","container","s","valueContainer","singleValue","textAlign","indicatorsContainer","dropdownIndicator",":hover","indicatorSeparator","onContextMenu","Select","styles","buildTitle","isDisabled","onChange","onKeyDown","onFocus","maxMenuHeight","menuPortalTarget","body","tabIndex","getCssClassNamesValue","data-cba-id","itemsInConfig","itemInConfig","configOnPathSegment","additionalState","setDisabled","setHidden","getItemType","oldSelectedUserDefId","newSelected","newSelectedUserDefId","PropagationHelper","propagationGroups","memberIndexPaths","setPropagationGroupControllerState","controllerIndexPath","appliedAction","getMatchingPropagationGroups","group","applyActionToGroupMembers","controllerUserDefPath","applyToPropagationGroup","updateStateAttribute","fullControllerState","propagationsGroupsState","extractPropagationGroupControllerState","groupConfiguration","memberPathPageSegment","memberIndexPath","controlledPathId","selectGroupMemberInfo","extractSelectGroupMemberInfo","groupState","extractMatchingGroupState","singleSelectActive","currentlySelected","requestedSelectState","controlledPathState","singleSelectWithPageSwitch","overrideNoDeselect","doStandardSelectFlagSetting","selectionChangesBlocked","isSingleSelectControlled","withPageSwitch","handleSelectedChildChanges","doPageSwitchForComponent","selectGroupMemberConfig","getSelectGroupMemberPerConfig","isControlledType","containerPageSegment","setSelectGroupMemberInfo","isComboBoxItem","controlledPageSegment","setSelectGroupControllerState","isComboBox","initiallySelectedIndex","selectedEntry","firstItemPath","setStateAttributeForControllerByUserDefPath","comboItems","selectedItemUdi","childConfig","selectedItemsIndexes","extractSelectedIds","selectedListItems","itemIndex","containerIndexPath","matchingChildrenPaths","containerChildrenArray","childIndexPath","selectionIdentification","getSelectionIdentificationWhenSelected","isSelectGroupMember","matchingGroups","controllerAttributeSetter","setStateAttributeForControllerByIndexPath","controllerSelectGroupsState","oldSingleSelectActive","oldSelectedPageSegment","newSingleSelectActive","applyToMembers","fullMemberState","memberPageSegment","methodToApply","findIndexPathsOfDescendants","memberPath","memberInfo","clickSelectedPathId","controllerPath","newIndexResult","calculateNewSelectedIndex","noChange","newMember","doPageSwitchForSelectedSwitcher","clickedSelectedPageSegment","selectedSwitcherPageSegment","selectedSwitcherPath","selectedSwitcherConfig","PageAreaRenderer","_childAreaStyle","embeddedPageName","hasTabs","tabsBar","scrollableAreaRef","findPage","pagePath","isExcessivePageNesting","childAreaStyle","role","onScroll","traceUserScroll","CbaInterpreter","content","bind","doStandardOnClick","scrollElement","doScrollOnHTMLElement","myPath","getEmbeddedPageName","positionOnlyState","setPosition","initialState","initializeHistoryState","hasStateWithoutPageHistory","currentEmbeddedPage","getPage","safeReceiverTab","getSafeReceiverTabDetails","addPage","updatePageIndicators","updatePageHistoryDependents","embeddingIndexPath","indicator","indicatorPath","indicatorIndexPath","buildIndicatorIndexPath","indicatorState","pageIndicators","pageMatchingIndicators","firstVisibleCandidate","isIndicatorNotHidden","currentPageIndicators","indicatorPathRoot","chosenIndicator","findPreferredIndicator","setSelectedForPossiblyControlledComponent","move","goHome","goForward","goBack","newPageName","canGoForward","canGoBack","forwardSwitchers","backwardSwitchers","locationDisplays","myPathWithoutMyPageSegment","switcher","pageEntry","getPropUndefinedSafe","locationDisplay","setTextValue","currentPageEntry","getEmbeddedPageEntry","addBookmark","dropBookmark","getBookmarks","initialPageName","initialPageUrl","initialTabConfig","initialTab","renderHitMissTable","resultsList","firstActiveMode","classToMemberCount","Map","member","oldEntry","class","set","buildClassMemberCountMap","hasActiveSiblings","weight","resultText","renderClassTableBody","classResultsList","hitMissResultsList","sort","compareClassEntryByName","hitMissName","hitMiss","matchingResult","getResultTextForHitMissByName","comment","renderClassTable","ScoringModalData","scoringDetails","currentModalContent","hitClassFirstActive","classScoringModeHit","missClassFirstActive","classScoringModeMiss","execTime","nbHits","hitWeight","creditClass","reactionTime","nbMisses","missWeight","creditWeight","nbInteractions","hitRows","missRows","hitClassRows","missClassRows","StatemachineModalData","statemachineDetails","visitedStates","raisedEvents","TracingModalData","truncateTraceLog","popEntries","updateTraceLogState","tracingDetails","peekEntries","entryId","timestamp","details","rowIndex","dumpAsStringAndTruncate","fullString","ManageBookmarksData","okButtonClicked","pageAreaIndexPath","testPresenter","toBeDeleted","handleClose","cancelButtonClicked","setBookmarkAsToBeDeleted","bookmark","labelConfiguration","deleteColumnHeader","bookmarkColumnHeader","okButton","cancelButton","toBeDeletedAccess","ModalDialog","centerPosition","innerWidth","innerHeight","isOpen","currentModal","currentModalTitle","closeDialog","Dialog","modal","isResizable","isDraggable","hasCloseIcon","closeOnEscape","onClose","ModalManager","SpecialClickActionsHelper","cut","cutEnabled","copy","copyEnabled","paste","pasteEnabled","cancelTask","pageEventsObserver","handleFullScreen","openFullScreen","documentElement","closeFullScreen","dialog","dialogPresenter","actionParam","doHistoryMoveOnAncestor","historyMoveEnabled","pageAreaPath","getPageAreaPath","receiverPath","dialogContent","openDialog","windowTitle","attachedScale","incrementValue","scaleValueInputPath","buildScaleValueInput","doHistoryMove","actionParamReceiverPath","findPageAreaAncestorPath","requestingComponentPathhWithoutLastPageSegment","MenuBuildHelper","displayComponentContextMenuConfig","transformEntries","displayComponentEntries","transformEntry","displayComponentEntry","transformSeparatorEntry","transformSubmenuEntry","transformActionEntry","transformLinkEntry","transformProvidedEntry","orignal","original","originalEntry","buildActionMethod","isActionDisabled","actionType","nextTask","backTask","startFullscreen","stopFullscreen","close","back","forward","home","manageBookmark","nextTaskEnabled","backTaskEnabled","backEnabled","forwardEnabled","menuEntries","pageLabel","pageAreaTab","switchEmbeddedPage","DialogPresenter","getDialogsFromPresenterStateManager","findPageForPageName","currentTaskPath","filteredDialogs","dialogs","d","visible","checkAndSetFocus","_page$content$config$","pageWidth","pageHeight","focused","handleFocusAndDrag","getCurrentDialogPosition","updatePositionAndFocusDialog","transformValue","ReactDOM","findDOMNode","refs","buildDialogRefKey","getElementsByClassName","match","buildDialogs","isModal","_page$content$config$2","dialogPath","buildDialogIndexPath","hideDialog","taskPath","currentPageAreaType","isDialogParentInPath","currentPageAreaName","traceValues","stopEventPropagation","signalFocusChangeToClipboardManager","registerFocus","values","browserEvent","traceUserInteractionPerTraceConfig","traceConfig","extendedValues","extendTraceDetailsObject","eventType","continuingInteractionKey","buildTraceLogDetails","userInteraction","xPath","isXPageFirst","lastOrientationValue","throttleTraceScrollFunction","throttle","traceScrollWrap","leading","tracePath","getScrollDataFromEvent","isScrollOnPane1","computeScrollOrientation","addMouseEventDetails","detailsObject","valuesToAdd","browserSideEvent","pageX","pageY","screenX","screenY","selectedState","sendAlternateEvent","triggerEvent","defaultReceiver","targetReceiver","buildTargetReceiver","targetPage","conditionalLink","closeParentDialogFromPath","switchPage","targetPageConfig","buildMenuTreeItemConfiguration","readOnly","cutCallback","cutCallbackObj","selectionStart","selectionEnd","selectedText","deregisterSelection","registerSelection","drop","pathOfLinkRequestor","linkTargetsOtherPageArea","PositionCalculationHelper","targetModifier","configBlocks","blockKeyToIndexMap","configContentModifiers","contentModifiersInEditorState","contentModifierParentPath","actualPositionOffset","calculateCurrentPositionOffset","modifierPosition","actualBlockKey","calculateBlockKey","blockKey","blockOffset","offset","characterOffset","startBlockKey","offsetCounter","contentState","getCurrentContent","movedBlockKey","getKeyAfter","targetModifierBlockKey","blockShiftingModifiers","modifier","stateInEditorState","getModifierStateInEditorState","isEvaluatedInject","injectText","active","inBlock","beforePosition","hasMoreThanOneBlock","total","currentBlockShifter","blocks","lastBlockShifterInSameBlock","getLastModifierPerOffset","characterSwitchersStartOffset","characterSwitchersStartIndex","characterOffsetStartValue","getLastBlockOfFragment","afterPositionInSameBlock","isDynamicFragment","injectedText","candidateModifier","compareModifier","candidatePosition","comparePosition","candidateBlockIndex","compareBlockIndex","compareBlockKey","compareOffset","compareIndex","dynamicFragment","candidateModifiers","isGreaterPositionOffset","contentModifierIndex","fromState","EditorStateHelper","startOffset","endBlockKey","endOffset","toBeInserted","EditorState","Modifier","replaceText","buildDraftSelectionState","rawBlocksArrayToInsert","entityMapToInsert","rawValue","entityMap","blockMap","convertFromRaw","getBlockMap","replaceWithFragment","removeRange","styleNames","modifiedEditorState","targetSelection","styleName","applyInlineStyle","entityNames","entityName","applyEntity","forceSelection","selection","startKey","endKey","highlightKey","newEditorState","RichUtils","toggleInlineStyle","SelectionState","createEmpty","merge","anchorKey","anchorOffset","focusKey","focusOffset","DraftLink","_React$Component","getData","buildMyPath","getEntity","entityKey","linkReceiver","fullRichTextPath","getStateAttributeByPathId","getOrBuildState","persistState","currentTarget","contentEditable","buildStyle","onMouseDown","handleMouseDown","notVisited","findLinkEntities","contentBlock","callback","findEntityRanges","character","getType","Audio","kind","controls","Image","Video","Media","media","entity","block","getEntityAt","_entity$getData","relativePathSrc","DraftBullet","getStyle","getBullet","rawSymbol","bullet","_rawSymbol$split","fromCharCode","suppressContentEditableWarning","findBulletEntities","MathJaxTranspiler","apply","interval","setInterval","prevState","update","clearInterval","setTimeout","tex","texReset","tex2chtml","startup","clear","updateDocument","dangerouslySetInnerHTML","__html","innerHTML","MathJaxEntity","_getPrototypeOf2","_len","args","_key","getPropertyData","property","findMathJaxEntities","CbaRichTextField","editor","onParentClick","checkSelectable","fromSecond","toSecond","buildOldSelectedTraceLogValueObject","toggleType","doPageSwitchOrLetTheContainerDoIt","sendStandardOrAlternateEvent","debouncedDoHighlightActions","debounce","doHighlightActions","oldEditorState","extractEditorState","oldSelections","extractSelections","highlightActive","extractHighlightable","blockKeysList","SelectionHelper","getListOfBlockKeysInBlockOrder","hasContentChanges","contentStateEqual","saveEditorStateInPathState","blur","isSelection","lastUserEvent","clickedSelection","getSelectionHitByClick","getSelection","removeClickedSelection","currentHighlightKey","getHighlightColorKey","processHighlightClick","moveFocusToEnd","removeSelectionFromSelectionsArray","saveSelectionsInPathState","triggerHighlightEvent","currentEditorState","currentSelection","toggleOffOperationsList","oldSelection","getIntersect","buildSelection","toggleEditorStateStyleOnSelection","calculateSelectionsArray","highlightChangeEvent","saveModifiersStateInPathState","setModifiersInEditorState","setEditorState","calculateTextValue","newSelections","traceHighlightChange","setSelections","myBlockStyleFn","mediaBlockRenderer","editable","getStylesMap","highlightColors","getTopLevelConfiguration","originalStylesMap","findStylesMapInConfig","highlightStyleMap","rgbaColor","convertHighlightValueToKey","getHighlightColor","itemHighlightColor","stylesMap","HIGHLIGHT","currentColor","currentColorKey","generateSelectionStyle","isHighlightActive","highlightColor","wrapperId","selectionColor","isTouchDevice","_this$props9","editorComponent","forEachContentModifier","modifierPath","addListener","onRemoveLastSelection","onCurrentTimeUpdate","onClearFlashTexts","_this$props10","_this$props11","oldConfig","oldPath","newConfig","newPath","currentTime","_this$props12","registerState","finalEditorState","isRemoveSelection","_this$props13","setVisited","_this$props14","getValidCssIdFromPath","styleMap","extractModifiersInEditorState","_CbaRichTextField$app","applyContentModifiers","_CbaRichTextField$app2","newModifiersInEditorState","customDecorators","strategy","addLinkIndex","onTouchStart","Editor","blockStyleFn","blockRendererFn","blockRenderMap","DefaultDraftBlockRenderMap","handleBeforeInput","handlePastedText","keyBindingFn","customStyleMap","decorators","plugins","setDeepCopy","setComponentClassName","buildInitialEditorState","setHighlightable","highlightText","createWithContent","richTextFieldPageSegment","insertLinkConfigurationsFromEntityMap","contentModifiers","resultArray","extractDefaultHighlightColor","rgba","convertedValue","toSnapshotForEditorState","_entry2","fromSnapshotForEditorState","convertToRaw","editorPath","propsConfig","getBlockKeysToBlockIndexMap","modifierInConfig","modifierParentPath","modifierState","buildNonActiveModifierInEditorState","newModifierInEditorState","actualPosition","calculateActualPosition","modifierInEditorState","_CbaRichTextField$app3","applyEvaluatedInjectModifier","_CbaRichTextField$app4","_CbaRichTextField$app5","applyDynamicFragmentModifier","_CbaRichTextField$app6","contentModifierType","modifierConfig","currentInjectText","TermEvaluator","evaluateTerm","insertString","oldInjectText","replaceTextInBlock","applyInlineStyles","inlineStyles","applyEntities","entities","replaceWithBlocks","numberInjectedBlocks","removeBlocks","doForEach","addContentModifierIndex","getPlainText","oldSelectionsRaw","newSelectionsRaw","TransformSelectionsToTraceSelectionsDTO","getStartKey","getEndKey","getStartOffset","getEndOffset","selection1","selection2","editorContent","rawContent","builtSelection","startKeyIndex","isIntersect","selection1StartKeyIndex","selection2StartKeyIndex","selection1EndKeyIndex","selection2EndKeyIndex","isSameRowEnd","isS1StartSameRowAsS2End","isS1EndSameRowAsS2Start","isSel1StartToLeftOfSel2","isSel1EndToLeftOfSel2","isSel1StartToRightOfSel2","isSel1EndToRightOfSel2","selectionsArray","toRemove","click","keyRowOrder","clickedPosition","rowKey","pos","filteredSelections","isMultipleRow","isSelectionHitByClickOnMultipleRows","isSelectionHitByClickInsideOneRow","isSelectionHitByClickOnOneCharacter","filterConditions","getFocusKey","emptySelection","getIsBackward","keyToIndexMap","traceSelectionsDTO","convertHighlightKeyToValue","blockTextLengths","selectionsMergedStepByStep","currentSelectionIndex","nextSelection","isSelectionToEndOfBlock","isNextSelectionFromStart","newMergedSelection","isTopRowClick","isBottomRowClick","isMiddleRowClick","startIndex","oldContentRaw","newContentRaw","calculateSelectionsArrayFromContentState","highlightSelections","rawSelections","blockIndex","inlineStyleRanges","inlineStyle","mergeRowSelections","TextBlockSelectHelper","richTextPathState","richTextConfig","draftBlocks","buildBlockKeyToIndexMap","currentSelections","getSpansFromSelections","spanArrayContainsNonBlank","blockName","partial","textBlocks","getIdentifyingInfoForLogMessage","blockConfig","findBlockConfigForBlockName","spans","span","selectionsCoverANonBlankInSpan","every","selectionsCoverNonBlanksInSpan","allBlocksConfig","editorSelection","getSpanFromSelection","start","end","spanToCover","selectionCoversANonBlankInSpan","overlap","getOverlap","spanContainsNonBlank","uncoveredAreas","calculateUncoveredAreas","calculateUncoveredAreasBySingleSelection","spansToCover","areaIndex","hitFound","punchTarget","remainingAreas","punch","replaceEntryByArray","arrayToModify","indexToReplace","arrayToBeInserted","spanArray","spanIndex","nonBlankFound","endKeyIndex","stringContainsNonBlank","keyIndex","punchSpan","targetSpan","leftPunchBorder","max","rightPunchBorder","min","isLessOrEqual","isLess","isGreater","oneSpan","anotherSpan","leftOverlapBorder","rightOverlapBorder","one","another","leftBorder","rightBorder","isEqual","isLessBlockKey","leftKey","rightKey","InputComponent","validationPattern","traceType","oldText","newText","validationFailEvent","sourceInputPath","newTextIsValid","isValidText","newTextValue","oldTextValue","origin","invalidTextValue","isVariableValueInput","blockedDynamicUpdateText","setVariable","processSelectedTextForCutAndPaste","updateTextValue","registerAsInsertPosition","currentText","currentTextValue","isOldSelected","cellTraceDetails","tableUserDefId","cellPath","_component$props3","doStandardOnBlur","doStandardOnFocus","_component$props4","registerInsertPosition","contentToInsert","startPosition","endPosition","replacementText","_component$props5","CbaSingleLineInputField","inputRef","onKeyPressOnInput","isSpreadsheet","onContentUpdate","receivedRow","receivedColumn","textValue","isFormula","cellPathState","cellValue","buildDisplayText","onSelect","onSelectionHandler","onBlurHandler","onKeyPress","onCut","onCutCopyPaste","onCopy","onPaste","spellCheck","CbaTableCell","initializeSpreadsheet","isReadOnly","registerEventListeners","hadFocus","extractCellHadFocus","getPagePath","focusRegister","onCellFocused","setCellHadFocus","updateStateAndTriggerRender","keepHover","buildTableIndexPath","tableState","extractSelectable","isMultiSelectEnabled","keepSelection","selectionValue","onSelectionChange","oldValue","buildLabel","isInt","isFloat","numberOfDecimalPlaces","toFixed","defaultNumberOfDecimalPlaces","extractCellHasError","errorMessage","extractCellTitle","hasStandardTooltip","address","buildTableCell","tableCell","onDoubleClick","onDoubleClickCaptureHandler","onMouseEnter","onMouseLeave","imageReference","cellConfig","comboboxCopy","createCellCopy","setCellType","inputCopy","delegates","childCopy","parentTableUserDefId","boxSizing","hasHover","onRowHeaderUpdate","onColumnHeaderUpdate","onCellMouseEnter","onCellMouseLeave","onUpdateValue","onAutoFocus","selectedCell","isNotValidFormula","formula","isInitialization","oldFormula","extractFormula","setCellHasError","setCellTitle","setFormula","traceCellModified","rowToFocus","columnToFocus","oldEvaluatedValue","newEvaluatedValue","errorInFormula","currentCellType","extractCellType","cellType","oldCellType","oldErrorState","cell","cellCopy","selector","cellState","CbaTreeHeader","headerRef","useRef","_useDrop","useDrop","accept","TreeUtils","handleColumnMove","canDrop","collect","monitor","dragIsOver","isOver","dragCanDrop","_useDrop2","collectedPropsDrop","_useDrag","useDrag","canDrag","drag","DragAndDropHelper","addCanDropStyleAttributes","TreeTraceHelper","columnId","sortDirection","columnName","columnIndex","getTreeDataByPath","treeColumns","getSortDirectionForTrace","rowData","triggeredEvent","isTreeView","treeViewPath","nodeType","nodePathId","nodeTypes","getNodeName","deleteEvent","getNodeType","isTriggeredEventRequired","TreeContextMenuHelper","columnKey","buildContextMenuEntries","actionEntry","buildContextMenuAction","doTreeCut","doTreeCopy","doTreePaste","handlePasteDisabled","doTreeDelete","startRenameOperation","doTreeNew","contextMenuCommands","command","buildContextMenuActionEntry","actionHandler","nodePath","traceNodeAction","nodeTypeName","_TreeUtils$getTreeDat","treeState","copiedNode","currentlyCutNodePath","childTypes","cutNodes","flattenNodes","CbaTreeCell","handleContextMenuClick","updateOnSingleClick","openContextMenu","handleRenameCell","isRenameState","cellEditedValue","getInitialState","treeInstance","extractTreeState","currentRenameNode","setTreeState","handleCellInputFocus","select","handleCellInputBlur","doTreeRename","handleCellInputKeyDown","handleCellInputChange","getCellData","cellData","updateOnClick","_this$state","isLeaf","rowPath","hasSubRows","rowStartStyle","paddingLeft","rowImageStyle","backgroundImage","cellOuterStyle","cellStyle","buildTreeCellStyle","buildCellPath","CbaTreeRow","firstHover","currentNode","selectedClass","cutClass","reactGridClass","rowStyle","c","nodeTypeInstance","treeAction","getTreeDragDropAction","hoverCount","rowRef","ct","hover","deltaTime","doTreeCopyAction","doTreeMoveAction","canNodeTypeDrop","canNodeTypeDrag","begin","CbaTreeRowWrapper","_PureComponent","PureComponent","rootNodes","treeSettings","resetPathsToNodes","parseNodes","node","buildColumnId","isNodeExpandedAtInit","startCollapsed","const","DEFAULT_COLUMN","modifiedColumns","order","displayDroppedColumn","draggedColumnId","getTreePathFromColumnPath","parentInstance","parentPathState","parentTreeState","draggedColumn","droppedColumn","isDraggedToStart","emitTreeEvent","sortable","headerRenderer","sortAscendingByParameter","isDefault","hideLeaves","flatmap","sortAscendingByIndexHierarchy","extractTreeChildPathFromTreePath","treeNodes","filterLeaves","selectedNodePath","allNodes","isRoot","selectedNode","getNode","getParentNode","sortCellFinderFunction","param","sortDescendingByParameter","shouldContinue","treeStartCollapsed","cellInitSettings","contentPage","generateNodePathId","tooltip","searchedNodePath","foundNode","isPrimary","root","fontWeight","fontStyle","textDecoration","setTreeDataByPath","getTreeEventChangeName","getTreeFlatNodesFromUserDefIdPath","_TreeUtils$getTreeDat2","currentNodePath","nodePathIds","columnValues","targetNode","treeActionCurrentNode","_TreeUtils$getTreeDat3","targetNodeInstance","fromPath","toPath","shouldNotClearCut","_TreeUtils$getTreeDat4","collapseNode","_TreeUtils$getTreeDat5","_treeState","_TreeUtils$getTreeDat6","copiedNodeChild","copiedNodeParent","generateNodePathIdChild","isPasted","treeData","deletedNode","deleteEventNodeType","currentParsedNode","deletedNodes","selectedNodeInDeletedNodes","cutNodeInDeleteNodes","_TreeUtils$getTreeDat8","newTreeType","_TreeUtils$getTreeDat9","newNodeType","newNode","createNodeFromNodeType","primaryColumn","mockRowData","selectNodeAction","COLUMN_HEIGHT","ROW_HEIGHT","columnPath","compareLocator","node1","node2","comparator1","comparator2","comparison","path1","path2","indexArray1","indexArray2","commonDepth","checkedDepth","number1","number2","innerNode","canTreeDoIt","dragSource","canNodeTypeDoIt","dropTarget","getTreeInstanceFromChildComponent","treePathId","getTreePathFromChildComponent","getTreeFromUserDefIdPath","extractTreeNodes","extractTreeColumns","extractNodeTypes","treeReadOnly","extractTreeReadOnly","setTreeNodes","setTreeColumns","setNodeTypes","FORMATS","DE","decimal","grouping","EN","CbaTreeChildArea","handleTreeChange","subscription","remove","emptyStyle","MediaPreview","stream","pauseRecording","resumeRecording","shouldPause","mediaRef","useEffect","srcObject","pause","onPause","onPlay","autoPlay","OPERATION_PLAY","OPERATION_PAUSE","OPERATION_STOP","OPERATION_ENDED","CbaMedia","onClickCapture","onPlayHandler","isTaskPlayerPausePlay","saveInStateLastOperation","traceMedia","isStatemachineTriggered","startEvent","onPauseHandler","player","getMediaPlayer","duration","isPauseHandled","pauseEvent","onStopHandler","extractLastOperation","stopEvent","onEndedHandler","increasePlayNumberAndCheckMaxPlay","endEvent","handleTaskPauseOrResume","enterPause","lastOperation","shouldPlayOnResume","play","onVolumeChange","setMediaVolume","volume","onTimeUpdate","newTime","extractCurrentTime","setCurrentTime","endRecording","mediaBlob","recordNumber","extractRecordNumber","setMediaBlob","taskInfo","userDefinedIDPath","reportRecording","startRecordingTime","isRecording","debouncedEndRecording","shouldSendStartRecordingEvent","setVolumeFromState","dropVariableChangeObserver","recording","maxRecord","extractMaxRecord","moment","format","setRecordNumber","stopRecording","setLastOperation","extractMediaVolume","newVolume","convertToMediaRefVolume","maxPlay","extractMaxPlay","currentPlayNumber","extractPlayNumber","setPlayNumber","setHideControls","automaticStart","extractAutomaticStart","hideControls","extractHideControls","modifiedTraceConfig","currentPlayNo","volumeLevel","computeVolumeInPercentage","mediaStyle","ReactMediaRecorder","audio","video","render","status","startRecording","mediaBlobUrl","previewStream","stopRecordingEvent","pauseRecordingEvent","startRecordingEvent","muted","extractMediaBlob","srcFromVariable","mediaReference","altSrc","mediaAlternateRef","extSrc","mediaReferenceExternal","altExtSrc","mediaAlternateRefExternal","poster","someResourceToPlay","createMediaRecorder","controlsList","onEnded","disablePictureInPicture","useAudio","playNumber","delegateComponent","delegatePath","contextSlots","mainEntry","valueIndex","paramsArray","previous","if","else","activeBranch","b","currentMaximumValue","currentMaximumName","candidateName","candidateValue","pattern","floor","ceil","trunc","expression","valuesArray","exp","regexp","cond","candidates","pageType","getCurrentPageNames","standardPage","xPage","pageAreaConfig","trimRootAndPageAreaFromPath","receiverTabInfo","receiverTabName","receiverTabImage","presenter","saveCurrentTaskResults","switchFirstMatchingTaskIntraTest","nbUserInteractions","nbUserInteractionsTotal","firstReactionTime","firstReactionTimeTotal","taskExecutionTime","taskExecutionTimeTotal","findComponentByAbsoluteUserDefId","registerAction","applySimpleSetter","getFormulaOrValue","caluculateTextInsert","insertPosition","dropLength","insertedValue","insertText","pathParameter","absolutePath","blockOwnerPathId","getIndexPathForTextBlockPath","richTextPageSegment","isTextBlockSelected","isSelectionContainsNonBlank","roundingMode","valueAsText","parsedValue","integerValueFromString","valueAsString","parseResult","parseDecimalString","whole","wholeValue","fractionClass","wholeUp","dotIndex","wholeString","fractionString","fractionValue","fractionCompareString","stop","logMessage","setAutomaticStart","setMaxPlay","isSender","isReceiver","modeToSet","extractDragAndDrop","setDragAndDrop","setSingleSelectActiveForController","setAllowDeselectForController","setSelectable","setSelectionChangesBlockedForController","currentTaskName","termIdentifiedByName","calculationsConfigurationManager","findCalculationByTaskName","calculationName","useExistingCalculationResults","existingResult","getResult","evaluateNamedCalculation","getStatePathRootForTask","_variableManager$getV","oldValueLeft","oldTypeLeft","_variableManager$getV2","oldValueRight","oldTypeRight","getComboboxSelectedItem","getListSelectedItems","getCurrentNodePathId","getNonSelectGroupSelectedChildren","getSelectGroupSelectedChildren","getSelected","timerEvent","remainingTimeInMillis","getTimerData","remainingTime","setPostponedTaskSwitch","switchCall","deferred","eventName","setTimedEventInterval","setStatePageAssignment","getTotalNbOfRaisedEvents","getRaisedEvents","getVisitedStates","getRaisedEventsInState","getValuesOfVariable","traceTextInternal","dumpSnapshotToTrace","operator","calcGetMem","calcOp","calcOpnd","scale","displayWidth","withThousandSeparator","includeOperandInHistory","angle","getValueFormatForCalculator","calcSettings","topLevelConfiguration","saveTaskState","findByComponentType","richTextComponent","highlightColorChanged","xPosition","yPosition","xPositionType","yPositionType","componentInstance","isXPage","currentPages","containerRef","CbaContainer","containerRendererRef","minDistance","maxDistance","anchorPointType","groupMembers","checkNonMembers","getIndexPathsForUserDefIds","checkChildhood","_TermEvaluator$getCom","getComparePointSets","memberComparePoints","nonMemberComparePoints","checkLocalGroup","minX","maxX","minY","maxY","rangeMembers","_TermEvaluator$getCom2","checkInRange","pageToLookFor","findIndexPathsInCurrentTaskOfComponentWithType","pageFrameInstance","targetWindow","getFrameWindow","getFrameContentUrl","postMessage","Error","term","topLogName","evaluateTermInternal","logContext","typeOfTerm","logCalculation","isTermComplete","operatorName","operatorFunction","operators","evaluatedParams","ifThenElse","ifParamIndex","evaluationResult","evaluateParam","chosenBranch","chosenBranchIndex","ifGuard","branchesIndex","branchesArray","branchInfo","branchIndex","guard","branch","resultValue","index2","parameterValue","ValueFormatter","membersNotKeepingDistance","keepsDistanceToGroup","nonMembersKeepingDistance","excludeIndex","groupMember","keepDistance","pointA","pointB","xDelta","yDelta","sqrt","membersNotInRange","filterInRange","nonMembersInRange","filterOutOfRange","points","point","candidatePath","classifier","nonMemberIndexPaths","getIndexPathsForChildrenWithClassifier","getComparePointsForIndexPaths","userDefIdPaths","indexPaths","getComparePointForIndexPath","getComparePoint","positionFromConfig","getVisitedPathIds","regularExpressions","matchedNodes","getNodePathIds","matches","matchedNodesByPatternId","matchNodes","nodeToColumnValuesMap","getColumnValuesMap","shift","columnsMatch","treeCopyCurrentNode","treeMoveCurrentNode","contextValue","and","or","not","equal","notEqual","greater","greaterEqual","less","lessEqual","maxNamed","arrayLength","union","intersection","add","subtract","multiply","divide","modulo","stringFormat","concatenate","boolToString","numberToString","contains","getCurrentTest","getCurrentTask","getCurrentItem","getCurrentPage","getEmbeddedPage","saveTaskResults","previousTask","switchTaskInTest","switchTaskAndTest","recommend","getDisabled","getHidden","getVisited","getTextValue","isSelectedComponentOrTextBlock","isHighlighted","getIntegerValue","setMediaPlayerVolume","setMediaPlayer","initMediaPlayer","setDragAndDropMode","setSingleSelectMode","setAllowDeselect","setSelectChangeBlockMode","getCalculationResult","switchVariables","getImplicitVariable","raiseEvent","postponeTaskSwitch","setStatemachineAssignedPage","getNbStatemachineEventsRaised","getCurrentLeafStates","getRaisedStatemachineEvents","getStatemachineVariableValues","traceText","traceSnapshot","getVisitedNodes","matchNodesWithColumns","treeMove","treeCopy","scrollEmbeddedPage","scrollTopLevelPage","currentTimestamp","consoleLog","setGlobalPropertyHighlightColor","containerMembersFormLocalGroup","containerRangeContainsMembers","isInBookmarksList","callExternalPageFrame","patterns","hasMatch","DndItemTypes","VALUE_DISPLAY","itemType","previewData","senderConfig","getDragAndDrop","sender","statemachineEvent","dragAndDropData","senderData","getInitialClientOffset","triggerStatemachineEvent","isDragAndDropSender","idDragging","isDragging","dropsOfMyChildrenOnly","transferredData","receiverConfig","actionTerms","getClientOffset","lastEvaluationResult","evaluateActionTerms","relocateIfNecessary","logAction","senderIndexPath","isDragAndDropReceiver","shallow","dragAndDropInConfig","translationX","translationY","app","scaleValue","receiverUserDefIdPath","senderUserDefIdPath","senderUserDefId","receiverIndexPath","receiverUserDefId","sendingType","receivingType","ContainerRenderer","forwardRef","_DragAndDropHelper$ad","addDrop","_DragAndDropHelper$ad2","dropCollectedProps","extendedStyle","containerStyle","CbaRectangle","lineOnClickHandler","containerOnClickHandler","blockEvents","lineWidth","lineWidthString","baseLineStyle","northStyle","eastStyle","southStyle","westStyle","buildLineDiv","SimpleTextFieldRenderer","addDrag","dragCollectedProps","preview","getEmptyImage","captureDraggingState","_DragAndDropHelper$ad3","_DragAndDropHelper$ad4","addIsDraggingStyleAttributes","renderAsDiv","CbaSimpleTextField","onInputFieldUpdate","suppressSelections","textInputReferencePath","additionalCssClass","filteredPaths","CbaButton","selectedImage","pressed","onMouseUp","getBackgroundImage","isClipboardManagerAction","selectionHandlerType","subtype","selectionHandlerParam","increment","switchTaskIntraItem","switchTaskInterTest","getCurrentTaskResults","incrementScale","addFlexTextAlignmentToStyles","styleObject","flexAlignment","buildStyleForMask","buttonStyle","pressedState","highlight","positonInConfig","displayText","extractMultilineText","backgroundImageStateResult","Fragment","getImageTag","CbaRadioButton","rawText","textWrap","controlIconSize","isPositionLeft","textWrapStyle","marginLeft","inputStyle","labelPositionDelta","textStyle","hasImage","paddingRight","forKey","shortid","generate","htmlFor","checked","CbaCheckbox","CbaLink","CbaPolygon","renderingSelectedState","polygonStyle","buildStyleSvg","pointsString","buildPointsString","bendPoints","CbaRegionMap","regions","CbaInnerHtml","sanitizeHtml","innerHtml","CbaExternalPageFrame","saveIframeState","iframeWindow","iframeRef","contentWindow","stateToSave","setExternalContentState","reactionMessage","isPermissionDeniedException","restoreIframeState","savedState","extractExternalContentState","currentSaveTimer","clearTimeout","processSaveTimeout","isSaving","userDefIdPathMessage","getProperResourcePathExternalResources","pageAddress","URL","iframeInstance","childDocument","contentDocument","childWindow","querySelector","uniqueTitle","iframeUrl","buildIframeUrl","setVolatile","stateToRestore","callCount","configPageAddress","postMessageReceiver","registerAcceptableUrlForExternalPageFrameEvent","urlContainsParametersAlready","CbaTree","expandOnly","oldExpandedValue","addRowReferences","hideColumns","isDefaultColumn","displayNodes","getTreeDisplayNodes","displayTreeColumns","getDisplayColumns","ReactDataGrid","headerRowHeight","rowHeight","rowGetter","rowsCount","rowRenderer","onColumnResize","handleColumnResize","initTreeNodes","initTreeColumns","initTreeState","setTreeReadOnly","CbaTreeView","handleGridSort","setTreeViewSort","traceSort","extractTreeViewSort","treeViewState","getTreeViewDisplayNodes","displayColumns","hideColumnsHeader","onGridSort","sortColumn","buildErrorResult","evaluateCell","cellsTable","maxCellCoordinates","cellToEvaluate","evaluatedCellsList","dataCellCoordinates","col","cellContent","extendedCellsList","parser","Parser","on","referredCoordinates","done","recursiveResult","startCellCoordinates","endCellCoordinates","resultRows","resultRow","setFunction","sumUpNestedValues","CbaTable","tableData","extractTableData","_this$executeFormulaI","executeFormulaInternal","cellToUpdate","valueToUpdate","formulaToShow","errorMessageToShow","notifyShowAddress","notifyShowContent","notifyUpdateCellValue","_this$handleHeaderSel","handleHeaderSelection","setOldSelectedCell","notifyRemoveLastSelection","setSelectedCell","runAllAvailableFormulas","onRemoveOldSelection","removeAllListeners","isAnUpdate","executeFormulaAndNotifyOthers","setTableData","j","_this$executeFormulaI2","dataTable","_this$executeFormulaI3","res","hasError","buildResultString","buildErrorMessage","divByZeroError","naNError","syntaxError","circularError","notifyRowHeaderUpdate","notifyColumnHeaderUpdate","currentColumn","newColumn","currentRow","newRow","buildInitialData","Infinity","CbaTableCellEditor","updateContent","onAddressUpdate","setCellEditorAddress","isNotValid","buildAttachedTableIndexPath","setCellEditorIsNotValid","setCellEditorErrorMessage","setCellEditorContentIsReadOnly","setCellEditorContent","cellEditorPathWithoutLastPageSegment","attachedTable","adressTitle","contentTitle","extractCellEditorAddress","extractCellEditorContent","extractCellEditorContentIsReadOnly","addressWidth","cellAddressRelWidth","contentWidth","addressrStyle","contentStyle","isError","extractCellEditorIsNotValid","extractCellEditorErrorMessage","errorStyle","CbaCalculatorHistory","simpleTextFieldPath","getSimpleTextFieldPath","simpleTextFieldState","simpleTextFieldConfig","myState","CbaCalculatorInput","keydown","keypress","clipboardData","catchKeyboardInputEvents","keyboardShortcutsRegistered","addEventListener","removeEventListener","_CbaCalculatorInput$c","createDelegateComponent","CbaInputField","CbaStopWatch","counterValue","setCounterValueToState","setCounterValue","reinitialiseState","rawInitialCounterValue","extractCounterValue","initialCounterValue","hours","minutes","seconds","startTimer","formatTime","timer","CbaScaleValueInput","onChangeCompleteHandler","validateValue","pageIncrement","minValue","maxValue","onIncrementScale","incrementedValue","numberValue","scaleValueInput","stepIncrement","thumbSize","isHorizontal","Slider","step","onChangeComplete","CbaSpinnerValueInput","onChangeHandlerDebounced","onInvalidHandler","valueAsNumber","onInputHandler","inputValue","NumericInput","wrap","input","onInvalid","onInput","ROW","COLUMN_REVERSE","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","CbaTimer","timerAnimation","runForward","timerData","computeTimerPercentage","setTimerType","verticalOrientation","timerType","computeTimerType","computeTimerValue","time","miliseconds","totalTime","isRunning","showSecondsLabel","timerStyleDirection","animationStyle","timerParsedValue","ListItem","itemHeight","parentTabIndex","CbaList","getDisabledFromState","getSelectedIdsFromState","isCtrlKeyEvent","setSelectedIds","listPath","mapIndex","Delegate","getComponentClass","componentTypeName","CbaTestPresenter","modalType","isDialogOpen","isPaused","resume","generateTaskStyles","cssStyles","_noDividerStyle","_areaStyle","taskId","taskCssStyles","itemWidth","totalHeight","foundPage","isRighToLeft","standardPath","buildPathForPage","withEditContextMenu","itemLayout","isHorizontalDivider","xAreaSize","getXAreaSize","dividerOffset","calculateDividerOffset","dividerThickness","getDividerWidth","isDividerMovable","isDividerHidden","standardPageOrientation","getRtlOrientation","xPageOrientation","pagesAreaDir","getRtlDir","standardPageDir","noDividerStyle","wrapStyle","dividerStyle","getDividerColor","MozBoxSizing","WebkitBoxSizing","MozBackgroundClip","WebkitBackgroundClip","backgroundClip","transition","areaWrapStyle","areaStyle","keyMap","openConfigParams","print","keyHandlers","printCbaVersion","debugScoreHotKey","debugTraceHotKey","debugStatemachineHotKey","openTrace","openScoring","getScoring","openStateMachine","currentStatemachineData","currentVariableData","nullSafeStatemachineData","customFontsCss","buildCustomFontsCss","getCustomFontMappings","HotKeys","handlers","dir","isRightToLeftPage","SplitPane","pane1Style","pane2Style","resizerStyle","minSize","maxSize","defaultSize","allowResize","firstAreaDir","secondAreaDir","isRightToLeft","defaultWidth","getPagePosition","defaultHeight","getDividerConfig","xSize","xPlacement","getXPlacement","HeaderButtons","handleClick","button","oldState","renderHelper","getLargestHeightFromButtons","buttons","largestHeight","isButtonInvalid","buttonConfig","invalid","buildButtons","barWidth","buttonTotalWidth","buttonWrapStyle","backgroundSize","backgroundPosition","backgroundRepeat","buttonPadding","isNonEmptyArray","TopButtonToolbar","buildSlides","buttonArray","Slide","buildCarouselConfig","buttonHeight","widthRatio","getButtonPadding","buttonWidth","carouselWidth","navButtonsWidth","carouselHeight","slideWidth","slideHeight","leftArrow","rightArrow","carouselWrapStyle","marginBottom","getCarouselMarginBottom","carouselStyle","slides","visibleSlides","arrows","computeCurrentSlideCenter","activeSlide","middlePoint","computeCurrentSlideNotCenter","carousel","carouselStore","getStoreState","currentSlide","buildCurrentSlide","carouselConfig","isCenter","buttonRatio","activateCenterToolbarOnChange","CarouselProvider","naturalSlideWidth","naturalSlideHeight","totalSlides","ButtonBack","ButtonNext","getCarouselHeight","TaskNavigator","verifiedRecommendations","buildTestButton","matchingRecommendation","findFirstRecommendationForTest","targetTaskInfo","selectDefaultTaskForTest","testButtonHeight","currentTest","buttonClickHandler","traceNavigation","navigateToTest","buildButtonStyle","buildButtonClassName","findFirstTaskWithNameForTest","testState","getTestState","defaultTask","findDefaultTaskForTest","buildTestNavigation","buildTaskButton","taskButtonHeight","currentItem","currentTask","navigateToTask","buildTopLayerStyle","assignRatioToButton","minWidth","buildTaskNavigation","activeTest","findTestForName","TopButtonToolBar","growth","testIndexForName","testForName","findFirstTaskInTest","targetTest","isTest","navigationTarget","navigationType","switchTaskIntraTest","getTaskNavigatorHeight","LoggedInView","handleTopLevelPageChange","buildTaskNavigator","shouldBuildNavigator","setTopLevelPageChangeHandler","startAutomaticTransmissions","reactClientLoaded","err","stopAutomaticTransmissions","Notifications","Login","switchToLoginState","handleLogin","loggedUserName","handleLoginClick","updateInputLoginValue","handleKeyPress","titleLabel","fieldLabel","buttonLabel","placeholder","TYPES","pageBlur","pageFocus","enterFullscreen","PageEventsObserver","lastVisibilityTime","lastFullScreenTime","isFullScreen","handleVisibility","newVisibilitytime","getMoment","timeSpent","computeTimeDifference","traceAction","buildTraceDetails","time1","time2","diff","asSeconds","alternateStateDuration","isFullscreenNow","newFullScreenTime","ifvisible","App","resize","computeScalingValue","showWaiting","loginDialogClosedHandler","loginTitleLabel","loginFieldLabel","loginButtonLabel","loginDialogDisabled","showTask","courseForNavigator","testsForNavigator","switchTask","scalingConfig","scalingMode","dumpTasksViewConfigurationToTraceLog","showReplay","setScalingConfig","horizontalScale","verticalScale","getScalingAlignmentCssClass","_this$scalingConfig","alignmentVertical","cssClass","fieldValue","renderWaiting","waitingMessageTexts","renderLogin","renderTask","_this$state2","initObserver","newValues","upperHeaderMenu","lowerHeaderMenu","ComponentStateManager","stateMap","getStateSnapshot","getSnapshot","buildPathRoot","preloadWithStateSnapshot","snapshot","fromSnapshotRepresentation","registerStateChangeFromSnapshot","fromSnapshotRepresentationForSingleEntry","doDeepCopyIfRequired","dumpStateChangeToTrace","toSnapshotRepresentationForSingleEntry","findOrBuildStateForPathIdInternal","filterMethod","registered","rootFromPath","buildStateFromConfig","entryFilter","updateVolatiles","toSnapshotRepresentation","getPosition","setDefaultLinkReceiver","calculateDefaultLinkReceiver","addPropagationGroupControllerState","addSelectGroupControllerState","addSelectGroupMemberInfo","addAttributesToInitialState","isLinkCatcher","linkCatcherConfiguration","catchLinkSetting","catchLinks","extractDeepCopy","extractVolatile","updateStateInComponentStateManager","toSnapshotRepresentationByComponent","_entry3","fromSnapshotRepresentationByComponent","extractComponentClassName","toSnapshot","fromSnapshot","ComponentDirectory","componentList","treeInstnancesUserDefinedIds","pageComponents","findComponentsByPageName","treeComnOnPage","len","lenComp","treeChildAreaIdToIgnore","subTreeViewIds","findSubTreeComponentsWithinAPage","comp","treeViewComnOnPage","IncidentsAccumulator","enterTask","atTime","leaveTask","startTimeOfCurrentTask","startTimeOfCurrentPause","timeSpentPausedInCurrentTask","firstReactionSeen","lastContinuingInteractionKey","getOrInitializeValuesForTask","getNonPausedTimeSpentInCurrentTask","pauseTask","resumeTask","getValuesForTask","taskValuesList","clearTasksState","preloadTasksState","allTasksState","injectStateChangeAtReplay","buildInitialValues","startOfCurrentPause","timeSpentInEarlierPauses","getTimeSpentInPausedState","ConditionalLinkHelper","branches","logUndefinedMessage","condition","actions","PageConfigurationsManager","pagesList","buildMappings","userDefinedIdCatalog","textBlockNameCatalog","supressWarning","pageSegmentCatalog","addMappingsForPage","addMappingsForComponent","addMappings","addMappingsForComponentList","buildComboBoxItemsArray","buildListItemsArray","buildLinkConfigurationsArray","textBlock","_CbaCalculatorInput$c2","CalculationsConfigurationManager","calculationEntry","findAllCalculationsByTaskName","calculation","tasksList","namedCalculations","findScoreResultListByTaskName","listName","list","findAllScoreResultListsByTaskName","elements","scoreResult","lists","findScoreResultAttributesByTaskName","PresenterStateManager","newState","taskEntriesList","removeDialog","taskState","removableDialog","newPosition","currentTaskState","setMainAreaPage","changeOrCreatePageArea","pageAreaList","pageAreaEntry","ValueMapper","valueMapName","valueToMap","valueMapToUse","valueMaps","acceptingGuard","guards","guardTerm","TaskManager","topLevelPageChangeHandler","itemConfiguration","resourcePath","externalResourcePath","itemInfoEntries","setSwitchCallback","switchCallback","setAvailabilityCallback","availabilityCallback","triggerGoToTask","newItemName","triggerTaskSwitch","checkAvailableTask","evaluateConditionalLink","combinedPosition","getTopComponentPosition","switchTopLevelPage","fullReceiverPath","evaluatedPageAreaType","preparePageSwitchInPresenterState","setPageName","calculations","getResultsListForTask","getOldTaskResults","buildScoringHitMissListEvaluationResult","buildScoringClassListEvaluationResult","addScoringAttributesEvaluationResult","activeResourcePath","activeExternalResourcePath","oldTask","oldItem","oldTest","newTask","newItem","taskResult","stopCurrentStatemachine","setTestItemTaskNames","replayMode","itemInfo","getItemInfoForName","getTaskForName","newTaskId","setOrInitializeCurrentCalculator","switchCurrentStatemachineWithoutStarting","initializeVariablesForTask","traceVariableValues","prepareTaskSwitchInPresenterAndNavigatorState","startOrInitializeCurrentStatemachine","dumpFullStateToTrace","_this$runtime","componentsState","statemachines","getStatemachinesPreloadData","presenterState","taskNavigatorState","taskResults","calculators","_this$runtime2","clearStatemachines","_this$runtime3","preloadStatemachinesData","getItemResources","getItemInfo","usedResources","externalResources","mapResourcePath","internalResources","fontMappings","itemInfoEntry","requestType","scoringListName","scoringList","defaultPageName","conditionalLinkResult","saveTestState","initialTaskEntry","buildInitialTaskStateObject","initialPage","initialXPage","conditionResult","initRule","afterConditionEvaluationTaskEntry","setPageForPageAreaInTaskState","newPage","TaskResultsManager","resultsForTask","TimedEventsCatalog","putEntry","triggerInterval","acceptingStatesList","getEntry","timedEventsList","buildTimedEventEntry","getTimerIntervals","clearTimeoutHook","handle","setTimeoutHook","argument","stateName","eventEntry","scheduledTimeoutHandle","scheduledTriggerTime","remainingInterval","timedEventEntry","scheduleTimedEvent","setScheduledDataInTimedEventEntry","startInterval","getNow","targetTime","timeoutId","entryToModify","StatemachineEventHistory","getHistoryDataForSnapshot","raisedEventsPerState","totalNbOfRaisedEvents","valuesPerVariable","valuesPerVariableAfterLastArtificialEvent","reportBeforeEvent","activeStates","variableValues","addVisitedStates","isArtificialEvent","addRaisedEvent","addRaisedEventPerStates","addVariableValues","reportAfterEvent","events","matchInHistory","matchInPendingMemory","addRaisedEventPerState","addVisitedState","stateToAdd","addValuePerVariable","isArtificialVariable","variableInfos","variableInfo","initialValues","Statemachine","model","timedEventDefaults","statePageMapDefaults","historySnapshot","running","stopTimedEvents","continue","paused","getCurrentStates","startTimedEvents","pauseTimedEvents","resumeTimedEvents","eventProcessingRuns","enqueueEventLastOut","runSingleEventWithHistoryReports","pendingEventFromQueue","pendingEventQueue","pendingTaskSwitch","switchToExecute","executePendingTaskSwitch","timedEvents","getEventData","setTriggerIntervalInEventEntry","getCurrentTimerIntervals","getStatePageAssignments","statePageMap","areaType","areaName","oldEntryIndex","getCurrentVariableValues","currentVariableValues","getVariableValuesMapForTask","getHistoryData","interpreter","getConfiguration","getFullConfiguration","getAllCurrentStates","buildStateMachine","machineModel","buildTimedEventsCatalog","scxml","scion","Statechart","transformMachineModel","errorInfo","tagname","reason","originalStates","statesCopy","modelCopy","transformStates","stateArray","parentStatePath","hasSubstates","statePath","buildStatePath","transformEntryExitActions","buildInitEventName","transitions","transformTransition","initEventName","onEntry","buildOnEntryFunction","onExit","buildOnExitFunction","putEventOnQueue","enqueueEventFirstOut","startMyTimedEvents","stateToPageMap","assignedPageSwitch","findScheduledEventsByState","stopTimedEvent","findUnscheduledEventsByState","startTimedEvent","findScheduledEvents","pauseTimedEvent","resumeTimedEvent","buildVariablesInfoArray","gen","unshift","buildStatePageMap","statePageAssignments","modelPageAssignments","dynamicPageAssignments","dynamicAssignment","oldAssignmentIndex","existingAssignment","statesList","catalog","findAcceptingStates","recursionResultState","stateId","buildConditionFunction","onTransition","buildOnTransitionFunction","sourceState","targetState","StatemachinesManager","currentMachine","preInitTriggeredEvents","existingMachine","statemachinesList","statemachineModelsList","newMachine","triggerRerenderForAllChangeObservers","pauseCurrentStatemachine","resumeCurrentStatemachine","taskSwitchCall","existingEntryIndex","statePageMapDefault","machine","timerIntervals","historyData","preloadData","machineData","TaskNavigatorStateManager","testEntriesList","TraceLogBuffer","entryType","entryContent","withReplaySupport","isReplaySupportType","withoutSnapshot","newEntry","getNextCount","buildTimeString","withExtendedMetaData","traceContextId","withoutItemConfiguration","withoutScoring","logEntriesList","newEntryListener","deliveredEntries","setNewEntryListener","setWithReplaySupport","setWithExtendedMetaData","setWithoutItemConfiguration","setWithoutSnapshot","setWithoutScoring","entryCounter","date","padLeadingZeroes","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","buildTimeZoneOffsetString","getTimezoneOffset","offsetInMinutes","absoluteOffsetInMinutes","abs","minutesOffset","hoursOffset","ClipboardManager","selectionHolderEntry","currentSelectionHolder","isReadOnlyCallback","setClipboardContent","getSelectionCallback","traceCutCopy","currentInsertPosition","insertPositionEntry","clipboardContent","insertCallback","tracePaste","deregisterInsertPosition","selectionHolder","newContent","traceLog","wasPerformed","contentDealerIndexPath","contentUserDefIdPath","contentIndexPath","contentUserDefId","isPerformed","StringUtils","word","charAt","toUpperCase","UserDataUploader","userDataBuffer","buildUserDataPostContentCallback","dataType","setSessionContext","loginTimestamp","sessionContext","getSessionContext","transmitInterval","setNewTimer","setImmediateCallback","stopOldTimer","dropImmediateCallback","collectEntriesAndTriggerTransmission","transmitterPromise","transmitterPromiseIsResolved","collectEntriesAndBuildTransmitPromise","notificationToaster","addUserDataEntries","getUserDataEntriesList","shouldTryAgainToSend","isMaxFailCountErrorDisplayed","notifyErrorMsg","getFailCount","setMaxFailCountErrorDisplayed","show","ex","userDataRequestBody","getTransmittingPromise","updateUserDataEntriesListAfterSuccessfulSend","noOfEntriesTransmitted","increaseNextSentFailCount","setPostMessageTransmissionChannel","targetWindowType","domainUri","transmissionChannel","axiosInstance","transmitCallback","setTransmitInterval","resetMaxFailCount","setCallbackTransmissionChannel","setConsoleTransmissionChannel","setHttpTransmissionChannel","transmitUrl","httpTimeout","setNotificationToaster","toaster","isMaxFailCountError","lastSentFailCount","newTransmitInterval","currentTimer","userDataEntriesList","newUserDataEntries","noOfTransmittedEntries","dataToTransmit","transmitViaPostMessage","transmitViaCallback","transmitViaConsole","transmitViaHttp","notify","targetOriginUri","uploaderInstance","messageToSend","getTargetWindow","getDataType","parent","opener","nbOfEntriesInTransmission","post","dataToLog","entriesList","capitalizedDataType","toFirstUpper","TraceLogUploader","_UserDataUploader","buildTracePostContent","sendTimestamp","metaData","cbaVers","PostMessageReceiver","parsedUrl","tryToParseURL","acceptedExternalPageFrameUrlsList","startReceiving","defaultAcceptedUrl","receiveEvent","sendTaskPlayerReadyEvent","windowType","sendResponseEvent","responder","source","dataInEvent","tryJsonParse","eventTime","eventProcessed","processRuntimeControlEvent","processIfExternalPageFrameEvent","traceMessage","microfinEvent","microfinVariable","isEmptyOrNoValue","isNoValue","safeIndexPath","safeUserDefIdPath","newType","callId","messagePayload","getUserInteractionCount","processAvailabilityMessage","availableTaskSwitches","isTaskSwitchAvailable","existingEntry","sourceWindow","setWaitMessages","setScalingConfiguration","preloadPromise","setPreload","requestId","isSuccess","images","videos","audios","insertMessageInTrace","logStateToTrace","flushTrace","channel","isValidTargetOrigin","targetOrigin","contextId","setTraceContentFilter","replaySupport","getUserId","getTask","responderFunction","getTasksState","replay","story","getScoringResult","getOldScoringResult","sendStatemachineEvent","scopes","scoreHotKey","traceHotKey","statemachineHotKey","eventToSend","triggeringEventOrigin","triggeringEventSourceWindow","messageString","eventOrigin","traceCount","originAsString","host","EvaluatorHelper","frequency","deg","unit","PI","ANGLE_DEGREE","ANGLE_RADIAN","fak","NaN","nthroot","negate","possible","isBigger","ExpressionEvaluator","stack","repeatingRunStatus","restoreState","calc","val","translateKey","updateRepeatingRunStatus","isStackEmpty","repeatingRunIsActive","calcValue","getRepeatingRunKey","getRepeatingRunValue","pushStackEntry","returnValue","newRank","getRankForKey","previousKey","peekStackKey","previousValue","peekStackValue","popStackEntry","resetStack","reset","resetRepeatingRun","o1","o2","setRepeatingRunValue","setRepeatingRunKey","RANK","=","+","-","/","*","yx","x√y","EE","Evaluator","setConfiguration","silentOnErrors","bigger","expressions","expressionNestingDepth","memory","resultBuffer","keysBuffer","getMem","memIdx","initRenderCommands","setCurrentEvaluationResult","sendToRender","getRenderCommands","evalKey","operand","evalKeyInternal","renderCommands","sendToRenderHistory","resetExpressionsStack","pushNestedExpression","popNestedExpression","peekNestedExpression","hasNestedExpression","getCurrentEvaluationResult","resetKeysBuffer","pushKeyToKeysBuffer","getPreviousKey","isKeyAC","popKeyFromKeysBuffer","getKeysBufferLength","getCurrentKey","isKeyC","operations","dispVal","evalOperation","functionForEval","originalResult","resultAsString","evalShouldResetHistoryIfDigitOnNextKey","dispValKeyOperand","shouldResetHistoryIfDigitOnNextKey","evalEndOfTerm","isEndOfTerm","evalsin","_ref2","isMultipleOfPi","sin","getRadiantValue","evalcsc","_ref3","evalsin1","_ref4","getDisplayValueFromRadiant","asin","evalcos","_ref5","cos","evalsec","_ref6","evalcos1","_ref7","acos","evaltan","_ref8","tan","evalcot","_ref9","evaltan1","_ref10","atan","evalsinh","_ref11","E","evalsinh1","_ref12","evalcosh","_ref13","evalcosh1","_ref14","evaltanh","_ref15","e1","e2","evaltanh1","_ref16","evalPI","_ref17","eval1perx","_ref18","evalx2","_ref19","evalx3","_ref20","eval2x","_ref21","evalex","_ref22","evaloperandyx","_ref23","evaloperandex","_ref24","eval2root","_ref25","eval3root","_ref26","evaloperandxrooty","_ref27","evalfactorial","_ref28","evalln","_ref29","evallog2","_ref30","evallog10","_ref31","evaloperandlog","_ref32","evalRandom","_ref33","random","evalLeftBracket","_ref34","evalRightBracket","_ref35","evalPlusMinus","_ref36","displayValue","evalEquals","_ref37","evalDigitOrDecimalPoint","_ref38","_this$getPreviousKey3","willOverflow","isAlreadyDecimalPoint","evalDecimalPoint","_ref39","evalMClear","_ref40","evalMSave","_ref41","evalMAdd","_ref42","doMemoryOperation","evalMMinus","_ref43","evalMRead","_ref44","valueFromMemory","getMemoryValue","evalAC","_ref45","evalC","_ref46","evalBackspace","_ref47","currentValue","evalViaExpressionEvaluator","_ref48","buildHardcodedCommandsList","radiantValue","withThis","buildUnaryOperatorCommand","csc","sin-1","sec","cos-1","cot","tan-1","sinh","sinh-1","cosh","cosh-1","tanh","tanh-1","π","1/x","x2","x3","buildBinaryOperatorCommand","2x","operandyx","operandex","2√","3√","operandx√y","x!","ln","log2","log10","operandlog","Rand","(",")","×","÷","–","+/–","0","1","2","3","4","5","6","7","8","9",".","mc","ms","m+","m-","mr","AC","C","calcFunction","getSupportedOperations","KeyboardHelper","operationsString","calculatorOperation","operationsArray","m","isSupportedOperation","fromKeyStrokeToCalculatorSupportedOperation","pressedKey","lookupForOperation","fromStatemachineToCalculatorSupportedOperation","isDigitKey","Renderer","valueComponents","splitValue","fractionalPart","targetDigitsCount","calculateTargetDigitCount","exponentPart","_Renderer$roundFracti","roundFractionalDigits","reducedFractionalDigits","digits","roundingOverflow","integralPart","sign","_value$split","_value$split2","beforeDecimalPart","postDecimalPart","withExponent","roundedValue","toPrecision","overflowOccured","padEnd","msg","nroot","trailingDot","valueWithoutTrailingDot","shortenedResult","shortenValue","addTrailingDecimalSeparator","parts","limitFractionalDigits","valAbs","toExponential","HistoryRenderer","historyEntries","pushToHistory","recalculateHistoryString","pushToHistoryAC","pushToHistoryC","isKeyOneOperatorAfterAnotherOperator","pushToHistoryOneOperatorAfterAnotherOperator","isKeyBackspace","pushToHistoryBackspace","isKeyEquals","pushKeyToHistoryEquals","isKeyUsingOperand","pushToHistoryKey","prevKey","lastPopped","handleCaseOfEqualsFollowedByAnOperationOrByAnOperand","historyString","brackets","betweenOperatorsStack","recalculateHistoryForStackBetweenOperators","formatAllNumbers","ret","getOperandValue","numberDetectorRegEx","CbaCalculatorEngine","evaluator","historyRenderer","displayingValue","historyDisplayingValue","baseOrExponentOrMemIdx","iMax","calcEngineParams","renderHistory","setDisplayValueInState","triggerHistoryRendering","getTaskPath","CalculatorsManager","currentCalculator","calculatorsStateList","getHistoryDisplayingValue","safeCall","getDisplayingValue","saveState","calculatorTaskPath","newCalculatorState","ActionRegister","actionsMap","has","delete","focusMap","layerStyles","pointerEvents","zIndex","getItemStyles","initialOffset","currentOffset","WebkitTransform","CustomDragLayer","_useDragLayer","useDragLayer","getInitialSourceClientOffset","getSourceClientOffset","clippedStyle","augmentedWidth","augmentedHeight","augmentedFontSize","augmentedStyle","renderItem","RecordingBuffer","recordingNumber","blobUrl","responseType","reader","FileReader","readAsDataURL","onloadend","recordingInfo","sourceComponent","nbOfRecordingOnComponentInstance","recordingStartTime","recordingList","RecordingUploader","buildRecordingPostContent","recordingEntriesList","LibraryManager","librariesUsedMap","itemLibraries","checkLibraryPaths","library","addMathJax","libraryPath","scriptTag","setAttribute","appendChild","VariableManager","variableMap","variablesArray","variableObservers","entryIndex","entryList","clearAllChangeObservers","tracing","variablesConfig","withTrace","variableConfig","getFullData","variableEntry","oldVariable","checkType","traceVariableChangeAttempt","variableType","newValueType","operationStatus","variableValuesMap","ReplayRunner","setNowProvider","nowProvider","setDelayProcessor","delayProcessor","finishedAction","replayFromTaskStartingPoint","fromIndex","appSettings","initializingTriple","grabInitializingTriple","taskSwitchEntry","fullStateEntry","tasksViewVisibleEntry","stateChangeEntries","nextIndex","_step$details","processStateChangeStep","_taskSwitchEntry$deta","initialReplayTick","replayTick","initialTimestamp","continueStoryExecution","nextStepIndex","executeNextReplayStep","stepAction","doneAction","currentStepIndex","currentStep","delayMillis","calculateDelayMillisByNow","dummyEvent","_currentStep$details","closeMenuItemTree","_currentStep$details2","htmlElement","getComputedStyle","parentElement","calculateDelayMillis","stepReplayTick","nowTimestamp","tripleStartFound","nextEntry","ReplayStepMonitor","currentReplayStepId","TaskPlayer","apiState","runtimer","getWaitingMessageTexts","DndProvider","backend","TouchBackend","HTML5Backend","enableMouseEvents","getElementById","sendPlayerReady","checkNotRunning","checkNotLoggedInOrNoTaskRunning","setWaitingMessageTexts","itemConfigVersion","runtimeCompatibilityVersion","isCompatibleVersion","libraryManager","addLibrariesForItem","scalingModes","alignmentHorizontalModes","alignmentVerticalModes","preloadItemResources","checkNoTaskRunningOrTaskRunning","dumpMessageToTraceLog","setCallbackTraceTransmission","checkNotLoggedIn","setConsoleTraceTransmission","_traceLogUploader$get","setCallbackRecordingTransmission","setConsoleRecordingTransmission","_recordingUploader$ge","traceSessionId","recordingSessionId","dumpLoginToTraceLog","checkNoTaskRunning","fieldValueCallback","checkTaskRunning","pauseOrResume","_this$runtime4","dumpStatemachineEventToTraceLog","score","normalizeHotKeySpecification","checkApiState","acceptedList","imagesPromise","videoPromise","audioPromise","preloadResources","buildRuntime","EventEmitter","FocusRegister","hotKeySpecification","windowNameForErrorMessage","withoutCtrl","user","runtimeVersion","webClientUserAgent","enter","versionNumber","getCbaVersionNumber","dumpPauseResumeToTraceLog","_taskManager$getCurre2","startTaskPlayer","eventReceiverConfiguration","getEventReceiverConfiguration","useExternalController","shouldActivateInternalController","startUp"],"mappings":"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","file":"static/js/main.b6285a4a.chunk.js","sourcesContent":["// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\r\n(() => {\r\n  if (typeof window.CustomEvent === \"function\") return false;\r\n\r\n  function CustomEvent(event, params) {\r\n    params = params || {\r\n      bubbles: false, cancelable: false, detail: undefined\r\n    };\r\n    const evt = document.createEvent('CustomEvent');\r\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n    return evt;\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype;\r\n\r\n  window.CustomEvent = CustomEvent;\r\n  return undefined;\r\n})();\r\n\r\n/**\r\n * IE11 doesn't support yet <b>.startsWith</b> that is why we need to \r\n * define it ourselves in order to make the project run on IE.\r\n * \r\n */\r\nif (!String.prototype.startsWith) {\r\n  // eslint-disable-next-line no-extend-native\r\n  String.prototype.startsWith = (searchString, position) => {\r\n    position = position || 0;\r\n    return this.indexOf(searchString, position) === position;\r\n  };\r\n}\r\n","import UrlLib from 'url';\r\nimport packageJson from '../../package.json';\r\n\r\n/**\r\n * Basic helper methods used by various components.\r\n */\r\nexport default class Utils {\r\n\r\n\r\n  // --------- Java objects, arrays etc. ---------------------------------------------------\r\n\r\n  /**\r\n   * Return the given value if it is defined, return the default value otherwise.\r\n   * \r\n   * @param {*} valueMightBeUndefined The value that might be undefined.\r\n   * @param {*} defaultValue The default value to use as replacement for an undefined value.\r\n   */\r\n  static withDefault(valueMightBeUndefined, defaultValue) {\r\n    return valueMightBeUndefined === undefined ? defaultValue : valueMightBeUndefined;\r\n  }\r\n\r\n  /**\r\n   * Get the value of the given property of the given base object and return the default value \r\n   * if the object is undefined. \r\n   * \r\n   * The method will return undefined if the base object is not undefined but does not bear a property of the given name.\r\n   * \r\n   * @param {*} baseObject The base object bearing the property. This object might be undefined. We will return the given default value in that case.\r\n   * @param {String} propertyName The property of the base object.\r\n   * @param {*} defaultValue The default value to use if the base object is undefined.\r\n   */\r\n  static getPropUndefinedSafe(baseObject, propertyName, defaultValue) {\r\n    return baseObject === undefined ? defaultValue : baseObject[propertyName];\r\n  }\r\n\r\n\r\n  /**\r\n   * Is the given value a 'falsy' value (i.e. null, undefined, empty string, false, 0, NaN) or \r\n   * an Object that does not have any attributes (i.e. properties or methods)?\r\n   * \r\n   * @param {} candidate The value to check.\r\n   */\r\n  static isEmptyObject(candidate) {\r\n    return !!candidate && candidate.constructor === Object && Object.keys(candidate).length === 0;\r\n  }\r\n\r\n  /**\r\n   * Does the given array contain any 'non-empty' value \r\n   * (i.e. something that returns a non-empty string as toString() result)?\r\n   * \r\n   * @param {*} array The array to check; might be undefined or null but must be an array otherwise.\r\n   */\r\n  static isNonEmptyArray(array) {\r\n    return array !== undefined && array !== null && array.length !== 0 && Utils.arrayContainsNonEmptyEntry(array);\r\n  }\r\n\r\n  /**\r\n   * Does the given array contain any 'non-empty' value \r\n   * (i.e. something that returns a non-empty string as toString() result)?\r\n   * \r\n   * @param {*} array The array to check. The array must not be undefined or null.\r\n   */\r\n  static arrayContainsNonEmptyEntry(array) {\r\n    return array.some(value => value !== undefined && value !== null && value.toString() !== '');\r\n  }\r\n\r\n  /**\r\n   * Does the given array contain an 'empty' value \r\n   * (i.e. something that returns an empty string as toString() result)?\r\n   * \r\n   * @param {*} array The array to check. The array must not be undefined or null.\r\n   */\r\n  static arrayContainsEmptyEntry(array) {\r\n    return array.some(value => value === undefined || value === null || value.toString() === '');\r\n  }\r\n\r\n  /**\r\n   * Return a 'deep' copy of the given object.\r\n   * \r\n   * The method uses JSON parse - stringify to create the copy.\r\n   * \r\n   * @param {*} object The object to copy. This must be JSON 'stringifyable'. \r\n   */\r\n  static deepCopy = object => JSON.parse(JSON.stringify(object));\r\n\r\n  /**\r\n   * Return a 'deep' copy of the given object.\r\n   * \r\n   * The method uses JSON parse - stringify to create the copy.\r\n   * If the given object is undefined/null it simply returns undefined/null.\r\n   * \r\n   * @param {*} object The object to copy. This may be undefined or null. \r\n   */\r\n  static safeDeepCopy = (object) => {\r\n    if (object === undefined) {\r\n      return undefined;\r\n    }\r\n    return Utils.deepCopy(object);\r\n  }\r\n\r\n\r\n  /**\r\n   * Extends 'from' object with members from 'to'. If 'to' is null, a deep clone of 'from' is returned.\r\n   * \r\n   * TODO: CKI: The method behavior seems to be more complex than described above: No adding is done if the\r\n   * from value is not an Object or Array. -> Properly describe and test it or try to drop it. \r\n   * Currently there is no call with a to value given!\r\n   */\r\n  static safeDeepCopyObjects = (from, to) => {\r\n    if (from == null || typeof from !== \"object\") return from;\r\n    if (from.constructor !== Object && from.constructor !== Array) return from;\r\n    if (from.constructor === Date\r\n      || from.constructor === RegExp\r\n      || from.constructor === Function\r\n      || from.constructor === String\r\n      || from.constructor === Number\r\n      || from.constructor === Boolean) {\r\n      return new from.constructor(from);\r\n    }\r\n\r\n    to = to || new from.constructor();\r\n\r\n    Object.keys(from).forEach((name) => {\r\n      to[name] = typeof to[name] === \"undefined\" ? Utils.safeDeepCopyObjects(from[name], null) : to[name];\r\n    });\r\n\r\n    return to;\r\n  }\r\n\r\n  // --------- Mode and feature decisions ------------------------------------------------\r\n\r\n  /**\r\n   * Get a version number string.\r\n   */\r\n  static getCbaVersionNumber() {\r\n    return `${packageJson.version}`;\r\n  }\r\n\r\n  /**\r\n   * Get a version string.\r\n   */\r\n  static getCbaVersion() {\r\n    return `${packageJson.name} ${packageJson.version}`;\r\n  }\r\n\r\n  /**\r\n   * Print the version string to the browser console.\r\n   */\r\n  static printCbaVersion() {\r\n    console.info(`Running ${Utils.getCbaVersion()}`);\r\n  }\r\n\r\n  /**\r\n   * Should we run in 'mobile mode' ?\r\n   * \r\n   * We check an optional epxlicit flag in our calling URL \r\n   * and try some heuristic to find out ourselves.\r\n   */\r\n  static isMobile = () => {\r\n    let check = Utils.isMobileModeSetAsParameter();\r\n    // eslint-disable-next-line\r\n    (function (a) { if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);\r\n    return check;\r\n  };\r\n\r\n  /**\r\n   * Private helper: Is there a parameter in our URL that forces 'mobile mode'?\r\n   */\r\n  static isMobileModeSetAsParameter() {\r\n    const isMobileForced = Utils.getQueryParam('forceMobileMode');\r\n    return (`${isMobileForced}` === 'true');\r\n  }\r\n\r\n  /**\r\n   * Does the device use a touch screen?\r\n   */\r\n  static isTouchDevice() {\r\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\r\n  }\r\n\r\n  /**\r\n   * Internal helper: If the requested field in the given settings object exists return it's value, \r\n   * return an empty string otherwise.\r\n   * \r\n   * @param {*} settings Object to investigate.\r\n   * @param {*} settingName Field to look for.\r\n   */\r\n  static getSettingsValueByNameSafe(settings, settingName) {\r\n    if (settings && settings[settingName] !== undefined) {\r\n      return settings[settingName];\r\n    }\r\n    return '';\r\n  }\r\n\r\n\r\n  /**\r\n   * Determine the controller to use and its operation mode.\r\n   * \r\n   * The method returns on of three values:\r\n   *  - preview: Run with the internal controller; use the simplified server interactions (see class comments in ServerCalls and Controller for details).\r\n   *  - rest-api: Run with the internal controller; use the REST API server interactions (see class comments in ServerCalls and Controller for details).\r\n   *  - external-controller: Do not run the internal controller - wait for an external controller to take over.\r\n   */\r\n  static getControllerMode() {\r\n    const defaultMode = 'external-controller';\r\n    const configFromWindowGlobal = window.cba_runtime_config;\r\n    if (configFromWindowGlobal === undefined || configFromWindowGlobal === null) {\r\n      return defaultMode;\r\n    }\r\n    const modeFromWindowGlobal = configFromWindowGlobal.mode;\r\n    if (modeFromWindowGlobal === undefined || modeFromWindowGlobal === null) {\r\n      return defaultMode;\r\n    }\r\n    if ((typeof modeFromWindowGlobal) !== 'string') {\r\n      console.warn(`Invalid controller mode ignored, switching to external-controller mode.`, modeFromWindowGlobal);\r\n      return defaultMode;\r\n    }\r\n\r\n    const trimmedMode = modeFromWindowGlobal.trim();\r\n    switch (trimmedMode) {\r\n      case 'preview':\r\n        return 'preview';\r\n      case 'rest-api':\r\n        return 'rest-api';\r\n      case 'external-controller':\r\n        return 'external-controller';\r\n      default:\r\n        return defaultMode;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Get configuration details for the TaskPlayer's post message API.\r\n   */\r\n  static getEventReceiverConfiguration() {\r\n    return Utils.getEventReceiverConfigurationInternal(window.cba_runtime_config, window.location.href);\r\n  }\r\n\r\n  /**\r\n   * Internal helper: Kernel of getEventReceiverConfiguration providing a test entry point.\r\n   */\r\n  static getEventReceiverConfigurationInternal(configFromWindowGlobal, urlString) {\r\n    return {\r\n      eventTargetWindow: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'eventTargetWindow', undefined),\r\n      eventDomainUri: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'eventDomainUri', undefined),\r\n      startTaskPlayerEvent: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'startTaskPlayerEvent', undefined),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the initial texts for the 'We are waiting for an item configuration...' page\r\n   * displayed by our app while waiting for configurations coming in via the TaskPlayer API.\r\n   * \r\n   * These texts can be given in the window.cba_runtime_config structure (prevailing)\r\n   * or as URL parameters (if config structure does not specify them). \r\n   */\r\n  static getWaitingMessageTexts() {\r\n    return Utils.getWaitingMessageTextsInternal(window.cba_runtime_config, window.location.href)\r\n  }\r\n\r\n\r\n  /**\r\n   * Internal helper: Kernel of getWaitingMessageTexts providing a test entry point.\r\n   */\r\n  static getWaitingMessageTextsInternal(configFromWindowGlobal, urlString) {\r\n    return {\r\n      primary: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'initialWaitingMessagePrimary', 'We are waiting to receive the test configuration...'),\r\n      secondary: Utils.getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, 'initialWaitingMessageSecondary', 'If this waiting takes more than a few seconds inform your test administrator.'),\r\n    }\r\n  }\r\n\r\n  static getParameterValueFromUrlOrConfigStructure(configFromWindowGlobal, urlString, parameterName, defaultValue) {\r\n    // try configuration structure first:\r\n    if (configFromWindowGlobal !== undefined && configFromWindowGlobal !== null\r\n      && configFromWindowGlobal[parameterName] !== undefined) {\r\n      return configFromWindowGlobal[parameterName];\r\n    }\r\n\r\n    // look for configuration parameter in the URL calling our code:\r\n    const urlQuery = UrlLib.parse(urlString, true).query;\r\n    if (urlQuery !== undefined && urlQuery !== null && urlQuery[parameterName] !== undefined) {\r\n      return urlQuery[parameterName];\r\n    }\r\n\r\n    // fall back to default value\r\n    return defaultValue;\r\n  }\r\n\r\n\r\n  // --------- calling URL details -------------------------------------------------------\r\n\r\n  /**\r\n   * Get the protocol + hostname + port of the URL that called our code.\r\n   * \r\n   * The method supports the protocols http, https, file and atom. For other \r\n   * protocols it logs an error and returns undefined.\r\n   * \r\n   * The method does not include the path and parameters given in the URL.\r\n   * \r\n   * Examples: \r\n   *  http://www.example.com:8080/some/path?withParameter=value is trimmed to\r\n   *  http://www.example.com:8080\r\n   * \r\n   *  file:///D:/develop/directory is trimmed to\r\n   *  file:\r\n   * \r\n   *  atom://... is trimmed to \r\n   *  atom:\r\n   * \r\n   */\r\n  static getCallingUrlWithoutPath() {\r\n    return this.getUrlWithoutPathFromLocation(window.location)\r\n  }\r\n\r\n  static getUrlWithoutPathFromLocation(location) {\r\n    switch (location.protocol) {\r\n      case 'http:':\r\n      case 'https:': {\r\n        const portAddOn = location.port ? `:${location.port}` : '';\r\n        return `${location.protocol}//${location.hostname}${portAddOn}`;\r\n      }\r\n      case 'file:':\r\n        return location.protocol;\r\n      case 'atom:':\r\n        return location.protocol;\r\n      default:\r\n        console.error('Unknown protocol', location.protocol);\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the value of the specified parameter given in the URL calling our code.\r\n   * \r\n   * The method returns undefined if there is no parameter with the specified name. \r\n   *\r\n   * @param {*} paramName The name of the parameter to find a value for.\r\n   */\r\n  static getQueryParam(paramName) {\r\n    const query = Utils.getQueryParams();\r\n    return query[paramName];\r\n  }\r\n\r\n  /**\r\n   * Build an object representing all parameters given in the URL calling our code.\r\n   * \r\n   * Parameter names and values are properly URL-decoded.\r\n   */\r\n  static getQueryParams() {\r\n    return Utils.getQueryParamsFromUrlString(window.location.href);\r\n  }\r\n\r\n  /**\r\n   * Build an object representing all parameters in the given URL string.\r\n   * \r\n   * Parameter names and values are properly URL-decoded.\r\n   */\r\n  static getQueryParamsFromUrlString(urlString) {\r\n    return UrlLib.parse(urlString, true).query;\r\n  }\r\n\r\n  /**\r\n   * Makes a request to the browser to set the element to fullscreen mode\r\n   * \r\n   * @param {*} elem the element requested to go fullscreen\r\n   * \r\n   */\r\n  static openFullScreen(elem) {\r\n    const fullscreenEnabled = document.fullscreenEnabled /* Standard syntax */\r\n      || document.mozFullScreenEnabled /* Firefox */\r\n      || document.webkitFullscreenEnabled /* Chrome, Safari and Opera */\r\n      || document.msFullscreenEnabled /* IE/Edge */\r\n\r\n    if (fullscreenEnabled) {\r\n      if (elem.requestFullscreen) { /* Standard syntax */\r\n        elem.requestFullscreen();\r\n      } else if (elem.mozRequestFullScreen) { /* Firefox */\r\n        elem.mozRequestFullScreen();\r\n      } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\r\n        elem.webkitRequestFullscreen();\r\n      } else if (elem.msRequestFullscreen) { /* IE/Edge */\r\n        elem.msRequestFullscreen();\r\n      }\r\n    } else {\r\n      console.warn(\"Current browser does not allow for fullscreen\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Makes a request to the browser to exit fullscreen mode\r\n   */\r\n  static closeFullScreen() {\r\n    if (document.fullscreenElement) {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n      } else if (document.mozCancelFullScreen) { /* Firefox */\r\n        document.mozCancelFullScreen();\r\n      } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\r\n        document.webkitExitFullscreen();\r\n      } else if (document.msExitFullscreen) { /* IE/Edge */\r\n        document.msExitFullscreen();\r\n      }\r\n    }\r\n  }\r\n\r\n  static keyCodes = {\r\n    Backspace: 8,\r\n    Tab: 9,\r\n    Enter: 13,\r\n    Shift: 16,\r\n    Ctrl: 17,\r\n    Alt: 18,\r\n    Escape: 27\r\n  }\r\n\r\n  static mapResourcePath(resources, path, isExternal) {\r\n    return resources.map((resource) => {\r\n      const resourceCopy = Utils.safeDeepCopy(resource);\r\n      resourceCopy.path = `${path}/${resourceCopy.name}`;\r\n      resourceCopy.isExternal = isExternal;\r\n      return resourceCopy;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * check the type of a variable to match a certain type.\r\n   * @param {*} value \r\n   * @param {*} expectedType \r\n   */\r\n  static checkType(value, expectedType) {\r\n    const valueType = typeof value;\r\n\r\n    if (expectedType === \"integer\" && valueType === \"number\") {\r\n      return Number.isInteger(value);\r\n    } else {\r\n      return expectedType === valueType;\r\n    }\r\n  }\r\n\r\n  static doScrollOnHTMLElement(x, y, sizerElement, scrollingElement, iframe) {\r\n    const { scrollHeight, scrollWidth } = sizerElement;\r\n\r\n    const clientHeight = iframe ? iframe.clientHeight : scrollingElement.clientHeight;\r\n    const clientWidth = iframe ? iframe.clientWidth : scrollingElement.clientWidth;\r\n\r\n    const scrollableHeight = scrollHeight - clientHeight;\r\n    const scrollableWidth = scrollWidth - clientWidth;\r\n\r\n    const { finalX, finalY } = Utils.calculateFinalScrollValue(x, y, scrollableHeight, scrollableWidth);\r\n\r\n    Utils.doScroll(finalY, finalX, scrollingElement);\r\n  }\r\n\r\n  /**\r\n   * Do scroll on an HTML element\r\n   * @param {*} top \r\n   * @param {*} left \r\n   * @param {*} element \r\n   */\r\n  static doScroll(top, left, element) {\r\n    if (!element) {\r\n      return;\r\n    }\r\n    element.scroll({\r\n      top,\r\n      left,\r\n      behavior: 'smooth'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Computes the percentage if necessary on a scrollable container\r\n   * @param {*} x px/% value\r\n   * @param {*} y px/% value\r\n   * @param {*} scrollableHeight \r\n   * @param {*} scrollableWidth \r\n   * @returns { finalX, finalY }\r\n   */\r\n  static calculateFinalScrollValue(x, y, scrollableHeight, scrollableWidth) {\r\n    let finalX = x ? parseInt(x, 10) : undefined;\r\n    let finalY = y ? parseInt(y, 10) : undefined;\r\n\r\n    if (x && x.includes(\"%\")) {\r\n      finalX = Utils.computePercentage(scrollableWidth, parseFloat(x))\r\n    }\r\n\r\n    if (y && y.includes(\"%\")) {\r\n      finalY = Utils.computePercentage(scrollableHeight, parseFloat(y))\r\n    }\r\n\r\n    return {\r\n      finalX,\r\n      finalY\r\n    }\r\n  }\r\n\r\n  /**\r\n   * finds the percentage value of a number \r\n   * @param {Number} num \r\n   * @param {Number} percentage \r\n   * @returns {Number} value\r\n   */\r\n  static computePercentage(num, percentage) {\r\n    return num * (percentage / 100);\r\n  }\r\n\r\n}\r\n","import axios from 'axios';\r\nimport Utils from '../utils/Utils';\r\n\r\n/**\r\n * Interaction with the server providing configuration data and resources.\r\n * \r\n * We support two running modes:\r\n *  - The standard mode expecting a REST API on the server to obtain configuration data.\r\n *  - A simplified mode expecting a plain static content server. This mode is meant to \r\n *  support item authoring tools that do not embed a dynamic content server. \r\n * \r\n *   Action              | Preview mode                                      | Rest-API mode\r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Config file         | <WindowURLWithPath>/courses/previewcourse.json    | <WindowURLNoPath>/ee4cba-api/courses?userId=<username>&<URLParams>\r\n *   retrieval           | <WindowURLWithPath>/tests/<testname>.json         | <WindowURLNoPath>/ee4cba-api/tests/<testname>/?<URLParams>\r\n *                       | <WindowURLWithPath>/items/<itemname>.json         | <WindowURLNoPath>/ee4cba-api/items/<itemname>/?<URLParams>\r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Resource            | ./resources                                       | <WindowURLNoPath>/ee4cba_assets/<itemname>/resources\r\n *   retrieval           | ./external-resources                              | <WindowURLNoPath>/ee4cba_assets/<itemname>/external-resources\r\n *                       |                                                   |\r\n */\r\nexport default class ServerCalls {\r\n\r\n  // --------- public API --------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * The URL path components used to access the server's API.\r\n   */\r\n  static restApiTargets = {\r\n    CONFIGURATION_API: 'ee4cba-api',\r\n    ASSETS_API: 'ee4cba_assets',\r\n    TRACE_ENDPOINT: 'trace',\r\n    RECORDING_ENDPOINT: 'recording'\r\n  }\r\n\r\n  /**\r\n   * Do we run with a simplified server interactions protocol\r\n   * specifically designed to support a preview in an item authoring tool?\r\n   * \r\n   * See class comment for more details.\r\n   */\r\n  static runWithSimplifiedPreviewServer() {\r\n    const controllerMode = Utils.getControllerMode();\r\n    switch (controllerMode) {\r\n      case 'preview':\r\n        return true;\r\n      case 'rest-api':\r\n        return false;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the complete configuration (i.e. test course, tests and items) from the server.\r\n   */\r\n  static getJsonsData(username) {\r\n    console.log(`Getting configuration data in ${ServerCalls.runWithSimplifiedPreviewServer() ? \"preview\" : \"rest-api\"} mode.`);\r\n    return (ServerCalls.doGetCourseConfigurationStep(ServerCalls.getFirstCourse(), username)\r\n      .then(courseStepResult => ServerCalls.doGetTestConfigurationsStep(courseStepResult))\r\n      .then(testsStepResult => ServerCalls.doGetItemConfigurationsStep(testsStepResult))\r\n      .then(itemsStepResult => ServerCalls.doBuildConfigurationStep(itemsStepResult))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Build a promise that puts the given assets to the CBA cache.\r\n   * \r\n   * This is used by the ServiceWorker to cache assets.\r\n   * \r\n   * @param {*} assets \r\n   */\r\n  static cacheAssets(assets = []) {\r\n    console.log(assets);\r\n  }\r\n\r\n  static preloadResources(resources, type) {\r\n    const resourcePromises = resources.map(resource => new Promise((resolve, reject) => {\r\n      const linkTag = document.createElement('link');\r\n      linkTag.as = type;\r\n      linkTag.href = resource.path;\r\n      linkTag.rel = \"preload\";\r\n\r\n\r\n      if (type === \"video\" || type === \"audio\") {\r\n        linkTag.type = \"media\";\r\n        linkTag.rel = \"prefetch\";\r\n      }\r\n\r\n\r\n      if (resource.size > 5 * (10 ** 6) && (type === \"video\" || type === \"audio\")) {\r\n        linkTag.as = \"fetch\";\r\n      }\r\n\r\n      linkTag.onload = () => {\r\n        resource.hadErrors = false;\r\n        resolve(resource);\r\n      }\r\n\r\n      linkTag.onerror = () => {\r\n        console.error(\"Error while loading resource: \", resource);\r\n        resource.hadErrors = true;\r\n        resolve(resource);\r\n      }\r\n      document.head.append(linkTag);\r\n    }));\r\n\r\n\r\n    return Promise.all(resourcePromises);\r\n\r\n  }\r\n\r\n  // --------- private stuff ----------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Create the axios instance that we will use to fetch data from the server.\r\n   */\r\n  static instance = axios.create({\r\n    baseURL: ServerCalls.getServerPath(),\r\n    timeout: 30000,\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Build the base of the URLs that we use to access the server to obtain data.\r\n   * \r\n   * We use the origin of our window as a starting point and modify the URL as follows:\r\n   * If we do not run in a simplifying preview context we return our origin URL but replace the path \r\n   * (and all parameters) with the plain REST API endpoint. \r\n   *   Example: For the origin URL http://127.0.0.1/app?param=value we return http://127.0.0.1/ee4cba-api\r\n   * If we run in a simplifying preview context we return the origin URL but drop all parameters. \r\n   *   Example: For the origin URL http://127.0.0.1/app?param=value we return http://127.0.0.1/app\r\n   */\r\n  static getServerPath() {\r\n    return ServerCalls.runWithSimplifiedPreviewServer()\r\n      ? ServerCalls.getCallingUrlWithoutParams()\r\n      : `${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.CONFIGURATION_API}/`;\r\n  }\r\n\r\n  /**\r\n   * Get the URL that called our code and strip all params.\r\n   * \r\n   * The method retains the path part of the URL.\r\n   */\r\n  static getCallingUrlWithoutParams() {\r\n    const href = window.location.href.split('?')[0];\r\n    return `${href.substring(0, href.lastIndexOf('/'))}/`;\r\n  }\r\n\r\n  /**\r\n   * Get the path of the initial course configuration.\r\n   * \r\n   *  In a simplifying preview mode we return 'previewcourses' as file name. (Another method \r\n   *  will append the .json extension later.)\r\n   *  In full REST API mode we don't specify a specific file name: A username parameter\r\n   *  will be added in this case by another method.\r\n   */\r\n  static getFirstCourse() {\r\n    return ServerCalls.runWithSimplifiedPreviewServer() ? 'previewcourses' : '';\r\n  }\r\n\r\n\r\n  static doGetCourseConfigurationStep(courseName, username) {\r\n    return ServerCalls.getCourse(courseName, username);\r\n  }\r\n\r\n  static doGetTestConfigurationsStep(courseStepResult) {\r\n    const { settings, headerButtons, sessionId, courses } = courseStepResult;\r\n\r\n    // Remove all duplicates from the array of test names: \r\n    // Don't retrieve the same test configuration more than once.\r\n    const testsToRetrieve = ServerCalls.buildArrayWithoutDuplicates(courses);\r\n\r\n    // Get the array of promises that retrieve all tests \r\n    const promisesForTests = testsToRetrieve.map(testName => ServerCalls.getTest(testName));\r\n\r\n    // Return a promise that will execute all test retrieval promises and return the results together with the courses step result\r\n    return ServerCalls.axiosAllWrapper(\r\n      {\r\n        settings,\r\n        headerButtons,\r\n        sessionId,\r\n        courses,\r\n        testsToRetrieve\r\n      },\r\n      promisesForTests\r\n    );\r\n  }\r\n\r\n  static isEmptyRetrievedValue(value) {\r\n    return value === undefined || value === null || value.toString() === '';\r\n  }\r\n\r\n  static doGetItemConfigurationsStep(testsStepResult) {\r\n    const { settings, headerButtons, sessionId, courses, testsToRetrieve } = testsStepResult.contextData;\r\n    const tests = testsStepResult.response;\r\n\r\n    const flaggedErrors = [];\r\n    if (tests.length === 0) {\r\n      flaggedErrors.push('no tests to execute found in course configuration');\r\n    }\r\n    tests.forEach((value, index) => { if (this.isEmptyRetrievedValue(value)) flaggedErrors.push(`could not retrieve test ${testsToRetrieve[index]}`); });\r\n\r\n    // get all item names mentioned in the tests\r\n    const collectedItemNames = tests\r\n      .filter(value => !this.isEmptyRetrievedValue(value))\r\n      .reduce((itemNamesArray, test) => itemNamesArray.concat(test.items), []);\r\n\r\n    // remove duplicates from item names\r\n    const itemsToRetrieve = ServerCalls.buildArrayWithoutDuplicates(collectedItemNames);\r\n\r\n    // get array of item promises\r\n    const promisesForItems = itemsToRetrieve.map(itemName => ServerCalls.getItem(itemName));\r\n\r\n    // get all items data\r\n    return ServerCalls.axiosAllWrapper(\r\n      {\r\n        settings,\r\n        headerButtons,\r\n        sessionId,\r\n        courses,\r\n        tests,\r\n        itemsToRetrieve,\r\n        flaggedErrors\r\n      },\r\n      promisesForItems\r\n    );\r\n\r\n  }\r\n\r\n  static doBuildConfigurationStep(itemsStepResult) {\r\n    const { settings, headerButtons, sessionId, courses, tests, itemsToRetrieve, flaggedErrors } = itemsStepResult.contextData;\r\n    const items = itemsStepResult.response;\r\n\r\n    if (items.length === 0) {\r\n      flaggedErrors.push('no required items found in test specifications')\r\n    }\r\n    items.forEach((value, index) => { if (this.isEmptyRetrievedValue(value)) flaggedErrors.push(`could not retrieve item ${itemsToRetrieve[index]}`); });\r\n\r\n    return (ServerCalls.validateJsonResults(flaggedErrors, courses, tests, items.filter(value => !this.isEmptyRetrievedValue(value)))\r\n      ? {\r\n        success: true,\r\n        payload: {\r\n          settings,\r\n          headerButtons,\r\n          sessionId,\r\n          courses,\r\n          tests,\r\n          items,\r\n        }\r\n      }\r\n      : {\r\n        success: false\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a promise that runs an array of promises and returns an array of results.\r\n   * \r\n   *  @param {*} contextData Some arbitrary context data that we will include in the result.\r\n   *  @param {[*]} promisesArray The promises to run.\r\n   * \r\n   *  @returns A promise that will return an object with two fields: \r\n   *    - contextData: the given context data\r\n   *    - response: the array of promise results\r\n   */\r\n  static axiosAllWrapper(contextData, promisesArray) {\r\n    return axios.all(promisesArray)\r\n      .then((response) => {\r\n        const result = {\r\n          contextData,\r\n          response\r\n        };\r\n        return result;\r\n      })\r\n      .catch((error) => {\r\n        console.info(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Build an array that contains the entries of the given array\r\n   * but drops all duplicates.\r\n   */\r\n  static buildArrayWithoutDuplicates(array) {\r\n    return [...new Set(array)];\r\n  }\r\n\r\n  /**\r\n   * Validate the configuration obtained from the server\r\n   * \r\n   * @param {*} flaggedErrors An array of errors that were detected during data retrieval.\r\n   * @param {*} course The list of the names of the tests to be executed.\r\n   * @param {*} tests An array of test configurations.\r\n   * @param {*} items An array of item configurations.\r\n   */\r\n  static validateJsonResults(flaggedErrors, course, tests, items) {\r\n    if (flaggedErrors.length !== 0) {\r\n      console.info('Errors during data retrieval:', flaggedErrors);\r\n      console.info('loaded course:', course);\r\n      console.info('loaded tests:', tests);\r\n      console.info('loaded items:', items);\r\n    }\r\n    return flaggedErrors.length === 0\r\n      && (course !== undefined || course.length > 0)\r\n      && (tests !== undefined || tests.length > 0)\r\n      && (items !== undefined || items.length > 0)\r\n  }\r\n\r\n  /**\r\n   * Get a test course configuration from the server.\r\n   * \r\n   * @param {*} courseName \r\n   */\r\n  static getCourse(courseName, username) {\r\n    return ServerCalls.getDataFromServer('courses', courseName, username);\r\n  }\r\n\r\n  /**\r\n   * Get a test configuration from the server.\r\n   * \r\n   * @param {*} testName\r\n   */\r\n  static getTest(testName) {\r\n    return ServerCalls.getDataFromServer('tests', testName, undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get an item configuration from the server.\r\n   * \r\n   * @param itemName \r\n   */\r\n  static getItem(itemName) {\r\n    return ServerCalls.getDataFromServer('items', itemName, undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get configuration data from the server.\r\n   * \r\n   * - If we run in the simplifying preview mode we add a file extension .json at the end of the request URL path. \r\n   *   This assumes a static content server serving static configuration data files from the file system.\r\n   * - If we run in in full REST-API mode we don't append a file extension since we assume a service API to respond.\r\n   * \r\n   * The method log a message and returns an empty array if any error occurs.\r\n   * \r\n   * @param {String} typeOfData The type of configuration data to retrieve: 'courses', 'tests', 'items'.\r\n   * @param {String} nameOfValue The name of the data item to retrieve, e.g. the test name of the test to retrieve or the item name of the item to retrieve.\r\n   * @param {String} username The name of the user for whom we retrieve configuration data. We add this as query parameter to the request URL.\r\n   */\r\n  static getDataFromServer(typeOfData, nameOfValue, username) {\r\n    const urlPathExtension = `/${typeOfData}/${nameOfValue}${ServerCalls.runWithSimplifiedPreviewServer() ? '.json' : ''}`;\r\n    const params = (\r\n      ServerCalls.runWithSimplifiedPreviewServer()\r\n        ? {}\r\n        : {\r\n          params: ServerCalls.addAsParam(Utils.getQueryParams(), username)\r\n        }\r\n    );\r\n    return ServerCalls.instance.get(urlPathExtension, params)\r\n      .then(response => response.data)\r\n      .catch((error) => {\r\n        console.info(error);\r\n        return [];\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Add a userId parameter to the query parameter object.\r\n   */\r\n  static addAsParam(params, username) {\r\n    if (username !== undefined) {\r\n      params.userId = username;\r\n    }\r\n    return params;\r\n  }\r\n\r\n}\r\n","/**\r\n * Provide the 'standard' sequence for a given list of tests.\r\n */\r\nexport default class StandardTaskSequencer {\r\n\r\n  constructor(course, tests) {\r\n    this.course = course;\r\n    this.tests = tests;\r\n    this.taskList = StandardTaskSequencer.buildTaskList(course, tests);\r\n\r\n    const initialTask = this.taskList[0];\r\n    if (initialTask === undefined) {\r\n      console.error(\"No task found in standard task sequencer.\");\r\n      this.activeTestName = undefined;\r\n      this.activeItemName = undefined;\r\n      this.activeTaskName = undefined;\r\n    } else {\r\n      const { testName, itemName, taskName } = initialTask;\r\n      this.activeTestName = testName;\r\n      this.activeItemName = itemName;\r\n      this.activeTaskName = taskName;\r\n    }\r\n  }\r\n\r\n  // ---------- public API -----------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Find the first task with the given name inside a specific test (i.e. we ignore the source item).\r\n   * \r\n   * We return undefined if no matching task is available. \r\n   * We log the reason for not finding a task as error if the error log flag is set.\r\n   */\r\n  findFirstMatchingTaskInTest = (newTestName, newTaskName, withErrorLog) => {\r\n    const newTest = StandardTaskSequencer.getTestForName(this.tests, newTestName);\r\n    if (newTest === undefined) {\r\n      if (withErrorLog) {\r\n        console.error(`Test ${newTestName} is not defined in the test course`);\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    const newTaskEntry = newTest.taskCourse.find((value, index, theArray) => value.task === newTaskName);\r\n\r\n    if (newTaskEntry === undefined) {\r\n      if (withErrorLog) {\r\n        console.error(`Task ${newTaskName} is not defined in test ${newTestName}`);\r\n      }\r\n      return undefined;\r\n    }\r\n    return ({\r\n      testName: newTestName,\r\n      itemName: newTaskEntry.item,\r\n      taskName: newTaskEntry.task\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the task info for the next task in our task sequence.\r\n   * \r\n   * The method silently returns undefined if not next taskk is available.\r\n   */\r\n  getNextTaskInfo = () => (this.nextTaskAvailable() ? this.taskList[this.getCurrentTaskIndex() + 1] : undefined);\r\n\r\n  /**\r\n   * Get the task info for the previous task in our task sequence.\r\n   * \r\n   * The method silently returns undefined if not previous taskk is available.\r\n   */\r\n  getPreviousTaskInfo = () => (this.previousTaskAvailable() ? this.taskList[this.getCurrentTaskIndex() - 1] : undefined);\r\n\r\n  /**\r\n   * Could we currently perform a switch to the next task?\r\n   */\r\n  nextTaskAvailable = () => this.taskList.length > this.getCurrentTaskIndex() + 1;\r\n\r\n  /**\r\n   * Could we currently perform a switch to the previous task?\r\n   */\r\n  previousTaskAvailable = () => this.getCurrentTaskIndex() > 0;\r\n\r\n  /**\r\n   * Switch the current task in our internal structures.\r\n   */\r\n  switchCurrentTask = (test, item, task) => {\r\n    this.activeTestName = test;\r\n    this.activeItemName = item;\r\n    this.activeTaskName = task;\r\n  }\r\n\r\n  /**\r\n   * Get info about the currently active task. \r\n   */\r\n  getCurrentTaskInfo = () => ({\r\n    testName: this.activeTestName,\r\n    itemName: this.activeItemName,\r\n    taskName: this.activeTaskName\r\n  });\r\n\r\n  /**\r\n   * Get the course/tests configuration.\r\n   */\r\n  getConfigurationInfo = () => ({\r\n    course: this.course,\r\n    tests: this.tests\r\n  });\r\n\r\n  // -------------- private stuff ----------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the index of the currently active task in our task list.\r\n   */\r\n  getCurrentTaskIndex = () => {\r\n    const result = StandardTaskSequencer.getIndexForTask(this.taskList, this.activeTestName, this.activeItemName, this.activeTaskName);\r\n    if (result < 0) {\r\n      console.error(\"Cannot find task in task list\");\r\n      return undefined;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the index of the specified task in the given task list.\r\n   */\r\n  static getIndexForTask(taskList, testName, itemName, taskName) {\r\n    return taskList.findIndex((entry, index, all) => entry.testName === testName && entry.itemName === itemName && entry.taskName === taskName);\r\n  }\r\n\r\n  /**\r\n   * Get the test configuration object for the specified test.\r\n   * \r\n   * The method returns the test configuration object, i.e. an object with attributes \r\n   *  - name\r\n   *  - items\r\n   *  - taskCourse\r\n   */\r\n  static getTestForName(tests, testName) {\r\n    const result = tests.find((value, index, theArray) => value.name === testName);\r\n    if (result === undefined) {\r\n      console.error(`Could not find test ${testName}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Build a list of all tasks in the given tests course.\r\n   * \r\n   * The method returns an array of objects where each object describes one task:\r\n   * - testName\r\n   * - itemName\r\n   * - taskName\r\n   */\r\n  static buildTaskList(testsCourse, tests) {\r\n    const result = [];\r\n    testsCourse.forEach((testName) => {\r\n      const test = StandardTaskSequencer.getTestForName(tests, testName);\r\n      test.taskCourse.forEach((taskEntry) => {\r\n        result.push({\r\n          testName,\r\n          itemName: taskEntry.item,\r\n          taskName: taskEntry.task\r\n        })\r\n      })\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n}\r\n","import ServerCalls from './ServerCalls';\r\nimport Utils from '../utils/Utils';\r\nimport StandardTaskSequencer from './StandardTaskSequencer';\r\n\r\n/**\r\n * Implementation of controller layer.\r\n * \r\n * This implementation uses the 'direct JavaScript' TaskPlayer API.\r\n * \r\n * We support two running modes:\r\n *  - The standard mode expecting a REST API on the server to obtain configuration data.\r\n *  - A simplified mode expecting a plain static content server. This mode is meant to \r\n *  support item authoring tools that do not embed a dynamic content server. \r\n * \r\n *   Action              | Preview mode                                      | Rest-API mode\r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Trace log target    | console.log                                       | <WindowURLNoPath>/ee4cba-api/trace\r\n *                       |                                                   | \r\n *   --------------------|---------------------------------------------------|---------------------------------------------------------\r\n *   Show Login Box      | no                                                | yes\r\n *                       |                                                   | \r\n * \r\n */\r\nexport default class Controller {\r\n\r\n  constructor() {\r\n    this.taskPlayer = undefined;\r\n    this.taskSequencer = undefined;\r\n\r\n    this.items = [];\r\n\r\n    this.settings = [];\r\n    this.headerButtons = [];\r\n\r\n    this.sessionId = undefined;\r\n    this.userId = undefined;\r\n\r\n    this.activeTestName = undefined;\r\n    this.activeItemName = undefined;\r\n    this.activeTaskName = undefined;\r\n  }\r\n\r\n  // ---------- public API -----------------------------------------------------------------\r\n\r\n  /**\r\n   * Let the controller drive the given task player. \r\n   */\r\n  runController = (taskPlayer) => {\r\n\r\n    this.taskPlayer = taskPlayer;\r\n\r\n    taskPlayer.runPlayer();\r\n\r\n    // Redirect the trace log stream to the trace endpoint of the server REST-API.\r\n    // If running as preview in an item authoring tool we let the trace logger write to the console instead.\r\n    if (!ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      taskPlayer.setHttpTraceTransmission(`${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.CONFIGURATION_API}/${ServerCalls.restApiTargets.TRACE_ENDPOINT}`, 20000, 10000);\r\n      taskPlayer.setHttpRecordingTransmission(`${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.CONFIGURATION_API}/${ServerCalls.restApiTargets.RECORDING_ENDPOINT}`);\r\n    }\r\n\r\n    // Do not show a login box if running as preview in an item authoring tool:\r\n    if (ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      const startWithLogin = Utils.getQueryParam('showLogin');\r\n      if (startWithLogin === 'true') {\r\n        this.showLogin();\r\n      } else {\r\n        this.obtainConfigurationAndRunFirstTask('PreviewUser');\r\n      }\r\n    } else {\r\n      this.showLogin();\r\n    }\r\n  }\r\n\r\n  // ---------- private stuff -----------------------------------------------------------------\r\n\r\n  /**\r\n   * Show the login dialog via the task player.\r\n   */\r\n  showLogin = () => {\r\n    this.taskPlayer.showLogin('Login', 'Username: ', 'Ok', this.loginDialogClosedCallback);\r\n  }\r\n\r\n  /**\r\n   * Callback for the task player to run once the user filled in the login dialog.\r\n   * \r\n   * We don't authenticate the user. The server will pick an appropriate test configuration\r\n   * for the given user.\r\n   */\r\n  loginDialogClosedCallback = (username) => {\r\n    this.obtainConfigurationAndRunFirstTask(username);\r\n  }\r\n\r\n  /**\r\n   * Obtain the full configuration for the given user from the server \r\n   * and start the first task in the task player.\r\n   */\r\n  obtainConfigurationAndRunFirstTask = (username) => {\r\n    ServerCalls.getJsonsData(username)\r\n      .then((data) => {\r\n        this.processConfigurationAndRunFirstTask(username, data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failure during task start in task player.', error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Process the full configuration given by the server for the given user\r\n   * and start the first task in the task player.\r\n   */\r\n  processConfigurationAndRunFirstTask = (username, configurationData) => {\r\n    this.userId = username;\r\n    if (configurationData.success) {\r\n      this.digestConfigurationResponse(configurationData.payload);\r\n      this.startFirstTaskInTaskPlayer();\r\n    } else {\r\n      console.error(`Server failed to send test configuration for user ${username}`);\r\n    }\r\n\r\n  }\r\n\r\n  startFirstTaskInTaskPlayer = () => {\r\n    this.sendItemConfigurationToTaskPlayer();\r\n\r\n    this.taskPlayer.setTraceContextId(this.sessionId);\r\n    this.taskPlayer.setRecordingContextId(this.sessionId);\r\n    this.taskPlayer.setUserId(this.userId);\r\n    this.taskPlayer.setTaskSequencer(this.taskSwitchCallback, this.taskAvailableCallback);\r\n    this.taskPlayer.setHeaderButtons(this.headerButtons);\r\n    const { course, tests } = this.taskSequencer.getConfigurationInfo();\r\n\r\n    if (this.settings.ShowTaskNavigationBars === true) {\r\n      this.taskPlayer.setMenuCarousels(course, tests.map(test => ({\r\n        // TODO: CKI clean up these attribute name inconsistencies in config files\r\n        name: test.name,\r\n        tasks: test.taskCourse\r\n      })));\r\n    } else {\r\n      this.taskPlayer.setMenuCarousels([], []);\r\n    }\r\n\r\n    this.taskPlayer.activateDebuggingWindows(\r\n      this.settings.scoreDebugging.hotKey,\r\n      this.settings.traceDebugging.hotKey,\r\n      this.settings.statemachineDebugging.hotKey\r\n    );\r\n    const initialTask = this.taskSequencer.getCurrentTaskInfo();\r\n    if (initialTask.taskName === undefined) {\r\n      console.error(\"No task found.\");\r\n    } else {\r\n      this.taskSequencer.switchCurrentTask(initialTask.testName, initialTask.itemName, initialTask.taskName);\r\n      this.taskPlayer.startTask(initialTask.testName, initialTask.itemName, initialTask.taskName);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Digest the configuration data that we got from the server.\r\n   */\r\n  digestConfigurationResponse = (receivedData) => {\r\n    this.taskSequencer = new StandardTaskSequencer(receivedData.courses, receivedData.tests);\r\n    this.items = receivedData.items;\r\n    this.settings = receivedData.settings;\r\n    this.headerButtons = receivedData.headerButtons;\r\n    this.sessionId = receivedData.sessionId;\r\n    console.log(\"courses:\", this.taskSequencer.getConfigurationInfo().course);\r\n    console.log(\"tests\", this.taskSequencer.getConfigurationInfo().tests);\r\n    console.log(\"items\", this.items);\r\n    console.log(\"settings\", this.settings);\r\n    console.log(\"headerButtons\", this.headerButtons);\r\n    console.log(\"sessionId\", this.sessionId);\r\n  }\r\n\r\n  /**\r\n   * Send all item configurations to the task player.\r\n   */\r\n  sendItemConfigurationToTaskPlayer = () => {\r\n    const dependenciesUrl = {\r\n      MathJax: \"./MathJax-local-server/mathjax@3.1.2-tex-mml-chtml.js\"\r\n    };\r\n\r\n    this.items.forEach((item) => {\r\n      const prefix = ServerCalls.runWithSimplifiedPreviewServer()\r\n        ? './'\r\n        : `${Utils.getCallingUrlWithoutPath()}/${ServerCalls.restApiTargets.ASSETS_API}/${item.name}/`;\r\n      const libraryPathsMap = {};\r\n\r\n      if (item.dependencies && item.dependencies.length > 0) {\r\n        item.dependencies.forEach((dependency) => {\r\n          libraryPathsMap[dependency.name] = dependenciesUrl[dependency.name]\r\n        })\r\n      }\r\n\r\n      this.taskPlayer.addItem(item, `${prefix}resources`, `${prefix}external-resources`, libraryPathsMap);\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch the task player to the given task\r\n   * and update our internal structures accordingly.\r\n   * \r\n   * The method assumes that the task player is running another task already. \r\n   */\r\n  stopOldTaskAndStartNewTask = (test, item, task) => {\r\n    this.taskSequencer.switchCurrentTask(test, item, task);\r\n    this.taskPlayer.stopTask();\r\n    this.taskPlayer.startTask(test, item, task);\r\n  }\r\n\r\n\r\n  /**\r\n   * Stop the currently running task and return to the login dialog.\r\n   */\r\n  stopOldTaskLogoutAndShowLogin = () => {\r\n    this.taskPlayer.stopTask();\r\n    this.taskPlayer.logout();\r\n    this.taskPlayer.clearItems();\r\n    if (ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      // eslint-disable-next-line no-alert\r\n      alert(\"Session finished.\");\r\n    }\r\n    this.showLogin();\r\n  }\r\n\r\n  /**\r\n   * Callback for task player to trigger a task switch.\r\n   * \r\n   * @param {String} request The type of switch request. Valid types are: 'nextTask', 'previousTask', 'cancelTask' and 'goToTask'.\r\n   * @param {String} scope For request type 'goToTask' only: The scope (i.e. test) of the task to switch to.\r\n   * @param {String} item For request type 'goToTask' only: The item of the task to switch to. If no item is given we will switch to the first task with matching name in the given scope.\r\n   * @param {String} task For request type 'goToTask' only: The the task to switch to. \r\n   */\r\n  taskSwitchCallback = (request, scope, item, task) => {\r\n    switch (request) {\r\n      case 'nextTask':\r\n        this.switchTaskNext();\r\n        break;\r\n      case 'previousTask':\r\n        this.switchTaskPrevious();\r\n        break;\r\n      case 'cancelTask':\r\n        this.stopOldTaskLogoutAndShowLogin();\r\n        break;\r\n      case 'goToTask':\r\n        if (item === undefined) {\r\n          this.switchFirstMatchingTaskInterTest(scope, task);\r\n        } else {\r\n          this.stopOldTaskAndStartNewTask(scope, item, task);\r\n        }\r\n        break;\r\n      default:\r\n        console.error(`Unknown switch task callback type: ${request}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback for task player to ask for the availability of a task switch.\r\n   * \r\n   * @param {String} request The type of switch request. Valid types are: 'nextTask', 'previousTask', 'cancelTask' and 'goToTask'.\r\n   * @param {String} scope For request type 'goToTask' only: The scope (i.e. test) of the task to switch to.\r\n   * @param {String} item For request type 'goToTask' only: The item of the task to switch to. If no item is given we will switch to the first task with matching name in the given scope.\r\n   * @param {String} task For request type 'goToTask' only: The the task to switch to. \r\n   */\r\n  taskAvailableCallback = (request, scope, item, task) => {\r\n    switch (request) {\r\n      case 'nextTask':\r\n        return this.taskSequencer.nextTaskAvailable();\r\n      case 'previousTask':\r\n        return this.taskSequencer.previousTaskAvailable();\r\n      case 'goToTask':\r\n        if (item === undefined) {\r\n          return this.taskSequencer.findFirstMatchingTaskInTest(scope, task, false) !== undefined;\r\n        } else {\r\n          return true;\r\n        }\r\n      default:\r\n        console.error(`Unknown switch task callback type: ${request}`);\r\n        return false;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to the first task with the given name inside a specific test (i.e. we ignore the source item).\r\n   */\r\n  switchFirstMatchingTaskInterTest = (newTestName, newTaskName) => {\r\n    const newTaskEntry = this.taskSequencer.findFirstMatchingTaskInTest(newTestName, newTaskName, true);\r\n    if (newTaskEntry !== undefined) {\r\n      this.stopOldTaskAndStartNewTask(newTaskEntry.testName, newTaskEntry.itemName, newTaskEntry.taskName);\r\n    } else {\r\n      this.missingTaskErrorFeedback(`Task ${newTaskName} in test ${newTestName} is unknown. We are in ${this.buildCurrentTaskLogString()}`, newTestName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch to the next task in our test course.\r\n   */\r\n  switchTaskNext = () => {\r\n    const newTaskInfo = this.taskSequencer.getNextTaskInfo();\r\n    if (newTaskInfo !== undefined) {\r\n      this.stopOldTaskAndStartNewTask(newTaskInfo.testName, newTaskInfo.itemName, newTaskInfo.taskName, false);\r\n    } else {\r\n      this.missingTaskErrorFeedback(`There is no next task. We are in ${this.buildCurrentTaskLogString()}`, undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch to the previous task in our test course.\r\n   */\r\n  switchTaskPrevious = () => {\r\n    const newTaskInfo = this.taskSequencer.getPreviousTaskInfo();\r\n    if (newTaskInfo !== undefined) {\r\n      this.stopOldTaskAndStartNewTask(newTaskInfo.testName, newTaskInfo.itemName, newTaskInfo.taskName);\r\n    } else {\r\n      this.missingTaskErrorFeedback(`There is no previous task. We are in ${this.buildCurrentTaskLogString()}`, undefined);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Give feedback on missing task errors:\r\n   *  - If we are in 'preview' controller mode raise an alert box with the message. \r\n   *  - In any case write a warning to the console.\r\n   */\r\n  missingTaskErrorFeedback = (message, newTestName) => {\r\n    if (ServerCalls.runWithSimplifiedPreviewServer()) {\r\n      const isTestSwitch = newTestName !== undefined && this.taskSequencer.getCurrentTaskInfo().testName !== newTestName;\r\n      // eslint-disable-next-line no-alert\r\n      alert(`The preview failed to do a task switch for this reason: ${message} ${isTestSwitch ? \". Task switches with explicit test names are not supported by the preview.\" : \". If the missing task exists in your item consider running a project preview.\"}`);\r\n    }\r\n    console.warn(message);\r\n  }\r\n\r\n\r\n  /**\r\n   * Build a string describing our current task.\r\n   */\r\n  buildCurrentTaskLogString = () => Controller.buildLogString(this.taskSequencer.getCurrentTaskInfo());\r\n\r\n  /**\r\n   * Build a string representation of the task described by the given task info.\r\n   * \r\n   * @param { test, item, task} currentTaskInfo \r\n   */\r\n  static buildLogString(currentTaskInfo) {\r\n    return (ServerCalls.runWithSimplifiedPreviewServer()\r\n      ? `task ${currentTaskInfo.taskName}`\r\n      : `task ${currentTaskInfo.taskName} from item ${currentTaskInfo.itemName} in test ${currentTaskInfo.testName}`);\r\n  }\r\n\r\n}\r\n","/**\r\n * Helper methods to work with index paths.\r\n * \r\n * See PathTranslationHelper for translation between user defined ID path and index path.\r\n */\r\nexport default class IndexPathHelper {\r\n\r\n  /**\r\n   * Build an index path root, i.e. test and item and task.\r\n   */\r\n  static buildPathRoot(testName, itemName, taskName) {\r\n    return `/test=${testName}/item=${itemName}/task=${taskName}`;\r\n  }\r\n\r\n  /**\r\n   * Build a page segment from a bare page name, i.e. without any navigation into a children list.\r\n   * \r\n   * Use the appendIndexToPageSegment method to add navigations into children lists.\r\n   */\r\n  static buildPageSegment(pageName) {\r\n    return `/page=${pageName}`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the page name from the given page segment.\r\n   */\r\n  static getPageNameFromPageSegment(pageSegment) {\r\n    if (!pageSegment.startsWith(\"/page=\")) {\r\n      console.warn(`Cannot get page name from invalid page segment: ${pageSegment}`);\r\n      return undefined;\r\n    }\r\n    const withNameInFront = pageSegment.substring(6);\r\n    const endIndex = withNameInFront.indexOf('/');\r\n    return endIndex === -1 ? withNameInFront : withNameInFront.substring(0, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Get the page name from the given path.\r\n   * @param path - path of the component\r\n   */\r\n  static getPageNameFromPath(path) {\r\n    const segmentIndex = path.indexOf(\"/page=\");\r\n    const hasValidPageSegment = segmentIndex !== -1;\r\n    if (!hasValidPageSegment) {\r\n      console.warn(`Cannot get page segment from invalid path: ${path}`);\r\n      return undefined;\r\n    }\r\n\r\n    return IndexPathHelper.getPageNameFromPageSegment(path.slice(segmentIndex));\r\n  }\r\n\r\n  /**\r\n   * Append the top level page segment to a path root.\r\n   *\r\n   * \r\n   * @param {*} pathRoot The path root (i.e. test/item/task) to be extended. \r\n   * @param {*} pageAreaType The type of page area (main, dialog or modal) to attach the page to.\r\n   * @param {*} pageAreaName The name of the page area (standard or Xpage for main type, an arbitrary name for dialog/modal types) to attach the page to.\r\n   * @param {*} pageSegment The page segment to attach to the page area.\r\n   */\r\n  static appendPageSegmentToPathRoot(pathRoot, pageAreaType, pageAreaName, pageSegment) {\r\n    return `${pathRoot}/pageAreaType=${pageAreaType}/pageAreaName=${pageAreaName}${pageSegment}`;\r\n  }\r\n\r\n  /**\r\n   * Append a string of page segments to the given path.\r\n   * \r\n   * @param {*} path The path to be extended.\r\n   * @param {*} pageSegments The string containing one or more page segments to be appended.\r\n   */\r\n  static appendPageSegmentsToPath(path, pageSegments) {\r\n    return path + pageSegments;\r\n  }\r\n\r\n  /**\r\n   * Drop the last page segment from a path.\r\n   * \r\n   * The method returns 'undefined' if the path does not contain any page segment.\r\n   */\r\n  static dropPageSegmentFromPath(path) {\r\n    const lastPageSlashIndex = path.lastIndexOf('/page=');\r\n    return lastPageSlashIndex === -1 ? undefined : path.substring(0, lastPageSlashIndex);\r\n  }\r\n\r\n  /**\r\n   * Drop all page segments from a path.\r\n   * \r\n   * The method returns the path if it does not contain any page segment.\r\n   */\r\n  static dropAllPageSegments(path) {\r\n    const firstPageSlashIndex = path.indexOf('/page=');\r\n    return firstPageSlashIndex === -1 ? path : path.substring(0, firstPageSlashIndex);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the last page segment from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain any page segment.\r\n   */\r\n  static getLastPageSegmentFromPath(path) {\r\n    const lastPageSlashIndex = path.lastIndexOf('/page=');\r\n    return lastPageSlashIndex === -1 ? undefined : path.substring(lastPageSlashIndex);\r\n  }\r\n\r\n  /**\r\n   * Get an array of all page segments in a path.\r\n   * \r\n   * The top level page segment is the first element in the array. \r\n   */\r\n  static getPageSegmentArray(path) {\r\n    const result = [];\r\n    let remainingPath = path;\r\n    let pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\r\n    while (pageSegment !== undefined) {\r\n      result.splice(0, 0, pageSegment);\r\n      remainingPath = IndexPathHelper.dropPageSegmentFromPath(remainingPath);\r\n      pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get a reversed array of all page segments in a path.\r\n   * \r\n   * The top level page segment is the last element in the array. \r\n   */\r\n  static getReversedPageSegmentArray(path) {\r\n    const result = [];\r\n    let remainingPath = path;\r\n    let pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\r\n    while (pageSegment !== undefined) {\r\n      result.push(pageSegment);\r\n      remainingPath = IndexPathHelper.dropPageSegmentFromPath(remainingPath);\r\n      pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Append the index of a child in a children array to a page segment. \r\n   */\r\n  static appendIndexToPageSegment(pageSegment, index) {\r\n    return `${pageSegment}/index=${index}`;\r\n  }\r\n\r\n  /**\r\n   * Drop the last index of a child from a page segment. \r\n   */\r\n  static dropIndexFromPageSegment(pageSegment) {\r\n    const lastSlashIndex = pageSegment.lastIndexOf('/index=');\r\n    return lastSlashIndex === -1 ? undefined : pageSegment.substring(0, lastSlashIndex);\r\n  }\r\n\r\n  /**\r\n   * Get the index of the last child from a page segment. \r\n   * \r\n   * The method returns the bare index as a number. \r\n   */\r\n  static getLastIndexFromPageSegment(pageSegment) {\r\n    const lastSlashIndex = pageSegment.lastIndexOf('/index=');\r\n    return lastSlashIndex === -1 ? undefined : pageSegment.substring(lastSlashIndex + 7);\r\n  }\r\n\r\n\r\n  /**\r\n   * Trim the leading test specification from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain an item specification.\r\n   * Otherwise it returns a path fragment starting with the item specification.\r\n   */\r\n  static trimTestFromPath(path) {\r\n    const slashIndex = path.indexOf('/item=');\r\n    return slashIndex === -1 ? undefined : path.substring(slashIndex);\r\n  }\r\n\r\n  /**\r\n   * Trim the path root (i.e. the test/item/task) and page area specification (i.e. pageAreaType/pageAreaName) from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain a page segment.\r\n   * Otherwise it returns the page segments string from the path.\r\n   */\r\n  static trimRootAndPageAreaFromPath(path) {\r\n    const slashIndex = path.indexOf('/page=');\r\n    return slashIndex === -1 ? undefined : path.substring(slashIndex);\r\n  }\r\n\r\n  /**\r\n   * Extract the path root (i.e. the test/item/task) from a path (without page type specification).\r\n   * \r\n   * The method returns the full path if the path does not contain a pageType specification.\r\n   * Otherwise it returns the path root up to (but not including) the pageType specification.\r\n   */\r\n  static getRootFromPath(path) {\r\n    const endIndex = path.indexOf('/pageAreaType=');\r\n    return endIndex === -1 ? path : path.substring(0, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Extract the path of a tree node inside a tree from the full index path of the tree node and the index path of the tree.\r\n   * \r\n   * The method returns the 'inner' path of the tree node given (leading from the tree to the node) \r\n   * if the given node path contains the given index path of the tree. \r\n   * Otherwise it returns null\r\n   */\r\n  static extractTreeChildPathFromTreePath(treePath, childPath) {\r\n    const endIndex = childPath.indexOf(treePath);\r\n    return endIndex === -1 ? null : childPath.substr(treePath.length);\r\n  }\r\n\r\n  /**\r\n   * Extract the page area type from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain a page area type specification.\r\n   */\r\n  static getPageAreaTypeFromPath(path) {\r\n    const typeKeyIndex = path.indexOf('/pageAreaType=');\r\n    const endIndex = path.indexOf('/pageAreaName=');\r\n    return (typeKeyIndex === -1 || endIndex === -1) ? undefined : path.substring(typeKeyIndex + 14, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Extract the page area name from a path.\r\n   * \r\n   * The method returns undefined if the path does not contain a page area name specification.\r\n   */\r\n  static getPageAreaNameFromPath(path) {\r\n    const typeKeyIndex = path.indexOf('/pageAreaName=');\r\n    if (typeKeyIndex === -1) return undefined;\r\n\r\n    const endIndex = path.indexOf('/page=');\r\n    if (endIndex === -1) return path.substring(typeKeyIndex + 14);\r\n\r\n    return path.substring(typeKeyIndex + 14, endIndex);\r\n  }\r\n\r\n\r\n  /**\r\n   * Find the index path of the CbaPageArea that is the first CbaPageArea ancestor of the given component.\r\n   * \r\n   * @param {String} path The index path of the child component of the CbaPageArea.\r\n   */\r\n  static findPageAreaAncestorPath(path) {\r\n    const trimmedPath = IndexPathHelper.dropPageSegmentFromPath(path);\r\n    if (IndexPathHelper.getLastPageSegmentFromPath(trimmedPath) === undefined) {\r\n      return undefined;\r\n    }\r\n    return trimmedPath;\r\n  }\r\n\r\n  /**\r\n   * Extract the page path from a component path.\r\n   * @param {String} path The index path of the child component of the page.\r\n   */\r\n  static getPagePath(path) {\r\n    const rootPath = IndexPathHelper.dropAllPageSegments(path);\r\n    const pageName = IndexPathHelper.getPageNameFromPath(path);\r\n    return IndexPathHelper.appendPageSegmentsToPath(rootPath, IndexPathHelper.buildPageSegment(pageName));\r\n  }\r\n\r\n  /**\r\n   * Replaces al special characters from an index path so it can be used as a valid css id or selector\r\n   * \r\n   * @param {String} path The index path\r\n   */\r\n\r\n  static getValidCssIdFromPath(path) {\r\n    return path.replace(/[&/\\\\#, +()$~%.'\":*?<>{}=]/g, '');\r\n  }\r\n\r\n\r\n}\r\n","import PropTypes from 'prop-types';\r\n\r\nclass PropertyMissingException {\r\n\r\n  constructor(message) {\r\n    this.name = 'PropertyMissingException';\r\n    this.message = message;\r\n  }\r\n\r\n  toString = () => `${this.name}: ${this.message}`;\r\n\r\n}\r\n\r\nexport default class PropTypesHelper {\r\n\r\n  static asOptional(propTypesRequirement) {\r\n    return (props, propName, componentName) => {\r\n      if (props[propName] === undefined) return undefined;\r\n      return PropTypes.checkPropTypes(propTypesRequirement, props[propName], propName, componentName);\r\n    }\r\n  }\r\n\r\n\r\n  static raiseError(message) {\r\n    const exception = new PropertyMissingException(message);\r\n    console.error(exception.toString());\r\n  }\r\n\r\n  static addPropTypes(propTypes, toAdd) {\r\n    Object.keys(toAdd).forEach((key) => {\r\n      propTypes[key] = toAdd[key]\r\n    });\r\n    return propTypes;\r\n  }\r\n\r\n  // common config property checking\r\n\r\n  static getStandardRuntimePropTypes() {\r\n    const result = {\r\n      componentStateManager: PropTypes.object.isRequired,\r\n      componentDirectory: PropTypes.object.isRequired,\r\n      incidentsAccumulator: PropTypes.object.isRequired,\r\n      taskResultsManager: PropTypes.object.isRequired,\r\n      statemachinesManager: PropTypes.object.isRequired,\r\n      presenterStateManager: PropTypes.object.isRequired,\r\n      taskNavigatorStateManager: PropTypes.object.isRequired,\r\n      traceLogBuffer: PropTypes.object.isRequired,\r\n      traceLogUploader: PropTypes.object.isRequired,\r\n      recordingBuffer: PropTypes.object.isRequired,\r\n      recordingUploader: PropTypes.object.isRequired,\r\n      clipboardManager: PropTypes.object.isRequired,\r\n      pageConfigurationsManager: PropTypes.object.isRequired,\r\n      taskManager: PropTypes.object.isRequired,\r\n    };\r\n\r\n    return result;\r\n  }\r\n\r\n  static positionPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n      width: PropTypes.number.isRequired,\r\n      height: PropTypes.number.isRequired,\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static fontPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      name: PropTypes.string.isRequired,\r\n      size: PropTypes.number.isRequired,\r\n      alignmentHorizontal: PropTypes.oneOf(['left', 'center', 'right']).isRequired,\r\n      bold: PropTypes.bool.isRequired,\r\n      italic: PropTypes.bool.isRequired,\r\n      underlined: PropTypes.bool.isRequired,\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static getColorVariantsPropTypes() {\r\n    return {\r\n      // Note: manage transparency with rgba(..., ..., ..., 0) for the background color\r\n      default: PropTypes.string.isRequired,\r\n      // An empty object as value will not fall back to default color but display no color at all:\r\n      disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      visited: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      selected: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    };\r\n  }\r\n\r\n  static colorPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      text: PropTypesHelper.asOptional(PropTypesHelper.getColorVariantsPropTypes()),\r\n      background: PropTypesHelper.asOptional(PropTypesHelper.getColorVariantsPropTypes())\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static borderPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      style: PropTypes.oneOf(['none', 'solid', 'outset', 'inset']).isRequired,\r\n      width: PropTypes.number,\r\n      radius: PropTypes.number,\r\n      color: PropTypesHelper.asOptional(PropTypesHelper.getColorVariantsPropTypes())\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static getTransformOriginPropTypes() {\r\n    return {\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired\r\n    };\r\n  }\r\n\r\n  static transformPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      rotate: PropTypes.number,\r\n      transformOrigin: PropTypesHelper.asOptional(PropTypesHelper.getTransformOriginPropTypes())\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static statePropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      disabled: PropTypes.bool.isRequired,\r\n      selected: PropTypes.bool.isRequired,\r\n      hidden: PropTypes.bool.isRequired,\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static textPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      // TODO: maybe we should drop the number type here as it may lead to unexpected situation \r\n      label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n      mouseOver: PropTypes.string,\r\n      dynamic: PropTypes.shape({\r\n        variable: PropTypes.string.isRequired,\r\n        valueMap: PropTypes.string\r\n      })\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static imagePropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      displayMode: PropTypes.oneOf(['none', 'left', 'right', 'initial', 'overlay']).isRequired,\r\n      overlayType: PropTypes.oneOf(['stretch', 'center', 'default', 'left']),\r\n      default: PropTypes.string,\r\n      // An empty object as value will not fall back to default image but display no image at all:\r\n      disabled: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      visited: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      selected: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n      dynamic: PropTypes.shape({\r\n        variable: PropTypes.string.isRequired,\r\n        valueMap: PropTypes.string\r\n      })\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static eventPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      standard: PropTypes.string,\r\n      alternate: PropTypes.string,\r\n      onFocusIn: PropTypes.string,\r\n      onFocusOut: PropTypes.string\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static linkPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      page: PropTypes.string,\r\n      pageUrl: PropTypes.string,\r\n      conditional: PropTypes.object,\r\n      pageAreaType: PropTypes.oneOf(['main', 'dialog', 'modal']),\r\n      pageAreaName: PropTypes.string,\r\n      receiver: PropTypes.string,\r\n      receiverTab: PropTypes.object,\r\n      historyMove: PropTypes.oneOf(['home', 'forward', 'back']),\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static tracePropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      type: PropTypes.string.isRequired,\r\n      addOn: PropTypes.object,\r\n      skipTrace: PropTypes.bool.isRequired\r\n    }\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static cursorPropsCheck(props, propName, componentName) {\r\n    const propTypes = {\r\n      standard: PropTypes.string,\r\n      image: PropTypes.string\r\n    }\r\n\r\n    return PropTypes.checkPropTypes(propTypes, props[propName], propName, componentName);\r\n  }\r\n\r\n  static getStandardConfigPropTypes(withChildren) {\r\n    const result = {\r\n      position: PropTypesHelper.positionPropsCheck,\r\n      font: PropTypesHelper.fontPropsCheck,\r\n      color: PropTypesHelper.colorPropsCheck,\r\n      border: PropTypesHelper.borderPropsCheck,\r\n      transform: PropTypesHelper.transformPropsCheck,\r\n      state: PropTypesHelper.statePropsCheck,\r\n      text: PropTypesHelper.textPropsCheck,\r\n      image: PropTypesHelper.imagePropsCheck,\r\n      cursor: PropTypesHelper.cursorPropsCheck,\r\n      event: PropTypesHelper.eventPropsCheck,\r\n      classifiers: PropTypes.array.isRequired,\r\n      link: PropTypesHelper.linkPropsCheck,\r\n      userDefinedId: PropTypes.string,\r\n      pageEditId: PropTypes.string,\r\n      trace: PropTypesHelper.tracePropsCheck,\r\n    };\r\n    if (withChildren) {\r\n      result.cbaChildren = PropTypes.array.isRequired;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Add prop checking for controller configuration.\r\n   */\r\n  static addSelectGroupControllerConfigPropTypes(propTypes) {\r\n    propTypes.selectGroups = PropTypes.arrayOf(PropTypes.shape({\r\n      blockSelectionChanges: PropTypes.bool.isRequired,\r\n      enforceSingleSelect: PropTypes.bool.isRequired,\r\n      allowDeselect: PropTypes.bool.isRequired,\r\n      initiallySelected: PropTypes.string,\r\n      deselectTarget: PropTypes.string\r\n    }));\r\n    return propTypes;\r\n  }\r\n\r\n  /**\r\n   * Add prop checking for possibly controlled component configuration.\r\n   */\r\n  static addSelectGroupMemberConfigPropTypes(propTypes) {\r\n    propTypes.selectGroupMember = PropTypes.shape({\r\n      controllerPathId: PropTypes.string.isRequired,\r\n      groupName: PropTypes.string.isRequired,\r\n      selectGroupMemberName: PropTypes.string\r\n    });\r\n    return propTypes;\r\n  }\r\n\r\n  static getCbaTreeColumnConfig() {\r\n    return {\r\n      mouseOver: PropTypes.string,\r\n      label: PropTypes.string,\r\n      moveable: PropTypes.bool,\r\n      resizable: PropTypes.bool,\r\n      width: PropTypes.number\r\n    }\r\n  }\r\n\r\n  static getCbaTreeRowConfig() {\r\n    return {\r\n      cells: PropTypes.array.isRequired,\r\n      expanded: PropTypes.bool.isRequired,\r\n      nodes: PropTypes.array.isRequired,\r\n      imagePath: PropTypes.string,\r\n      depth: PropTypes.number.isRequired,\r\n      onRowExpandClick: PropTypes.func,\r\n      onRowSelect: PropTypes.func.isRequired,\r\n      path: PropTypes.string.isRequired\r\n    }\r\n  }\r\n\r\n  /**\r\n   * gets the standard radio/checkbox label config proptypes\r\n   */\r\n  static getInputLabelConfig() {\r\n    return PropTypes.shape({\r\n      distance: PropTypes.number.isRequired,\r\n      position: PropTypes.string.isRequired\r\n    })\r\n\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * Helper methods to work with user defined ID paths.\r\n * \r\n * See PathTranslationHelper for translation between user defined ID path and index path.\r\n */\r\nexport default class UserDefPathHelper {\r\n\r\n  static forEachUserDefIdInPath(path, processor) {\r\n    if (path === undefined || path.lastIndexOf('/id=') === -1) return;\r\n    UserDefPathHelper.forEachUserDefIdInPath(UserDefPathHelper.dropUserDefIdFromPath(path), processor);\r\n    const lastId = UserDefPathHelper.getLastUserDefIdFromPath(path);\r\n    if (lastId !== undefined) {\r\n      processor(lastId);\r\n    }\r\n  }\r\n\r\n  static dropUserDefIdFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const lastSlashIndex = path.lastIndexOf('/id=');\r\n    if (lastSlashIndex === -1) {\r\n      return undefined;\r\n    }\r\n    return path.substring(0, lastSlashIndex);\r\n  }\r\n\r\n  static getLastUserDefIdFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const lastSlashIndex = path.lastIndexOf('/id=');\r\n    if (lastSlashIndex === -1) {\r\n      return undefined;\r\n    }\r\n    return path.substring(lastSlashIndex + 4);\r\n  }\r\n\r\n  static getPageAreaTypeFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const pageAreaNameSlashIndex = path.indexOf('/pageAreaName=');\r\n    return path.substring(14, pageAreaNameSlashIndex);\r\n  }\r\n\r\n  static getPageAreaNameFromPath(path) {\r\n    if (path === undefined) return undefined;\r\n\r\n    const pageAreaNameStartIndex = path.indexOf('/pageAreaName=') + 14;\r\n    const firstIdSlashIndex = path.indexOf('/id=');\r\n    if (firstIdSlashIndex === -1) {\r\n      return path.substring(pageAreaNameStartIndex);\r\n    }\r\n    return path.substring(pageAreaNameStartIndex, firstIdSlashIndex);\r\n  }\r\n\r\n  static buildUserDefIdPath(pageAreaType, pageAreaName, firstUserDefId) {\r\n    if (pageAreaType === undefined || pageAreaName === undefined || firstUserDefId === undefined) {\r\n      return undefined;\r\n    }\r\n    return `/pageAreaType=${pageAreaType}/pageAreaName=${pageAreaName}/id=${firstUserDefId}`;\r\n  }\r\n\r\n  static appendUserDefIdToPath(path, userDefId) {\r\n    if (path === undefined || userDefId === undefined) {\r\n      return undefined;\r\n    }\r\n    return `${path}/id=${userDefId}`;\r\n  }\r\n\r\n}\r\n","/**\r\n * Encapsulate the structure of the 'common' area in the component's registered state.\r\n * Be carefully to name the getter/setter as you the attribute \r\n * e.g. attribute name: myData \r\n * getter name: extractMyData\r\n * setter name: setMyData\r\n * We have a test covering this in StateAttributeAccess.test.js; \r\n * When adding new methods please add the property name in the array of the test\r\n*/\r\nexport default class StateAttributeAccess {\r\n\r\n  // generic methods (for internal use mostly) ------------------------------------\r\n  static getStateAttribute(state, name) {\r\n    if (state === undefined) return undefined;\r\n    return state[name];\r\n  }\r\n\r\n  static setStateAttribute(state, name, value) {\r\n    state[name] = value;\r\n  }\r\n\r\n\r\n  // direct state access methods: --------------------------------------------------\r\n\r\n  // deep copy decision for state storing/retrieving operations\r\n  static extractDeepCopy(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"deepCopy\");\r\n  }\r\n\r\n  static setDeepCopy(state, deepCopy) {\r\n    StateAttributeAccess.setStateAttribute(state, \"deepCopy\", deepCopy);\r\n  }\r\n\r\n  // volatile marker for state storing/retrieving operations\r\n  static extractVolatile(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"volatile\");\r\n  }\r\n\r\n  static setVolatile(state, deepCopy) {\r\n    StateAttributeAccess.setStateAttribute(state, \"volatile\", deepCopy);\r\n  }\r\n\r\n  // component class name (for snapshot transformer method access)\r\n  static extractComponentClassName(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"componentClassName\");\r\n  }\r\n\r\n  static setComponentClassName(state, componentClassName) {\r\n    StateAttributeAccess.setStateAttribute(state, \"componentClassName\", componentClassName);\r\n  }\r\n\r\n  // disabled state of any component\r\n  static extractDisabled(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"disabled\");\r\n  }\r\n\r\n  static setDisabled(state, disabled) {\r\n    StateAttributeAccess.setStateAttribute(state, \"disabled\", disabled);\r\n  }\r\n\r\n  // hidden state of any component\r\n  static extractHidden(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"hidden\");\r\n  }\r\n\r\n  static setHidden(state, hidden) {\r\n    StateAttributeAccess.setStateAttribute(state, \"hidden\", hidden);\r\n  }\r\n\r\n  // visited state of any component\r\n  static extractVisited(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"visited\");\r\n  }\r\n\r\n  static setVisited(state, visited) {\r\n    StateAttributeAccess.setStateAttribute(state, \"visited\", visited);\r\n  }\r\n\r\n  // position of any component\r\n  static extractPosition(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"position\");\r\n  }\r\n\r\n  static setPosition(state, position) {\r\n    StateAttributeAccess.setStateAttribute(state, \"position\", position);\r\n  }\r\n\r\n\r\n  // default link receiver of any component\r\n  static extractDefaultLinkReceiver(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"defaultLinkReceiver\");\r\n  }\r\n\r\n  static setDefaultLinkReceiver(state, pageSegments) {\r\n    StateAttributeAccess.setStateAttribute(state, \"defaultLinkReceiver\", pageSegments);\r\n  }\r\n\r\n  // selectable state for table components\r\n  static extractSelectable(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectable\");\r\n  }\r\n\r\n  static setSelectable(state, selectable) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectable\", selectable);\r\n  }\r\n\r\n  // select state for components that are not controlled by a select-group controller in single-select mode\r\n  static extractSelected(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selected\");\r\n  }\r\n\r\n  static setSelected(state, selected) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selected\", selected);\r\n  }\r\n\r\n  // membership info for components that are under control of a select-group controller\r\n  static extractSelectGroupMemberInfo(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectGroupMemberInfo\");\r\n  }\r\n\r\n  static setSelectGroupMemberInfo(state, singleSelectStructure) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectGroupMemberInfo\", singleSelectStructure);\r\n  }\r\n\r\n  // select-group controller state in a select-group controller\r\n  static extractSelectGroupControllerState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectGroupControllerState\");\r\n  }\r\n\r\n  static setSelectGroupControllerState(state, controllerState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectGroupControllerState\", controllerState);\r\n  }\r\n\r\n\r\n  // propagation-group controller state in a propagation-group controller\r\n  static extractPropagationGroupControllerState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"propagationGroupControllerState\");\r\n  }\r\n\r\n  static setPropagationGroupControllerState(state, controllerState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"propagationGroupControllerState\", controllerState);\r\n  }\r\n\r\n\r\n  // text value of any component\r\n  static extractTextValue(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"textValue\");\r\n  }\r\n\r\n  static setTextValue(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"textValue\", value);\r\n  }\r\n\r\n  // highlightable state of any component\r\n  static extractHighlightable(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"highlightable\");\r\n  }\r\n\r\n  static setHighlightable(state, highlightable) {\r\n    StateAttributeAccess.setStateAttribute(state, \"highlightable\", highlightable);\r\n  }\r\n\r\n  // media player // invalid naming convention. refactor ?\r\n  static extractMediaVolume(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"volume\");\r\n  }\r\n\r\n  // invalid naming convention. refactor ?\r\n  static setMediaVolume(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"volume\", value);\r\n  }\r\n\r\n  static extractLastOperation(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"lastOperation\");\r\n  }\r\n\r\n  static setLastOperation(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"lastOperation\", value);\r\n  }\r\n\r\n  static extractCurrentTime(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"currentTime\");\r\n  }\r\n\r\n  static setCurrentTime(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"currentTime\", value);\r\n  }\r\n\r\n  static extractPlayNumber(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"playNumber\");\r\n  }\r\n\r\n  static setPlayNumber(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"playNumber\", value);\r\n  }\r\n\r\n  static extractMaxPlay(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"maxPlay\");\r\n  }\r\n\r\n  static setMaxPlay(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"maxPlay\", value);\r\n  }\r\n\r\n  static extractRecordNumber(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"recordNumber\");\r\n  }\r\n\r\n  static setRecordNumber(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"recordNumber\", value);\r\n  }\r\n\r\n  static extractMaxRecord(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"maxRecord\");\r\n  }\r\n\r\n  static setMaxRecord(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"maxRecord\", value);\r\n  }\r\n\r\n  static extractHideControls(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"hideControls\");\r\n  }\r\n\r\n  static setHideControls(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"hideControls\", value);\r\n  }\r\n\r\n  static extractAutomaticStart(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"automaticStart\");\r\n  }\r\n\r\n  static setAutomaticStart(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"automaticStart\", value);\r\n  }\r\n\r\n  static extractMediaBlob(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"mediaBlob\");\r\n  }\r\n\r\n  static setMediaBlob(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"mediaBlob\", value);\r\n  }\r\n\r\n  // external page frame\r\n  static extractExternalContentState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"externalContentState\");\r\n  }\r\n\r\n  static setExternalContentState(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"externalContentState\", value);\r\n  }\r\n\r\n  // selected cell for the table\r\n  static extractSelectedCell(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectedCell\");\r\n  }\r\n\r\n  static setSelectedCell(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectedCell\", value);\r\n  }\r\n\r\n  static extractOldSelectedCell(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"oldSelectedCell\");\r\n  }\r\n\r\n  static setOldSelectedCell(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"oldSelectedCell\", value);\r\n  }\r\n\r\n  static extractTableData(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"tableData\");\r\n  }\r\n\r\n  static setTableData(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"tableData\", value);\r\n  }\r\n\r\n  // table cell value, hadFocus,\r\n  static extractFormula(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"formula\");\r\n  }\r\n\r\n  static setFormula(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"formula\", value);\r\n  }\r\n\r\n  static extractCellHadFocus(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellHadFocus\");\r\n  }\r\n\r\n  static setCellHadFocus(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellHadFocus\", value);\r\n  }\r\n\r\n  static extractCellTitle(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellTitle\");\r\n  }\r\n\r\n  static setCellTitle(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellTitle\", value);\r\n  }\r\n\r\n  static extractCellHasError(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellHasError\");\r\n  }\r\n\r\n  static setCellHasError(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellHasError\", value);\r\n  }\r\n\r\n  static extractCellType(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellType\");\r\n  }\r\n\r\n  static setCellType(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellType\", value);\r\n  }\r\n\r\n  // address and content for the table cell editor \r\n  static extractCellEditorAddress(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorAddress\");\r\n  }\r\n\r\n  static setCellEditorAddress(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorAddress\", value);\r\n  }\r\n\r\n  static extractCellEditorContent(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorContent\");\r\n  }\r\n\r\n  static setCellEditorContent(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorContent\", value);\r\n  }\r\n\r\n  static extractCellEditorIsNotValid(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorIsNotValid\");\r\n  }\r\n\r\n  static setCellEditorIsNotValid(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorIsNotValid\", value);\r\n  }\r\n\r\n  static extractCellEditorContentIsReadOnly(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorContentIsReadOnly\");\r\n  }\r\n\r\n  static setCellEditorContentIsReadOnly(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorContentIsReadOnly\", value);\r\n  }\r\n\r\n  static extractCellEditorErrorMessage(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"cellEditorErrorMessage\");\r\n  }\r\n\r\n  static setCellEditorErrorMessage(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"cellEditorErrorMessage\", value);\r\n  }\r\n\r\n  // drag and drop\r\n  static extractDragAndDrop(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"dragAndDrop\");\r\n  }\r\n\r\n  static setDragAndDrop(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"dragAndDrop\", value);\r\n  }\r\n\r\n  // stopWatch\r\n  static extractCounterValue(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"counterValue\");\r\n  }\r\n\r\n  static setCounterValue(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"counterValue\", value);\r\n  }\r\n\r\n\r\n  // Tree\r\n  static extractTreeNodes(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeNodes\");\r\n  }\r\n\r\n  static setTreeNodes(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeNodes\", value);\r\n  }\r\n\r\n  static extractTreeColumns(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeColumns\");\r\n  }\r\n\r\n  static setTreeColumns(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeColumns\", value);\r\n  }\r\n\r\n  static extractTreeState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeState\");\r\n  }\r\n\r\n  static setTreeState(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeState\", value);\r\n  }\r\n\r\n  static extractNodeTypes(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"nodeTypes\");\r\n  }\r\n\r\n  static setNodeTypes(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"nodeTypes\", value);\r\n  }\r\n\r\n  static extractTreeReadOnly(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeReadOnly\");\r\n  }\r\n\r\n  static setTreeReadOnly(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeReadOnly\", value);\r\n  }\r\n\r\n  // Tree View\r\n  static extractTreeViewSort(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"treeViewSort\");\r\n  }\r\n\r\n  static setTreeViewSort(state, value) {\r\n    StateAttributeAccess.setStateAttribute(state, \"treeViewSort\", value);\r\n  }\r\n\r\n  static extractSelectedIds(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selectedIds\");\r\n  }\r\n\r\n  static setSelectedIds(state, selectedIds) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selectedIds\", selectedIds);\r\n  }\r\n\r\n  static extractDefaultHighlightColor(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"defaultHighlightColor\");\r\n  }\r\n\r\n  static setDefaultHighlightColor(state, defaultHighlightColor) {\r\n    StateAttributeAccess.setStateAttribute(state, \"defaultHighlightColor\", defaultHighlightColor);\r\n  }\r\n\r\n  static extractEditorState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"editorState\");\r\n  }\r\n\r\n  static setEditorState(state, editorState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"editorState\", editorState);\r\n  }\r\n\r\n  static extractSelections(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"selections\");\r\n  }\r\n\r\n  static setSelections(state, selections) {\r\n    StateAttributeAccess.setStateAttribute(state, \"selections\", selections);\r\n  }\r\n\r\n  static extractModifiersInEditorState(state) {\r\n    return StateAttributeAccess.getStateAttribute(state, \"modifiersInEditorState\");\r\n  }\r\n\r\n  static setModifiersInEditorState(state, modifiersInEditorState) {\r\n    StateAttributeAccess.setStateAttribute(state, \"modifiersInEditorState\", modifiersInEditorState);\r\n  }\r\n\r\n}\r\n","export default class StateManagerHelper {\r\n\r\n  static deepCopy(state) {\r\n    if (state === undefined) return undefined;\r\n    return JSON.parse(JSON.stringify(state));\r\n  }\r\n\r\n}\r\n","import StateAttributeAccess from './StateAttributeAccess';\r\nimport ComponentStateHelper from './ComponentStateHelper';\r\nimport CommonActionsHelper from '../components/CommonActionsHelper';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\n/**\r\n * Coordinate processing of recommendations, e.g. \r\n * - highlight the test in the TaskNavigator, \r\n * - jump to the recommended task once the recommended test is selected, \r\n * - activate the recommended control once the recommended task is selected\r\n */\r\nexport default class RecommendationsManager {\r\n\r\n  constructor(runtime) {\r\n    this.runtime = runtime;\r\n\r\n    this.recommendations = [];\r\n    this.taskNavigator = undefined;\r\n  }\r\n\r\n  // public API -------------------------------------------------------------------\r\n\r\n  /**\r\n   * The method expects an array of recommendation objects. \r\n   * Each recommendation object has the attributes\r\n   *  - testName\r\n   *  - taskName\r\n   *  - absoluteUserDefId (a UserDefinedIDPath like /pageType=standard/id=myPageAreaId/id=myComponentId)\r\n   */\r\n  setRecommendations = (recommendations) => {\r\n    const oldRecommendations = this.recommendations;\r\n    this.recommendations = StateManagerHelper.deepCopy(recommendations);\r\n\r\n    RecommendationsManager.traceRecommendationChange(oldRecommendations, this.recommendations, this.runtime);\r\n\r\n    if (this.taskNavigator !== undefined) {\r\n      this.taskNavigator.highlightRecommendations(this.recommendations);\r\n    }\r\n\r\n    // refresh display components affected by dropping the old recommendations \r\n    // and by setting the new recommendations.\r\n    // Note: Do this after setting the new recommendations to our this.recommendations member!\r\n    RecommendationsManager.refreshRecommendedComponents(oldRecommendations, this.runtime)\r\n    RecommendationsManager.refreshRecommendedComponents(this.recommendations, this.runtime)\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Initialize our reference to the TaskNavigator. \r\n   */\r\n  setTaskNavigator = (taskNavigator) => {\r\n    this.taskNavigator = taskNavigator;\r\n  }\r\n\r\n  /**\r\n   * Is the given display component instance (which must belong to the current running task)\r\n   * recommended currently?\r\n   * \r\n   * The method obtains the currently running test/task from the task manager.\r\n   * It translates the given index path to a userDefID path via PathTranslationHelper\r\n   * (which works for the currently running task only).\r\n   * \r\n   * For each recommendation the method checks the test/task match and the existence of a userDefIdPath specification \r\n   * first and only for a successful match it will run the path translation. \r\n   * Since we expect short recommendation lists the effort for checking the recommendations for each \r\n   * display component instance all the time should be small.\r\n   */\r\n  isRecommended = (indexPath) => {\r\n    const { runtime } = this;\r\n    const currentTaskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\r\n    let result = false;\r\n    this.recommendations.forEach((value, index, array) => {\r\n      if (value.testName === currentTaskInfo.test && value.taskName === currentTaskInfo.task && value.absoluteUserDefId !== undefined) {\r\n        const userDefIDPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n        if (userDefIDPath !== undefined && value.absoluteUserDefId === userDefIDPath) {\r\n          result = true;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Do further processing for a task that was chosen by the\r\n   * user in the task navigator.\r\n   * \r\n   * The method will look for recommendations on this task and\r\n   *  - for each recommendation it will set the background color of the display component instance specified to the 'recommendation' color.\r\n   *  - for the display component instance specified in the first matching recommendation it will\r\n   *    + set the selected state to true and\r\n   *    + do the page switch according to the display component's configuration. \r\n   */\r\n  processTaskSelected = (testName, itemName, taskName) => {\r\n    const { runtime } = this;\r\n    const firstRecommendation = RecommendationsManager.findFirstRecommendationForTask(this.recommendations, testName, taskName);\r\n    RecommendationsManager.setSelectedOnRecommendedComponent(firstRecommendation, runtime);\r\n    RecommendationsManager.doRecommendedPageSwitch(firstRecommendation, runtime);\r\n  }\r\n\r\n  /**\r\n   * Find the first recommendation that applies to the given test name.\r\n   */\r\n  static findFirstRecommendationForTest(recommendations, testName) {\r\n    return recommendations.find((value, index, theArray) => value.testName === testName);\r\n  }\r\n\r\n  /**\r\n   * Find the first recommendation that applies to the given test name and task name.\r\n   */\r\n  static findFirstRecommendationForTask(recommendations, testName, taskName) {\r\n    return recommendations.find((value, index, theArray) => (value.testName === testName) && (value.taskName === taskName));\r\n  }\r\n\r\n  /**\r\n   * Get the standard background color for recommended items.\r\n   */\r\n  static getRecommendationColor() {\r\n    return \"rgba(206, 239, 253, 1)\";\r\n  }\r\n\r\n  // private stuff --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Report a recommendations change in the trace log.\r\n   */\r\n  static traceRecommendationChange(oldRecommendations, newRecommendations, runtime) {\r\n    const { traceLogBuffer } = runtime;\r\n    traceLogBuffer.reportEvent('Recommend', new Date(), {\r\n      oldRecommendations: RecommendationsManager.buildRecommendationListForTrace(oldRecommendations),\r\n      newRecommendations: RecommendationsManager.buildRecommendationListForTrace(newRecommendations),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Transform the recommendations objects in the recommendations list \r\n   * to the form used in the trace log.\r\n   */\r\n  static buildRecommendationListForTrace(recommendations) {\r\n    return recommendations.map(recommendation => (\r\n      {\r\n        testName: recommendation.testName,\r\n        taskName: recommendation.taskName,\r\n        userDefIdPath: recommendation.absoluteUserDefId,\r\n        userDefId: UserDefPathHelper.getLastUserDefIdFromPath(recommendation.absoluteUserDefId)\r\n      }\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * Set the selected status of the display component specified in the given recommendation to true. \r\n   */\r\n  static setSelectedOnRecommendedComponent(recommendation, runtime) {\r\n    if (recommendation !== undefined && recommendation.absoluteUserDefId !== undefined) {\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractSelected, StateAttributeAccess.setSelected, true, recommendation.absoluteUserDefId, runtime, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the page switch specified in the link configuration of the display component \r\n   * \r\n   */\r\n  static doRecommendedPageSwitch(recommendation, runtime) {\r\n    if (recommendation !== undefined && recommendation.absoluteUserDefId !== undefined) {\r\n      const { pageConfigurationsManager } = runtime;\r\n      const userDefinedId = UserDefPathHelper.getLastUserDefIdFromPath(recommendation.absoluteUserDefId);\r\n      const targetPageSegment = pageConfigurationsManager.findPageSegmentForUserDefId(userDefinedId);\r\n      if (targetPageSegment === undefined) {\r\n        console.warn(`Recommendation switch could not find page segment for user defined ID ${userDefinedId}`);\r\n        return;\r\n      }\r\n      const targetComponentConfig = pageConfigurationsManager.findConfigurationForPageSegment(targetPageSegment);\r\n      const pathState = runtime.componentStateManager.findOrBuildStateByUserDefPath(recommendation.absoluteUserDefId, runtime);\r\n      const defaultLinkReceiver = StateAttributeAccess.extractDefaultLinkReceiver(pathState);\r\n      CommonActionsHelper.doPageSwitch(targetComponentConfig.config.link, runtime, defaultLinkReceiver, undefined);\r\n    }\r\n  }\r\n\r\n  static refreshRecommendedComponents(recommendations, runtime) {\r\n    const currentTaskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\r\n    recommendations.forEach((value, index, array) => {\r\n      if (value.testName === currentTaskInfo.test && value.taskName === currentTaskInfo.task && value.absoluteUserDefId !== undefined) {\r\n        RenderingHelper.triggerRenderingViaUserDefPath(value.absoluteUserDefId, runtime);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import PropTypesHelper from '../components/PropTypesHelper';\r\nimport CommonConfigHelper from './CommonConfigHelper';\r\n\r\n// TODO: add constant values for attributes\r\n\r\nexport default class AutoLayoutHelper {\r\n\r\n  static buildStyleForAutoLayout(configProps, orientation, pathState) {\r\n\r\n    const { autoLayoutLayer } = configProps;\r\n\r\n    // split after the autoLayout keywords\r\n    let result = {};\r\n\r\n    switch (autoLayoutLayer) {\r\n      case \"panel\": result = Object.assign(\r\n        CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState),\r\n        AutoLayoutHelper.buildStyleForAutoLayoutPanel(configProps, orientation, pathState)\r\n      );\r\n        break;\r\n      case \"cell\": result = AutoLayoutHelper.buildStyleForAutoLayoutCell(configProps);\r\n        break;\r\n      case \"element\": result = AutoLayoutHelper.buildStyleForAutoLayoutElement(configProps, orientation, pathState);\r\n        break;\r\n      case \"panel-element\": result = Object.assign(\r\n        AutoLayoutHelper.buildStyleForAutoLayoutPanel(configProps, orientation, pathState),\r\n        AutoLayoutHelper.buildStyleForAutoLayoutElement(configProps, orientation, pathState)\r\n      );\r\n        break;\r\n      case \"none\":\r\n        result = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n        break;\r\n      default:\r\n        // missing autoLayout value, probably using old/manual config. Using \"none\" case;\r\n        result = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n        PropTypesHelper.raiseError(\"autoLayoutLayer value missing\");\r\n        break;\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  static transformTemplateKeywords(keywords) {\r\n    return keywords.map((keyword) => {\r\n\r\n      if (keyword === \"fill\") return \"auto\";\r\n      if (keyword.endsWith(\"%\") || keyword.endsWith(\"px\")) return keyword;\r\n      if (keyword === \"auto\") return \"min-content\";\r\n\r\n      return null;\r\n    }).join(\" \");\r\n  }\r\n\r\n  static buildStyleForAutoLayoutPanel(configProps, orientation, pathState) {\r\n\r\n    const { rows, columns, blockAlignVertically, blockAlignHorizontally, gap } = configProps.autoLayout;\r\n\r\n    return {\r\n      display: \"grid\",\r\n      gridTemplateRows: AutoLayoutHelper.transformTemplateKeywords(rows),\r\n      gridTemplateColumns: AutoLayoutHelper.transformTemplateKeywords(columns),\r\n      alignContent: blockAlignVertically,\r\n      justifyContent: blockAlignHorizontally,\r\n      rowGap: gap.row,\r\n      columnGap: gap.column,\r\n      // border: \"1px solid tomato\"\r\n    };\r\n  }\r\n\r\n  static buildStyleForAutoLayoutCell(configProps) {\r\n\r\n    const { columnStart, rowStart, columnSpan, rowSpan, alignVertically, alignHorizontally } = configProps.autoLayout;\r\n\r\n    return {\r\n      position: \"relative\",\r\n      gridColumnStart: columnStart,\r\n      gridRowStart: rowStart,\r\n      gridColumnEnd: `span ${columnSpan}`,\r\n      gridRowEnd: `span ${rowSpan}`,\r\n      alignItems: AutoLayoutHelper.transformFlexAlignmentKeyword(alignVertically),\r\n      justifyContent: AutoLayoutHelper.transformFlexAlignmentKeyword(alignHorizontally),\r\n      display: \"flex\",\r\n      // border: \"1px dashed blue\"\r\n    }\r\n  }\r\n\r\n  static transformFlexAlignmentKeyword(alignment) {\r\n    switch (alignment) {\r\n      case \"start\": return \"flex-start\";\r\n      case \"end\": return \"flex-end\";\r\n      case \"center\":\r\n      case \"none\":\r\n      case \"stretch\":\r\n        return alignment;\r\n      default: return PropTypesHelper.raiseError(\"autoLayoutLayer -> cell alignment value invalid\");\r\n    }\r\n  }\r\n\r\n  static addHorizontalElementValues(resultStyle, configProps, useElementPosition, orientation, pathState) {\r\n    const positionFromState = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n\r\n    if (useElementPosition) {\r\n      resultStyle.left = positionFromState.left;\r\n      resultStyle.right = positionFromState.right;\r\n    }\r\n\r\n    resultStyle.width = positionFromState.width;\r\n  }\r\n\r\n  static addVerticalElementValues(resultStyle, configProps, useElementPosition, orientation, pathState) {\r\n    const positionFromState = CommonConfigHelper.buildAbsoluteStyleFromConfig(configProps, orientation, pathState);\r\n\r\n    if (useElementPosition) {\r\n      resultStyle.top = positionFromState.top;\r\n    }\r\n\r\n    resultStyle.height = positionFromState.height;\r\n  }\r\n\r\n  static buildStyleForAutoLayoutElement(configProps, orientation, pathState) {\r\n\r\n    const { alignVertically, alignHorizontally } = configProps.autoLayout;\r\n\r\n    const result = {\r\n      position: \"relative\"\r\n    };\r\n\r\n    switch (alignVertically) {\r\n      case \"start\":\r\n      case \"center\":\r\n      case \"end\": AutoLayoutHelper.addVerticalElementValues(result, configProps, false, orientation, pathState);\r\n        break;\r\n      case \"none\": AutoLayoutHelper.addVerticalElementValues(result, configProps, true, orientation, pathState);\r\n        break;\r\n      case \"stretch\": result.height = \"100%\";\r\n        break;\r\n      default: PropTypesHelper.raiseError(\"autoLayoutLayer -> alignVertically value invalid\")\r\n\r\n    }\r\n\r\n    switch (alignHorizontally) {\r\n      case \"start\":\r\n      case \"center\":\r\n      case \"end\": AutoLayoutHelper.addHorizontalElementValues(result, configProps, false, orientation, pathState);\r\n        break;\r\n      case \"none\": AutoLayoutHelper.addHorizontalElementValues(result, configProps, true, orientation, pathState);\r\n        result.position = \"relative\";\r\n        break;\r\n      case \"stretch\": result.width = \"100%\";\r\n        break;\r\n      default: PropTypesHelper.raiseError(\"autoLayoutLayer -> alignHorizontally value invalid\")\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport PropTypesHelper from '../components/PropTypesHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport RecommendationsManager from '../state/RecommendationsManager';\r\nimport Utils from \"../utils/Utils\";\r\nimport AutoLayoutHelper from './AutoLayoutHelper';\r\n\r\nexport default class CommonConfigHelper {\r\n\r\n\r\n  // property checking ----------------------------------------------------------------------\r\n\r\n  static checkPosition(position) {\r\n    const message = (\r\n      (position.x === undefined ? 'x value missing' : '')\r\n      + (position.y === undefined ? 'y value missing' : '')\r\n      + (position.width === undefined ? 'width value missing' : '')\r\n      + (position.height === undefined ? 'height value missing' : '')\r\n    );\r\n    if (message !== '') {\r\n      PropTypesHelper.raiseError(message);\r\n    }\r\n  }\r\n\r\n  static checkFont(font) {\r\n    const message = (\r\n      (font.name === undefined ? 'font name missing' : '')\r\n      + (font.size === undefined ? 'font size missing' : '')\r\n    );\r\n    if (message !== '') {\r\n      PropTypesHelper.raiseError(message);\r\n    }\r\n  }\r\n\r\n  static checkState(state) {\r\n    const message = (\r\n      (state.disabled === undefined ? 'disabled status missing' : '')\r\n      + (state.selected === undefined ? 'selected status missing' : '')\r\n      + (state.hidden === undefined ? 'hidden status missing' : '')\r\n    );\r\n    if (message !== '') {\r\n      PropTypesHelper.raiseError(message);\r\n    }\r\n  }\r\n\r\n\r\n  // methods to access common config values: -----------------------------\r\n\r\n  static getDisabled(configProps) {\r\n    return configProps.state.disabled;\r\n  }\r\n\r\n  static getSelected(configProps) {\r\n    return configProps.state.selected;\r\n  }\r\n\r\n  static getHidden(configProps) {\r\n    return configProps.state.hidden;\r\n  }\r\n\r\n  static getPosition(configProps) {\r\n    return configProps.position;\r\n  }\r\n\r\n  static getUserDefinedId(configProps) {\r\n    return configProps.userDefinedId;\r\n  }\r\n\r\n  static getDragAndDrop(configProps) {\r\n    return configProps.dragAndDrop;\r\n  }\r\n\r\n  static getIdentifyingInfoForLogMessage(configProps) {\r\n    const userDefinedId = CommonConfigHelper.getUserDefinedId(configProps);\r\n    const positionString = `at (${configProps.position.x},${configProps.position.y})`;\r\n    return (userDefinedId !== undefined ? `${userDefinedId} ` : \"\") + positionString;\r\n  }\r\n\r\n  static getObservedStatemachineVariableNames(configProps) {\r\n    const result = [];\r\n    if (configProps.text !== undefined\r\n      && configProps.text.dynamic !== undefined\r\n      && !result.includes(configProps.text.dynamic.variable)) {\r\n      result.push(configProps.text.dynamic.variable);\r\n    }\r\n    if (configProps.image !== undefined\r\n      && configProps.image.dynamic !== undefined\r\n      && !result.includes(configProps.image.dynamic.variable)) {\r\n      result.push(configProps.image.dynamic.variable);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // helper methods for rendering step -------------------------------------------------------\r\n\r\n  /**\r\n   * Calculate the text to be displayed as main content of a component. \r\n   * \r\n   * The method considers (with decreasing priority):\r\n   *  - a 'dynamic' text setting in the configProps that binds the component to a state machine variable\r\n   *  - the textValue attribute in the dynamic state of the component\r\n   *  - the default value text.label given in the configProps as text.label\r\n   *  - the empty string as default value if everything else fails\r\n   * \r\n   * @param {*} configProps The standard component config properties (i.e. sibling to the type attribute).\r\n   * @param {*} state The state of the component instance in the ComponentStateManager\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static buildDisplayText(configProps, state, runtime) {\r\n\r\n    if (configProps.text !== undefined && configProps.text.dynamic !== undefined) {\r\n      const textFromVariable = CommonConfigHelper.getDynamicValueFromStatemachineAndMapper(configProps.text.dynamic, runtime);\r\n      if (textFromVariable !== undefined) {\r\n        return textFromVariable;\r\n      }\r\n    }\r\n\r\n    const textFromState = StateAttributeAccess.extractTextValue(state);\r\n    if (textFromState !== undefined) {\r\n      return textFromState;\r\n    }\r\n\r\n    if (configProps.text !== undefined && configProps.text.label !== undefined) {\r\n      return configProps.text.label;\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  static buildTitle(props) {\r\n    return props.text && props.text.mouseOver !== undefined ? props.text.mouseOver : '';\r\n  }\r\n\r\n  static getImageTag(pathState, configProps, selected, runtime, extraStyle = {}) {\r\n    const { displayMode } = configProps.image;\r\n    if (displayMode !== 'left' && displayMode !== 'right' && displayMode !== 'initial') {\r\n      return undefined;\r\n    }\r\n\r\n    const disabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const visited = StateAttributeAccess.extractVisited(pathState);\r\n    const imageResource = CommonConfigHelper.getProperResourcePath(CommonConfigHelper.chooseImageOrColorVariant(configProps.image, disabled, selected, visited), runtime);\r\n    if (imageResource === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const imageStyle = Object.assign({\r\n      float: displayMode,\r\n      opacity: disabled ? 0.3 : 1\r\n    }, extraStyle);\r\n    return <img src={imageResource} alt=\"\" style={imageStyle} />;\r\n  }\r\n\r\n  static buildStyleByIndexPath(indexPath, configProps, selected, orientation, runtime) {\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const recommended = runtime.recommendationsManager.isRecommended(indexPath);\r\n    return CommonConfigHelper.buildStyleByState(pathState, configProps, selected, orientation, recommended, runtime);\r\n  }\r\n\r\n  static buildAbsoluteStyleFromConfig(configProps, orientation, pathState) {\r\n    const { position: positionInConfig } = configProps;\r\n    const positionInState = StateAttributeAccess.extractPosition(pathState);\r\n    const orientationValue = orientation || \"left\";\r\n\r\n    return {\r\n      position: 'absolute',\r\n      [orientationValue]: `${positionInState.x}px`,\r\n      top: `${positionInState.y}px`,\r\n      width: `${positionInConfig.width}px`,\r\n      height: `${positionInConfig.height}px`,\r\n    }\r\n  }\r\n\r\n  static buildStyleByState(pathState, configProps, selected, orientation, recommended, runtime) {\r\n\r\n    // set strictly required attributes:\r\n    const { position: positionInConfig, font, state, cursor } = configProps;\r\n    const paddingValue = positionInConfig.padding === undefined ? undefined : \"padding\"\r\n\r\n    CommonConfigHelper.checkPosition(positionInConfig);\r\n    CommonConfigHelper.checkFont(font);\r\n    CommonConfigHelper.checkState(state);\r\n\r\n    const result = Object.assign(\r\n      AutoLayoutHelper.buildStyleForAutoLayout(configProps, orientation, pathState),\r\n      {\r\n        [paddingValue]: `${positionInConfig.padding}px`,\r\n        outline: 'none',\r\n        visibility: StateAttributeAccess.extractHidden(pathState) ? 'hidden' : 'visible',\r\n        fontFamily: `'${font.name}', Geneva, sans-serif`,\r\n        fontSize: font.size,\r\n        fontWeight: font.bold ? 'bold' : 'normal',\r\n        fontStyle: font.italic ? 'italic' : 'normal',\r\n        textDecoration: font.underlined ? 'underline' : 'none',\r\n        textAlign: font.alignmentHorizontal\r\n      }\r\n    );\r\n\r\n    // set optional attributes\r\n    const disabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const visited = StateAttributeAccess.extractVisited(pathState);\r\n\r\n    CommonConfigHelper.setStyleAttribute(result, \"color\", CommonConfigHelper.chooseImageOrColorVariant(configProps.color.text, disabled, selected, visited));\r\n\r\n    CommonConfigHelper.setStyleAttribute(result, \"cursor\", CommonConfigHelper.getCursorValue(cursor, runtime));\r\n\r\n    CommonConfigHelper.setBorderStyleAttributes(result, configProps.border, disabled, selected, visited);\r\n\r\n    CommonConfigHelper.setBackgroundStyleAttributes(result, configProps, disabled, selected, visited, recommended, runtime);\r\n\r\n    const rotateDegrees = configProps.transform.rotate;\r\n    const translateX = configProps.transform.translateX !== undefined ? configProps.transform.translateX : 0;\r\n    const translateY = configProps.transform.translateY !== undefined ? configProps.transform.translateY : 0;\r\n\r\n    if (rotateDegrees !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(result, \"transform\", `translate( ${translateX}px, ${translateY}px) rotate(  ${rotateDegrees}deg)`)\r\n    }\r\n\r\n    const { transformOrigin } = configProps.transform;\r\n    if (transformOrigin !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(result, \"transformOrigin\", `${transformOrigin.x}% ${transformOrigin.y}%`)\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // builds CSS required in order for the custom web fonts to work \r\n  static buildCustomFontsCss(fontMappingsArray, runtime) {\r\n    let css = '';\r\n\r\n    fontMappingsArray.forEach((font) => {\r\n      css += `@font-face {\r\n                font-family: '${font.fontFamilyName}';\r\n                src: url('${CommonConfigHelper.getProperResourcePath(font.fontFileName, runtime)}');\r\n      }`;\r\n    });\r\n\r\n    return css; \r\n  }\r\n\r\n  // helper methods for SVG \r\n  static buildStyleSvg(pathState, configProps, selected) {\r\n    const disabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const visited = StateAttributeAccess.extractVisited(pathState);\r\n    const result = {};\r\n    CommonConfigHelper.setStyleAttribute(result, \"fill\", CommonConfigHelper.chooseImageOrColorVariant(configProps.color.background, disabled, selected, visited));\r\n    CommonConfigHelper.setStyleAttribute(result, \"stroke\", CommonConfigHelper.chooseImageOrColorVariant(configProps.border.color, disabled, selected, visited));\r\n    CommonConfigHelper.setStyleAttributeWithUnits(result, \"strokeWidth\", configProps.border.width, 'px');\r\n    return result;\r\n  }\r\n\r\n  static buildPointsString(pointsArray) {\r\n    return pointsArray.reduce((accumulated, child, index) => `${accumulated} ${child.x},${child.y}`, \"\");\r\n  }\r\n\r\n\r\n\r\n\r\n  // internal helper methods ------------------------------------------------------------------------------------------------------\r\n\r\n  static getDynamicValueFromStatemachineAndMapper(dynamicConfig, runtime) {\r\n    const { taskManager, variableManager, valueMapper } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n    const variableValue = variableManager.getVariable(currentTaskId, dynamicConfig.variable);\r\n\r\n    if (variableValue === undefined) {\r\n      return undefined;\r\n    }\r\n    if (dynamicConfig.valueMap === undefined) {\r\n      return `${variableValue}`;\r\n    }\r\n    return valueMapper.getMappedValue(dynamicConfig.valueMap, variableValue);\r\n  }\r\n\r\n  static combine(pathState, propsState, defaultValue) {\r\n    if (pathState !== undefined) return pathState;\r\n    if (propsState !== undefined) return propsState;\r\n    return defaultValue;\r\n  }\r\n\r\n  static setStyleAttribute(attributes, attributeName, valueOrUndefined) {\r\n    if (valueOrUndefined !== undefined) {\r\n      attributes[attributeName] = valueOrUndefined;\r\n    }\r\n  }\r\n\r\n  static setBorderStyleAttributes(attributes, borderProps, disabled, selected, visited) {\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"borderStyle\", borderProps.style);\r\n    CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderWidth\", borderProps.width, 'px');\r\n    CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderRadius\", borderProps.radius, 'px');\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"borderColor\", CommonConfigHelper.chooseImageOrColorVariant(borderProps.color, disabled, selected, visited));\r\n\r\n    if (borderProps.north !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderTopStyle\", borderProps.north.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderTopColor\", borderProps.north.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderTopWidth\", borderProps.north.width, 'px');\r\n    }\r\n    if (borderProps.south !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderBottomStyle\", borderProps.south.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderBottomColor\", borderProps.south.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderBottomWidth\", borderProps.south.width, 'px');\r\n    }\r\n    if (borderProps.west !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderLeftStyle\", borderProps.west.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderLeftColor\", borderProps.west.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderLeftWidth\", borderProps.west.width, 'px');\r\n    }\r\n    if (borderProps.east !== undefined) {\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderRightStyle\", borderProps.east.style);\r\n      CommonConfigHelper.setStyleAttribute(attributes, \"borderRightColor\", borderProps.east.color);\r\n      CommonConfigHelper.setStyleAttributeWithUnits(attributes, \"borderRightWidth\", borderProps.east.width, 'px');\r\n    }\r\n  }\r\n\r\n  static setBackgroundStyleAttributes(attributes, configProps, disabled, selected, visited, recommended, runtime) {\r\n    const { displayMode } = configProps.image;\r\n\r\n    const imageFromVariable = (configProps.image !== undefined && configProps.image.dynamic !== undefined)\r\n      ? CommonConfigHelper.getDynamicValueFromStatemachineAndMapper(configProps.image.dynamic, runtime)\r\n      : undefined;\r\n\r\n    const imageVariant = (imageFromVariable === undefined || imageFromVariable.length === 0)\r\n      ? CommonConfigHelper.chooseImageOrColorVariant(configProps.image, disabled, selected, visited)\r\n      : imageFromVariable;\r\n\r\n    let backgroundImageUrl;\r\n    if (displayMode === 'overlay') {\r\n      backgroundImageUrl = (imageVariant === undefined) ? \"none\" : `url(${CommonConfigHelper.getProperResourcePath(imageVariant, runtime)})`;\r\n    }\r\n    const overlayType = backgroundImageUrl ? configProps.image.overlayType : undefined;\r\n\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"backgroundColor\",\r\n      ((recommended === true) ? RecommendationsManager.getRecommendationColor() : CommonConfigHelper.chooseImageOrColorVariant(configProps.color.background, disabled, selected, visited)));\r\n    CommonConfigHelper.setStyleAttribute(attributes, \"backgroundImage\", backgroundImageUrl);\r\n\r\n    if (!backgroundImageUrl && !overlayType) return;\r\n\r\n    switch (overlayType) {\r\n      case \"stretch\":\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundRepeat\", \"no-repeat\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundPosition\", \"center\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundSize\", \"100% 100%\");\r\n        break;\r\n      case \"center\":\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundRepeat\", \"no-repeat\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundPosition\", \"center\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundSize\", \"contain\");\r\n        break;\r\n      case \"left\":\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundRepeat\", \"no-repeat\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundPosition\", \"left\");\r\n        CommonConfigHelper.setStyleAttribute(attributes, \"backgroundSize\", \"contain\");\r\n        break;\r\n      default: break;\r\n    }\r\n\r\n  }\r\n\r\n  static setStyleAttributeWithUnits(attributes, attributeName, valueOrUndefined, units) {\r\n    if (valueOrUndefined !== undefined) {\r\n      attributes[attributeName] = valueOrUndefined + units;\r\n    }\r\n  }\r\n\r\n  static chooseImageOrColorVariant(variantsEntry, disabled, selected, visited) {\r\n    if (variantsEntry === undefined) return undefined;\r\n    const chosenVariant = CommonConfigHelper.pickVariantPropertyFromEntry(variantsEntry, disabled, selected, visited);\r\n    return CommonConfigHelper.isBlockDefaultValue(chosenVariant) ? undefined : Utils.withDefault(chosenVariant, variantsEntry.default);\r\n  }\r\n\r\n  static pickVariantPropertyFromEntry(variantsEntry, disabled, selected, visited) {\r\n    if (disabled) return variantsEntry.disabled;\r\n    if (selected) return variantsEntry.selected;\r\n    if (visited) return variantsEntry.visited;\r\n    return variantsEntry.default;\r\n  }\r\n\r\n  static isBlockDefaultValue(variant) {\r\n    return variant !== undefined && Utils.isEmptyObject(variant);\r\n  }\r\n\r\n  static getCursorValue(cursor, runtime) {\r\n    if (cursor === undefined) return undefined;\r\n    if (cursor.standard !== undefined) return cursor.standard;\r\n    if (cursor.image !== undefined) return `url(${this.getProperResourcePath(cursor.image, runtime)}), auto`;\r\n    return undefined;\r\n  }\r\n\r\n\r\n  static getProperResourcePath(resourceFromConfig, runtime) {\r\n    return CommonConfigHelper.getProperResourcePathWithFlag(resourceFromConfig, 'resource', runtime);\r\n  }\r\n\r\n  static getProperResourcePathWithFlag(resourceFromConfig, flag, runtime) {\r\n    if (resourceFromConfig === undefined || resourceFromConfig.length === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    const { taskManager } = runtime;\r\n    let resourceFolder = '';\r\n    switch (flag) {\r\n      case 'resource':\r\n        resourceFolder = taskManager.getResourcePath();\r\n        break;\r\n      case 'external':\r\n        resourceFolder = taskManager.getExternalResourcePath();\r\n        break;\r\n      default:\r\n        console.error(`Unknown resource path flag ${flag}, defaulting to 'resource'`);\r\n        resourceFolder = taskManager.getResourcePath();\r\n        break;\r\n    }\r\n\r\n    return `${resourceFolder}/${resourceFromConfig}`;\r\n  }\r\n\r\n  /**\r\n   * Add a local path for an external resource so that an iframe can use it as internal or external url.\r\n   * \r\n   * @param {*} resourceFromConfig \r\n   */\r\n  static getProperResourcePathExternalResources(resourceFromConfig, runtime) {\r\n    if (resourceFromConfig === undefined) {\r\n      return undefined;\r\n    } else if (resourceFromConfig.toLowerCase().startsWith(\"http\")) {\r\n      return resourceFromConfig;\r\n    } else {\r\n      return CommonConfigHelper.getProperResourcePathWithFlag(resourceFromConfig, 'external', runtime);\r\n    }\r\n  }\r\n\r\n  static getCssClassNamesValue(config, aditionalClasses) {\r\n    const configClassNames = config.cssClassNames || [];\r\n    return [...configClassNames, aditionalClasses].join(\" \");\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from \"./IndexPathHelper\";\r\nimport UserDefPathHelper from \"./UserDefPathHelper\";\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\n\r\n/**\r\n * Helper methods to work translate user defined ID paths to index paths and vice versa.\r\n */\r\nexport default class PathTranslationHelper {\r\n\r\n  // ----- public API --------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the userDefPath for an index path. \r\n   * \r\n   * The method obtains the necessary userDefPathID from the currently loaded item configuration.\r\n   * If there are CbaPageAreas in the index path without a user defined ID the method returns undefined.\r\n   */\r\n  static getUserDefPathForIndexPath(indexPath, runtime) {\r\n    if (indexPath === undefined) {\r\n      return undefined;\r\n    }\r\n    const pageSegments = IndexPathHelper.getPageSegmentArray(indexPath);\r\n    if (pageSegments.length === 0) {\r\n      return undefined;\r\n    }\r\n    const firstUserDefId = PathTranslationHelper.getUserDefIdForPageSegment(pageSegments[0], runtime);\r\n\r\n    let userDefIdPath = UserDefPathHelper.buildUserDefIdPath(\r\n      IndexPathHelper.getPageAreaTypeFromPath(indexPath),\r\n      IndexPathHelper.getPageAreaNameFromPath(indexPath),\r\n      firstUserDefId\r\n    );\r\n\r\n    for (let index = 1; index < pageSegments.length; index += 1) {\r\n      const userDefinedId = PathTranslationHelper.getUserDefIdForPageSegment(pageSegments[index], runtime);\r\n      if (userDefinedId === undefined) {\r\n        return undefined;\r\n      }\r\n      userDefIdPath = UserDefPathHelper.appendUserDefIdToPath(userDefIdPath, userDefinedId);\r\n    }\r\n\r\n    return userDefIdPath;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the index path for a userDefPath.\r\n   * A userDefPath consists of the UserDefIds of the page areas leading to a page instance and the \r\n   * userDefId of a component that is part of the page. \r\n   * The method will use the path root currently loaded in the given runtime.\r\n   */\r\n  static getIndexPathForUserDefPath(userDefPath, runtime) {\r\n    let pathId = IndexPathHelper.appendPageSegmentToPathRoot(\r\n      runtime.taskManager.getCurrentStatePathRoot(),\r\n      UserDefPathHelper.getPageAreaTypeFromPath(userDefPath), UserDefPathHelper.getPageAreaNameFromPath(userDefPath),\r\n      ''\r\n    );\r\n    UserDefPathHelper.forEachUserDefIdInPath(userDefPath, (userDefId) => {\r\n      const pageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(userDefId);\r\n      pathId = IndexPathHelper.appendPageSegmentsToPath(pathId, pageSegment);\r\n    });\r\n    return pathId;\r\n  }\r\n\r\n  /**\r\n   * Get the index path for textBlockNamePath (i.e. the index path of the component owning the text block).\r\n   * A textBlockNamePath consists of the UserDefIds of the page areas leading to a page instance and the \r\n   * name of a text block in a rich text field that is part of the page. \r\n   * The method will use the path root currently loaded in the given runtime.\r\n   */\r\n  static getIndexPathForTextBlockPath(textBlockNamePath, runtime) {\r\n    let pathId = IndexPathHelper.appendPageSegmentToPathRoot(\r\n      runtime.taskManager.getCurrentStatePathRoot(),\r\n      UserDefPathHelper.getPageAreaTypeFromPath(textBlockNamePath), UserDefPathHelper.getPageAreaNameFromPath(textBlockNamePath),\r\n      ''\r\n    );\r\n\r\n\r\n    // drop last id from path and process this after the loop\r\n    const pageAreasPath = UserDefPathHelper.dropUserDefIdFromPath(textBlockNamePath);\r\n    const textBlockName = UserDefPathHelper.getLastUserDefIdFromPath(textBlockNamePath);\r\n\r\n    const textBlockOwnerPageSegment = runtime.pageConfigurationsManager.findPageSegmentForTextBlockOwner(textBlockName);\r\n    if (textBlockOwnerPageSegment === undefined) {\r\n      // the block name path does not match any block name \r\n      return undefined;\r\n    }\r\n\r\n    if (pageAreasPath !== undefined) {\r\n      UserDefPathHelper.forEachUserDefIdInPath(pageAreasPath, (userDefId) => {\r\n        const pageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(userDefId);\r\n        pathId = IndexPathHelper.appendPageSegmentsToPath(pathId, pageSegment);\r\n      });\r\n    }\r\n    pathId = IndexPathHelper.appendPageSegmentsToPath(pathId, textBlockOwnerPageSegment);\r\n    return pathId;\r\n  }\r\n\r\n\r\n  // ----- private stuff --------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the user defined ID from the component specified by the given page segment.\r\n   * \r\n   * The method returns undefined if it cannot find a matching component or the matching component\r\n   * does not have a user defined ID.\r\n   * \r\n   * @param {*} pageSegment A page segments from an index path specifying the display component.\r\n   * @param {*} runtime  The common runtime\r\n   */\r\n  static getUserDefIdForPageSegment(pageSegment, runtime) {\r\n    const componentConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (componentConfig === undefined) {\r\n      return undefined;\r\n    }\r\n    return CommonConfigHelper.getUserDefinedId(componentConfig.config);\r\n  }\r\n\r\n}\r\n","import ComponentStateHelper from './ComponentStateHelper';\r\nimport CommonActionsHelper from '../components/CommonActionsHelper';\r\n\r\n/**\r\n * Helper methods to create trace log entries.\r\n*/\r\nexport default class TraceLogHelper {\r\n\r\n  /**\r\n   * Dump the state stored in all relevant state managers (ComponentStateManager, PresenterStateManager, IncidentsAccumulator etc.) to the trace log.\r\n   * \r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static dumpSnapshotToTrace(runtime) {\r\n    const {\r\n      taskManager,\r\n      presenterStateManager,\r\n      incidentsAccumulator,\r\n      clipboardManager,\r\n      statemachinesManager,\r\n      calculatorsManager,\r\n      variableManager\r\n    } = runtime;\r\n    const { test, item, task } = taskManager.getCurrentTestTaskItemNames();\r\n    const currentStatePathRoot = taskManager.getCurrentStatePathRoot();\r\n\r\n    const now = new Date();\r\n    runtime.traceLogBuffer.reportEvent('Snapshot', now, {\r\n      components: ComponentStateHelper.buildComponentsSnapshot(test, item, task, runtime),\r\n      presentation: presenterStateManager.getTaskState(currentStatePathRoot),\r\n      incidents: incidentsAccumulator.getAllValuesForTask(currentStatePathRoot, now.getTime()),\r\n      clipboard: clipboardManager.getStateForTracing(),\r\n      statemachine: {\r\n        current: {\r\n          states: statemachinesManager.getCurrentStateMachineLeafStates()\r\n        },\r\n        history: statemachinesManager.getHistoryStatemachineData()\r\n      },\r\n      calculator: calculatorsManager.getStateForTask(currentStatePathRoot),\r\n      variables: variableManager.buildVariablesInfoArrayForTask(currentStatePathRoot)\r\n    });\r\n\r\n    // return the time of the dump for testing purposes:\r\n    return now;\r\n  }\r\n\r\n  /**\r\n   * Dump our full state (i.e. all state from all our state memories) wrapped in trace log entry \r\n   * to the trace log. \r\n   */\r\n  static dumpFullStateToTrace(runtime) {\r\n    const { taskManager, traceLogBuffer } = runtime;\r\n    traceLogBuffer.reportEvent('FullState', new Date(), taskManager.getAllTasksState());\r\n  }\r\n\r\n  /**\r\n   * Dump a state change to the trace log.\r\n   */\r\n  static dumpStateChangeToTrace(stateType, stateDelta, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('StateChange', new Date(), {\r\n      stateType,\r\n      stateDelta\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dump a render call to the trace log.\r\n   */\r\n  static dumpRenderTriggeredToTrace(indexPath, traceLogBuffer, replayStepMonitor) {\r\n    traceLogBuffer.reportEvent('RenderTriggered', new Date(), {\r\n      indexPath,\r\n      replayStepId: replayStepMonitor.getCurrentReplayStepId()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dump a context menu open/close call to the trace log.\r\n   */\r\n  static dumpContextMenuTriggeredToTrace(menuConfig, shouldOpen, traceLogBuffer, replayStepMonitor) {\r\n    const entries = shouldOpen ? menuConfig.entries : undefined;\r\n    const event = shouldOpen ? {\r\n      clientX: menuConfig.event.clientX,\r\n      clientY: menuConfig.event.clientY,\r\n      type: menuConfig.event.type\r\n    }: undefined;\r\n\r\n    traceLogBuffer.reportEvent('ContextMenu', new Date(), {\r\n      event,\r\n      entries,\r\n      shouldOpen,\r\n      replayStepId: replayStepMonitor.getCurrentReplayStepId()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Dump a scroll triggered call to the tracelog\r\n   * @param {*} path \r\n   * @param {*} scrollLeft \r\n   * @param {*} scrollTop \r\n   * @param {*} traceLogBuffer \r\n   */\r\n  static dumpScrollTriggeredToTrace(path, scrollLeft, scrollTop, traceLogBuffer, replayStepMonitor) {\r\n    traceLogBuffer.reportEvent('ScrollTriggered', new Date(), {\r\n      path,\r\n      scrollLeft,\r\n      scrollTop,\r\n      replayStepId: replayStepMonitor.getCurrentReplayStepId()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Wrapper function for throttling/debouncing \r\n   * \r\n   * \r\n   * @returns {Function(currentScrollValue, currentOrientationValue, path, runtime)}\r\n   */\r\n  static traceScrollWrap() {\r\n    return (currentScrollValue, currentOrientationValue, path, runtime) => {\r\n      TraceLogHelper.traceScroll(path, runtime, currentScrollValue, currentOrientationValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traces the scroll interaction\r\n   * \r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} currentOrientationValue The current orientation of the scrolling component\r\n   * \r\n   */\r\n  static traceScroll(path, runtime, currentScrollValue, currentOrientationValue) {\r\n    const scrollTraceDetails = TraceLogHelper.buildScrollTraceDetails(currentScrollValue, currentOrientationValue);\r\n    if (scrollTraceDetails) {\r\n      CommonActionsHelper.traceUserInteraction(\"ScrollbarMove\", path, scrollTraceDetails, undefined, undefined, runtime);\r\n      runtime.replayStepMonitor.incrementReplayStep();\r\n      TraceLogHelper.dumpScrollTriggeredToTrace(path, currentScrollValue.scrollLeft, currentScrollValue.scrollTop, runtime.traceLogBuffer, runtime.replayStepMonitor);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that builds the trace details needed for scrolling\r\n   * \r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} currentOrientationValue The current orientation of the scrolling component\r\n   * \r\n   * @returns {Object} the trace log details\r\n   */\r\n  static buildScrollTraceDetails(currentScrollValue, currentOrientationValue) {\r\n    const { horizontal, vertical } = TraceLogHelper.computeScrollPosition(currentScrollValue);\r\n    const traceDetails = {\r\n      orientation: currentOrientationValue.orientation,\r\n      direction: currentOrientationValue.direction\r\n    }\r\n\r\n    if (horizontal || horizontal === 0) {\r\n      traceDetails.horizontalScroll = horizontal;\r\n    }\r\n\r\n    if (vertical || vertical === 0) {\r\n      traceDetails.verticalScroll = vertical;\r\n    }\r\n\r\n    if (currentOrientationValue.orientation || currentOrientationValue.direction) {\r\n      return traceDetails;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Helper function that computs the scroll orientation\r\n   * \r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} lastScrollValue The last known scroll values of the component\r\n   * \r\n   * @returns {Object} the scroll orientation\r\n   */\r\n  static computeScrollOrientation(currentScrollValue, lastScrollValue) {\r\n    if (!currentScrollValue || !lastScrollValue) {\r\n      return {\r\n        direction: null,\r\n        orientation: null\r\n      };\r\n    }\r\n\r\n    const isVerticalOrientation = currentScrollValue.scrollTop !== lastScrollValue.scrollTop;\r\n    const orientation = isVerticalOrientation ? \"vertical\" : \"horizontal\";\r\n    let direction;\r\n\r\n    if (isVerticalOrientation) {\r\n      direction = currentScrollValue.scrollTop < lastScrollValue.scrollTop ? \"up\" : \"down\";\r\n    } else {\r\n      direction = currentScrollValue.scrollLeft < lastScrollValue.scrollLeft ? \"left\" : \"right\";\r\n    }\r\n\r\n    return {\r\n      direction,\r\n      orientation\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that computs the scroll position\r\n   * \r\n   * @param {*} currentScrollValue The current scroll values of the component\r\n   * @param {*} lastScrollValue The last known scroll values of the component\r\n   * \r\n   * @returns {Object} the scroll position\r\n   */\r\n  static computeScrollPosition(currentScrollValue) {\r\n    const { scrollTop, scrollLeft, scrollHeight, scrollWidth, clientHeight, clientWidth } = currentScrollValue;\r\n\r\n    return {\r\n      vertical: Math.round(100 * (scrollTop / (scrollHeight - clientHeight))),\r\n      horizontal: Math.round(100 * (scrollLeft / (scrollWidth - clientWidth))),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function that gets scroll information from a browser event\r\n   * \r\n   * @param {*} event The browser event\r\n   * \r\n   * @returns {Object} the scroll data\r\n   */\r\n  static getScrollDataFromEvent(event) {\r\n    const { scrollTop, scrollLeft, scrollHeight, scrollWidth, clientHeight, clientWidth } = event.target;\r\n\r\n    return {\r\n      scrollTop,\r\n      scrollLeft,\r\n      scrollHeight,\r\n      scrollWidth,\r\n      clientHeight,\r\n      clientWidth\r\n    }\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\n/**\r\n * Helper methods to manage the currently rendered components and trigger them to render.\r\n*/\r\nexport default class RenderingHelper {\r\n\r\n  // registration of currently rendered components ----------------------------------------------------\r\n\r\n  /* not used methods work done for #5249\r\n  static initialiseStateForComponents(aditionalState = {}) {\r\n    return Object.assign(aditionalState, {\r\n      componentPath: \"\"\r\n    })\r\n  }\r\n  */\r\n\r\n  static onMount(component) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot register component without index path', component.props);\r\n      return;\r\n    }\r\n    RenderingHelper.doRegistrations(component, component.props.path);\r\n  }\r\n\r\n  static onUnmount(component) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot deregister component without index path', component.props);\r\n      return;\r\n    }\r\n    RenderingHelper.doDeregistrations(component, component.props.path);\r\n  }\r\n\r\n  /* Depracted see #5249 */\r\n  static onReceiveProps(component, nextProps) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot update from props without index path', component.props);\r\n      return;\r\n    }\r\n    if (nextProps.path === undefined) {\r\n      console.warn('Rendering helper cannot update to props without index path', nextProps);\r\n      return;\r\n    }\r\n    if (!(component.props.path === nextProps.path)) {\r\n      // component.props.runtime.componentDirectory.deregisterComponent(component.props.path);\r\n      RenderingHelper.doDeregistrations(component, component.props.path);\r\n      RenderingHelper.doRegistrations(component, nextProps.path);\r\n    }\r\n  }\r\n\r\n  /* not used methods work done for #5249\r\n  static onGetDerivedStateFromProps(nextProps, prevState) {\r\n    if (prevState && prevState.componentPath !== \"\" && nextProps.path !== prevState.componentPath) {\r\n      console.log(\"in get derived state from props\", prevState)\r\n\r\n      const { runtime } = nextProps;\r\n      const component = runtime.componentDirectory.findComponent(prevState.componentPath);\r\n\r\n      if (prevState.componentPath) {\r\n        console.warn('Rendering helper cannot update to props without index path', prevState.componentPath);\r\n        return null;\r\n      }\r\n\r\n      if (nextProps.path) {\r\n        console.warn('Rendering helper cannot update to props without index path', nextProps.path);\r\n        return null;\r\n      }\r\n\r\n      RenderingHelper.deregisterComponent(prevState.componentPath);\r\n      RenderingHelper.registerComponent(nextProps.path, component);\r\n\r\n      return Object.assign({}, prevState, {\r\n        componentPath: nextProps.path\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static onComponentDidUpdate(component, prevProps, prevState) {\r\n    if (component.props.path === undefined) {\r\n      console.warn('Rendering helper cannot update from props without index path', component.props);\r\n      return;\r\n    }\r\n    if (prevProps.path === undefined) {\r\n      console.warn('Rendering helper cannot update to props without index path', prevProps);\r\n      return;\r\n    }\r\n\r\n    if (prevProps.path !== component.props.path) {\r\n      console.log(\"in update\");\r\n      component.setState({\r\n        componentPath: component.props.path,\r\n      });\r\n    }\r\n  }\r\n  */\r\n\r\n  static doRegistrations(component, path) {\r\n    const { runtime, config } = component.props;\r\n    runtime.componentDirectory.registerComponent(path, component);\r\n    CommonConfigHelper.getObservedStatemachineVariableNames(config).forEach((variableName) => {\r\n      runtime.variableManager.addVariableChangeObserver(path, variableName);\r\n    })\r\n    RenderingHelper.applyRegisteredActions(component, path, runtime);\r\n  }\r\n\r\n  static doDeregistrations(component, path) {\r\n    const { runtime } = component.props;\r\n    runtime.componentDirectory.deregisterComponent(path);\r\n    runtime.variableManager.dropChangeObserverForPath(path);\r\n  }\r\n\r\n  // trigger rendering mechanism using the React state ----------------------------------------------------\r\n  static triggerRenderingViaUserDefPath(userDefPath, runtime) {\r\n    RenderingHelper.triggerRenderingViaPath(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime), runtime);\r\n  }\r\n\r\n  static triggerRenderingViaPath(path, runtime) {\r\n    const receiverComponent = runtime.componentDirectory.findComponent(path);\r\n    if (receiverComponent !== undefined) {\r\n      RenderingHelper.triggerRendering(receiverComponent);\r\n    } else {\r\n      console.log(`Receiver not mounted: ${path}`);\r\n    }\r\n  }\r\n\r\n  static triggerRendering(component) {\r\n    const { path, runtime } = component.props;\r\n    TraceLogHelper.dumpRenderTriggeredToTrace(path, runtime.traceLogBuffer, runtime.replayStepMonitor);\r\n    component.setState(previousState => RenderingHelper.buildCounterState(previousState));\r\n  }\r\n\r\n  static buildCounterState(previousState) {\r\n    const oldUpdateCount = previousState === null ? 0 : previousState.updateCount;\r\n    return {\r\n      updateCount: RenderingHelper.incrementCount(oldUpdateCount)\r\n    };\r\n  }\r\n\r\n  static incrementCount(oldCount) {\r\n    return oldCount === undefined || oldCount > 10000 ? 1 : (oldCount + 1);\r\n  }\r\n\r\n  /**\r\n   * Split a text containing line breaks into an array of spans separated with breaks.\r\n   * \r\n   * @param {*} text Text containing line breaks.\r\n   */\r\n  static extractMultilineText(text) {\r\n    return text.split('\\r\\n').map((line, index) => (\r\n      // Use the index plus the text of the line to be displayed as key. If the text is too long just use the index and and a hash of the line.\r\n      <span key={line.length > 32 ? `${index}_${RenderingHelper.hash64(line)}` : `${index}_${line}`}>\r\n        {line}\r\n        <br />\r\n      </span>\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * Calculate a 32 bit FNV-1a hash\r\n   * Found here: https://gist.github.com/vaiorabbit/5657561\r\n   * Ref.: http://isthe.com/chongo/tech/comp/fnv/\r\n   *\r\n   * @param {string} str the input value\r\n   * @returns {string}\r\n  */\r\n  static hashFnv32a(str) {\r\n    let hval = 0x811c9dc5;\r\n\r\n    for (let i = 0; i < str.length; i += 1) {\r\n      // eslint-disable-next-line no-bitwise\r\n      hval ^= str.charCodeAt(i);\r\n      // eslint-disable-next-line no-bitwise\r\n      hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);\r\n    }\r\n    // Convert to 8 digit hex string\r\n    // eslint-disable-next-line no-bitwise\r\n    return (`0000000${(hval >>> 0).toString(16)}`).substr(-8);\r\n  }\r\n\r\n  /**\r\n   * Calculate a simple 64 bit hash to reduce collision probability.\r\n   * \r\n   * @param {String} string to be hashed \r\n   */\r\n  static hash64(str) {\r\n    const shortHash = RenderingHelper.hashFnv32a(str);\r\n    return shortHash + RenderingHelper.hashFnv32a(shortHash + str);\r\n  }\r\n\r\n  /**\r\n   * Checks for registered actions and applies them to the component.\r\n   * Once the actions were applied we clear them from the register.\r\n   * @param {*} component the component instance \r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure\r\n   */\r\n  static applyRegisteredActions(component, indexPath, runtime) {\r\n    if (runtime.actionRegister.hasActionsRegisteredForPath(indexPath)) {\r\n      runtime.actionRegister.getRegisteredActionsForPath(indexPath).forEach(action => component[action].call());\r\n      runtime.actionRegister.clearRegisteredActionsForPath(indexPath);\r\n    }\r\n  }\r\n\r\n}\r\n","import RenderingHelper from '../components/RenderingHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport IndexPathHelper from './IndexPathHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\n\r\n/**\r\n * General helper methods to manage the component's registered state.\r\n*/\r\nexport default class ComponentStateHelper {\r\n\r\n  // ----------- public API ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the 'path' state of the given component.\r\n   */\r\n  static getState(component) {\r\n    return component.props.runtime.componentStateManager.findOrBuildStateForPathId(component.props.path, component.props.runtime);\r\n  }\r\n\r\n  /**\r\n   * Register the 'path' state for the given component.\r\n   */\r\n  static registerState(component, fullState) {\r\n    const { runtime } = component.props;\r\n    runtime.componentStateManager.registerStateByPathId(component.props.path, fullState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Get an attribute from the 'path' state of the component specified by a user defined path (without path root).\r\n   */\r\n  static getStateAttributeByUserDefPath(getter, userDefPath, runtime) {\r\n    const fullState = runtime.componentStateManager.findOrBuildStateByUserDefPath(userDefPath, runtime);\r\n    return getter(fullState);\r\n  }\r\n\r\n  /**\r\n   * Get an attribute from the 'path' state of the component specified by a  path id.\r\n   */\r\n  static getStateAttributeByPathId(getter, indexPath, runtime) {\r\n    const fullState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    return getter(fullState);\r\n  }\r\n\r\n  /**\r\n   * Update an attribute in the 'path' state of the component specified by a path (with path root).\r\n   */\r\n  static updateStateAttribute(getter, setter, newValue, pathId, runtime, triggerRendering) {\r\n    const stateManager = runtime.componentStateManager;\r\n    const fullState = stateManager.findOrBuildStateForPathId(pathId, runtime);\r\n    const oldValue = getter(fullState);\r\n    if (oldValue !== newValue) {\r\n      setter(fullState, newValue);\r\n      stateManager.registerStateByPathId(pathId, fullState, runtime);\r\n      if (triggerRendering) {\r\n        RenderingHelper.triggerRenderingViaPath(pathId, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an attribute in the 'path' state of the component specified by a user defined path (without path root).\r\n   */\r\n  static updateStateAttributeByUserDefPath(getter, setter, newValue, userDefPath, runtime, triggerRendering) {\r\n    const stateManager = runtime.componentStateManager;\r\n    const fullState = stateManager.findOrBuildStateByUserDefPath(userDefPath, runtime);\r\n    const oldValue = getter(fullState);\r\n    if (oldValue !== newValue) {\r\n      setter(fullState, newValue);\r\n      stateManager.registerStateByUserDefPath(userDefPath, fullState, runtime);\r\n      if (triggerRendering) {\r\n        RenderingHelper.triggerRenderingViaUserDefPath(userDefPath, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build an array describing the state of all components in the specified task.\r\n   */\r\n  static buildComponentsSnapshot(test, item, task, runtime) {\r\n    const { componentStateManager, componentDirectory } = runtime;\r\n    return ComponentStateHelper.formatSnapshotDump(componentStateManager.getTaskSnapshot(test, item, task, componentDirectory), runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Return all indexPath keys in the current task that already exist in the ComponentStateManager\r\n   * and belong to a component instance that has the given component type.\r\n   * \r\n   * @param {String} componentType : The component type that must match.\r\n   * @param {*} runtime The common runtime context structure. \r\n   * @return {[String]} The matching indexPath keys.\r\n   */\r\n  static findIndexPathsInCurrentTaskOfComponentWithType(componentType, runtime) {\r\n    const { componentStateManager, taskManager } = runtime;\r\n    const rootInRuntime = taskManager.getCurrentStatePathRoot();\r\n    return componentStateManager.filterExistingPathIds(id => IndexPathHelper.getRootFromPath(id) === rootInRuntime\r\n      && ComponentStateHelper.getComponentTypeForIndexPath(id, runtime) === componentType);\r\n  }\r\n\r\n  /**\r\n   * Return all indexPath keys that already exist in the ComponentStateManager \r\n   * and are descendants of the given parent index path key.\r\n   * \r\n   * @param {String} parentIndexPath The indexPath key of the parent component.\r\n   * @param {*} runtime The common runtime context structure. \r\n   * @return {[String]} The matching indexPath keys.\r\n   */\r\n  static findIndexPathsOfDescendants(parentIndexPath, runtime) {\r\n    const parentPrefix = `${parentIndexPath}/`;\r\n    return runtime.componentStateManager.filterExistingPathIds(id => id.startsWith(parentPrefix));\r\n  }\r\n\r\n  // ----------- private stuff ----------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Enrich and restructure the data from the component state manager to be useful in the trace log. \r\n   * \r\n   * @param {*} taskData The task's data from the component state manager to be 'formatted' for dumping it to the trace log.\r\n   */\r\n  static formatSnapshotDump(taskData, runtime) {\r\n    return Object.entries(taskData).map(entry => ComponentStateHelper.formatEntryForSnapshotDump(entry, runtime));\r\n  }\r\n\r\n  static formatEntryForSnapshotDump(entry, runtime) {\r\n    const [indexPath, componentState] = entry;\r\n\r\n    // drop deepCopy state\r\n    componentState.deepCopy = undefined;\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n\r\n    return {\r\n      indexPath,\r\n      userDefIdPath,\r\n      userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\r\n      componentType: ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime),\r\n      componentState\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find the display component type of the component specified by the given index path.\r\n   * \r\n   * The method assumes that the index path belongs to the currently loaded task (and therefore to the currently loaded item).\r\n   * Otherwise it will match the page segment with a wrong page in the page configurations manager. \r\n   * \r\n   * We return the type name specified in the item configuration \r\n   * (i.e. not necessarily the component's class name).\r\n   */\r\n  static getComponentTypeForIndexPath(indexPath, runtime) {\r\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(indexPath);\r\n    if (pageSegment === undefined) {\r\n      return undefined;\r\n    }\r\n    const componentConfiguration = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    return componentConfiguration === undefined ? undefined : componentConfiguration.type;\r\n  }\r\n\r\n}\r\n","export default class PageHistoryHelper {\r\n\r\n  static goBack(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.currentCanGoBack(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      pagesState.current -= 1;\r\n      PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n    }\r\n  }\r\n\r\n  static goForward(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.currentCanGoForward(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      pagesState.current += 1;\r\n      PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n    }\r\n  }\r\n\r\n  static canGoBack(path, runtime) {\r\n    return PageHistoryHelper.currentCanGoBack(PageHistoryHelper.getHistoryState(path, runtime));\r\n  }\r\n\r\n  static canGoForward(path, runtime) {\r\n    return PageHistoryHelper.currentCanGoForward(PageHistoryHelper.getHistoryState(path, runtime));\r\n  }\r\n\r\n  static currentCanGoBack(historyState) {\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      return pagesState !== undefined && pagesState.current !== undefined && PageHistoryHelper.getRelevantPagesState(historyState).current > 0;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static currentCanGoForward(historyState) {\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      return pagesState !== undefined && pagesState.current !== undefined && pagesState.current < pagesState.pages.length -1;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static goHome(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      const pagesState = PageHistoryHelper.getRelevantPagesState(historyState);\r\n      if (pagesState !== undefined && pagesState.current !== undefined) {\r\n        pagesState.current = 0;\r\n        PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  static getPage(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState) || PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      return PageHistoryHelper.getCurrentPageFromPagesState(PageHistoryHelper.getRelevantPagesState(historyState));\r\n    } else if (PageHistoryHelper.isHistoryModeSinglePage(historyState)) {\r\n      return historyState.history.page;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  static getCurrentPageFromPagesState(pagesState) {\r\n    return (pagesState === undefined || pagesState.current === undefined) ? undefined : pagesState.pages[pagesState.current];\r\n  }\r\n\r\n  static getRelevantPagesState(historyState) {\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      const tabName = historyState.history.currentTab;\r\n      if (tabName === undefined) {\r\n        return undefined;\r\n      } else {\r\n        return historyState.history.withTabs[tabName];\r\n      }\r\n    } else if (PageHistoryHelper.isHistoryModeNoTabs(historyState)) {\r\n      return historyState.history.noTabs;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  static getTab(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    return PageHistoryHelper.isHistoryModeWithTabs(historyState) ? historyState.history.currentTab : undefined;\r\n  }\r\n\r\n  static getAllTabs(path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    return PageHistoryHelper.isHistoryModeWithTabs(historyState) ? historyState.history.allTabs : [];\r\n  }\r\n\r\n  static getImageForTab(tabName, path, runtime) {\r\n    const pageInfo = PageHistoryHelper.getCurrentPageInfoForTab(tabName, path, runtime);\r\n    return pageInfo === undefined ? undefined : pageInfo.image;\r\n  }\r\n\r\n  static switchTab(tabName, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      if (historyState.history.withTabs[tabName] !== undefined) {\r\n        historyState.history.currentTab = tabName;\r\n        PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n  static closeTab(tabName, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    if (PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      if (historyState.history.withTabs[tabName] !== undefined) {\r\n        const currentIndex = historyState.history.allTabs.indexOf(tabName);\r\n        if (currentIndex !== 0) {\r\n          const currentTab = PageHistoryHelper.getTab(path, runtime);\r\n          if (currentTab === tabName) {\r\n            historyState.history.currentTab = historyState.history.allTabs[currentIndex - 1];\r\n          }\r\n\r\n          historyState.history.allTabs.splice(currentIndex, 1);\r\n          delete historyState.history.withTabs[tabName];\r\n          PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n        } else {\r\n          console.log(\"Closing first tab not possible\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static addPage(pageName, pageUrl, tabConfig, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n    const { image: pageImage } = tabConfig;\r\n    if (historyState === undefined) {\r\n      console.error(`History state missing when trying to add page ${pageName} to state of ${path}`);\r\n    }\r\n    switch (historyState.historyMode) {\r\n      case PageHistoryHelper.Modes.withTabsMode:\r\n        PageHistoryHelper.addPageToWithTabsHistory(pageName, pageUrl, tabConfig, historyState);\r\n        break;\r\n      case PageHistoryHelper.Modes.noTabsMode:\r\n        PageHistoryHelper.addPageToNoTabsHistory(pageName, pageUrl, pageImage, historyState);\r\n        break;\r\n      case PageHistoryHelper.Modes.singlePageMode:\r\n        historyState.history.page = {\r\n          name: pageName,\r\n          url: pageUrl,\r\n          image: pageImage\r\n        };\r\n        break;\r\n      default:\r\n        console.error(`Invalid mode type ${historyState.historyMode}`);\r\n        break;\r\n    }\r\n\r\n    PageHistoryHelper.setHistoryState(historyState, path, runtime);\r\n  }\r\n\r\n  static addPageToWithTabsHistory(pageName, pageUrl, tabConfig, historyState) {\r\n    const { history } = historyState;\r\n    const { name: tabName, image: pageImage, closable, width: tabWidth } = tabConfig;\r\n    history.currentTab = tabName;\r\n    if (history.withTabs === undefined) {\r\n      history.withTabs = {};\r\n    }\r\n    if (history.allTabs === undefined) {\r\n      history.allTabs = [];\r\n    }\r\n    const { withTabs } = history;\r\n    if (withTabs[tabName] === undefined) {\r\n      withTabs[tabName] = PageHistoryHelper.createPagesState(pageName, pageUrl, pageImage, closable, tabWidth);\r\n      history.allTabs.push(tabName);\r\n    } else {\r\n      withTabs[tabName].closable = closable;\r\n      withTabs[tabName].tabWidth = tabWidth;\r\n      PageHistoryHelper.addPageToPagesState(pageName, pageUrl, pageImage, withTabs[tabName]);\r\n    }\r\n  }\r\n\r\n  static addPageToNoTabsHistory(pageName, pageUrl, pageImage, historyState) {\r\n    if (historyState.history.noTabs === undefined) {\r\n      historyState.history.noTabs = PageHistoryHelper.createPagesState(pageName, pageUrl, pageImage, false, 0);\r\n    } else {\r\n      PageHistoryHelper.addPageToPagesState(pageName, pageUrl, pageImage, historyState.history.noTabs);\r\n    }\r\n  }\r\n\r\n  static createPagesState(pageName, pageUrl, pageImage, closable = true, tabWidth = 100) {\r\n    return {\r\n      current: 0,\r\n      closable,\r\n      tabWidth,\r\n      pages: [{\r\n        name: pageName,\r\n        url: pageUrl,\r\n        image: pageImage\r\n      }]\r\n    }\r\n  }\r\n\r\n  static addPageToPagesState(pageName, pageUrl, pageImage, pagesState) {\r\n\r\n    // do not change our history if the currently selected page is to be added once more\r\n    const currentPage = PageHistoryHelper.getCurrentPageFromPagesState(pagesState);\r\n    if (currentPage !== undefined\r\n      && currentPage.name === pageName\r\n      && currentPage.url === pageUrl\r\n      && currentPage.image === pageImage) {\r\n      return;\r\n    }\r\n\r\n    if (pagesState.current === undefined) {\r\n      pagesState.current = -1;\r\n    }\r\n    if (pagesState.pages === undefined) {\r\n      pagesState.pages = [];\r\n    }\r\n\r\n    pagesState.current += 1;\r\n    pagesState.pages[pagesState.current] = {\r\n      name: pageName,\r\n      url: pageUrl,\r\n      image: pageImage\r\n    };\r\n\r\n    let pageIndex;\r\n    for (pageIndex = pagesState.pages.length - 1; pageIndex > pagesState.current; pageIndex -= 1) {\r\n      pagesState.pages.pop();\r\n    }\r\n  }\r\n\r\n  static getInfoForTab(tabName, path, runtime) {\r\n    const historyState = PageHistoryHelper.getHistoryState(path, runtime);\r\n\r\n    if (!PageHistoryHelper.isHistoryModeWithTabs(historyState)) {\r\n      return undefined;\r\n    }\r\n\r\n    return historyState.history.withTabs[tabName];\r\n  }\r\n\r\n  static getCurrentPageInfoForTab(tabName, path, runtime) {\r\n    const tabInfo = PageHistoryHelper.getInfoForTab(tabName, path, runtime);\r\n    return tabInfo === undefined ? undefined : tabInfo.pages[tabInfo.current];\r\n  }\r\n\r\n  static isHistoryModeSinglePage(historyState) {\r\n    return historyState !== undefined && historyState.historyMode === PageHistoryHelper.Modes.singlePageMode;\r\n  }\r\n\r\n  static isHistoryModeNoTabs(historyState) {\r\n    return historyState !== undefined && historyState.historyMode === PageHistoryHelper.Modes.noTabsMode;\r\n  }\r\n\r\n  static isHistoryModeWithTabs(historyState) {\r\n    return historyState !== undefined && historyState.historyMode === PageHistoryHelper.Modes.withTabsMode;\r\n  }\r\n\r\n  static hasStateWithoutPageHistory(path, runtime) {\r\n    const fullState = runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n    return fullState !== undefined && fullState.pageHistory === undefined;\r\n  }\r\n\r\n  static getHistoryState(path, runtime) {\r\n    const fullState = PageHistoryHelper.getFullState(path, runtime);\r\n    return fullState.pageHistory\r\n  }\r\n\r\n  static initializeHistoryState(withHistory, withTabs, fullState) {\r\n    const historyMode = PageHistoryHelper.getHistoryModeKey(withHistory, withTabs);\r\n    const pageHistory = {\r\n      historyMode,\r\n    }\r\n\r\n    switch (historyMode) {\r\n      case PageHistoryHelper.Modes.withTabsMode:\r\n        pageHistory.history = {\r\n          currentTab: undefined,\r\n          allTabs: [],\r\n          withTabs: {}\r\n        };\r\n        break;\r\n      case PageHistoryHelper.Modes.noTabsMode:\r\n        pageHistory.history = {\r\n          noTabs: {}\r\n        };\r\n        break;\r\n      case PageHistoryHelper.Modes.singlePageMode:\r\n        pageHistory.history = {\r\n          page: undefined,\r\n        };\r\n        break;\r\n      default:\r\n        console.error(`Invalid mode type ${historyMode}`);\r\n    }\r\n\r\n    fullState.pageHistory = pageHistory;\r\n  }\r\n\r\n  static getHistoryModeKey(withHistory, withTabs) {\r\n    if (withHistory) {\r\n      return withTabs ? PageHistoryHelper.Modes.withTabsMode : PageHistoryHelper.Modes.noTabsMode;\r\n    }\r\n    return PageHistoryHelper.Modes.singlePageMode;\r\n  }\r\n\r\n  static Modes = {\r\n    withTabsMode: 'withTabs',\r\n    noTabsMode: 'noTabs',\r\n    singlePageMode: 'singlePage',\r\n  }\r\n\r\n  static setHistoryState(state, path, runtime) {\r\n    const fullState = PageHistoryHelper.getFullState(path, runtime);\r\n    fullState.pageHistory = state;\r\n    PageHistoryHelper.setFullState(fullState, path, runtime);\r\n  }\r\n\r\n\r\n  static getFullState(path, runtime) {\r\n    return runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n  }\r\n\r\n  static setFullState(state, path, runtime) {\r\n    return runtime.componentStateManager.registerStateByPathId(path, state, runtime);\r\n  }\r\n\r\n}\r\n","import PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\n\r\n/**\r\n * Manage the list of bookmarks maintained by a CbaPageArea display component instance.\r\n */\r\nexport default class BookmarkHelper {\r\n\r\n  // ------- public API ------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Add a page as bookmark to the list of bookmarks maintained by a CbaPageArea.\r\n   * \r\n   * The method will silently ignore the call if a bookmark with the given page name already exists.\r\n   * \r\n   * @param {String} path The index path of the CbaPageArea hosting the bookmarks list.\r\n   * @param {String} pageName The name of the page to add to the bookmarks list.\r\n   * @param {String} pageUrl The URL of the page to add to the bookmarks list.\r\n   * @param {String} pageTab The tab of the page to add to the bookmarks list.\r\n   * @param {String} pageImage The image of the page to add to the bookmarks list.\r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the component requesting to add the bookmark (for tracing purposes).\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static addBookmark(path, pageName, pageUrl, pageTab, pageImage, triggeringType, requestingComponentPath, runtime) {\r\n    const bookmarkState = BookmarkHelper.getBookmarkState(path, runtime);\r\n    const bookmarks = bookmarkState.bookmarkEntries;\r\n    if (bookmarks.find(value => value.pageName === pageName) === undefined) {\r\n      bookmarks.push({\r\n        pageName,\r\n        pageUrl,\r\n        pageTab,\r\n        pageImage\r\n      });\r\n      BookmarkHelper.setBookmarkState(bookmarkState, path, runtime);\r\n      BookmarkHelper.trace(triggeringType, 'add', requestingComponentPath, path, pageName, pageUrl, pageTab, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop a bookmark from the list of bookmarks maintained by a CbaPageArea.\r\n   * \r\n   * The method will silently ignore the call if no bookmark with the given page name exists.\r\n   * \r\n   * @param {*} path The index path of the CbaPageArea hosting the bookmarks list.\r\n   * @param {*} pageName The name of the page to drop from the bookmarks list.\r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {*} requestingComponentPath The index path of the component requesting to drop the bookmark (for tracing purposes).\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static dropBookmark(path, pageName, triggeringType, requestingComponentPath, runtime) {\r\n    const bookmarkState = BookmarkHelper.getBookmarkState(path, runtime);\r\n    const { bookmarkEntries } = bookmarkState;\r\n    const indexToDrop = bookmarkEntries.findIndex(entry => entry.pageName === pageName);\r\n    if (indexToDrop !== -1) {\r\n      const pageToDrop = bookmarkEntries[indexToDrop];\r\n      bookmarkEntries.splice(indexToDrop, 1);\r\n      BookmarkHelper.setBookmarkState(bookmarkState, path, runtime);\r\n      BookmarkHelper.trace(triggeringType, 'drop', requestingComponentPath, path, pageToDrop.pageName, pageToDrop.pageUrl, pageToDrop.pageTab, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the list of bookmarks maintained by a CbaPageArea.\r\n   * \r\n   * @param {*} path The index path of the CbaPageArea hosting the bookmarks list.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @return {[*]} A copy of the list of bookmarks maintained by CbaPageArea.\r\n   */\r\n  static getBookmarks(path, runtime) {\r\n    const bookmarkState = BookmarkHelper.getBookmarkState(path, runtime);\r\n    return bookmarkState.bookmarkEntries.map(entry => entry);\r\n  }\r\n\r\n  // ------- internal stuff ------------------------------------------------------------------------\r\n\r\n  static getBookmarkState(path, runtime) {\r\n    const fullState = BookmarkHelper.getFullState(path, runtime);\r\n    if (fullState.bookmarkState === undefined) {\r\n      BookmarkHelper.initializeBookmarkState(fullState);\r\n    }\r\n    return fullState.bookmarkState;\r\n  }\r\n\r\n  static initializeBookmarkState(fullState) {\r\n    fullState.bookmarkState = {\r\n      bookmarkEntries: []\r\n    }\r\n  }\r\n\r\n  static setBookmarkState(state, path, runtime) {\r\n    const fullState = BookmarkHelper.getFullState(path, runtime);\r\n    fullState.bookmarkState = state;\r\n    BookmarkHelper.setFullState(fullState, path, runtime);\r\n  }\r\n\r\n  static getFullState(path, runtime) {\r\n    return runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n  }\r\n\r\n  static setFullState(state, path, runtime) {\r\n    return runtime.componentStateManager.registerStateByPathId(path, state, runtime);\r\n  }\r\n\r\n  /**\r\n   * Create a trace log entry.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu'\r\n   * @param {String} operationType The operation type to trace: add, drop\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance.\r\n   * @param {String} ownerIndexPath The index path of the display component owining the bookmarks.\r\n   * @param {String} pageName The name pf the page of the bookmark.\r\n   * @param {String} pageUrl The URL pf the page of the bookmark.\r\n   * @param {String} tab The browser tab the bookmark operates on.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static trace(triggeringType, operationType, triggeringIndexPath, ownerIndexPath, pageName, pageUrl, tab, runtime) {\r\n    const triggeringUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(triggeringIndexPath, runtime);\r\n    const ownerUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(ownerIndexPath, runtime);\r\n    runtime.traceLogBuffer.reportEvent(\r\n      'Bookmark',\r\n      new Date(),\r\n      {\r\n        triggerType: triggeringType,\r\n        triggerIndexPath: triggeringIndexPath,\r\n        triggerUserDefIdPath: triggeringUserDefPath,\r\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggeringUserDefPath),\r\n        operation: operationType,\r\n        ownerIndexPath,\r\n        ownerUserDefIdPath: ownerUserDefPath,\r\n        ownerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(ownerUserDefPath),\r\n        pageName,\r\n        pageUrl,\r\n        tab\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './WebTab.css';\r\n\r\nconst WebTab = (props) => {\r\n  const { tabName, closeTab, isActive, onClick, icon, width, closable } = props;\r\n\r\n  const webTabClass = `webTab ${isActive ? \"active\" : \"\"}`;\r\n  const webTabStyle = {\r\n    width\r\n  };\r\n\r\n  return (\r\n    <div title={tabName} className={webTabClass} onClick={onClick} style={webTabStyle}>\r\n      {icon === undefined ? undefined : <img src={icon} alt=\"\" height=\"100%\" width=\"auto\" />}\r\n      <span>{tabName}</span>\r\n      <i className={closable ? \"show\" : \"hide\"} onClick={closeTab} />\r\n    </div>\r\n  )\r\n}\r\n\r\nWebTab.propTypes = {\r\n  tabName: PropTypes.string.isRequired,\r\n  closeTab: PropTypes.func.isRequired,\r\n  isActive: PropTypes.bool.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  closable: PropTypes.bool.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  icon: PropTypes.string,\r\n}\r\n\r\nWebTab.defaultProps = {\r\n  icon: undefined\r\n};\r\n\r\nexport default WebTab;\r\n","import PageHistoryHelper from \"../PageHistoryHelper\";\r\n\r\nexport default class WebToolbarHelper {\r\n\r\n  static showMoreButtonWidth = 40;\r\n\r\n  static containerMarginWidth = 10;\r\n\r\n  /**\r\n   * Method continaing logic for top up, returns the next hidden tab to be displayed\r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String[]} displayTabs All tabs being displayed \r\n   * @param {Boolean} isInFirstHalf The fact that the tab is in the first half\r\n   * \r\n   * @returns {String} Tab name\r\n   */\r\n  static getNextTopUpTab(allTabs, displayTabs, isInFirstHalf) {\r\n    const leftVisibleTab = displayTabs[0];\r\n    const leftHiddenIndex = allTabs.indexOf(leftVisibleTab) - 1;\r\n    const leftTab = leftHiddenIndex !== -1 ? allTabs[leftHiddenIndex] : undefined;\r\n\r\n    const rightVisibleTab = displayTabs[displayTabs.length - 1];\r\n    const rightHiddenIndex = allTabs.indexOf(rightVisibleTab) + 1;\r\n    const rightTab = rightHiddenIndex === 0 ? undefined : allTabs[rightHiddenIndex];\r\n\r\n    const tab = isInFirstHalf\r\n      ? (leftTab || rightTab)\r\n      : (rightTab || leftTab);\r\n\r\n    return tab || null;\r\n  }\r\n\r\n  /**\r\n   * Method determining if the current tab is in the first part of the spectrum\r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String} currentTab Current tab of the toolbar\r\n   * \r\n   * @returns {Boolean} true/false\r\n   */\r\n  static isCurrentInFirstHalf(allTabs, currentTab) {\r\n    const indexOfCurrentTab = allTabs.indexOf(currentTab);\r\n    return indexOfCurrentTab < allTabs.length / 2;\r\n  }\r\n\r\n  /**\r\n   * Method implementing the top up operation\r\n   * @param {String[]} displayTabs All tabs being displayed \r\n   * @param {String[]} hiddenTabs All tabs being hidden \r\n   * @param {String} newTab The new tab to be topped up\r\n   * @param {Number} tabWidth The new tab width\r\n   * @param {Number} displayTabsWidth Width of display tabs\r\n   * @param {String} operation Operation to be implemented on the array (unshift/push)\r\n   * \r\n   * @returns {Number} New width of the display tabs\r\n   */\r\n  static topUpTabs(displayTabs, hiddenTabs, newTab, tabWidth, displayTabsWidth, operation) {\r\n    const newWidth = displayTabsWidth + tabWidth;\r\n\r\n    hiddenTabs.splice(hiddenTabs.indexOf(newTab), 1);\r\n    displayTabs[operation](newTab);\r\n\r\n    return newWidth;\r\n  }\r\n\r\n  /**\r\n   * Method handling overflow of tabs\r\n   * @param {String[]} allTabsInfo All toolbar tabs\r\n   * @param {Number} totalWidth Total width of the rendered toolbar\r\n   * \r\n   * @returns {Boolean} true/false\r\n   */\r\n  static exceedsMaxTabsWidth(allTabsInfo, totalWidth) {\r\n    const totalTabsWidth = allTabsInfo.reduce((accum, reducer) => reducer.tabWidth + accum, 0);\r\n\r\n    return totalTabsWidth > totalWidth;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {String[]} displayTabs All tabs being displayed \r\n   * @param {String[]} hiddenTabs All tabs being hidden \r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String} currentTab Current tab of the toolbar\r\n   * @param {Object} tabDict The current tab dictionary\r\n   * @param {Number} totalWidth Total width of the rendered toolbar\r\n   * \r\n   * \r\n   * @returns {Object} Object of the form { displayTabs, hiddenTabs }\r\n   */\r\n  static topUpDisplayTabs(displayTabs, hiddenTabs, allTabs, currentTab, tabDict, totalWidth) {\r\n    let displayTabsWidth = displayTabs.reduce((accum, reducer) => accum + tabDict[reducer].width, 0);\r\n    const isInFirstHalf = WebToolbarHelper.isCurrentInFirstHalf(allTabs, currentTab);\r\n\r\n    while (totalWidth > displayTabsWidth && hiddenTabs.length > 0) {\r\n      const nextTab = WebToolbarHelper.getNextTopUpTab(allTabs, displayTabs, isInFirstHalf);\r\n      const tabWidth = nextTab && tabDict[nextTab].width;\r\n\r\n      if (nextTab && hiddenTabs.indexOf(nextTab) !== -1 && totalWidth > tabWidth + displayTabsWidth) {\r\n        const operation = allTabs.indexOf(nextTab) < allTabs.indexOf(displayTabs[0]) ? \"unshift\" : \"push\";\r\n        displayTabsWidth = WebToolbarHelper.topUpTabs(displayTabs, hiddenTabs, nextTab, tabWidth, displayTabsWidth, operation);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return {\r\n      displayTabs,\r\n      hiddenTabs\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {String[]} allTabs All toolbar tabs\r\n   * @param {String} currentTab Current tab of the toolbar\r\n   * @param {Object} tabDict The current tab dictionary\r\n   * @param {Number} totalTabsMaxWidth Total width of the rendered toolbar\r\n   * \r\n   * @returns {Object} Object of the form { displayTabs, hiddenTabs }\r\n   */\r\n  static buildDisplayTabs(allTabs, currentTab, tabDict, totalTabsMaxWidth) {\r\n    const displayTabs = [];\r\n    const hiddenTabs = [];\r\n    const scoreArray = [];\r\n    const indexOfCurrentTab = allTabs.indexOf(currentTab);\r\n\r\n    // build score array representing the total width accumulated until the end of the tab\r\n    allTabs.reduce((accum, reducer) => {\r\n      const accumulatedWidth = accum + tabDict[reducer].width;\r\n      scoreArray.push(accumulatedWidth);\r\n      return accumulatedWidth;\r\n    }, 0);\r\n\r\n    let lowerLimit;\r\n    let upperLimit;\r\n    const currentTabScore = scoreArray[indexOfCurrentTab];\r\n\r\n    if (WebToolbarHelper.isCurrentInFirstHalf(allTabs, currentTab)) {\r\n      lowerLimit = currentTabScore - tabDict[currentTab].width;\r\n      upperLimit = lowerLimit + totalTabsMaxWidth;\r\n    } else {\r\n      upperLimit = currentTabScore;\r\n      lowerLimit = currentTabScore - totalTabsMaxWidth;\r\n    }\r\n\r\n    scoreArray.forEach((tabScore, index) => {\r\n      const tabWidth = tabDict[allTabs[index]].width;\r\n      if (tabScore - tabWidth < lowerLimit || tabScore > upperLimit) {\r\n        hiddenTabs.push(allTabs[index]);\r\n      } else {\r\n        displayTabs.push(allTabs[index]);\r\n      }\r\n    });\r\n\r\n    return {\r\n      hiddenTabs,\r\n      displayTabs\r\n    };\r\n  }\r\n\r\n  static buildTabDictionary = (allTabs, allTabsInfo) => {\r\n    const tabDict = {};\r\n    allTabs.forEach((tabName, idx) => {\r\n      tabDict[tabName] = {\r\n        width: allTabsInfo[idx].tabWidth,\r\n        index: idx\r\n      }\r\n    });\r\n\r\n    return tabDict;\r\n  }\r\n\r\n  static getAllTabsInfo = (allTabs, parentPath, runtime) => allTabs.map(tabName => PageHistoryHelper.getInfoForTab(tabName, parentPath, runtime));\r\n\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ContextMenuTrigger, ContextMenu, MenuItem, SubMenu, hideMenu } from 'react-contextmenu';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\n\nimport './MenuItemTree.css';\nimport TraceLogHelper from '../state/TraceLogHelper';\n\n/**\n * Display a context menu with optional sub menues.\n * \n * Other components will create instances of this component explicitly by calling one of the static factory methods.\n * We don't use this component as component type in the page config structure, it is not known to the CbaInterpreter etc.\n * \n * The component does not keep state in the ComponentStateManager and does not register in the ComponentDirectory.\n * The component is registered by the LoggedInView as a runtime global component beacuase it is a singleton and is available with different configurations throughout the app\n */\nexport default class MenuItemTree extends Component {\n\n  constructor() {\n    super();\n    this.contextTrigger = React.createRef();\n  }\n\n  // ----- public API ----------------------------------------------------------------------\n\n  /**\n   * Logic for getting the bounding element of the menu trigger\n   * \n   * @param {*} event The event which triggers the menu \n   */\n  static buildTriggerBoundingRect(event) {\n    const buttonElement = event.target.nodeName === \"SPAN\" ? event.target.parentNode : event.target;\n    return buttonElement.getBoundingClientRect();\n  }\n\n  /**\n   * closes the context menu if it is open.\n   */\n  static closeMenuItemTree() {\n    hideMenu();\n  }\n\n  /**\n   * Open a menu item tree instance for a static menu configuration. \n   * \n   * @param {*} staticMenuConfig The configuration for the menu item tree.\n   */\n  openMenuItemTree(staticMenuConfig) {\n    const { runtime } = this.props;\n\n    this.setState({\n      entries: staticMenuConfig.entries\n    }, () => {\n      this.contextTrigger.current.handleContextClick(staticMenuConfig.event);\n    });\n\n    TraceLogHelper.dumpContextMenuTriggeredToTrace(staticMenuConfig, true, runtime.traceLogBuffer, runtime.replayStepMonitor);\n  }\n\n  /**\n   * Open a menu item tree instance for a menu configuration that might\n   * contain entries with type 'dynamicItems'. \n   * \n   * @param {*} staticMenuConfig The configuration for the menu item tree.\n   */\n  openMenuItemTreeWithDynamicConfig(dynamicMenuConfig) {\n    dynamicMenuConfig.event.persist();\n    const staticConfig = {\n      event: dynamicMenuConfig.event,\n      entries: MenuItemTree.transformDynamicEntries(dynamicMenuConfig.entries)\n    }\n    this.openMenuItemTree(staticConfig);\n  }\n\n  // ----- private stuff --------------------------------------------------------------------\n  /**\n   * Transform a list of item entries by expanding each entry of type 'dynamicItems'\n   * in a list of entry items without type 'dynmicItems'.\n   */\n  static transformDynamicEntries(dynamicEntries) {\n    const result = [];\n    dynamicEntries.forEach((entry) => {\n      switch (entry.type) {\n        case 'dynamicItems':\n          MenuItemTree.expandDynamicEntry(entry).forEach((replacementEntry) => { result.push(replacementEntry) });\n          break;\n        case 'submenu':\n        {\n          const transformedCopy = {};\n          Object.keys(entry).forEach((attribute) => {\n            transformedCopy[attribute] = entry[attribute];\n          })\n          transformedCopy.submenu = MenuItemTree.transformDynamicEntries(entry.submenu);\n          result.push(transformedCopy);\n          break;\n        }\n        default:\n          result.push(entry);\n      }\n    });\n    return result;\n  }\n\n\n  /**\n   * Transform an entry of type 'dynamicItems' in a list of entries that are not\n   * of type 'dynamicItems'.\n   */\n  static expandDynamicEntry(entry) {\n    return entry.provider(entry.providerParam);\n  }\n\n  state = {\n    entries: []\n  }\n\n  handleItemClick(entry, event) {\n    const { runtime } = this.props;\n    entry.action(event);\n    CommonActionsHelper.sendEvent(entry.event, runtime);\n  }\n\n  buildEntries(entries) {\n    const { runtime } = this.props;\n    return entries.map((entry, i) => {\n      const key = `${entry.type}-${entry.label}-${i}`;\n      const wrapStyle = {\n        display: \"flex\",\n        alignItems: \"center\",\n        minHeight: \"15px\"\n      };\n      const itemAttributes = {\n        title: entry.mouseOver,\n        style: wrapStyle\n      };\n      const imagePath = entry.icon ? CommonConfigHelper.getProperResourcePath(entry.icon, runtime) : null;\n\n      switch (entry.type) {\n        case \"action\":\n          return (\n            <MenuItem key={key} onClick={event => this.handleItemClick(entry, event)} attributes={itemAttributes} disabled={entry.disabled}>\n              <MenuItemTreeIcon disabled={entry.disabled} imagePath={imagePath} altText={`${entry.label}-icon`} />\n              {entry.label}\n            </MenuItem>\n          );\n        case \"separator\":\n          return <MenuItem key={key} divider />;\n        case \"submenu\":\n          return (\n            <SubMenu key={key} title={entry.label} disabled={entry.disabled}>\n              {this.buildEntries(entry.submenu)}\n            </SubMenu>\n          )\n        default: return null;\n      }\n    })\n  }\n\n  onMenuHide = () => {\n    const { runtime } = this.props;\n    runtime.replayStepMonitor.incrementReplayStep();\n    TraceLogHelper.dumpContextMenuTriggeredToTrace({}, false, runtime.traceLogBuffer, runtime.replayStepMonitor);\n  }\n\n  render() {\n    const { entries } = this.state;\n\n    return (\n      <div className={`contextMenu ${entries.length === 0 ? 'hidden' : ''}`}>\n        <ContextMenuTrigger id=\"contextMenu\" ref={this.contextTrigger}>\n          <div />\n        </ContextMenuTrigger>\n        <ContextMenu id=\"contextMenu\" onHide={this.onMenuHide}>\n          {this.buildEntries(entries)}\n        </ContextMenu>\n      </div>\n    );\n  }\n\n}\n\nMenuItemTree.propTypes = {\n  runtime: PropTypes.object.isRequired\n}\n\nfunction MenuItemTreeIcon(props) {\n  const { imagePath, disabled, altText } = props;\n\n  if (!imagePath) return null;\n\n  const imageWrapStyle = {\n    width: \"25px\",\n    height: \"25px\",\n    marginRight: \"5px\",\n    display: \"flex\",\n    alignItems: \"center\"\n  };\n  const imageStyle = {\n    maxHeight: \"100%\",\n    maxWidth: \"100%\",\n    margin: \"auto\",\n    opacity: disabled ? 0.5 : 1\n  };\n\n  return (\n    <div style={imageWrapStyle}>\n      <img src={imagePath} style={imageStyle} alt={altText} />\n    </div>\n  );\n}\n\nMenuItemTreeIcon.propTypes = {\n  imagePath: PropTypes.string,\n  disabled: PropTypes.bool.isRequired,\n  altText: PropTypes.string.isRequired\n}\n\nMenuItemTreeIcon.defaultProps = {\n  imagePath: \"\"\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WebTab from './WebTab';\r\n\r\nimport './WebToolbar.css';\r\nimport PageHistoryHelper from '../PageHistoryHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport WebToolbarHelper from './WebToolbarHelper';\r\nimport MenuItemTree from '../MenuItemTree';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport CbaPageArea from '../CbaPageArea';\r\n\r\nexport default class WebToolbar extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.displayTabs = [];\r\n    this.hiddenTabs = [];\r\n  }\r\n\r\n  closeTab = (event, tabName) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const { parentPath, runtime, parentWidth } = this.props;\r\n    PageHistoryHelper.closeTab(tabName, parentPath, runtime);\r\n\r\n    const toolbarWidth = parentWidth - WebToolbarHelper.containerMarginWidth;\r\n    const currentTab = PageHistoryHelper.getTab(parentPath, runtime);\r\n    const allTabs = PageHistoryHelper.getAllTabs(parentPath, runtime);\r\n    const allTabsInfo = WebToolbarHelper.getAllTabsInfo(allTabs, parentPath, runtime);\r\n    const tabDict = WebToolbarHelper.buildTabDictionary(allTabs, allTabsInfo);\r\n\r\n\r\n    this.displayTabs.splice(this.displayTabs.indexOf(tabName), 1);\r\n    WebToolbarHelper.topUpDisplayTabs(this.displayTabs, this.hiddenTabs, allTabs, currentTab, tabDict, toolbarWidth);\r\n    this.triggerRendering();\r\n  }\r\n\r\n  switchTab = (event, tabName) => {\r\n    const { parentPath, runtime } = this.props;\r\n    const currentTab = PageHistoryHelper.getTab(parentPath, runtime);\r\n\r\n    if (currentTab !== tabName) {\r\n      CbaPageArea.switchTab(parentPath, tabName, event, runtime);\r\n      this.triggerRendering();\r\n    }\r\n  }\r\n\r\n  switchHiddenTab = (showMoreClickEvent, tab) => (tabClickEvent) => {\r\n    this.switchTab(tabClickEvent, tab);\r\n  }\r\n\r\n  handleShowMoreTabs = (event) => {\r\n    const { runtime, parentPath } = this.props;\r\n    const buttonBoundingRect = MenuItemTree.buildTriggerBoundingRect(event);\r\n\r\n    const menuItems = this.hiddenTabs.map(tab => ({\r\n      type: 'action',\r\n      label: tab,\r\n      action: this.switchHiddenTab(event, tab),\r\n      disabled: false,\r\n      icon: PageHistoryHelper.getImageForTab(tab, parentPath, runtime)\r\n    }));\r\n\r\n    event.clientX = buttonBoundingRect.left;\r\n    event.clientY = buttonBoundingRect.bottom;\r\n\r\n    runtime.contextMenu.openMenuItemTreeWithDynamicConfig({\r\n      entries: menuItems,\r\n      event\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper function to trigger rendering on both this component and it's parent (content update)\r\n   */\r\n  triggerRendering = () => {\r\n    const { parentPath, runtime } = this.props;\r\n    RenderingHelper.triggerRendering(this);\r\n    RenderingHelper.triggerRenderingViaPath(parentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Get the optional icon resource to be displayed on the tab.\r\n   */\r\n  getTabIconResource = (tabName) => {\r\n    const { parentPath, runtime } = this.props;\r\n    const iconForTab = PageHistoryHelper.getImageForTab(tabName, parentPath, runtime);\r\n    return CommonConfigHelper.getProperResourcePath(iconForTab, runtime);\r\n  }\r\n\r\n  renderTabs = (currentTab, renderTabs) => {\r\n    const { parentPath, runtime } = this.props;\r\n    const allTabs = PageHistoryHelper.getAllTabs(parentPath, runtime);\r\n    const firstTab = allTabs[0];\r\n\r\n    return renderTabs.map((tab) => {\r\n      const tabInfo = PageHistoryHelper.getInfoForTab(tab, parentPath, runtime);\r\n      const { tabWidth } = tabInfo;\r\n      let { closable } = tabInfo;\r\n\r\n      if (tab === firstTab) {\r\n        closable = false;\r\n      }\r\n\r\n      return (\r\n        <WebTab\r\n          key={tab}\r\n          tabName={tab}\r\n          isActive={tab === currentTab}\r\n          closeTab={event => this.closeTab(event, tab)}\r\n          onClick={event => this.switchTab(event, tab)}\r\n          icon={this.getTabIconResource(tab)}\r\n          closable={closable}\r\n          width={tabWidth}\r\n        />\r\n      );\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { parentPath, runtime, parentWidth } = this.props;\r\n    const currentTab = PageHistoryHelper.getTab(parentPath, runtime);\r\n    const allTabs = PageHistoryHelper.getAllTabs(parentPath, runtime);\r\n    const allTabsInfo = WebToolbarHelper.getAllTabsInfo(allTabs, parentPath, runtime);\r\n    const toolbarWidth = parentWidth - WebToolbarHelper.containerMarginWidth;\r\n    const showMoreTabs = WebToolbarHelper.exceedsMaxTabsWidth(allTabsInfo, toolbarWidth);\r\n    const tabDict = WebToolbarHelper.buildTabDictionary(allTabs, allTabsInfo);\r\n\r\n    if (showMoreTabs) {\r\n      if (!this.displayTabs.includes(currentTab)) {\r\n        const containerWidthWithShowMore = toolbarWidth - WebToolbarHelper.showMoreButtonWidth;\r\n        ({\r\n          displayTabs: this.displayTabs,\r\n          hiddenTabs: this.hiddenTabs\r\n        } = WebToolbarHelper.buildDisplayTabs(allTabs, currentTab, tabDict, containerWidthWithShowMore));\r\n\r\n        WebToolbarHelper.topUpDisplayTabs(this.displayTabs, this.hiddenTabs, allTabs, currentTab, tabDict, containerWidthWithShowMore);\r\n      }\r\n    } else {\r\n      this.displayTabs = allTabs;\r\n    }\r\n\r\n    return (\r\n      <div className=\"webtoolbar-wrap\">\r\n        <div className=\"webtoolbar-inner\">\r\n          <div ref={this.tabContainerRef} className=\"webtoolbar-tab-container\">\r\n            {this.renderTabs(currentTab, this.displayTabs)}\r\n            <div className=\"webtoolbar-show-more\">\r\n              <i className={showMoreTabs ? \"show\" : \"\"} onClick={this.handleShowMoreTabs} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nWebToolbar.propTypes = {\r\n  parentPath: PropTypes.string.isRequired,\r\n  runtime: PropTypes.object.isRequired,\r\n  parentWidth: PropTypes.number.isRequired\r\n}\r\n","import IndexPathHelper from \"../../state/IndexPathHelper\";\r\nimport ComponentStateHelper from \"../../state/ComponentStateHelper\";\r\nimport StateAttributeAccess from \"../../state/StateAttributeAccess\";\r\n\r\n/**\r\n * Helper methods for table specific actions.\r\n */\r\nexport default class TableHelper {\r\n\r\n  /**\r\n   * This method will be used to handle table navigation via arrows. \r\n   * More specific will trigger table cell auto focus events.\r\n   * \r\n   * @param {*} e The keyboard event received.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {Object} config The common config structure.\r\n   * @param {boolean} isInEditMode Flag to know that we are in a table cell.\r\n   */\r\n  static handleKeyDown(e, runtime, config, tablePath, isInEditMode) {\r\n    e = e || window.event;\r\n    const keyCode = e.keyCode || e.which;\r\n    const arrow = {\r\n      left: 37,\r\n      up: 38,\r\n      right: 39,\r\n      down: 40\r\n    };\r\n\r\n    if (isInEditMode) {\r\n      const { row, column } = config;\r\n      if (e.ctrlKey) {\r\n        switch (keyCode) {\r\n          case arrow.left:\r\n            // TODO: extract this in a method to avoid redundance \r\n            TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row, column - 1, e);\r\n            break;\r\n          case arrow.right:\r\n            TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row, column + 1, e);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      switch (keyCode) {\r\n        case arrow.up:\r\n          TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row - 1, column, e);\r\n          break;\r\n        case arrow.down:\r\n          TableHelper.emitAutoFocusAndPreventDefault(runtime, tablePath, row + 1, column, e);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method will emit an autoFocus event and stop propagation.\r\n   * \r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {*} parentTableUserDefId The user defined id of the table.\r\n   * @param {*} row Row to focus\r\n   * @param {*} column Columns to focus\r\n   * @param {*} e \r\n   */\r\n  static emitAutoFocusAndPreventDefault(runtime, tablePath, row, column, e) {\r\n    runtime.eventEmitter.emit(`${tablePath}-autoFocus`, row, column);\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * This method will be used to cleanup the last selection when a new cell get focus.\r\n   * \r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {*} config The common config structure.\r\n   * @param {*} isInEditMode Flag to know that we are in a table cell.\r\n   */\r\n  static handleCellFocus(runtime, tablePath, isInEditMode) {\r\n    if (isInEditMode) {\r\n      runtime.eventEmitter.emit(`${tablePath}-removeOldSelection`);\r\n    }\r\n  }\r\n\r\n  static isInt(n) {\r\n    return Number(n) === n && n % 1 === 0;\r\n  }\r\n\r\n  static isFloat(n) {\r\n    n = Number.parseFloat(n);\r\n    if (n === undefined || Number.isNaN(n)) {\r\n      return false;\r\n    }\r\n    return Number(n) === n && n % 1 !== 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the table index path.\r\n   * @param {*} componentPath The path for edit mode component of a spreadsheet table cell \r\n   * or the path of a RichTextField child for standard table cell.\r\n   *      \r\n   */\r\n  static buildTablePath(componentPath) {\r\n    const tableCellPath = IndexPathHelper.dropIndexFromPageSegment(componentPath);\r\n    return IndexPathHelper.dropIndexFromPageSegment(tableCellPath);\r\n  }\r\n\r\n  static isFormula(value) {\r\n    return value !== undefined && value.slice(0, 1) === '=';\r\n  }\r\n\r\n  /**\r\n   * Returns true if the current selected cell has same row/column as the old selected one.\r\n   * @param {*} tableUserDefIdPath The user defined id path of the table.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static isOldSelected(tableUserDefIdPath, runtime) {\r\n    const currentSelected = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractSelectedCell, tableUserDefIdPath, runtime);\r\n    const oldSelected = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractOldSelectedCell, tableUserDefIdPath, runtime);\r\n    return (currentSelected.row === oldSelected.row && currentSelected.column === oldSelected.column);\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Select from \"react-select\";\r\nimport PropTypesHelper from './PropTypesHelper';\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport StateManagerHelper from '../state/StateManagerHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport RenderingHelper from './RenderingHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess'\r\nimport SelectGroupHelper from './SelectGroupHelper';\r\nimport CommonActionsHelper from './CommonActionsHelper';\r\nimport TableHelper from './table/TableHelper';\r\n\r\n/**\r\n * A display component that displays a combo box.\r\n * \r\n * This component manages the items in the combo box as children of its own \r\n * in the display component instances tree.\r\n */\r\nexport default class CbaComboBox extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.comboRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { isInEditMode } = this.props;\r\n    if (isInEditMode) {\r\n      this.focus();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  // basic state management --------------------------------------------------------------\r\n\r\n  static getItemType() {\r\n    return 'ComboBoxItem';\r\n  }\r\n\r\n  /**\r\n   * Build an array of 'standard' configuration structures for the items in the items list.\r\n   * The page configurations manager expects a structure with the attributes 'type' and 'config'. \r\n   * When accessing this structure the state manager expects a config.state object as a minimum. \r\n   */\r\n  static buildComboBoxItemsArray(itemsInConfig) {\r\n    return itemsInConfig.map((itemInConfig, index, all) => {\r\n      const configOnPathSegment = StateManagerHelper.deepCopy(itemInConfig);\r\n      const additionalState = {}\r\n      StateAttributeAccess.setSelected(additionalState, parseInt(index, 10) === 0);\r\n      StateAttributeAccess.setDisabled(additionalState, false);\r\n      StateAttributeAccess.setHidden(additionalState, false);\r\n      configOnPathSegment.state = additionalState;\r\n      return {\r\n        type: CbaComboBox.getItemType(),\r\n        config: configOnPathSegment\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Calculate the index of the currently selected item by looking at the state \r\n   * of all items in the state manager:\r\n   */\r\n  getSelectedIdFromState = () => {\r\n    const { runtime, path: comboBoxPath, config } = this.props;\r\n    const stateManager = runtime.componentStateManager;\r\n    let foundSelectedId;\r\n    config.items.forEach((itemConfig, index, all) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(comboBoxPath, index);\r\n      const itemState = stateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n      if (SelectGroupHelper.extractSelectedState(itemState, itemPath, runtime)) {\r\n        // in case of multiple selections we display the first selected item in the closed combo box:\r\n        if (foundSelectedId === undefined) {\r\n          foundSelectedId = parseInt(index, 10);\r\n        } else {\r\n          console.warn(\"Multiple selections in a combo box are not supported yet!\");\r\n        }\r\n      }\r\n    })\r\n    return foundSelectedId;\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the selected setting for all combo box items to reflect\r\n   * the currently selected item. \r\n   */\r\n  setSelectedIdInState = (newSelectedId) => {\r\n    const { runtime, path: comboBoxPath } = this.props;\r\n    const stateManager = runtime.componentStateManager;\r\n    const comboBoxState = ComponentStateHelper.getState(this);\r\n    const selectGroupControllerState = StateAttributeAccess.extractSelectGroupControllerState(comboBoxState);\r\n    const itemPath = IndexPathHelper.appendIndexToPageSegment(comboBoxPath, newSelectedId);\r\n    const itemState = stateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n    if (selectGroupControllerState === undefined) {\r\n      console.warn(\"Multiple select combo boxes are not supported yet!\");\r\n      // just set the selected state of the additionally selected item:\r\n      StateAttributeAccess.setSelected(itemState, true);\r\n      stateManager.registerStateByPathId(itemPath, itemState, runtime);\r\n    } else {\r\n      SelectGroupHelper.delegateSetSelectedToController(true, SelectGroupHelper.comboBoxGroup(), comboBoxPath, itemPath, itemState, true, false, runtime);\r\n    }\r\n  }\r\n\r\n  // handle user triggered events ----------------------------------------------------------------\r\n\r\n  onChangeHandler = (event) => {\r\n    const { runtime, config, path, isInEditMode } = this.props;\r\n    const oldSelectedId = this.getSelectedIdFromState();\r\n    const newSelectedId = parseInt(this.hasVisibleItemCount() ? event.value : event.target.value, 10);\r\n    const oldSelectedItem = config.items[oldSelectedId];\r\n    const newSelectedItem = config.items[newSelectedId];\r\n\r\n    this.updateStateAndTriggerRendering(newSelectedId);\r\n\r\n    // CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    if (!isInEditMode) {\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, CbaComboBox.buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId), event, runtime);\r\n    }\r\n    CommonActionsHelper.sendStandardEvent(newSelectedItem, runtime);\r\n    const defaultLinkReceiver = CommonActionsHelper.getDefaultLinkReceiver(this);\r\n    CommonActionsHelper.doPageSwitch(newSelectedItem.link, runtime, defaultLinkReceiver, path);\r\n\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    // Catch on click events to avoid trace logs on the container of the combo box.\r\n    const { runtime, path } = this.props;\r\n\r\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    this.scrollCurrentOptionIntoViewIfVisibleItemCountOne();\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    this.scrollCurrentOptionIntoViewIfVisibleItemCountOne();\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  // ------------- Table specific handlers -------------------------------------//\r\n  onKeyDownHandler = (e) => {\r\n    const { config, path, runtime, isInEditMode } = this.props;\r\n    TableHelper.handleKeyDown(e, runtime, config, TableHelper.buildTablePath(path), isInEditMode);\r\n  }\r\n\r\n  onFocusHandler = () => {\r\n    const { path, runtime, isInEditMode } = this.props;\r\n    TableHelper.handleCellFocus(runtime, TableHelper.buildTablePath(path), isInEditMode);\r\n  }\r\n\r\n  static buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId) {\r\n    return {\r\n      oldSelected: oldSelectedId,\r\n      oldSelectedUserDefId: oldSelectedItem.userDefinedId,\r\n      newSelected: newSelectedId,\r\n      newSelectedUserDefId: newSelectedItem.userDefinedId\r\n    };\r\n  }\r\n\r\n  updateStateAndTriggerRendering = (newSelectedId) => {\r\n    const { runtime, config, path: comboBoxPath, isInEditMode, onBlur } = this.props;\r\n\r\n    this.setSelectedIdInState(newSelectedId);\r\n\r\n    // specific behavior for table cell usage of this component\r\n    if (isInEditMode) {\r\n      const { row, column } = config;\r\n      runtime.eventEmitter.emit(`${TableHelper.buildTablePath(comboBoxPath)}-contentUpdate`, config.items[newSelectedId].text, row, column, true);\r\n      onBlur();\r\n    }\r\n\r\n    // trigger rendering of the combo box itself:\r\n    RenderingHelper.triggerRenderingViaPath(comboBoxPath, runtime);\r\n  }\r\n\r\n\r\n  // rendering ---------------------------------------------------------------------------------------\r\n\r\n  checkForInvalidItems = () => {\r\n    const { config } = this.props;\r\n    const { items } = config;\r\n    return !Array.isArray(items) || (Array.isArray(items) && items.length === 0);\r\n  }\r\n\r\n  generateOptions = itemsConfig => (\r\n    // disabled because we don't have a unique id to use as key and also the array does not change.\r\n    // eslint-disable-next-line react/no-array-index-key\r\n    itemsConfig.map((itemConfig, i) => (<option key={i} value={i}>{itemConfig.text}</option>))\r\n  )\r\n\r\n  generateOptionsForSelect = (itemsConfig) => {\r\n    // disabled because we don't have a unique id to use as key and also the array does not change.\r\n    // eslint-disable-next-line react/no-array-index-key\r\n    const options = [];\r\n    itemsConfig.map((itemConfig, i) => (options.push({\r\n      value: i, label: itemConfig.text\r\n    })));\r\n    return options;\r\n  }\r\n\r\n  focus = () => {\r\n    this.comboRef.current.focus();\r\n  }\r\n\r\n  hasVisibleItemCount = () => {\r\n    const { config } = this.props;\r\n    const { visibleItemCount, items } = config;\r\n\r\n    return visibleItemCount !== undefined && visibleItemCount > 0 && visibleItemCount < items.length\r\n  }\r\n\r\n  /**\r\n   * Specific fix for issue #5394\r\n   */\r\n  scrollCurrentOptionIntoViewIfVisibleItemCountOne = () => {\r\n    const { config } = this.props;\r\n    const { visibleItemCount } = config;\r\n\r\n    if (visibleItemCount !== 1) return;\r\n\r\n    try {\r\n      const currentlySelectedId = this.getSelectedIdFromState();\r\n      const allPotentialElementsList = [...document.querySelectorAll('[class^=\"css-\"]')].filter(el => el.localName === 'div');\r\n      const portalMenuContainerElement = allPotentialElementsList.find(el => el.firstChild.className.includes('-menu'));\r\n\r\n      if (portalMenuContainerElement.firstChild.className.includes('-menu')) {\r\n\r\n        const portalMenuElement = portalMenuContainerElement.firstChild.firstChild;\r\n\r\n        if (portalMenuElement) {\r\n          portalMenuElement.children[currentlySelectedId].scrollIntoView()\r\n        }\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log('Something went wrong on CBAComboBox', error)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.checkForInvalidItems()) {\r\n      return React.createElement(\r\n        'div',\r\n        null,\r\n        `Invalid item configuration in combo box.`\r\n      );\r\n    }\r\n\r\n\r\n    const { config, path, runtime, orientation, onBlur, isInEditMode } = this.props;\r\n    const { visibleItemCount, position } = config;\r\n    const wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n\r\n    const selectedId = this.getSelectedIdFromState();\r\n    let options = this.generateOptions(config.items);\r\n\r\n    if (isInEditMode) {\r\n      Object.assign(wrapperStyle, {\r\n        boxShadow: \"inset rgb(79, 124, 177) 0px 0px 4px\"\r\n      })\r\n    }\r\n\r\n    // do this only when visible item count was set properly\r\n    if (this.hasVisibleItemCount()) {\r\n      options = this.generateOptionsForSelect(config.items);\r\n      const maxHeightSize = visibleItemCount * position.height;\r\n\r\n      const customStyles = {\r\n        menu: provided => ({\r\n          ...provided,\r\n          marginTop: 2\r\n        }),\r\n        menuList: provided => ({\r\n          ...provided,\r\n          padding: 0,\r\n          width: wrapperStyle.width,\r\n          backgroundColor: wrapperStyle.backgroundColor\r\n        }),\r\n        option: (provided, state) => {\r\n          let backgroundColor\r\n          if (state.isSelected) {\r\n            backgroundColor = 'blue';\r\n          } else if (state.isFocused) {\r\n            backgroundColor = 'grey';\r\n          } else {\r\n            backgroundColor = 'inherit';\r\n          }\r\n\r\n          return {\r\n            ...provided,\r\n            width: 'auto',\r\n            height: wrapperStyle.height,\r\n            padding: 0,\r\n            lineHeight: wrapperStyle.height,\r\n            color: state.isSelected ? 'white' : wrapperStyle.color,\r\n            fontSize: wrapperStyle.fontSize,\r\n            fontFamily: wrapperStyle.fontFamily,\r\n            whiteSpace: 'nowrap',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            backgroundColor,\r\n          }\r\n        },\r\n        control: (provided, state) => ({\r\n          ...provided,\r\n          // none of react-select's styles are passed to <Control />\r\n          backgroundColor: wrapperStyle.backgroundColor,\r\n          minHeight: \"auto\",\r\n          boxShadow: 'rgb(79, 124, 177) 0px 0px 0px',\r\n          // draw the border around the control:\r\n          borderColor: wrapperStyle.borderColor,\r\n          borderWidth: wrapperStyle.borderWidth,\r\n          borderRadius: wrapperStyle.borderRadius,\r\n          borderStyle: wrapperStyle.borderStyle,\r\n          // extend the control to the full size of the container\r\n          height: wrapperStyle.height,\r\n          cursor: wrapperStyle.cursor\r\n        }),\r\n        container: (provided, s) => ({\r\n          ...provided,\r\n          ...wrapperStyle,\r\n          // we draw the border around the control -> don't draw a border around the container \r\n          borderWidth: \"0px\",\r\n        }),\r\n        valueContainer: provided => ({\r\n          ...provided,\r\n          padding: \"0 3px\",\r\n          height: \"100%\",\r\n          position: \"static\"\r\n        }),\r\n        singleValue: (provided, state) => ({\r\n          ...provided,\r\n          maxWidth: \"calc(100% - 21px)\",\r\n          width: \"100%\",\r\n          textAlign: wrapperStyle.textAlign,\r\n          color: wrapperStyle.color\r\n        }),\r\n        indicatorsContainer: provided => ({\r\n          ...provided,\r\n          height: \"100%\",\r\n        }),\r\n        dropdownIndicator: provided => ({\r\n          ...provided,\r\n          color: \"#808080\",\r\n          \":hover\": {\r\n            color: \"#000\"\r\n          },\r\n          padding: 0,\r\n        }),\r\n        indicatorSeparator: provided => ({\r\n          ...provided,\r\n          display: \"none\"\r\n        })\r\n      }\r\n\r\n      return (\r\n        <div onClick={this.onClickHandler} onContextMenu={this.onContextMenuHandler} className=\"overflow-hidden\">\r\n          <Select\r\n            styles={customStyles}\r\n            title={CommonConfigHelper.buildTitle(config)}\r\n            value={options[selectedId]}\r\n            isDisabled={StateAttributeAccess.extractDisabled(pathState)}\r\n            onChange={this.onChangeHandler}\r\n            onBlur={e => onBlur(e, config.items[selectedId].text, true)}\r\n            onKeyDown={this.onKeyDownHandler}\r\n            onFocus={this.onFocusHandler}\r\n            options={options}\r\n            maxMenuHeight={maxHeightSize}\r\n            menuPortalTarget={document.body}\r\n            tabIndex={config.tabIndex}\r\n            className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaComboBox overflow-hidden\")}\r\n          />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <select\r\n        ref={this.comboRef}\r\n        style={wrapperStyle}\r\n        data-cba-id={config.pageEditId}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n        value={selectedId}\r\n        disabled={StateAttributeAccess.extractDisabled(pathState)}\r\n        onChange={this.onChangeHandler}\r\n        onBlur={e => onBlur(e, config.items[selectedId].text, true)}\r\n        onContextMenu={this.onContextMenuHandler}\r\n        onKeyDown={this.onKeyDownHandler}\r\n        onFocus={this.onFocusHandler}\r\n        onClick={this.onClickHandler}\r\n        tabIndex={config.tabIndex}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaComboBox\")}\r\n      >\r\n        {options}\r\n      </select>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nCbaComboBox.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\r\n      {\r\n        items: PropTypes.array.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  isInEditMode: PropTypes.bool,\r\n  orientation: PropTypes.string.isRequired,\r\n  onBlur: PropTypes.func\r\n}\r\n\r\nCbaComboBox.defaultProps = {\r\n  isInEditMode: false,\r\n  onBlur: () => { }\r\n}\r\n","import StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\n\r\n/**\r\n * Helper methods to implement the 'propagation group' mechanism.\r\n * \r\n * A component can carry a list of 'propagation groups':\r\n *  - Each group is identified by a group name and contains a list of index paths to components that are members of the group.\r\n * \r\n * Some operators in the TermEvaluator support an optional group name parameter.\r\n * Specifying such a group name will propagate the operator call to all members of the specified group then:\r\n *  - The absoluteUserDefinedId in the parameters identifies the component bearing the propagation group list.\r\n *  - The groupName parameter selects the group from the list of propagation groups. \r\n *  - The operator's action is applied to all members of the selected group instead of the component bearing the group list.\r\n *  - The operator's action is not applied to the component bearing the group list itself. \r\n * \r\n */\r\n\r\nexport default class PropagationHelper {\r\n\r\n  /**\r\n   * Build the select-group controller settings for a potential propagation-group controller component.\r\n   */\r\n  static addPropagationGroupControllerState(pathState, configProps) {\r\n    const config = configProps.propagationGroups;\r\n    if (config !== undefined) {\r\n      const controllerState = config.map((value, index, all) => ({\r\n        name: value.name,\r\n        memberIndexPaths: value.memberIndexPaths === undefined ? [] : [...value.memberIndexPaths]\r\n      }));\r\n      StateAttributeAccess.setPropagationGroupControllerState(pathState, controllerState);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply the given action to the members of the given propagation group of the given propagation group controller component.\r\n   * \r\n   * The action must accept one parameter: the index path of the component to apply the action to.\r\n   */\r\n  static applyToPropagationGroup(controllerIndexPath, groupName, appliedAction, runtime) {\r\n    const matchingGroups = PropagationHelper.getMatchingPropagationGroups(controllerIndexPath, groupName, runtime);\r\n    matchingGroups.forEach((group) => {\r\n      PropagationHelper.applyActionToGroupMembers(controllerIndexPath, group, appliedAction);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Convenience method: Apply an attribute setting to the component itself or to the propagation group members if a group name is given.\r\n   */\r\n  static applySimpleSetter(controllerUserDefPath, groupName, getter, setter, value, triggerRendering, runtime) {\r\n    if (groupName === undefined) {\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(getter, setter, value, controllerUserDefPath, runtime, true);\r\n    } else {\r\n      const controllerPathId = PathTranslationHelper.getIndexPathForUserDefPath(controllerUserDefPath, runtime);\r\n      PropagationHelper.applyToPropagationGroup(controllerPathId, groupName,\r\n        (componentPath) => {\r\n          ComponentStateHelper.updateStateAttribute(getter, setter, value, componentPath, runtime, triggerRendering)\r\n        },\r\n        runtime);\r\n    }\r\n  }\r\n\r\n  // --------------- private stuff ----------------------------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Private helper method: Get matching propagation group configuration for given propagation group controller and group name.\r\n   */\r\n  static getMatchingPropagationGroups(controllerIndexPath, groupName, runtime) {\r\n    const { componentStateManager } = runtime;\r\n    const fullControllerState = componentStateManager.findOrBuildStateForPathId(controllerIndexPath, runtime);\r\n    const propagationsGroupsState = StateAttributeAccess.extractPropagationGroupControllerState(fullControllerState);\r\n    if (propagationsGroupsState === undefined) {\r\n      console.log(`Ignored request to propagate some action for a component that isn't a propagation-group controller: ${controllerIndexPath}`);\r\n      return [];\r\n    }\r\n    return propagationsGroupsState.filter(group => group.name === groupName);\r\n  }\r\n\r\n  /** \r\n   * Private helper method: Apply the given action to the member paths in the given group configuration.\r\n  */\r\n  static applyActionToGroupMembers(controllerIndexPath, groupConfiguration, action) {\r\n    groupConfiguration.memberIndexPaths.forEach((memberPathPageSegment) => {\r\n      const memberIndexPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(controllerIndexPath), memberPathPageSegment);\r\n      action(memberIndexPath);\r\n    })\r\n  }\r\n\r\n}\r\n","import StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport CommonActionsHelper from './CommonActionsHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport RenderingHelper from './RenderingHelper';\r\nimport CbaComboBox from './CbaComboBox';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\nimport Utils from '../utils/Utils';\r\nimport PropagationHelper from '../eval/PropagationHelper';\r\n\r\n/**\r\n * Helper methods to implement the 'select-group' mechanism.\r\n * \r\n * The select-group mechanism is based on two state structures kept in the index path state in the ComponentStateManager:\r\n * \r\n * A container managing select-groups for its descendants (the 'controller') keeps an array of structures configuring these select-groups:\r\n * selectGroupControllerState: [\r\n *  {\r\n *    name: String (The name of the select-group, unique among all select-groups of this controller)\r\n *    selectionChangesBlocked: bool (Do we block changes to the selection state of our group members currently?)\r\n *    singleSelectActive: bool (Is the single-select restriction active, i.e. do we enforce a single select behavior for participating members?)\r\n *    allowDeselect: bool (Do we allow the currently selected member to be deselected by a click? If not the selected member can change only by clicking on a currently not selected member.)\r\n *    currentlySelected: string (The last page segment of the index path of the currently selected member of the select-group.)\r\n *    deselectTarget: string (The last page segment of the index path of the member to select if the currently selected member is deselected.)\r\n *  },\r\n *  ...\r\n * ]\r\n * \r\n * \r\n * Each descendant participating in the select-group keeps this structure:\r\n * selectGroupMemberInfo: {\r\n *  contollerPathId: String (The full index path of the controller managing the select-group.)\r\n *  groupName: String (The name of the select-group.)\r\n * }\r\n * \r\n * For children participating in a select-group in 'single-select-mode' the 'selected' attribute in the index path state is not relevant. \r\n * It is 'shadowed' by the data kept in the selectGroupControllerState structure. \r\n * \r\n * For components participating in a select-group in 'single-select' mode the 'select-group' mechanism runs the following actions on behalf of the onClick handler of the component:\r\n *  - Set the 'selected' status of the component: The controller might decide to select another component than the one that runs the onClick handler.\r\n *  - Do the appropriate page switch: The controller will execute the page switch specified for the component that becomes actually selected.\r\n * \r\n * For components participating in a select-group in 'single-select' mode the setSelected operator in the TermEvaluator will trigger the page switch configured for the actually selected component. \r\n * (For other components the operator will not trigger a page switch configured for the component.) \r\n * \r\n */\r\nexport default class SelectGroupHelper {\r\n\r\n  // methods for select group members:  ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Calculate the select flag for a member component by investigating the path state.\r\n   * \r\n   * The method uses the select-group structures to determine the select status if the member component is controlled by a select-group controller in 'single-select' mode. \r\n   * Otherwise it falls back to the plain 'selected' flag in the path state of the child component. \r\n   */\r\n  static extractSelectedState(pathState, controlledPathId, runtime) {\r\n    const selectGroupMemberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(pathState);\r\n    if (selectGroupMemberInfo === undefined) {\r\n      return StateAttributeAccess.extractSelected(pathState);\r\n    }\r\n\r\n    const controllerState = StateAttributeAccess.extractSelectGroupControllerState(runtime.componentStateManager.findOrBuildStateForPathId(selectGroupMemberInfo.controllerPathId, runtime));\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(controllerState, selectGroupMemberInfo.groupName);\r\n    if (groupState === undefined || !groupState.singleSelectActive) {\r\n      return StateAttributeAccess.extractSelected(pathState);\r\n    }\r\n\r\n    return IndexPathHelper.getLastPageSegmentFromPath(controlledPathId) === groupState.currentlySelected;\r\n  }\r\n\r\n\r\n  /**\r\n   * Is the component member of a select-group (i.e. it is controlled by a select-group controller)?\r\n   */\r\n  static isSelectGroupMember(pathState) {\r\n    return StateAttributeAccess.extractSelectGroupMemberInfo(pathState) !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Is the component controlled by a select-group controller in 'single-select' mode?\r\n   */\r\n  static isSingleSelectControlled(pathState, runtime) {\r\n    const selectGroupMemberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(pathState);\r\n    if (selectGroupMemberInfo === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const controllerState = StateAttributeAccess.extractSelectGroupControllerState(runtime.componentStateManager.findOrBuildStateForPathId(selectGroupMemberInfo.controllerPathId, runtime));\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(controllerState, selectGroupMemberInfo.groupName);\r\n    return groupState !== undefined && groupState.singleSelectActive;\r\n  }\r\n\r\n\r\n  /**\r\n   * Handle a request to set the 'selected' status for a component that might be controlled by a select-group controller in 'single-select' mode: \r\n   * Update the controller's state and the component's state in the ComponentStateManager and trigger rendering on an appropriate scope.\r\n   * \r\n   * For components that are in fact controlled by a select-group controller in 'single-select' mode\r\n   * the method also does the page switch for the actually selected component if the 'singleSelectWithPageSwitch' parameter is set to true.\r\n   * \r\n   * Components control themselves which page switch they do if they happen to be not controlled by a select-group controller in 'single-select' mode: \r\n   * They should use doPageSwitchOrLetTheContainerDoIt(...) to trigger a page switch.\r\n   * \r\n   * @param {boolean} requestedSelectState The 'selected' state that is requested for the component that might be controlled by a select-group controller in 'single-select' mode.\r\n   * @param {*} controlledPathId The index path of the component that might be controlled by a select-group controller in 'single-select' mode.\r\n   * @param {*} controlledPathState The path state of the component that might be controlled by a select-group controller in 'single-select' mode.\r\n   * @param {boolean} singleSelectWithPageSwitch Should we do the page switches of the actually selected component (for single-select mode case only)?\r\n   * @param {boolean} overrideNoDeselect Should we override a allowDeselect=false setting when trying to deselect the currently selected component?\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static setSelectedForPossiblyControlledComponent(requestedSelectState, controlledPathId, controlledPathState, singleSelectWithPageSwitch, overrideNoDeselect, runtime) {\r\n    const selectGroupMemberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(controlledPathState);\r\n    if (selectGroupMemberInfo === undefined) {\r\n      // do standard selection flag setting for non-members:\r\n      SelectGroupHelper.doStandardSelectFlagSetting(requestedSelectState, controlledPathId, controlledPathState, runtime);\r\n    } else {\r\n      const controllerState = StateAttributeAccess.extractSelectGroupControllerState(runtime.componentStateManager.findOrBuildStateForPathId(selectGroupMemberInfo.controllerPathId, runtime));\r\n      const groupState = SelectGroupHelper.extractMatchingGroupState(controllerState, selectGroupMemberInfo.groupName);\r\n      // do nothing for members of a blocked group:\r\n      if (groupState !== undefined && !groupState.selectionChangesBlocked) {\r\n        if (SelectGroupHelper.isSingleSelectControlled(controlledPathState, runtime)) {\r\n          // notify parent container and let it trigger the new rendering:\r\n          const { controllerPathId, groupName } = selectGroupMemberInfo;\r\n          SelectGroupHelper.delegateSetSelectedToController(\r\n            requestedSelectState,\r\n            groupName,\r\n            controllerPathId,\r\n            controlledPathId,\r\n            controlledPathState,\r\n            singleSelectWithPageSwitch,\r\n            overrideNoDeselect,\r\n            runtime\r\n          );\r\n        } else {\r\n          // do standard selection flag setting for members in a non-blocked multiple-select mode group:\r\n          SelectGroupHelper.doStandardSelectFlagSetting(requestedSelectState, controlledPathId, controlledPathState, runtime);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the currently selected component in a select-group in 'single-select' mode.\r\n   * \r\n   * The method manages the controller's state in the ComponentStateManager and registers the given state for the controlled component in the ComponentStateManager.\r\n   * Finally it triggers a rendering on the controller level. \r\n   */\r\n  static delegateSetSelectedToController(requestedSelectState, groupName, controllerPathId, controlledPathId, controlledPathState, withPageSwitch, overrideNoDeselect, runtime) {\r\n\r\n    const controllerState = runtime.componentStateManager.findOrBuildStateForPathId(controllerPathId, runtime);\r\n\r\n    SelectGroupHelper.handleSelectedChildChanges(requestedSelectState, groupName, controlledPathId, controllerState, controllerPathId, withPageSwitch, overrideNoDeselect, runtime);\r\n\r\n    runtime.componentStateManager.registerStateByPathId(controllerPathId, controllerState, runtime);\r\n    // We should register the given controlled state in any case to have a consistent contract with the caller:\r\n    if (controlledPathId !== undefined && controlledPathState !== undefined) {\r\n      runtime.componentStateManager.registerStateByPathId(controlledPathId, controlledPathState, runtime);\r\n    }\r\n    RenderingHelper.triggerRenderingViaPath(controllerPathId, runtime);\r\n\r\n  }\r\n\r\n  /**\r\n   * Do the standard page switch for a component if the component is not controlled by a select-group controller in 'single-select' mode. \r\n   */\r\n  static doPageSwitchOrLetTheContainerDoIt(component, pathState) {\r\n    if (!SelectGroupHelper.isSingleSelectControlled(pathState, component.props.runtime)) {\r\n      CommonActionsHelper.doPageSwitchForComponent(component);\r\n    }\r\n  }\r\n\r\n  // methods for state initialization ------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build the select settings in the initial state for a possibly controlled component. \r\n   */\r\n  static addSelectGroupMemberInfo(pathState, componentType, pathId, runtime) {\r\n\r\n    const selectGroupMemberConfig = SelectGroupHelper.getSelectGroupMemberPerConfig(pathId, runtime);\r\n\r\n    if (\r\n      (SelectGroupHelper.isControlledType(componentType) && selectGroupMemberConfig !== undefined)\r\n    ) {\r\n\r\n      const containerPageSegment = selectGroupMemberConfig.controllerPathId;\r\n      const containerConfiguration = runtime.pageConfigurationsManager.findConfigurationForPageSegment(containerPageSegment).config;\r\n      if (containerConfiguration.selectGroups !== undefined) {\r\n        const containerPathId = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(pathId), containerPageSegment);\r\n        const selectGroupMemberInfo = {\r\n          controllerPathId: containerPathId,\r\n          groupName: selectGroupMemberConfig.groupName,\r\n          selectGroupMemberName: selectGroupMemberConfig.selectGroupMemberName\r\n        };\r\n        StateAttributeAccess.setSelectGroupMemberInfo(pathState, selectGroupMemberInfo);\r\n      }\r\n    } else if (SelectGroupHelper.isComboBoxItem(componentType)) {\r\n      // combo box is pseudo select group controller -> use immediate parent (= combo box) if we are not a member of a real select-group\r\n      const controlledPageSegment = IndexPathHelper.getLastPageSegmentFromPath(pathId);\r\n      const containerPageSegment = IndexPathHelper.dropIndexFromPageSegment(controlledPageSegment);\r\n      const containerPathId = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(pathId), containerPageSegment);\r\n      const selectGroupMemberInfo = {\r\n        controllerPathId: containerPathId,\r\n        groupName: SelectGroupHelper.comboBoxGroup()\r\n      };\r\n      StateAttributeAccess.setSelectGroupMemberInfo(pathState, selectGroupMemberInfo);\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build the select-group controller settings for a potential select-group controller component.\r\n   */\r\n  static addSelectGroupControllerState(pathState, componentType, pathId, configProps) {\r\n    const config = configProps.selectGroups;\r\n    if (config !== undefined) {\r\n      const controllerState = config.map((value, index, all) => ({\r\n        name: value.name,\r\n        selectionChangesBlocked: value.blockSelectionChanges,\r\n        singleSelectActive: value.enforceSingleSelect,\r\n        currentlySelected: value.initiallySelected,\r\n        allowDeselect: value.allowDeselect,\r\n        deselectTarget: value.deselectTarget\r\n      }));\r\n      StateAttributeAccess.setSelectGroupControllerState(pathState, controllerState);\r\n    } else if (SelectGroupHelper.isComboBox(componentType)) {\r\n      const initiallySelectedIndex = configProps.selectedEntry === undefined ? 0 : configProps.selectedEntry;\r\n      const firstItemPath = IndexPathHelper.appendIndexToPageSegment(IndexPathHelper.getLastPageSegmentFromPath(pathId), initiallySelectedIndex);\r\n      const controllerState = [{\r\n        name: SelectGroupHelper.comboBoxGroup(),\r\n        selectionChangesBlocked: false,\r\n        singleSelectActive: true,\r\n        currentlySelected: firstItemPath,\r\n        allowDeselect: true,\r\n        deselectTarget: firstItemPath\r\n      }]\r\n      StateAttributeAccess.setSelectGroupControllerState(pathState, controllerState);\r\n    }\r\n  }\r\n\r\n  // methods for term evaluator ----------------------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Set the 'blockSelectionChanges' attribute in the select-group configuration for the group controller specified by the user defined id path.\r\n   */\r\n  static setSelectionChangesBlockedForController(controllerUserDefPath, groupName, value, runtime) {\r\n    SelectGroupHelper.setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, (groupState) => { groupState.selectionChangesBlocked = value; }, runtime);\r\n  }\r\n\r\n  /**\r\n   * Set the 'singleSelectActive' attribute in the select-group configuration for the group controller specified by the user defined id path.\r\n   */\r\n  static setSingleSelectActiveForController(controllerUserDefPath, groupName, value, runtime) {\r\n    SelectGroupHelper.setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, (groupState) => { groupState.singleSelectActive = value; }, runtime);\r\n  }\r\n\r\n  /**\r\n   * Set the 'allowDeselect' attribute in the select-group configuration for the group controller specified by the user defined id path.\r\n   */\r\n  static setAllowDeselectForController(controllerUserDefPath, groupName, value, runtime) {\r\n    SelectGroupHelper.setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, (groupState) => { groupState.allowDeselect = value; }, runtime);\r\n  }\r\n\r\n  /**\r\n   * Computes the selected item from a combobox component identified by the given indexPath.\r\n   */\r\n  static getComboboxSelectedItem(indexPath, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const comboItems = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config.items;\r\n    let selectedItemUdi = '';\r\n    comboItems.forEach((childConfig, index) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(indexPath, index);\r\n      const itemState = runtime.componentStateManager.findOrBuildStateForPathId(itemPath, runtime);\r\n      if (SelectGroupHelper.extractSelectedState(itemState, itemPath, runtime)) {\r\n        const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(itemPath, runtime);\r\n        selectedItemUdi = UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath);\r\n      }\r\n    });\r\n    return selectedItemUdi;\r\n  }\r\n\r\n  /**\r\n   * Computes a comma separated String with the selected items from a list component identified by the given indexPath.\r\n   */\r\n  static getListSelectedItems(indexPath, runtime) {\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    const selectedItemsIndexes = StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n    const selectedListItems = [];\r\n    selectedItemsIndexes.forEach((itemIndex) => {\r\n      const itemPath = IndexPathHelper.appendIndexToPageSegment(indexPath, itemIndex);\r\n      const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(itemPath, runtime);\r\n      selectedListItems.push(UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath));\r\n    });\r\n    return selectedListItems.join(',');\r\n  }\r\n\r\n  /**\r\n   * Computes a comma separated String with the selected items from a radio group component identified by the given containerIndexPath.\r\n   * A selected item in the list is represented by its memberName if defined or the user defined id if not.\r\n   */\r\n  static getNonSelectGroupSelectedChildren(containerIndexPath, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const matchingChildrenPaths = [];\r\n    const containerChildrenArray = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(containerIndexPath)).config.cbaChildren;\r\n    if (containerChildrenArray !== undefined) {\r\n      containerChildrenArray.forEach((childConfig, index) => {\r\n        const childIndexPath = IndexPathHelper.appendIndexToPageSegment(containerIndexPath, index);\r\n        const selectionIdentification = SelectGroupHelper.getSelectionIdentificationWhenSelected(childIndexPath, runtime);\r\n        if (selectionIdentification !== '' && !matchingChildrenPaths.includes(selectionIdentification)) {\r\n          matchingChildrenPaths.push(selectionIdentification);\r\n        }\r\n      });\r\n    }\r\n    return matchingChildrenPaths.join(',');\r\n  }\r\n\r\n  /**\r\n   * Computes a comma separated String with the selected items from a frame select group component identified by the given containerIndexPath and the groupName.\r\n   * A selected item in the list is represented by its memberName if defined or the user defined id if not.\r\n   */\r\n  static getSelectGroupSelectedChildren(containerIndexPath, groupName, runtime) {\r\n    const matchingChildrenPaths = [];\r\n    const matchingGroups = PropagationHelper.getMatchingPropagationGroups(containerIndexPath, groupName, runtime);\r\n    matchingGroups.forEach((group) => {\r\n      group.memberIndexPaths.forEach((memberPathPageSegment) => {\r\n        const childIndexPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(containerIndexPath), memberPathPageSegment);\r\n        const selectionIdentification = SelectGroupHelper.getSelectionIdentificationWhenSelected(childIndexPath, runtime);\r\n        if (selectionIdentification !== '' && !matchingChildrenPaths.includes(selectionIdentification)) {\r\n          matchingChildrenPaths.push(selectionIdentification);\r\n        }\r\n      })\r\n    });\r\n    return matchingChildrenPaths.join(',');\r\n  }\r\n\r\n  // private stuff ----------------------------------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Helper method to retrieve the selection identification: memberName if defined or the userDefinedId.\r\n   */\r\n  static getSelectionIdentificationWhenSelected(indexPath, runtime) {\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(indexPath, runtime);\r\n    if (SelectGroupHelper.extractSelectedState(pathState, indexPath, runtime)) {\r\n      if (SelectGroupHelper.isSelectGroupMember(pathState)) {\r\n        const selectGroupMemberConfig = SelectGroupHelper.getSelectGroupMemberPerConfig(indexPath, runtime);\r\n        const selectGroupMemberName = Utils.withDefault(selectGroupMemberConfig.selectGroupMemberName, '');\r\n        if (selectGroupMemberName !== '') return selectGroupMemberName;\r\n      }\r\n      return UserDefPathHelper.getLastUserDefIdFromPath(PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime));\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Helper method to find the select-group configuration for the group with the given name.\r\n   */\r\n  static extractMatchingGroupState(controllerState, groupName) {\r\n    const matchingGroups = controllerState.filter(value => (value.name === groupName));\r\n    return matchingGroups.length > 0 ? matchingGroups[0] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static setStateAttributeForControllerByUserDefPath(controllerUserDefPath, groupName, controllerAttributeSetter, runtime) {\r\n    const controllerIndexPath = PathTranslationHelper.getIndexPathForUserDefPath(controllerUserDefPath, runtime);\r\n    SelectGroupHelper.setStateAttributeForControllerByIndexPath(controllerIndexPath, groupName, controllerAttributeSetter, runtime);\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static setStateAttributeForControllerByIndexPath(controllerIndexPath, groupName, controllerAttributeSetter, runtime) {\r\n    const { componentStateManager } = runtime;\r\n    const fullControllerState = componentStateManager.findOrBuildStateForPathId(controllerIndexPath, runtime);\r\n    const controllerSelectGroupsState = StateAttributeAccess.extractSelectGroupControllerState(fullControllerState);\r\n    if (controllerSelectGroupsState === undefined) {\r\n      console.log(`Ignored request to set controller mode for a component that isn't a select-group controller: ${controllerIndexPath}`);\r\n      return;\r\n    }\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(controllerSelectGroupsState, groupName);\r\n    const oldSingleSelectActive = groupState.singleSelectActive;\r\n    const oldSelectedPageSegment = groupState.currentlySelected;\r\n\r\n    controllerAttributeSetter(groupState);\r\n\r\n    // Rearrange select flags of members and currentlySelected index in controller if we switch between single-select and multi-select mode:\r\n    const newSingleSelectActive = groupState.singleSelectActive;\r\n    if (newSingleSelectActive !== oldSingleSelectActive) {\r\n      if (newSingleSelectActive === false) {\r\n        // Set select flags to false for all members except the currently selected one according to the old selected page segment.\r\n        SelectGroupHelper.applyToMembers(\r\n          controllerIndexPath,\r\n          (fullMemberState, memberPageSegment) => {\r\n            StateAttributeAccess.setSelected(fullMemberState, oldSelectedPageSegment === memberPageSegment);\r\n          },\r\n          runtime\r\n        );\r\n      } else {\r\n        // Set selected flags to false for all members.\r\n        groupState.currentlySelected = undefined;\r\n        SelectGroupHelper.applyToMembers(\r\n          controllerIndexPath,\r\n          (fullMemberState, memberPageSegment) => {\r\n            StateAttributeAccess.setSelected(fullMemberState, false);\r\n          },\r\n          runtime\r\n        );\r\n      }\r\n    }\r\n    componentStateManager.registerStateByPathId(controllerIndexPath, fullControllerState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static applyToMembers(controllerIndexPath, methodToApply, runtime) {\r\n    const { componentStateManager } = runtime;\r\n    const memberPaths = ComponentStateHelper.findIndexPathsOfDescendants(controllerIndexPath, runtime);\r\n    memberPaths\r\n      .forEach((memberPath) => {\r\n        const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(memberPath);\r\n        const { pageConfigurationsManager } = runtime;\r\n        const memberConfiguration = pageConfigurationsManager.findConfigurationForPageSegment(pageSegment, true);\r\n\r\n        if (memberConfiguration !== undefined) {\r\n          const fullMemberState = componentStateManager.findOrBuildStateForPathId(memberPath, runtime);\r\n          const memberInfo = StateAttributeAccess.extractSelectGroupMemberInfo(fullMemberState);\r\n          if (memberInfo !== undefined && memberInfo.controllerPathId === controllerIndexPath) {\r\n            methodToApply(fullMemberState, pageSegment);\r\n            componentStateManager.registerStateByPathId(memberPath, fullMemberState, runtime);\r\n          }\r\n        }\r\n\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Private helper method.\r\n   * \r\n   */\r\n  static handleSelectedChildChanges(requestedSelectState, groupName, clickSelectedPathId, controllerState, controllerPath, withPageSwitch, overrideNoDeselect, runtime) {\r\n    const selectGroupControllerState = StateAttributeAccess.extractSelectGroupControllerState(controllerState);\r\n    const groupState = SelectGroupHelper.extractMatchingGroupState(selectGroupControllerState, groupName);\r\n    const newIndexResult = SelectGroupHelper.calculateNewSelectedIndex(requestedSelectState, groupState, IndexPathHelper.getLastPageSegmentFromPath(clickSelectedPathId), overrideNoDeselect);\r\n\r\n    if (newIndexResult.noChange === false) {\r\n      groupState.currentlySelected = newIndexResult.newMember;\r\n      StateAttributeAccess.setSelectGroupControllerState(controllerState, selectGroupControllerState);\r\n    }\r\n\r\n    // We have to do the page switches since we sometimes select another button \r\n    // than the one clicked on by the user. In such a case the button's onClick handler \r\n    // would do the wrong page switch.\r\n    if (groupState.currentlySelected !== undefined && withPageSwitch) {\r\n      SelectGroupHelper.doPageSwitchForSelectedSwitcher(controllerPath, groupState.currentlySelected, runtime);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   * \r\n   * Calculate the page segment of the currently selected component. \r\n   * The method returns 'undefined' if the currently selected component does not change.\r\n   */\r\n  static calculateNewSelectedIndex(requestedSelectState, groupState, clickedSelectedPageSegment, overrideNoDeselect) {\r\n    if (requestedSelectState === true) {\r\n      if (groupState.currentlySelected === clickedSelectedPageSegment) {\r\n        // Component was selected and selected is requested -> signal no change:\r\n        return {\r\n          noChange: true\r\n        }\r\n      } else {\r\n        // Switching selection to another component is always possible:\r\n        return {\r\n          noChange: false,\r\n          newMember: clickedSelectedPageSegment\r\n        };\r\n      }\r\n    } else if (groupState.currentlySelected !== clickedSelectedPageSegment) {\r\n      // Component was not selected and not selected is requested -> signal no change:\r\n      return {\r\n        noChange: true\r\n      };\r\n    } else {\r\n      // Component was selected and not selected is requested.\r\n      const { allowDeselect, deselectTarget } = groupState;\r\n      if (!allowDeselect && !overrideNoDeselect) {\r\n        // Deselect is not allowed -> signal no change:\r\n        return {\r\n          noChange: true\r\n        };\r\n      } else if (deselectTarget !== undefined) {\r\n        // Jump to deselect target if we aren't there anyhow:\r\n        if (deselectTarget === clickedSelectedPageSegment) {\r\n          return {\r\n            noChange: true\r\n          }\r\n        } else {\r\n          return {\r\n            noChange: false,\r\n            newMember: deselectTarget\r\n          }\r\n        }\r\n      } else {\r\n        // No deselect target defined -> set currently selected to undefined\r\n        return {\r\n          noChange: false,\r\n          newMember: undefined\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static doPageSwitchForSelectedSwitcher(controllerPath, selectedSwitcherPageSegment, runtime) {\r\n    // We don't do any switch if no switcher is selected:\r\n    if (selectedSwitcherPageSegment !== undefined) {\r\n      const selectedSwitcherPath = IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(controllerPath), selectedSwitcherPageSegment);\r\n\r\n      const pathState = runtime.componentStateManager.findOrBuildStateForPathId(selectedSwitcherPath, runtime);\r\n      const defaultLinkReceiver = StateAttributeAccess.extractDefaultLinkReceiver(pathState);\r\n      const selectedSwitcherConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(selectedSwitcherPageSegment);\r\n\r\n      CommonActionsHelper.doPageSwitch(selectedSwitcherConfig.config.link, runtime, defaultLinkReceiver, controllerPath);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Private helper method.\r\n   */\r\n  static doStandardSelectFlagSetting(requestedSelectState, controlledPathId, controlledPathState, runtime) {\r\n    StateAttributeAccess.setSelected(controlledPathState, requestedSelectState);\r\n    runtime.componentStateManager.registerStateByPathId(controlledPathId, controlledPathState, runtime);\r\n    RenderingHelper.triggerRenderingViaPath(controlledPathId, runtime);\r\n  }\r\n\r\n  static isControlledType(componentType) {\r\n    return componentType === 'CbaRadioButton'\r\n      || componentType === 'CbaCheckbox'\r\n      || componentType === 'CbaButton'\r\n      || componentType === 'CbaLink'\r\n      || componentType === 'CbaRichTextField'\r\n      || componentType === 'CbaPolygon'\r\n      || componentType === 'CbaRegionMap';\r\n  }\r\n\r\n  static isComboBoxItem(componentType) {\r\n    return componentType === CbaComboBox.getItemType();\r\n  }\r\n\r\n  static isComboBox(componentType) {\r\n    return componentType === 'CbaComboBox';\r\n  }\r\n\r\n  static comboBoxGroup() {\r\n    return 'comboGroup';\r\n  }\r\n\r\n  static getSelectGroupMemberPerConfig(pathId, runtime) {\r\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(pathId);\r\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    return config.selectGroupMember;\r\n  }\r\n\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaInterpreter from './CbaInterpreter';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\n\nexport function isExcessivePageNesting(pagePath) {\n  return IndexPathHelper.getPageSegmentArray(pagePath).length >= 15;\n}\n\nexport default function PageAreaRenderer({\n  onClick,\n  onContextMenu,\n  orientation,\n  embeddedPageName,\n  hasTabs,\n  tabsBar,\n  position,\n  config,\n  scrollableAreaRef,\n  path,\n  runtime\n}) {\n\n  // get the page configuration:\n  const page = runtime.pageConfigurationsManager.findPage(embeddedPageName);\n  if (page === undefined) {\n    return (\n      <div\n        style={CommonConfigHelper.buildStyleByState(position, config, false, orientation, false, runtime)}\n      >\n        {`Cannot find page with name ${embeddedPageName}`}\n      </div>\n    );\n  }\n\n  // bail out if we nest too deep:\n  if (isExcessivePageNesting(path)) {\n    return (\n      <div\n        style={CommonConfigHelper.buildStyleByState(position, config, false, orientation, false, runtime)}\n      >\n        Page nesting exceeds maximum nesting depth.\n      </div>\n    );\n  }\n\n\n  const childAreaStyle = {\n    position: \"absolute\",\n    [orientation]: 0,\n    top: (hasTabs ? 30 : 0),\n    width: \"100%\",\n    height: \"100%\",\n    overflow: \"auto\"\n  }\n\n  const pagePath = IndexPathHelper.appendPageSegmentsToPath(path, IndexPathHelper.buildPageSegment(embeddedPageName));\n\n  return (\n    <div\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      title={CommonConfigHelper.buildTitle(config)}\n      style={CommonConfigHelper.buildStyleByState(position, config, false, orientation, false, runtime)}\n      data-cba-id={config.pageEditId}\n      role=\"presentation\"\n      className={CommonConfigHelper.getCssClassNamesValue(config)}\n    >\n      {hasTabs && tabsBar}\n      <div\n        style={childAreaStyle}\n        onScroll={CommonActionsHelper.traceUserScroll(pagePath, runtime)}\n        ref={scrollableAreaRef}\n      >\n        <CbaInterpreter config={page.content} path={pagePath} runtime={runtime} orientation={orientation} />\n      </div>\n    </div>\n  );\n\n}\n\nPageAreaRenderer.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  onContextMenu: PropTypes.func.isRequired,\n  orientation: PropTypes.string.isRequired,\n  embeddedPageName: PropTypes.string.isRequired,\n  hasTabs: PropTypes.bool.isRequired,\n  tabsBar: PropTypes.object.isRequired,\n  path: PropTypes.string.isRequired,\n  position: PropTypes.object.isRequired,\n  config: PropTypes.shape(PropTypesHelper.getStandardConfigPropTypes(false)).isRequired,\n  scrollableAreaRef: PropTypes.object.isRequired,\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport PageHistoryHelper from './PageHistoryHelper';\nimport BookmarkHelper from './BookmarkHelper';\nimport RenderingHelper from './RenderingHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport WebToolbar from './WebToolbar/WebToolbar';\nimport Utils from '../utils/Utils';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport UserDefPathHelper from '../state/UserDefPathHelper';\nimport PageAreaRenderer from './PageAreaRenderer';\n\nexport default class CbaPageArea extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.scrollableAreaRef = React.createRef();\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n\n  onClickHandler(event) {\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  static addAttributesToInitialState(initialState, configProps) {\n    const { historyMode, page } = configProps;\n    initialState.pageName = page;\n    PageHistoryHelper.initializeHistoryState(historyMode !== \"singlePage\", historyMode === \"withTabs\", initialState);\n  }\n\n  static setPageName(path, receiverTab, pageName, pageUrl, runtime) {\n    if (PageHistoryHelper.hasStateWithoutPageHistory(path, runtime)) {\n      // The component for the path seems not to be a CbaPageArea....\n      console.warn(`Set page name call for a component that is not a CbaPageArea: ${path}`);\n      return;\n    }\n\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n\n    const currentEmbeddedPage = PageHistoryHelper.getPage(path, runtime);\n\n    if (currentEmbeddedPage === undefined || currentEmbeddedPage.name !== pageName) {\n\n      // update the component's state in state manager:\n      const safeReceiverTab = CbaPageArea.getSafeReceiverTabDetails(receiverTab);\n      PageHistoryHelper.addPage(pageName, pageUrl, safeReceiverTab, path, runtime);\n\n      // update the button (i.e. tab or taskbar button) that is linked to the new page:\n      CbaPageArea.updatePageIndicators(path, config, pageName, runtime);\n\n      // update the browser toolbar components that depend on the page history (i.e. forward/back buttons and URL display):\n      CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n    }\n\n  }\n\n  static buildIndicatorIndexPath(embeddingIndexPath, indicator) {\n    return IndexPathHelper.appendPageSegmentsToPath(embeddingIndexPath, indicator.indicatorPath);\n  }\n\n  static getSafeReceiverTabDetails(receiverTab) {\n    if (receiverTab === undefined) {\n      return {\n        name: '',\n        image: undefined,\n        width: 100,\n        closable: true\n      }\n    }\n    return {\n      name: receiverTab.name === undefined ? '' : receiverTab.name,\n      width: receiverTab.width === undefined ? 100 : receiverTab.width,\n      image: receiverTab.image,\n      closable: !!receiverTab.closable\n    }\n  }\n\n\n  /**\n   * Get the 'hidden' state of the component specified by the given indicator info. \n   * \n   * @param {{ pageName: String, indicatorPath: String}} indicator The indicator info entry from the config structure. The path is a single plain page segment without path root.\n   * @param {*} embeddingIndexPath The index path where we append the indicatorPath to obatin the full component index path.\n   * @param {*} runtime The common runtime structure. \n   */\n  static isIndicatorNotHidden(indicator, embeddingIndexPath, runtime) {\n    const indicatorIndexPath = CbaPageArea.buildIndicatorIndexPath(embeddingIndexPath, indicator);\n    const indicatorState = runtime.componentStateManager.findOrBuildStateForPathId(indicatorIndexPath, runtime);\n    return StateAttributeAccess.extractHidden(indicatorState) === false;\n  }\n\n  /**\n   * Select a 'best matching' page indicator from the given candidates list. \n   * \n   * The method selects the first page indicator that is linked to the given page\n   * and is currently not hidden. If there is no such indicator it choses the first \n   * indicator linked to the given page. If there is no indicator linked to \n   * the given page it silently returns undefined.\n   * \n   * @param {*} pageName The page name that the page indicator must be linked to.\n   * @param {[*]} pageIndicators The list of page indicator candidates.\n   * @param {String} embeddingIndexPath The path that we will prepend to the path given by the candidate entry to obtain the indicator's full index path.\n   * @param {*} runtime The common runtime structure.\n   */\n  static findPreferredIndicator(pageName, pageIndicators, embeddingIndexPath, runtime) {\n    if (pageIndicators === undefined) {\n      return undefined;\n    }\n    const pageMatchingIndicators = pageIndicators.filter(indicator => indicator.pageName === pageName);\n    if (pageMatchingIndicators.length === 0) {\n      return undefined;\n    }\n    if (pageMatchingIndicators.length === 1) {\n      return pageMatchingIndicators[0];\n    }\n    const firstVisibleCandidate = pageMatchingIndicators.find(indicator => CbaPageArea.isIndicatorNotHidden(indicator, embeddingIndexPath, runtime));\n    return firstVisibleCandidate === undefined ? pageMatchingIndicators[0] : firstVisibleCandidate;\n  }\n\n  /**\n   * Switch the 'selected' status to true for the 'page indicating' button component that links to the given page.\n   * \n   * We have to do this explicitly since the page switch might be triggered by a state machine operator or a button \n   * that is not member of our 'page indicating' buttons set. \n   * \n   * Examples for 'page indicating' buttons are the 'tabs' in a tabfolder page or the taskbar buttons in a taskbar page. \n   * \n   * \n   * @param {*} path The full index path of the CbaPageArea component that switches the embedded page.\n   * @param {*} config The configuration structure for the CbaPageArea that contains the list of info pairs for the 'page indicating' components. \n   * @param {*} pageName The name of the page we switch to. \n   * @param {*} runtime The common runtime structure.\n   */\n  static updatePageIndicators(path, config, pageName, runtime) {\n    const { currentPageIndicators } = config;\n    const indicatorPathRoot = IndexPathHelper.dropPageSegmentFromPath(path);\n    const chosenIndicator = CbaPageArea.findPreferredIndicator(pageName, currentPageIndicators, indicatorPathRoot, runtime);\n    if (chosenIndicator !== undefined) {\n      const indicatorIndexPath = CbaPageArea.buildIndicatorIndexPath(indicatorPathRoot, chosenIndicator);\n      const indicatorState = runtime.componentStateManager.findOrBuildStateForPathId(indicatorIndexPath, runtime);\n      SelectGroupHelper.setSelectedForPossiblyControlledComponent(true, indicatorIndexPath, indicatorState, false, false, runtime);\n    }\n  }\n\n\n  static doHistoryMove(path, move, runtime) {\n    if (PageHistoryHelper.hasStateWithoutPageHistory(path, runtime)) {\n      // The component for the path seems not to be a CbaPageArea....\n      console.warn(`Do history move call for a component that is not a CbaPageArea: ${path}`);\n      return;\n    }\n\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime)\n\n    // update the component's state in state manager:\n    switch (move) {\n      case 'home':\n        PageHistoryHelper.goHome(path, runtime);\n        CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n        break;\n      case 'forward':\n        PageHistoryHelper.goForward(path, runtime);\n        CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n        break;\n      case 'back':\n        PageHistoryHelper.goBack(path, runtime);\n        CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n        break;\n      default:\n        console.warn(`Unknown type of history move : ${move} for component path ${path}`);\n        break;\n    }\n\n    runtime.traceLogBuffer.reportEvent('PageSwitchEmbedded', new Date(),\n      {\n        indexPath: path,\n        userDefIdPath,\n        userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\n        newPageName: PageHistoryHelper.getPage(path, runtime).name,\n        tab: PageHistoryHelper.getTab(path, runtime),\n        historyMove: move\n      });\n\n  }\n\n  static historyMoveEnabled(path, move, runtime) {\n    if (PageHistoryHelper.hasStateWithoutPageHistory(path, runtime)) {\n      // The component for the path seems not to be a CbaPageArea....\n      console.warn(`Enabled history move inquiry for a component that is not a CbaPageArea: ${path}`);\n      return false;\n    }\n\n    switch (move) {\n      case 'home':\n        return true;\n      case 'forward':\n        return PageHistoryHelper.canGoForward(path, runtime);\n      case 'back':\n        return PageHistoryHelper.canGoBack(path, runtime);\n      default:\n        console.warn(`Unknown type of history move : ${move} for component path ${path}`);\n        return false;\n    }\n\n  }\n\n  static switchTab(path, newTab, event, runtime) {\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n    event.stopPropagation();\n    PageHistoryHelper.switchTab(newTab, path, runtime);\n    CbaPageArea.updatePageHistoryDependents(path, config, runtime);\n\n    CommonActionsHelper.traceUserInteraction(\n      'BrowserTab',\n      path,\n      {\n        page: PageHistoryHelper.getPage(path, runtime).name,\n        tab: PageHistoryHelper.getTab(path, runtime)\n      },\n      event,\n      null,\n      runtime\n    );\n\n  }\n\n  scroll(x, y) {\n    const scrollElement = this.scrollableAreaRef.current;\n    if (!scrollElement) return;\n    Utils.doScrollOnHTMLElement(x, y, scrollElement, scrollElement);\n  }\n\n  static updatePageHistoryDependents(path, config, runtime) {\n    const { forwardSwitchers, backwardSwitchers, locationDisplays } = config;\n    const myPathWithoutMyPageSegment = IndexPathHelper.dropPageSegmentFromPath(path);\n\n    if (forwardSwitchers !== undefined) {\n      const canGoForward = PageHistoryHelper.canGoForward(path, runtime);\n      forwardSwitchers.forEach((switcher) => {\n        const pathId = IndexPathHelper.appendPageSegmentsToPath(myPathWithoutMyPageSegment, switcher);\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractDisabled, StateAttributeAccess.setDisabled, !canGoForward, pathId, runtime, true);\n      });\n    }\n    if (backwardSwitchers !== undefined) {\n      const canGoBack = PageHistoryHelper.canGoBack(path, runtime);\n      backwardSwitchers.forEach((switcher) => {\n        const pathId = IndexPathHelper.appendPageSegmentsToPath(myPathWithoutMyPageSegment, switcher);\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractDisabled, StateAttributeAccess.setDisabled, !canGoBack, pathId, runtime, true);\n      });\n    }\n    if (locationDisplays !== undefined) {\n      const pageEntry = PageHistoryHelper.getPage(path, runtime);\n      const newValue = Utils.getPropUndefinedSafe(pageEntry, 'url', '');\n      locationDisplays.forEach((locationDisplay) => {\n        const pathId = IndexPathHelper.appendPageSegmentsToPath(myPathWithoutMyPageSegment, locationDisplay);\n        ComponentStateHelper.updateStateAttribute(StateAttributeAccess.extractTextValue, StateAttributeAccess.setTextValue, newValue, pathId, runtime, true);\n      });\n    }\n  }\n\n\n  /**\n   * Add the page currently embedded as bookmark to our bookmarks list.\n   * \n   * @param {String} path The index path of the CbaPageArea to operate on.\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\n   * @param {String} requestingComponentPath The index path of the component requesting to add the bookmark (for tracing purposes).\n   * @param {*} runtime The common runtime context structure.\n   */\n  static addBookmark(path, triggeringType, requestingComponentPath, runtime) {\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(path);\n    const { config } = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\n    const currentPageEntry = CbaPageArea.getEmbeddedPageEntry(path, config, runtime);\n    if (currentPageEntry !== undefined) {\n      const currentTab = PageHistoryHelper.getTab(path, runtime);\n      BookmarkHelper.addBookmark(path, currentPageEntry.name, currentPageEntry.url, currentTab, currentPageEntry.image, triggeringType, requestingComponentPath, runtime);\n    }\n  }\n\n  /**\n   * Drop the specified page from our bookmarks list.\n   * \n   * @param {String} path The index path of the CbaPageArea to operate on.\n   * @param {String} pageName The name of the page to drop from the bookmarks list.\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\n   * @param {String} requestingComponentPath The index path of the component requesting to drop the bookmark (for tracing purposes).\n   * @param {*} runtime The common runtime context structure.\n   */\n  static dropBookmark(path, pageName, triggeringType, requestingComponentPath, runtime) {\n    BookmarkHelper.dropBookmark(path, pageName, triggeringType, requestingComponentPath, runtime);\n  }\n\n  /**\n   * Get the list of page names in our bookmarks list.\n   */\n  static getBookmarks(path, runtime) {\n    return BookmarkHelper.getBookmarks(path, runtime);\n  }\n\n  static getEmbeddedPageName(path, config, runtime) {\n    const pageEntry = CbaPageArea.getEmbeddedPageEntry(path, config, runtime);\n    return pageEntry === undefined ? undefined : pageEntry.name;\n  }\n\n  static getEmbeddedPageEntry(path, config, runtime) {\n    const { historyMode } = config;\n    // fail fast if config param is invalid (don't mess up initialization of history structure!)\n    if (historyMode === undefined) {\n      console.error(`Invalid config structure for CbaPageArea: ${path}`, config);\n      return undefined;\n    }\n\n    let pageEntry = PageHistoryHelper.getPage(path, runtime);\n\n    // Use initial page from my config if nobody did set another page yet.\n    // Don't forget to set it in the page history helper. Otherwise goHome will not work properly!\n    if (pageEntry === undefined) {\n      const initialPageName = config.page;\n      const initialPageUrl = config.pageUrl;\n      const initialTabConfig = CbaPageArea.getSafeReceiverTabDetails(config.initialTab);\n      PageHistoryHelper.addPage(initialPageName, initialPageUrl, initialTabConfig, path, runtime);\n      pageEntry = PageHistoryHelper.getPage(path, runtime);\n    }\n    return pageEntry;\n  }\n\n  render() {\n    const { config, runtime, path: myPath, orientation } = this.props;\n\n    // get the page configuration:\n    const pageName = CbaPageArea.getEmbeddedPageName(myPath, config, runtime);\n\n    const pathState = ComponentStateHelper.getState(this);\n    const positionOnlyState = {};\n    StateAttributeAccess.setPosition(positionOnlyState, StateAttributeAccess.extractPosition(pathState));\n\n    const { historyMode } = config;\n    const hasTabs = historyMode === \"withTabs\";\n\n    return (\n      <PageAreaRenderer\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        orientation={orientation}\n        embeddedPageName={pageName}\n        hasTabs={hasTabs}\n        tabsBar={<WebToolbar parentPath={myPath} runtime={runtime} parentWidth={config.position.width} />}\n        path={myPath}\n        position={positionOnlyState}\n        config={config}\n        scrollableAreaRef={this.scrollableAreaRef}\n        runtime={runtime}\n      />\n    );\n  }\n\n}\n\n\nCbaPageArea.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        page: PropTypes.string.isRequired,\n        pageUrl: PropTypes.string.isRequired,\n        catchLinks: PropTypes.bool.isRequired,\n        historyMode: PropTypes.oneOf([\"singlePage\", \"noTabs\", \"withTabs\"]),\n        initialTab: PropTypes.object,\n        currentPageIndicators: PropTypes.arrayOf(PropTypes.shape({\n          pageName: PropTypes.string.isRequired,\n          indicatorPath: PropTypes.string.isRequired,\n        })),\n        forwardSwitchers: PropTypes.arrayOf(PropTypes.string),\n        backwardSwitchers: PropTypes.arrayOf(PropTypes.string),\n        locationDisplays: PropTypes.arrayOf(PropTypes.string),\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction buildBooleanResultString(result) {\r\n  if (result === undefined) return \"\";\r\n  return result ? \"true\" : \"false\";\r\n}\r\n\r\nfunction compareClassEntryByName(left, right) {\r\n  if (left.name < right.name) return -1;\r\n  if (left.name > right.name) return 1;\r\n  return 0;\r\n}\r\n\r\nfunction sortClassEntriesByName(entries) {\r\n  return entries.sort((left, right) => compareClassEntryByName(left, right));\r\n}\r\n\r\nfunction buildClassMemberCountMap(resultsList) {\r\n  const classToMemberCount = new Map();\r\n  resultsList.forEach((member) => {\r\n    const oldEntry = classToMemberCount.get(member.class);\r\n    const newValue = oldEntry === undefined ? 1 : oldEntry + 1;\r\n    classToMemberCount.set(member.class, newValue);\r\n  });\r\n  return classToMemberCount;\r\n}\r\n\r\nfunction buildAlertStyle(alert) {\r\n  return alert ? {\r\n    color: 'red'\r\n  } : {}\r\n}\r\n\r\nfunction renderHitMissTable(title, resultsList, firstActiveMode) {\r\n  const classToMemberCount = buildClassMemberCountMap(resultsList);\r\n\r\n  if (firstActiveMode || resultsList.length === 0) return \"\";\r\n  return (\r\n    <div>\r\n      {title}\r\n      <table className=\"details\">\r\n        <thead>\r\n          <tr>\r\n            <th>!</th>\r\n            <th>Name</th>\r\n            <th>Weight</th>\r\n            <th>Class</th>\r\n            <th>Result text</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {resultsList.map((row, i) => {\r\n            const hasActiveSiblings = classToMemberCount.get(row.class) > 1;\r\n            return (\r\n              <tr key={row.name} style={buildAlertStyle(hasActiveSiblings)}>\r\n                <td className=\"cbaColWidth05\">{ hasActiveSiblings ? \"!\" : \"\"}</td>\r\n                <td className=\"cbaColWidth25\">{row.name}</td>\r\n                <td className=\"cbaColWidth05\">{row.weight}</td>\r\n                <td className=\"cbaColWidth30\">{row.class}</td>\r\n                <td className=\"cbaColWidth35\">{row.resultText}</td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getResultTextForHitMissByName(hitMissName, hitMissResultsList) {\r\n  console.log(`hitMissName is ${hitMissName}, hitMissResultsList contains names ${hitMissResultsList.map(hitMiss => hitMiss.name).join()}`)\r\n  const matchingResult = hitMissResultsList.find(hitMiss => hitMiss.name === hitMissName);\r\n  return matchingResult === undefined ? '' : matchingResult.resultText;\r\n}\r\n\r\nfunction renderClassTableBody(classResultsList, hitMissResultsList, firstActiveMode) {\r\n  return sortClassEntriesByName(classResultsList).map((row, i) => (\r\n    <tr key={row.name}>\r\n      <td className=\"cbaColWidth25\">{row.name}</td>\r\n      <td className={firstActiveMode ? \"cbaColWidth30\" : \"cbaColWidth05\"}>{row.value}</td>\r\n      { !firstActiveMode && <td className=\"cbaColWidth05\">{buildBooleanResultString(row.result)}</td> }\r\n      { firstActiveMode && <td className=\"cbaColWidth30\">{getResultTextForHitMissByName(row.value, hitMissResultsList)}</td> }\r\n      <td className=\"cbaColWidth30\">{row.comment}</td>\r\n    </tr>\r\n  ));\r\n}\r\n\r\n\r\nfunction renderClassTable(title, classResultsList, hitMissResultsList, firstActiveMode) {\r\n  if (classResultsList.length === 0) return \"\";\r\n  return (\r\n    <div>\r\n      {`${title} (${firstActiveMode ? \"first active member\" : \"accumulated weights\"}):`}\r\n      <table className=\"details\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>{ firstActiveMode ? 'First Active' : 'Weight'}</th>\r\n            <th>{ firstActiveMode ? 'Result Text' : 'Result'}</th>\r\n            <th>Comment</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {renderClassTableBody(classResultsList, hitMissResultsList, firstActiveMode)}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst ScoringModalData = (props) => {\r\n  const { currentModalContent: scoringDetails } = props;\r\n  const hitClassFirstActive = scoringDetails.classScoringModeHit === 'firstActive';\r\n  const missClassFirstActive = scoringDetails.classScoringModeMiss === 'firstActive';\r\n\r\n  return (\r\n    <div className=\"cba-modal-content\">\r\n      <table className=\"summary\">\r\n        <thead>\r\n          <tr>\r\n            <th>Score result:</th>\r\n            <td>{scoringDetails.result ? 'true' : 'false'}</td>\r\n            <th>Execution Time:</th>\r\n            <td>{scoringDetails.execTime}</td>\r\n            <th>Total hits/Total Weight:</th>\r\n            <td>{`${scoringDetails.nbHits}/${scoringDetails.hitWeight}`}</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th>Credit Class:</th>\r\n            <td>{scoringDetails.creditClass}</td>\r\n            <th>Reaction Time:</th>\r\n            <td>{scoringDetails.reactionTime}</td>\r\n            <th>Total misses/Total Weight:</th>\r\n            <td>{`${scoringDetails.nbMisses}/${scoringDetails.missWeight}`}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Credit Weight:</th>\r\n            <td>{scoringDetails.creditWeight}</td>\r\n            <th>Nb. of Interactions:</th>\r\n            <td>{scoringDetails.nbInteractions}</td>\r\n          </tr>\r\n          <tr>\r\n            <th>Result text:</th>\r\n            <td>{scoringDetails.resultText}</td>\r\n            <th />\r\n            <td />\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <br />\r\n      <div className=\"detailsWrapper\">\r\n        {renderHitMissTable(\"Hits:\", scoringDetails.hitRows, hitClassFirstActive)}\r\n        {renderHitMissTable(\"Misses:\", scoringDetails.missRows, missClassFirstActive)}\r\n        {renderClassTable(\"Hit Classes\", scoringDetails.hitClassRows, scoringDetails.hitRows, hitClassFirstActive)}\r\n        {renderClassTable(\"Miss Classes\", scoringDetails.missClassRows, scoringDetails.missRows, missClassFirstActive)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nScoringModalData.propTypes = {\r\n  currentModalContent: PropTypes.object.isRequired\r\n}\r\n\r\nexport default ScoringModalData;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst StatemachineModalData = (props) => {\r\n\r\n  const { currentModalContent: statemachineDetails } = props;\r\n  return (\r\n    <div className=\"cba-modal-content\">\r\n      <div className=\"detailsWrapper\">\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Variable Name</th>\r\n              <th>Current Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.variables.map(row => (\r\n              <tr key={row.name}>\r\n                <td>{row.name}</td>\r\n                <td>{row.value}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <p />\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Current State Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.states.map(row => (\r\n              <tr key={row}>\r\n                <td>{row}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <p />\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Visited State Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.visitedStates.map(row => (\r\n              <tr key={row}>\r\n                <td>{row}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <p />\r\n        <table className=\"details\">\r\n          <thead>\r\n            <tr>\r\n              <th>Raised Event Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {statemachineDetails.raisedEvents.map(row => (\r\n              <tr key={row}>\r\n                <td>{row}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatemachineModalData.propTypes = {\r\n  currentModalContent: PropTypes.shape(\r\n    {\r\n      variables: PropTypes.array.isRequired,\r\n      states: PropTypes.array.isRequired,\r\n      visitedStates: PropTypes.array.isRequired,\r\n      raisedEvents: PropTypes.array.isRequired,\r\n    }\r\n  ).isRequired\r\n}\r\n\r\nexport default StatemachineModalData;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class TracingModalData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { currentModalContent: traceLogBuffer } = this.props;\r\n    this.state = {\r\n      tracingDetails: traceLogBuffer.peekEntries()\r\n    };\r\n  }\r\n\r\n  static dumpAsStringAndTruncate(object) {\r\n    const maxLen = 1000;\r\n    const fullString = JSON.stringify(object);\r\n    return fullString.length > maxLen ? `${fullString.substring(0, maxLen)}...` : fullString;\r\n  }\r\n\r\n  /**\r\n   * Clean logs from traceLogBuffer and updates the tracing details accordingly\r\n   */\r\n  truncateTraceLog = () => {\r\n    const { currentModalContent: traceLogBuffer } = this.props;\r\n    traceLogBuffer.popEntries();\r\n    this.updateTraceLogState();\r\n  }\r\n\r\n  /**\r\n   * Updates the tracing details with data from the source of truth\r\n   */\r\n  updateTraceLogState = () => {\r\n    const { currentModalContent: traceLogBuffer } = this.props;\r\n    this.setState({\r\n      tracingDetails: traceLogBuffer.peekEntries()\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const { tracingDetails } = this.state;\r\n    return (\r\n      <div className=\"cba-modal-content\">\r\n        Tracing data not transferred to server yet:\r\n        <div className=\"detailsWrapper\">\r\n          <table className=\"details\">\r\n            <thead />\r\n            <tbody>\r\n              {[...tracingDetails].map(row => (\r\n                <tr key={`${row.entryId} - ${row.timestamp}`}>\r\n                  <td>{row.entryId}</td>\r\n                  <td>{row.timestamp}</td>\r\n                  <td>{row.type}</td>\r\n                  {Object.keys(row.details).map((key, rowIndex) => (\r\n                    <td key={key}>\r\n                      {`${key}:${TracingModalData.dumpAsStringAndTruncate(row.details[key])}`}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"cba-trace-modal-buttons\">\r\n          <button type=\"button\" onClick={this.truncateTraceLog}> Truncate Log </button>\r\n          <button type=\"button\" onClick={this.updateTraceLogState}> Refresh </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nTracingModalData.propTypes = {\r\n  currentModalContent: PropTypes.object.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\n\r\n\r\nexport default class ManageBookmarksData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.toBeDeleted = [];\r\n  }\r\n\r\n  okButtonClicked = () => {\r\n    const { content } = this.props;\r\n    const { pageAreaIndexPath, requestingComponentPath, testPresenter, runtime } = content;\r\n    console.info(`delete called for bookmarks ${this.toBeDeleted.join()}`)\r\n    this.toBeDeleted.forEach((value) => { CbaPageArea.dropBookmark(pageAreaIndexPath, value, 'contextMenu', requestingComponentPath, runtime); });\r\n    testPresenter.handleClose();\r\n  }\r\n\r\n  cancelButtonClicked = () => {\r\n    const { content } = this.props;\r\n    const { testPresenter } = content;\r\n    testPresenter.handleClose();\r\n  }\r\n\r\n  setBookmarkAsToBeDeleted = (bookmark) => {\r\n    this.toBeDeleted.push(bookmark);\r\n  }\r\n\r\n  render() {\r\n    const { content } = this.props;\r\n    const { pageAreaIndexPath, labelConfiguration, runtime } = content;\r\n    const { deleteColumnHeader, bookmarkColumnHeader, okButton, cancelButton } = labelConfiguration;\r\n\r\n    const bookmarks = CbaPageArea.getBookmarks(pageAreaIndexPath, runtime);\r\n    const toBeDeletedAccess = this.toBeDeleted;\r\n\r\n    const fontStyle = {\r\n      fontSize: '12px'\r\n    }\r\n\r\n    return (\r\n      <div className=\"cba-modal-content\" style={fontStyle}>\r\n        <div className=\"detailsWrapper\">\r\n          <table className=\"details\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"cbaColWidth15\">{deleteColumnHeader}</th>\r\n                <th className=\"cbaColWidth85\">{bookmarkColumnHeader}</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {bookmarks.map(bookmark => (\r\n                <tr key={bookmark.pageName}>\r\n                  <td className=\"cbaColWidth15\">\r\n                    <input\r\n                      id={bookmark.pageName}\r\n                      type=\"checkbox\"\r\n                      onChange={() => toBeDeletedAccess.push(bookmark.pageName)}\r\n                    />\r\n                  </td>\r\n                  <td className=\"cbaColWidth85\">\r\n                    {bookmark.pageUrl ? bookmark.pageUrl : \"\"}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"cba-bookmarks-modal-buttons\">\r\n          <button type=\"button\" onClick={this.okButtonClicked}>{okButton}</button>\r\n          <button type=\"button\" onClick={this.cancelButtonClicked}>{cancelButton}</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nManageBookmarksData.propTypes = {\r\n  content: PropTypes.shape(\r\n    {\r\n      pageAreaIndexPath: PropTypes.string.isRequired,\r\n      requestingComponentPath: PropTypes.string.isRequired,\r\n      runtime: PropTypes.object.isRequired,\r\n      labelConfiguration: PropTypes.shape(\r\n        {\r\n          windowTitle: PropTypes.string.isRequired,\r\n          deleteColumnHeader: PropTypes.string.isRequired,\r\n          bookmarkColumnHeader: PropTypes.string.isRequired,\r\n          okButton: PropTypes.string.isRequired,\r\n          cancelButton: PropTypes.string.isRequired,\r\n        }\r\n      ).isRequired,\r\n      testPresenter: PropTypes.object.isRequired,\r\n    }\r\n  ).isRequired\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from \"react-dialog\";\r\nimport ModalManager from \"./ModalManager\";\r\n\r\nconst ModalDialog = (props) => {\r\n  const width = 600;\r\n  const height = 500;\r\n  const centerPosition = {\r\n    x: window.innerWidth / 2 - width/2,\r\n    y: window.innerHeight / 2 - height/2\r\n  }\r\n  const { isOpen, currentModal, currentModalTitle, closeDialog } = props;\r\n  return (\r\n    <div className=\"cba-modal-container cba-modal cba-system-modal\">\r\n      {isOpen && (\r\n        <Dialog\r\n          title={currentModalTitle}\r\n          modal\r\n          isResizable\r\n          isDraggable\r\n          hasCloseIcon\r\n          closeOnEscape\r\n          width={width}\r\n          height={height}\r\n          position={centerPosition}\r\n          onClose={closeDialog}\r\n        >\r\n          <ModalManager currentModal={currentModal} {...props} />\r\n        </Dialog>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalDialog;\r\n\r\nModalDialog.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  currentModal: PropTypes.string.isRequired,\r\n  currentModalTitle: PropTypes.string.isRequired,\r\n  closeDialog: PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ScoringModalData from './ScoringModalData';\r\nimport StatemachineModalData from './StatemachineModalData';\r\nimport TracingModalData from './TracingModalData';\r\nimport ManageBookmarksData from './ManageBookmarksData';\r\nimport ModalDialog from './ModalDialog';\r\n\r\nexport { ModalDialog };\r\nexport const SCORING = 'Scoring';\r\nexport const TRACING = 'Tracing';\r\nexport const STATE_MACHINE = 'State Machine';\r\nexport const BOOKMARKS = 'ManageBookmarks';\r\n\r\nconst ModalManager = (props) => {\r\n  const { currentModalContent: content } = props;\r\n  switch (props.currentModal) {\r\n    case SCORING:\r\n      return <ScoringModalData {...props} />;\r\n    case TRACING:\r\n      return <TracingModalData {...props} />;\r\n    case STATE_MACHINE:\r\n      return <StatemachineModalData {...props} />;\r\n    case BOOKMARKS:\r\n      return <ManageBookmarksData content={content} />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default ModalManager;\r\n\r\nModalManager.propTypes = {\r\n  currentModalContent: PropTypes.object.isRequired,\r\n  currentModal: PropTypes.oneOf([SCORING, TRACING, STATE_MACHINE, BOOKMARKS]).isRequired\r\n}\r\n","import CbaPageArea from \"./CbaPageArea\";\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport { BOOKMARKS } from '../dialog/ModalManager';\r\nimport UserDefPathHelper from \"../state/UserDefPathHelper\";\r\nimport Utils from \"../utils/Utils\";\r\n\r\n/**\r\n * Helper methods to implement special actions triggered by clicks on buttons or menu items.\r\n */\r\nexport default class SpecialClickActionsHelper {\r\n\r\n  /**\r\n   * Cut the current selection to our global clipboard.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the calling display component instance.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static cut(triggeringType, requestingComponentPath, runtime) {\r\n    runtime.clipboardManager.cut(triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a cut operation currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static cutEnabled(runtime) {\r\n    return runtime.clipboardManager.cutEnabled();\r\n  }\r\n\r\n\r\n  /**\r\n   * Copy the current selection to our global clipboard.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the calling display component instance.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static copy(triggeringType, requestingComponentPath, runtime) {\r\n    runtime.clipboardManager.copy(triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a copy operation currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static copyEnabled(runtime) {\r\n    return runtime.clipboardManager.copyEnabled();\r\n  }\r\n\r\n  /**\r\n   * Paste the content of the global clipboard at the current caret position.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} requestingComponentPath The index path of the calling display component instance.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static paste(triggeringType, requestingComponentPath, runtime) {\r\n    runtime.clipboardManager.paste(triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a paste operation currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static pasteEnabled(runtime) {\r\n    return runtime.clipboardManager.pasteEnabled();\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to the next task in the global test course.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static nextTask(runtime) {\r\n    runtime.taskManager.switchTaskNext();\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch to the next task currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static nextTaskEnabled(runtime) {\r\n    return runtime.taskManager.nextTaskAvailable();\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to the previous task in the global test course.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static backTask(runtime) {\r\n    runtime.taskManager.switchTaskPrevious();\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch to the previous task currently? \r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static backTaskEnabled(runtime) {\r\n    return runtime.taskManager.previousTaskAvailable();\r\n  }\r\n\r\n  /**\r\n   * Cancel the current task.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static cancelTask(runtime) {\r\n    runtime.taskManager.cancelTask();\r\n  }\r\n\r\n  /**\r\n   * Switch to fullscreen mode.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static startFullscreen(runtime) {\r\n    runtime.pageEventsObserver.handleFullScreen(true);\r\n    Utils.openFullScreen(document.documentElement);\r\n  }\r\n\r\n  /**\r\n   * Leave fullscreen mode.\r\n   * \r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static stopFullscreen(runtime) {\r\n    runtime.pageEventsObserver.handleFullScreen(false);\r\n    Utils.closeFullScreen();\r\n  }\r\n\r\n  /**\r\n   * Close the dialog window that is the parent of the given display component instance.\r\n   * \r\n   * The method silently ignores the call if the parent is not a dialog window.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the close operation.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static close(requestingComponentPath, runtime) {\r\n    const pageAreaType = IndexPathHelper.getPageAreaTypeFromPath(requestingComponentPath);\r\n    if (pageAreaType === 'main') {\r\n      console.log('Cannot close a non-dialog page area.', requestingComponentPath);\r\n      return;\r\n    }\r\n\r\n    const dialog = {\r\n      pageAreaName: IndexPathHelper.getPageAreaNameFromPath(requestingComponentPath),\r\n      type: pageAreaType\r\n    }\r\n\r\n    runtime.dialogPresenter.closeDialog(dialog);\r\n  }\r\n\r\n  /**\r\n   * Switch the parent CbaPageArea's page one page back in page history.\r\n   * \r\n   * The method silently ignores the call if there is no CbaPageArea in the component's ancestors path.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n    * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static back(requestingComponentPath, actionParam, runtime) {\r\n    SpecialClickActionsHelper.doHistoryMoveOnAncestor(requestingComponentPath, 'back', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch back in the page history currently? \r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static backEnabled(requestingComponentPath, actionParam, runtime) {\r\n    return SpecialClickActionsHelper.historyMoveEnabled(requestingComponentPath, 'back', actionParam, runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch the parent CbaPageArea's page one page forward in page history.\r\n   * \r\n   * The method silently ignores the call if there is no CbaPageArea in the component's ancestors path.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n    * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static forward(requestingComponentPath, actionParam, runtime) {\r\n    SpecialClickActionsHelper.doHistoryMoveOnAncestor(requestingComponentPath, 'forward', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Could we perform a switch forward in the page history currently? \r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static forwardEnabled(requestingComponentPath, actionParam, runtime) {\r\n    return SpecialClickActionsHelper.historyMoveEnabled(requestingComponentPath, 'forward', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Switch the parent CbaPageArea's page to the home page in page history.\r\n   * \r\n   * The method silently ignores the call if there is no CbaPageArea in the component's ancestors path.\r\n   * \r\n   * @param {*} requestingComponentPath The index path of the display component requesting the switch one page back operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static home(requestingComponentPath, actionParam, runtime) {\r\n    SpecialClickActionsHelper.doHistoryMoveOnAncestor(requestingComponentPath, 'home', actionParam, runtime);\r\n  }\r\n\r\n  /**\r\n   * Add a bookmark for the current page in the parent CbaPageArea. \r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {*} requestingComponentPath The index path of the display component requesting the operation.\r\n   * @param {{receiverPath: String}} actionParam The action parameter, i.e. an optional receiver path.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static addBookmark(triggeringType, requestingComponentPath, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    if (pageAreaPath === undefined) {\r\n      console.log(`Cannot add bookmark: No receiving page area found. Receiver path in action: ${actionParam.receiverPath}, requesting component path: ${requestingComponentPath}`);\r\n      return;\r\n    }\r\n    CbaPageArea.addBookmark(pageAreaPath, triggeringType, requestingComponentPath, runtime);\r\n  }\r\n\r\n  /**\r\n   * Show the manage bookmark view for a CbaPageArea. \r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {*} requestingComponentPath The index path of the display component requesting the operation.\r\n   * @param {{receiverPath: String, windowTitle: String, deleteColumnHeader: String, bookmarkColumnHeader: String okButton: String, cancelButton: String}} actionParam \r\n   *  The action parameter, i.e. the optional receiver path and the labels to use in the bookmark management dialog.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static manageBookmark(triggeringType, requestingComponentPath, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    const triggerUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(requestingComponentPath, runtime);\r\n    const ownerUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(pageAreaPath, runtime)\r\n    if (pageAreaPath === undefined) {\r\n      console.log(`Cannot open manage bookmark dialog: No receiving page area found. Receiver path in action: ${actionParam.receiverPath}, requesting component path: ${requestingComponentPath}`);\r\n      return;\r\n    }\r\n\r\n    const dialogContent = {\r\n      pageAreaIndexPath: pageAreaPath,\r\n      requestingComponentPath,\r\n      runtime,\r\n      labelConfiguration: actionParam,\r\n      testPresenter: runtime.testPresenter\r\n    }\r\n\r\n    runtime.testPresenter.openDialog(BOOKMARKS, actionParam.windowTitle, dialogContent);\r\n\r\n    runtime.traceLogBuffer.reportEvent(\r\n      'Bookmark',\r\n      new Date(),\r\n      {\r\n        triggerType: triggeringType,\r\n        triggerIndexPath: requestingComponentPath,\r\n        triggerUserDefIdPath,\r\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggerUserDefIdPath),\r\n        operation: 'manage',\r\n        ownerIndexPath: pageAreaPath,\r\n        ownerUserDefIdPath,\r\n        ownerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(ownerUserDefIdPath)\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * Trigger a ScaleVariableInput increment value\r\n   * \r\n   * @param {String} attachedScale The attached ScaleVariable userDefinedId. \r\n   * @param {Number} incrementValue The value of increment.\r\n   * @param {Object} runtime The common runtime context structure.\r\n   */\r\n  static incrementScale(requestingComponentPath, attachedScale, incrementValue, runtime) {\r\n    const scaleValueInputPath =SpecialClickActionsHelper.buildScaleValueInput(requestingComponentPath, attachedScale);\r\n    runtime.eventEmitter.emit(`${scaleValueInputPath}-incrementScale`, incrementValue);\r\n  }\r\n\r\n  // private stuff -----------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Common kernel of the back/forward/home methods.\r\n   */\r\n  static doHistoryMoveOnAncestor(requestingComponentPath, historyMove, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    if (pageAreaPath === undefined) {\r\n      console.log(`Cannot switch ${historyMove} in page history: No receiving page area found. Receiver path in action: ${actionParam.receiverPath}, requesting component path: ${requestingComponentPath}`);\r\n      return;\r\n    }\r\n\r\n    // TODO: What about this asymmetry: Checking enablement via CbaPageArea but doing the switch via TaskManager.\r\n    //  We need the rerender call in the TaskManager.doHistoryMove method. Therefore we cannot use CbaPageArea.doHistoryMove here.\r\n    //  -> Should we add enablement checking to TaskManager? Or should we move the rendered call to CbaPageArea.soHistoryMove?\r\n    runtime.taskManager.doHistoryMove(pageAreaPath, historyMove);\r\n  }\r\n\r\n  /**\r\n   * Common kernel of the backEnabled/forwardEnabled methods.\r\n   */\r\n  static historyMoveEnabled(requestingComponentPath, historyMove, actionParam, runtime) {\r\n    const pageAreaPath = SpecialClickActionsHelper.getPageAreaPath(requestingComponentPath, actionParam.receiverPath);\r\n    if (pageAreaPath === undefined) {\r\n      return false;\r\n    }\r\n    return CbaPageArea.historyMoveEnabled(pageAreaPath, historyMove, runtime);\r\n\r\n  }\r\n\r\n  /**\r\n   * Internal Helper: Calculate the path of the page area component a command refers to.\r\n   * \r\n   * @param {String} requestingComponentPath The component triggering the command. This provides a default path.\r\n   * @param {String} actionParamReceiverPath The path segment specified by the command configuration.\r\n   */\r\n  static getPageAreaPath(requestingComponentPath, actionParamReceiverPath) {\r\n    const pageAreaPath = actionParamReceiverPath === undefined\r\n      ? IndexPathHelper.findPageAreaAncestorPath(requestingComponentPath)\r\n      : IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(requestingComponentPath), actionParamReceiverPath);\r\n    return pageAreaPath;\r\n  }\r\n\r\n  static buildScaleValueInput(requestingComponentPath, attachedScale) {\r\n    const requestingComponentPathhWithoutLastPageSegment = IndexPathHelper.dropPageSegmentFromPath(requestingComponentPath);\r\n    return IndexPathHelper.appendPageSegmentsToPath(requestingComponentPathhWithoutLastPageSegment, attachedScale);\r\n  }\r\n\r\n}\r\n","import CommonActionsHelper from \"./CommonActionsHelper\";\nimport SpecialClickActionsHelper from \"./SpecialClickActionsHelper\";\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport CbaPageArea from \"./CbaPageArea\";\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport UserDefPathHelper from \"../state/UserDefPathHelper\";\n\n\n/**\n * Helper methods to transform context menu configuration structures.\n */\nexport default class MenuBuildHelper {\n\n  // ----- public API ----------------------------------------------------------------------\n\n  /**\n   * Transform the contextMenu configuration object from a display component configuration \n   * to a context menu configuration suitable for the MenuItemTree.\n   * \n   * @param {*} displayComponentContextMenuConfig The contextMenu configuration object of a display component.\n   * @param {*} event The click event that triggered the context menu.\n   * @param {String} indexPath The index path of the calling component.\n   * @param {String} defaultLinkReceiver The index path of the default link receiver (see CommaonActionsHelper.doPageSwitch()).\n   * @param {*} runtime The common runtime context structure.\n   */\n  static buildMenuTreeItemConfiguration(displayComponentContextMenuConfig, event, indexPath, defaultLinkReceiver, runtime) {\n    return {\n      entries: MenuBuildHelper.transformEntries(displayComponentContextMenuConfig.entries, indexPath, defaultLinkReceiver, runtime),\n      event\n    }\n  }\n\n\n  // ------ private stuff ------------------------------------------------------------------\n\n  static transformEntries(displayComponentEntries, indexPath, defaultLinkReceiver, runtime) {\n    const result = [];\n    displayComponentEntries.forEach((entry, index) => {\n      result.push(MenuBuildHelper.transformEntry(entry, indexPath, defaultLinkReceiver, runtime));\n    });\n    return result;\n  }\n\n  static transformEntry(displayComponentEntry, indexPath, defaultLinkReceiver, runtime) {\n    switch (displayComponentEntry.type) {\n      case 'separator':\n        return MenuBuildHelper.transformSeparatorEntry(displayComponentEntry);\n      case 'submenu':\n        return MenuBuildHelper.transformSubmenuEntry(displayComponentEntry, indexPath, defaultLinkReceiver, runtime);\n      case 'action':\n        return MenuBuildHelper.transformActionEntry(displayComponentEntry, indexPath, runtime);\n      case 'link':\n        return MenuBuildHelper.transformLinkEntry(displayComponentEntry, indexPath, defaultLinkReceiver, runtime);\n      case 'provided':\n        return MenuBuildHelper.transformProvidedEntry(displayComponentEntry, indexPath, runtime);\n      default:\n        console.error(`Invalid context menu configuration entry type: ${displayComponentEntry.type}`, displayComponentEntry);\n        return {\n          type: 'separator'\n        };\n    }\n  }\n\n  static transformSeparatorEntry(orignal) {\n    return {\n      type: 'separator'\n    };\n  }\n\n  static transformSubmenuEntry(original, indexPath, defaultLinkReceiver, runtime) {\n    return {\n      type: 'submenu',\n      label: original.label,\n      icon: original.icon,\n      disabled: false,\n      submenu: MenuBuildHelper.transformEntries(original.submenu, indexPath, defaultLinkReceiver, runtime)\n    }\n  }\n\n  static transformActionEntry(originalEntry, indexPath, runtime) {\n    return {\n      type: 'action',\n      label: originalEntry.label,\n      mouseOver: originalEntry.mouseOver,\n      icon: originalEntry.icon,\n      event: originalEntry.event,\n      action: MenuBuildHelper.buildActionMethod(originalEntry.action, originalEntry.actionParam, indexPath, runtime),\n      disabled: MenuBuildHelper.isActionDisabled(originalEntry.action, originalEntry.actionParam, indexPath, runtime, originalEntry.event)\n    }\n  }\n\n  static buildActionMethod(actionType, actionParam, indexPath, runtime) {\n    switch (actionType) {\n      case 'cut':\n        return () => { SpecialClickActionsHelper.cut('contextMenu', indexPath, runtime); };\n      case 'copy':\n        return () => { SpecialClickActionsHelper.copy('contextMenu', indexPath, runtime); };\n      case 'paste':\n        return () => { SpecialClickActionsHelper.paste('contextMenu', indexPath, runtime); };\n      case 'next_task':\n        return () => { SpecialClickActionsHelper.nextTask(runtime); };\n      case 'back_task':\n        return () => { SpecialClickActionsHelper.backTask(runtime); };\n      case 'cancel_task':\n        return () => { SpecialClickActionsHelper.cancelTask(runtime); };\n      case 'startFullscreen':\n        return () => { SpecialClickActionsHelper.startFullscreen(runtime); };\n      case 'stopFullscreen':\n        return () => { SpecialClickActionsHelper.stopFullscreen(runtime); };\n      case 'close':\n        return () => { SpecialClickActionsHelper.close(indexPath, runtime); };\n      case 'back':\n        return () => { SpecialClickActionsHelper.back(indexPath, actionParam, runtime); };\n      case 'forward':\n        return () => { SpecialClickActionsHelper.forward(indexPath, actionParam, runtime); };\n      case 'home':\n        return () => { SpecialClickActionsHelper.home(indexPath, actionParam, runtime); };\n      case 'addBookmark':\n        return () => { SpecialClickActionsHelper.addBookmark('contextMenu', indexPath, actionParam, runtime); };\n      case 'manageBookmark':\n        return () => { SpecialClickActionsHelper.manageBookmark('contextMenu', indexPath, actionParam, runtime); };\n      case 'none':\n        return () => { console.log(`Menu button without action activated: ${indexPath}`) };\n      default:\n        console.error(`Unknown action type: ${actionType}`);\n        return () => { console.error(`Cannot process unknown action type: ${actionType}`) };\n    }\n  }\n\n  static isActionDisabled(actionType, actionParam, indexPath, runtime, event) {\n    switch (actionType) {\n      case 'cut':\n        return !SpecialClickActionsHelper.cutEnabled(runtime);\n      case 'copy':\n        return !SpecialClickActionsHelper.copyEnabled(runtime);\n      case 'paste':\n        return !SpecialClickActionsHelper.pasteEnabled(runtime);\n      case 'next_task':\n        return !SpecialClickActionsHelper.nextTaskEnabled(runtime);\n      case 'back_task':\n        return !SpecialClickActionsHelper.backTaskEnabled(runtime);\n      case 'back':\n        return !SpecialClickActionsHelper.backEnabled(indexPath, actionParam, runtime);\n      case 'forward':\n        return !SpecialClickActionsHelper.forwardEnabled(indexPath, actionParam, runtime);\n      case 'none':\n        return event === undefined;\n      default:\n        return false;\n    }\n  }\n\n  static transformLinkEntry(originalEntry, indexPath, defaultLinkReceiver, runtime) {\n    return {\n      type: 'action',\n      label: originalEntry.label,\n      mouseOver: originalEntry.mouseOver,\n      icon: originalEntry.icon,\n      event: originalEntry.event,\n      action: () => { CommonActionsHelper.doPageSwitch(originalEntry.link, runtime, defaultLinkReceiver, indexPath); },\n      disabled: false\n    }\n  }\n\n  static transformProvidedEntry(originalEntry, indexPath, runtime) {\n    const pageAreaPath = originalEntry.providerParam === undefined\n      ? IndexPathHelper.findPageAreaAncestorPath(indexPath)\n      : IndexPathHelper.appendPageSegmentsToPath(IndexPathHelper.dropPageSegmentFromPath(indexPath), originalEntry.providerParam);\n    const bookmarks = CbaPageArea.getBookmarks(pageAreaPath, runtime);\n    const menuEntries = bookmarks.map((pageEntry) => {\n      const pageLabel = pageEntry.pageUrl ? pageEntry.pageUrl : \"\";\n      const pageAreaTab = pageEntry.pageTab === undefined ? undefined : {\n        name: pageEntry.pageTab,\n        image: pageEntry.pageImage\n      }\n\n      return {\n        type: 'action',\n        label: pageLabel,\n        mouseOver: `Switch browser to ${pageLabel}`,\n        icon: pageEntry.pageImage,\n        disabled: false,\n        action: () => {\n          // Note: Delegating the trace operation makes sure that the trace timestamp is taken when executing the menu action: \n          MenuBuildHelper.trace(indexPath, pageAreaPath, pageEntry.pageName, pageEntry.pageUrl, pageEntry.pageTab, runtime);\n          runtime.taskManager.switchEmbeddedPage(pageAreaPath, pageEntry.pageName, pageEntry.pageUrl, pageAreaTab);\n        }\n      }\n    });\n\n    return {\n      type: 'dynamicItems',\n      provider: () => menuEntries,\n      providerParam: undefined\n    }\n  }\n\n  /**\n * Create a trace log entry for a bookmark select action\n * \n * @param {String} triggeringIndexPath The index path of the triggering display component instance.\n * @param {String} ownerIndexPath The index path of the display component owining the bookmarks.\n * @param {String} pageName The name pf the page of the bookmark.\n * @param {String} pageUrl The URL pf the page of the bookmark.\n * @param {String} tab The browser tab the bookmark operates on.\n * @param {*} runtime The common runtime context structure.\n */\n  static trace(triggeringIndexPath, ownerIndexPath, pageName, pageUrl, tab, runtime) {\n    const triggeringUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(triggeringIndexPath, runtime);\n    const ownerUserDefPath = PathTranslationHelper.getUserDefPathForIndexPath(ownerIndexPath, runtime);\n\n    runtime.traceLogBuffer.reportEvent(\n      'Bookmark',\n      new Date(),\n      {\n        triggerType: 'contextMenu',\n        triggerIndexPath: triggeringIndexPath,\n        triggerUserDefIdPath: triggeringUserDefPath,\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggeringUserDefPath),\n        operation: 'select',\n        ownerIndexPath,\n        ownerUserDefIdPath: ownerUserDefPath,\n        ownerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(ownerUserDefPath),\n        pageName,\n        pageUrl,\n        tab\n      }\n    );\n  }\n\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Dialog from 'react-dialog';\nimport CbaInterpreter from '../components/CbaInterpreter';\nimport RenderingHelper from '../components/RenderingHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\n\nexport default class DialogPresenter extends Component {\n\n  // NOTE: The DialogPresenter has no index path. Therefore it cannot register at the RenderingHelper\n  // via onMount, onUnmount, onReceiveProps. You cannot use RenderingHelper.triggerRenderingViaPath(...) either.\n  static buildDialogIndexPath(taskPath, dialog) {\n    return IndexPathHelper.appendPageSegmentToPathRoot(taskPath, dialog.type, dialog.pageAreaName, IndexPathHelper.buildPageSegment(dialog.pageName));\n  }\n\n  static buildDialogRefKey(dialog) {\n    const { pageAreaType, pageAreaName, pageName } = dialog;\n    return `/type=${pageAreaType}/areaName=${pageAreaName}/pageName=${pageName}`;\n  }\n\n  static isDialogParentInPath(path) {\n    if (path !== undefined) {\n      const currentPageAreaType = IndexPathHelper.getPageAreaTypeFromPath(path);\n      return currentPageAreaType !== undefined && (currentPageAreaType === \"dialog\" || currentPageAreaType === \"modal\");\n    }\n\n    return false;\n  }\n\n  static closeParentDialogFromPath(runtime, path) {\n    if (DialogPresenter.isDialogParentInPath(path)) {\n      const currentPageAreaType = IndexPathHelper.getPageAreaTypeFromPath(path);\n      const currentPageAreaName = IndexPathHelper.getPageAreaNameFromPath(path);\n      const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n      runtime.presenterStateManager.hideDialog(currentPageAreaName, currentPageAreaType, currentTaskPath, runtime);\n    } else {\n      console.warn(\"Dialog is not in path - \", path);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    // TODO: CKI Is the self registering a good idea? Why don't we use self registering for other global components?\n    props.runtime.dialogPresenter = this;\n  }\n\n  /*\n  * function to get all dialogs from the presenter state manager\n  */\n  getDialogsFromPresenterStateManager = () => {\n    const { runtime, findPageForPageName } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n    const taskState = runtime.presenterStateManager.getTaskState(currentTaskPath);\n    const filteredDialogs = taskState.dialogs.filter(d => d.visible)\n    const dialogs = this.checkAndSetFocus(filteredDialogs);\n\n    return dialogs.map((dialog) => {\n      const page = findPageForPageName(dialog.pageName, runtime);\n      const { width: pageWidth, height: pageHeight } = page.content.config.position;\n\n      // if no position center object\n      if (!dialog.position) {\n        dialog.position = {\n          x: window.innerWidth / 2 - pageWidth / 2,\n          y: window.innerHeight / 2 - pageHeight / 2,\n        }\n      }\n\n      return {\n        type: dialog.type,\n        position: dialog.position,\n        focused: dialog.focused,\n        pageAreaName: dialog.pageAreaName,\n        pageName: dialog.pageName,\n        visible: dialog.visible\n      }\n    });\n  }\n\n  checkAndSetFocus = (dialogs) => {\n    for (let index = 0; index < dialogs.length; index += 1) {\n      if (dialogs[index].focused) return dialogs;\n      if (index === dialogs.length - 1) {\n        dialogs[index].focused = true;\n      }\n    }\n\n    return dialogs;\n  }\n\n  handleFocusAndDrag = (event, dialog) => {\n    const { runtime } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n    // get new position.\n    // TODO: support separate namespaces for dialog/modal:\n    const position = this.getCurrentDialogPosition(dialog);\n\n    // update dialog state in task state and rerender\n    runtime.presenterStateManager.updatePositionAndFocusDialog(dialog.pageAreaName, dialog.type, currentTaskPath, position, runtime);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  getCurrentDialogPosition = (dialog) => {\n    /* Dependent on the use of transform by react-dialog (3rd party library) - could break */\n    // eslint-disable-next-line\n    const dialogInstance = ReactDOM.findDOMNode(this.refs[DialogPresenter.buildDialogRefKey(dialog)]).getElementsByClassName(\"ui-dialog\")[0];\n    const rawTransform = dialogInstance.style.transform.match(/\\(([^)]+)\\)/)[1];\n    const transformValue = rawTransform.split(\",\");\n\n    const x = parseInt(transformValue[0], 10);\n    const y = parseInt(transformValue[1], 10);\n\n    return {\n      x,\n      y,\n    };\n  }\n\n  buildDialogs = () => {\n    const { runtime, findPageForPageName } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n    return this.getDialogsFromPresenterStateManager().map((dialog, index) => {\n      const isModal = dialog.type === \"modal\";\n      const page = findPageForPageName(dialog.pageName, runtime);\n      const orientation = page.orientation ? \"right\" : \"left\";\n      const { width: pageWidth, height: pageHeight } = page.content.config.position; // maybe make top level height and width accesible to page obj?\n      const dialogPath = DialogPresenter.buildDialogIndexPath(currentTaskPath, dialog);\n\n      return (\n        <div\n          key={DialogPresenter.buildDialogRefKey(dialog)}\n          className={`${isModal ? \"cba-modal\" : \"cba-dialog\"} ${dialog.focused ? \"focused\" : \"\"} ${!page.closable ? \"not-closable\" : \"\"}`}\n          onClick={(event) => { this.handleFocusAndDrag(event, dialog) }}\n        >\n          <Dialog\n            // title={props.currentModal} TODO: add title when merging with other debug modals\n            modal={isModal}\n            isResizable={false}\n            isDraggable={page.closable}\n            hasCloseIcon={page.closable}\n            closeOnEscape={page.closable}\n            width={pageWidth}\n            height={pageHeight + 25} // adding height of topbar\n            onClose={() => this.closeDialog(dialog)}\n            position={dialog.position}\n            ref={DialogPresenter.buildDialogRefKey(dialog)}\n          >\n            <div className=\"dialog-page\">\n              {/* @Dejan TODO: replace with Modal Manager and move this logic to Modal Manager when merging  */}\n              <CbaInterpreter runtime={runtime} path={dialogPath} config={page.content} orientation={orientation} />\n            </div>\n          </Dialog>\n        </div>\n      )\n    })\n  }\n\n  closeDialog = (dialog) => {\n    const { runtime } = this.props;\n    const currentTaskPath = runtime.taskManager.getCurrentStatePathRoot();\n\n    runtime.presenterStateManager.hideDialog(dialog.pageAreaName, dialog.type, currentTaskPath, runtime);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  render() {\n    return (\n      <div>\n        {this.buildDialogs()}\n      </div>\n    )\n  }\n\n}\n\n\nDialogPresenter.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  findPageForPageName: PropTypes.func.isRequired,\n}\n","import throttle from 'lodash.throttle';\r\nimport ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport MenuBuildHelper from \"./MenuBuildHelper\";\r\nimport DialogPresenter from '../dialog/DialogPresenter';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\n\r\n/**\r\n * Helper methods that factor out code patterns commonly used by many display components.\r\n */\r\nexport default class CommonActionsHelper {\r\n\r\n  /**\r\n   * Do the usual processing of an onClick event on a display component:\r\n   *  - Trace a user interaction.\r\n   *  - Do a page switch according to the link specification.\r\n   *  - Send a standard state machine event.\r\n   * w\r\n   * @param {*} event The onClick event triggering the processing.\r\n   * @param {*} traceValues Values to add to the on click trace log (may be undefined if there is nothing to add).\r\n   * @param {*} component The diplay component instance.\r\n   */\r\n  static doStandardOnClick(event, traceValues, component) {\r\n    const { config, path, runtime } = component.props;\r\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path, traceValues, event, runtime);\r\n    CommonActionsHelper.doPageSwitchForComponent(component);\r\n    CommonActionsHelper.sendStandardEvent(config, runtime);\r\n  }\r\n\r\n  /**\r\n   * Do the basic processing of an onClick event on a display component:\r\n   *  - Start a new user interaction as far as replay is concerned.\r\n   *  - Stop propagation of the event to parent components.\r\n   *  - Deregister other current selection provider and insert position at the clipboard manager.\r\n   * \r\n   * @param {*} event The onClick event triggering the processing.\r\n   * @param {String} path The Index Path of the display component instance.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static doBasicOnClick(event, path, runtime) {\r\n    runtime.replayStepMonitor.incrementReplayStep();\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n    CommonActionsHelper.signalFocusChangeToClipboardManager(path, runtime);\r\n  }\r\n\r\n  /**\r\n   * Stop the propagation of the given event.\r\n   * \r\n   * @param {*} event \r\n   */\r\n  static stopEventPropagation(event) {\r\n    if (event !== undefined) {\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deregister other components as selection provider and insert position in the clipboard manager.\r\n   * \r\n   * @param {String} path The Index Path of the component. \r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static signalFocusChangeToClipboardManager(path, runtime) {\r\n    runtime.clipboardManager.registerFocus(path);\r\n  }\r\n\r\n  /**\r\n   * Signal a user interaction to the user interaction counter and the trace log using the trace log config structure.\r\n   * \r\n   * @param {*} config The component's configuration object containing the trace config structure.\r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static traceUserInteractionPerConfig(config, path, values, browserEvent, runtime) {\r\n    CommonActionsHelper.traceUserInteractionPerTraceConfig(config.trace, path, values, browserEvent, runtime);\r\n  }\r\n\r\n  /**\r\n   * Signal a user interaction to the user interaction counter and the trace log using the trace log config structure.\r\n   * \r\n   * @param {*} traceConfig The trace configuration structure from the component's configuration object.\r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static traceUserInteractionPerTraceConfig(traceConfig, path, values, browserEvent, runtime) {\r\n    if (traceConfig.skipTrace === undefined || traceConfig.skipTrace !== true) {\r\n      const extendedValues = {};\r\n      CommonActionsHelper.extendTraceDetailsObject(extendedValues, traceConfig.addOn);\r\n      CommonActionsHelper.extendTraceDetailsObject(extendedValues, values);\r\n\r\n      CommonActionsHelper.traceUserInteraction(traceConfig.type, path, extendedValues, browserEvent, undefined, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Signal a user interaction to the user interaction counter and the trace log.\r\n   * \r\n   * @param {string} eventType The type of event to log in the trace log.\r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {{type: String, value: String}} continuingInteractionKey The key used to identify a user interaction that might trigger \r\n   *  several consecutive calls but should be counted as a single interaction only. \r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static traceUserInteraction(eventType, path, values, browserEvent, continuingInteractionKey, runtime) {\r\n    const details = CommonActionsHelper.buildTraceLogDetails(path, values, browserEvent, runtime);\r\n    const timestamp = new Date();\r\n    runtime.incidentsAccumulator.userInteraction(timestamp.getTime(), continuingInteractionKey, runtime);\r\n    runtime.traceLogBuffer.reportEvent(eventType, timestamp, details);\r\n  }\r\n\r\n  /**\r\n   * Signal a user scroll interaction to the user interaction counter and the trace log.\r\n   * Function auto throttles itself to 2 calls per second\r\n   * \r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} runtime The common runtime object.\r\n   * \r\n   * @returns {Function(event)} Function must be added to the onScroll event of a Component\r\n   */\r\n  static traceUserScroll(path, runtime, xPath, isXPageFirst) {\r\n    let lastScrollValue;\r\n    let currentScrollValue\r\n    let lastOrientationValue;\r\n    let currentOrientationValue;\r\n    const throttleOptions = {\r\n      leading: false\r\n    }\r\n\r\n    const throttleTraceScrollFunction = throttle(TraceLogHelper.traceScrollWrap(), 500, throttleOptions);\r\n\r\n    return (event) => {\r\n      event.stopPropagation();\r\n      lastScrollValue = currentScrollValue;\r\n      currentScrollValue = TraceLogHelper.getScrollDataFromEvent(event);\r\n\r\n      let tracePath;\r\n\r\n      // xpage case (cannot assign a onScroll function. on scroll is captured at a higher level and computes path based on which comes first.)\r\n      if (xPath) {\r\n        const isScrollOnPane1 = event.target.className.includes(\"Pane1\");\r\n        if (isXPageFirst) {\r\n          tracePath = isScrollOnPane1 ? xPath : path;\r\n        } else {\r\n          tracePath = isScrollOnPane1 ? path : xPath;\r\n        }\r\n      } else {\r\n        tracePath = path;\r\n      }\r\n\r\n      lastOrientationValue = currentOrientationValue;\r\n      currentOrientationValue = TraceLogHelper.computeScrollOrientation(currentScrollValue, lastScrollValue);\r\n\r\n      if (lastOrientationValue && lastOrientationValue.direction && (lastOrientationValue.direction !== currentOrientationValue.direction)) {\r\n        TraceLogHelper.traceScroll(tracePath, runtime, currentScrollValue, currentOrientationValue);\r\n      }\r\n\r\n      throttleTraceScrollFunction(currentScrollValue, currentOrientationValue, tracePath, runtime);\r\n    };\r\n\r\n  }\r\n\r\n  /**\r\n   * Build the details structure for trace log entries triggered by display components.\r\n   * \r\n   * @param {string} path The Index Path of the dislplay component instance.\r\n   * @param {*} values Additional attribute values to put into the trace log entry. \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that triggered the log (optional).\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static buildTraceLogDetails(path, values, browserEvent, runtime) {\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime);\r\n    const details = {\r\n      indexPath: path,\r\n      userDefIdPath,\r\n      userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\r\n    };\r\n    CommonActionsHelper.addMouseEventDetails(browserEvent, details);\r\n    CommonActionsHelper.extendTraceDetailsObject(details, values);\r\n    return details;\r\n  }\r\n\r\n  /**\r\n   * Extend the given oldValues trace details object with the values given. \r\n   * \r\n   * @param {*} detailsObject The trace details object to be extended.\r\n   * @param {*} valuesToAdd The attributes to add to the trace details object.\r\n   */\r\n  static extendTraceDetailsObject(detailsObject, valuesToAdd) {\r\n    if (valuesToAdd !== undefined) {\r\n      Object.keys(valuesToAdd).forEach((attribute) => {\r\n        detailsObject[attribute] = valuesToAdd[attribute];\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add properties specific to MouseEvents to the given trace log details object.\r\n   * \r\n   * @param {*} browserEvent The browser side event (like onClick or onChange) that might be a MouseEvent.\r\n   * @param {*} traceDetails The trace log details where we should add the MouseEvent attribute values to.\r\n   */\r\n  static addMouseEventDetails(browserSideEvent, traceDetails) {\r\n    if (browserSideEvent !== undefined) {\r\n      traceDetails.clientX = browserSideEvent.clientX;\r\n      traceDetails.clientY = browserSideEvent.clientY;\r\n      traceDetails.pageX = browserSideEvent.pageX;\r\n      traceDetails.pageY = browserSideEvent.pageY;\r\n      traceDetails.screenX = browserSideEvent.screenX;\r\n      traceDetails.screenY = browserSideEvent.screenY;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Build a trace log additional value object for the 'old selected' status \r\n   * to use as values parameter in the traceUserInteraction method.\r\n   * \r\n   * @param {*} pathState The component's state to extract the selected value from.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static buildOldSelectedTraceLogValueObject(selectedState) {\r\n    return {\r\n      oldSelected: selectedState\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the standard or alternate event according to the 'selected' state of the component instance. \r\n   * \r\n   * @param {*} selectedState The 'selected' state of the component instance.\r\n   * @param {*} props The component's configuration object.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static sendStandardOrAlternateEvent(selectedState, props, runtime) {\r\n    if (selectedState) {\r\n      CommonActionsHelper.sendAlternateEvent(props, runtime);\r\n    } else {\r\n      CommonActionsHelper.sendStandardEvent(props, runtime);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the standard state machine event according to the display component's configuration.\r\n   * \r\n   * @param {*} props The component's configuration object.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static sendStandardEvent(props, runtime) {\r\n    const event = props.event.standard;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a standard event using only the name of the event\r\n   * \r\n   * @param {\"String\"} name the name of the event\r\n   * @param {*} runtime the common runtime object\r\n   */\r\n  static sendEvent(name, runtime) {\r\n    if (name !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(name);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the alternate state machine event according to the display component's configuration.\r\n   * \r\n   * @param {*} props The component's configuration object.\r\n   * @param {*} runtime The common runtime object.\r\n   */\r\n  static sendAlternateEvent(props, runtime) {\r\n    const event = props.event.alternate === undefined ? props.event.standard : props.event.alternate;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the state machine event according to the display component's configured onFocusIn event.\r\n   * \r\n   * @param {*} component The display component instance.\r\n   */\r\n  static doStandardOnFocus(component) {\r\n    const { props } = component;\r\n    const { config, runtime } = props;\r\n\r\n    const event = config.event.onFocusIn;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the state machine event according to the display component's configured onFocusOut event.\r\n   * \r\n   * @param {*} component The display component instance.\r\n   */\r\n  static doStandardOnBlur(component) {\r\n    const { props } = component;\r\n    const { config, runtime } = props;\r\n\r\n    const event = config.event.onFocusOut;\r\n    if (event !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the page switch for the specified display component instance.\r\n   * @param {*} component \r\n   */\r\n  static doPageSwitchForComponent(component) {\r\n    const defaultLinkReceiver = CommonActionsHelper.getDefaultLinkReceiver(component);\r\n    CommonActionsHelper.doPageSwitch(component.props.config.link, component.props.runtime, defaultLinkReceiver, component.props.path);\r\n  }\r\n\r\n\r\n  /**\r\n   * Perform the page switch specified in the given link specification.\r\n   * \r\n   * @param {*} link The link specification object from the display component's configuration.\r\n   * @param {*} runtime The common runtime object.\r\n   * @param {*} defaultReceiver An optional receiving page area to be specified if the display component sits in a page that is embedded in a page area that catches page switches.\r\n   * @param {*} path Path of the component requesting the page switch\r\n   */\r\n  static doPageSwitch(link, runtime, defaultReceiver, path) {\r\n    const targetReceiver = CommonActionsHelper.buildTargetReceiver(link, defaultReceiver, path);\r\n    const targetPage = link.page;\r\n    const conditionalLink = link.conditional;\r\n    const { pageUrl, historyMove } = link;\r\n    if (targetPage !== undefined || conditionalLink !== undefined || (targetReceiver !== undefined && historyMove !== undefined)) {\r\n      if (path !== undefined && DialogPresenter.isDialogParentInPath(path)) {\r\n        DialogPresenter.closeParentDialogFromPath(runtime, path);\r\n      }\r\n\r\n      runtime.taskManager.switchPage(\r\n        targetPage,\r\n        conditionalLink,\r\n        pageUrl,\r\n        link.pageAreaType == null ? IndexPathHelper.getPageAreaTypeFromPath(path) : link.pageAreaType,\r\n        link.pageAreaName == null ? IndexPathHelper.getPageAreaNameFromPath(path) : link.pageAreaName,\r\n        targetReceiver,\r\n        link.receiverTab,\r\n        link.historyMove,\r\n        undefined\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal helper method: Get position of the top level component in the page given by the page's name.\r\n   */\r\n  static getTopComponentPosition(pageName, pageConfigurationsManager) {\r\n    const targetPageConfig = pageConfigurationsManager.findPage(pageName);\r\n    if (targetPageConfig === undefined) {\r\n      console.error(`Could not find configuration for page: ${pageName}`);\r\n      return undefined;\r\n    }\r\n    const { content } = targetPageConfig;\r\n    if (content === undefined) {\r\n      console.error(`Could not find content in configuration of page ${pageName}: ${targetPageConfig}`);\r\n      return undefined;\r\n    }\r\n    const { config } = content;\r\n    if (config === undefined) {\r\n      console.error(`Could not find config for content in page ${pageName}: ${content}`);\r\n      return undefined;\r\n    }\r\n    const { position } = targetPageConfig.content.config;\r\n    return {\r\n      x: position.x,\r\n      y: position.y\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the default link receiver from the state of the display component instance.\r\n   * \r\n   * @param {*} component The display component instance.\r\n   */\r\n  static getDefaultLinkReceiver(component) {\r\n    if (component.props === undefined) {\r\n      console.error(`Component without props detected: ${component}`);\r\n      return undefined;\r\n    }\r\n    const pathState = ComponentStateHelper.getState(component);\r\n    return StateAttributeAccess.extractDefaultLinkReceiver(pathState);\r\n  }\r\n\r\n\r\n  /**\r\n   * Open the context menu for the calling display component instance. \r\n   * \r\n   * @param {*} component The calling display component instance.\r\n   * @param {MouseEvent} event The mouse event opening the context menu.\r\n   */\r\n  static doContextMenuOpen(component, event) {\r\n    const { props } = component;\r\n\r\n    if (props === undefined || props.runtime === undefined\r\n      || props.config === undefined) {\r\n      console.error(\"Cannot open context menu for component.\", props);\r\n      return;\r\n    }\r\n\r\n    const { runtime, config, path: indexPath } = props;\r\n    const { contextMenu } = config;\r\n\r\n    if (contextMenu !== undefined) {\r\n      event.stopPropagation();\r\n      runtime.contextMenu.openMenuItemTreeWithDynamicConfig(\r\n        MenuBuildHelper.buildMenuTreeItemConfiguration(\r\n          contextMenu,\r\n          event,\r\n          indexPath,\r\n          CommonActionsHelper.getDefaultLinkReceiver(component),\r\n          runtime\r\n        )\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Register or deregister the current selection of a textarea or input tag for cut&paste due to a click or select event.\r\n   * \r\n   * Firefox and Chrome differ a bit with selection data in the events and events sequence when dropping a selection. \r\n   * Fortunately both send the proper selection data with the last event triggered by each selecting or deselecting action.\r\n   * Therefore we have to process the selected text in onClick and onSelection. \r\n   * \r\n   * @param {*} path The index path of the display component instance.\r\n   * @param {*} event The event that triggers the selection processing.\r\n   * @param {*} readOnly Is the component read only, i.e. it cannot do a 'cut' operation.\r\n   * @param {*} cutCallback The method to call at an actual cut operation to replace the selected text.\r\n   * @param {*} cutCallbackObj The component instance on which will be applied the 'cut' operation.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static processSelectedTextForCutAndPaste(path, event, readOnly, cutCallback, cutCallbackObj, runtime) {\r\n    const { selectionStart, selectionEnd, value } = event.target;\r\n    const selectedText = `${value.substring(selectionStart, selectionEnd)}`;\r\n    if (selectedText === undefined || selectedText.length === 0) {\r\n      runtime.clipboardManager.deregisterSelection(path);\r\n    } else {\r\n      runtime.clipboardManager.registerSelection(\r\n        path,\r\n        (drop) => {\r\n          if (drop && !readOnly && cutCallback !== undefined) {\r\n            cutCallback(cutCallbackObj, selectionStart, selectionEnd, '');\r\n          }\r\n          return selectedText;\r\n        },\r\n        () => readOnly\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------------- private stuff -------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the target receiver from link and defaultReceiver:\r\n   * \r\n   * - If no default receiver is given (i.e. no intercepting embedding page area) just use the receiver given in the link.\r\n   * - If a default receiver is given and the link specifies a different top level page area than the default receiver then \r\n   *   return the receiver of the link: The embedding page area does not intercept a page setting in a foreign top level page area.\r\n   * - If a default receiver is given and the top level page area specified by the link is the same as the top level page area\r\n   *   of the defaultReceiver (i.e. the intercepting embedding page area) concatenate receiver of intercepting page area and link:  \r\n   *   The receiver in the link becomes relative to the intercepting embedding page. (If the link specifies no specific receiver\r\n   *   just use the default receiver instead of concatenating both: The link sets the page embedded in the embedding page area itself.)\r\n   */\r\n  static buildTargetReceiver(link, defaultReceiver, pathOfLinkRequestor) {\r\n    let targetReceiver;\r\n    if (defaultReceiver === undefined) {\r\n      targetReceiver = link.receiver;\r\n    } else if (CommonActionsHelper.linkTargetsOtherPageArea(link, pathOfLinkRequestor)) {\r\n      targetReceiver = link.receiver;\r\n    } else if (link.receiver === undefined) {\r\n      targetReceiver = defaultReceiver;\r\n    } else {\r\n      targetReceiver = IndexPathHelper.appendPageSegmentsToPath(defaultReceiver, link.receiver);\r\n    }\r\n    return targetReceiver;\r\n  }\r\n\r\n  /**\r\n   * Internal helper: Does the given link target the page area of the link requesting component?\r\n   */\r\n  static linkTargetsOtherPageArea(link, pathOfLinkRequestor) {\r\n    if (link.pageAreaName === undefined || link.pageAreaType === undefined) {\r\n      // link does not specifiy a proper page area of its own -> assume page area of calling component is to be used\r\n      return false;\r\n    }\r\n    return link.pageAreaType !== IndexPathHelper.getPageAreaTypeFromPath(pathOfLinkRequestor) || link.pageAreaName !== IndexPathHelper.getPageAreaNameFromPath(pathOfLinkRequestor);\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from '../../state/IndexPathHelper';\r\n\r\n/**\r\n * Helper methods used by CbaRichTextField \r\n * to calculate positions in the Draft.js editor state \r\n * taking 'content modifiers' into account.\r\n */\r\nexport default class PositionCalculationHelper {\r\n\r\n  /**\r\n   * Positions (block key and character offset) as given in the CbaRichTextField configuration \r\n   * are valid as long a no content modifiers are applied to the editor state. \r\n   * As soon as content modifiers change the block content of the editor state one has to \r\n   * apply an offset to obtain positions that take the modifications done by the \r\n   * content modifiers into account.\r\n   * \r\n   * The method calculates the actual position for the given modifier in the given editor state.\r\n   * \r\n   * @param {*} targetModifier The static configuration (from the contentModifiers list in the static configuration of the rich text field) of the content modifier to calculate the actual target position for.\r\n   * @param {[*]} configBlocks The text blocks as specified in the static configuration of the rich text field.\r\n   * @param {{}} blockKeyToIndexMap A map from each block key to its index in the configBlocks array.\r\n   * @param {[*]} configContentModifiers The content modifiers list in the static configuration of the rich text field.\r\n   * @param {{}} contentModifiersInEditorState The extract of the modifications implanted by the content modifiers in the current editor state.\r\n   * @param {string} contentModifierParentPath The parent path used to calculate the content modifiers' path ids with.\r\n   * @param {*} editorState The current editor state in which the calculated actual target position should be valid.\r\n   */\r\n  static calculateActualPosition(\r\n    targetModifier,\r\n    configBlocks,\r\n    blockKeyToIndexMap,\r\n    configContentModifiers,\r\n    contentModifiersInEditorState,\r\n    contentModifierParentPath,\r\n    editorState\r\n  ) {\r\n    const actualPositionOffset = PositionCalculationHelper.calculateCurrentPositionOffset(\r\n      targetModifier,\r\n      configBlocks,\r\n      blockKeyToIndexMap,\r\n      configContentModifiers,\r\n      contentModifiersInEditorState,\r\n      contentModifierParentPath\r\n    );\r\n    const modifierPosition = targetModifier.config.position;\r\n    const actualBlockKey = PositionCalculationHelper.calculateBlockKey(modifierPosition.blockKey, actualPositionOffset.blockOffset, editorState);\r\n    if (actualBlockKey === undefined) {\r\n      console.error(`Actual block key undefined for ${targetModifier.config.userDefinedId}`);\r\n    }\r\n    return {\r\n      blockKey: actualBlockKey,\r\n      offset: modifierPosition.offset + actualPositionOffset.characterOffset\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * The method calculates the block key for the requested block (specified by the start block key and a block offset) \r\n   * in the given editor state. \r\n   * \r\n   * @param {*} startBlockKey The block key of the block the given block offset is applied to.\r\n   * @param {*} blockOffset The block offset to apply to the startBlockKey.\r\n   * @param {*} editorState The editor state containing the targeted block.\r\n   */\r\n  static calculateBlockKey(startBlockKey, blockOffset, editorState) {\r\n    const contentState = editorState.getCurrentContent();\r\n    let movedBlockKey = startBlockKey;\r\n    let offsetCounter;\r\n    for (offsetCounter = 0; offsetCounter < blockOffset; offsetCounter+=1) {\r\n      movedBlockKey = contentState.getKeyAfter(movedBlockKey);\r\n    }\r\n    return movedBlockKey;\r\n  }\r\n\r\n\r\n  /**\r\n   * The method calculates the necessary offset (block offset and character offset)\r\n   * to be applied to a given 'config' position to obtain the 'actual' position in the\r\n   * editor state.\r\n   * \r\n   * @param {*} targetModifier The content modifier (in the contentModifiers list) to calculate the actual target position for.\r\n   * @param {[*]} configBlocks The text blocks as specified in the configuration.\r\n   * @param {{}} blockKeyToIndexMap A map from each block key to its index in the configBlocks array.\r\n   * @param {[*]} configContentModifiers The content modifiers specified in the configuration.\r\n   * @param {{}} contentModifiersInEditorState The activation status of the content modifiers in the current editor state.\r\n   * @param {string} contentModifierParentPath The parent path used to calculate the content modifiers' path ids with.\r\n   */\r\n  static calculateCurrentPositionOffset(\r\n    targetModifier,\r\n    configBlocks,\r\n    blockKeyToIndexMap,\r\n    configContentModifiers,\r\n    contentModifiersInEditorState,\r\n    contentModifierParentPath\r\n  ) {\r\n\r\n    // Only currently activated modifiers and modifiers in the our target block and before our target position can affect our calculations:\r\n    const targetModifierBlockKey = targetModifier.config.position.blockKey;\r\n    const relevantModifiers = configContentModifiers.filter((modifier, index, all) => {\r\n      const stateInEditorState = PositionCalculationHelper.getModifierStateInEditorState(index, contentModifierParentPath, contentModifiersInEditorState);\r\n      return (PositionCalculationHelper.isEvaluatedInject(modifier) ? stateInEditorState.injectText !== \"\" : stateInEditorState.active)\r\n        && PositionCalculationHelper.inBlock(modifier, targetModifierBlockKey) && PositionCalculationHelper.beforePosition(modifier, targetModifier, blockKeyToIndexMap);\r\n    });\r\n\r\n\r\n    // The block offset is the sum of all blocks added by active dynamic fragments before our target position.\r\n    const blockShiftingModifiers = relevantModifiers.filter((modifier, index, all) => PositionCalculationHelper.hasMoreThanOneBlock(modifier));\r\n    const blockOffset = blockShiftingModifiers.reduce((total, currentBlockShifter) => total + currentBlockShifter.config.blocks.length - 1, 0);\r\n\r\n\r\n    // To calculate the character offset we have to consider the last block-creating fragment in the target block before the target position. \r\n    // If such a fragment exists, its last block replaces all characters in the target block up to the fragment's position \r\n    // and we start calculating the character offset from this position and with an initial value of (characters in replacing block - character up to fragment's position on old block).\r\n    // If no such fragment exists we start calculating the character offset with inital value 0 at the beginning of the target block.\r\n    // Now we add to the character offset the count of characters injected by all active modifiers up to the target position.\r\n\r\n    const lastBlockShifterInSameBlock = PositionCalculationHelper.getLastModifierPerOffset(blockShiftingModifiers);\r\n    const characterSwitchersStartOffset = lastBlockShifterInSameBlock === undefined ? 0 : lastBlockShifterInSameBlock.config.position.offset;\r\n    const characterSwitchersStartIndex = lastBlockShifterInSameBlock === undefined ? 0 : lastBlockShifterInSameBlock.config.position.index;\r\n    const characterOffsetStartValue = lastBlockShifterInSameBlock === undefined ? 0\r\n      : PositionCalculationHelper.getLastBlockOfFragment(lastBlockShifterInSameBlock).text.length - lastBlockShifterInSameBlock.config.position.offset;\r\n\r\n    // Note: We need the index in the array of all configModifiers to calculate the injected text for evaluating modifiers. \r\n    //       Therefore we have to map the full contentModifiers array here! \r\n    const allCharacterShifterTexts = configContentModifiers.map((modifier, index, all) => {\r\n      if (!PositionCalculationHelper.afterPositionInSameBlock(modifier, targetModifierBlockKey, characterSwitchersStartOffset, characterSwitchersStartIndex)) return \"\";\r\n      if (!PositionCalculationHelper.beforePosition(modifier, targetModifier, blockKeyToIndexMap)) return \"\";\r\n      if (PositionCalculationHelper.isDynamicFragment(modifier)) {\r\n        return PositionCalculationHelper.getModifierStateInEditorState(index, contentModifierParentPath, contentModifiersInEditorState).active ? modifier.config.blocks[0].text : \"\";\r\n      }\r\n      if (PositionCalculationHelper.isEvaluatedInject(modifier)) {\r\n        return PositionCalculationHelper.getModifierStateInEditorState(index, contentModifierParentPath, contentModifiersInEditorState).injectText;\r\n      }\r\n      return \"\";\r\n    });\r\n\r\n    const characterOffset = allCharacterShifterTexts.reduce((total, injectedText) => total + injectedText.length, characterOffsetStartValue);\r\n\r\n\r\n    return {\r\n      blockOffset,\r\n      characterOffset\r\n    }\r\n  }\r\n\r\n\r\n  static isDynamicFragment(modifier) {\r\n    return modifier.type === 'DynamicFragment';\r\n  }\r\n\r\n  static isEvaluatedInject(modifier) {\r\n    return modifier.type === 'EvaluatedInject';\r\n  }\r\n\r\n  static hasMoreThanOneBlock(modifier) {\r\n    return PositionCalculationHelper.isDynamicFragment(modifier) && modifier.config.blocks.length > 1;\r\n  }\r\n\r\n  static beforePosition(candidateModifier, compareModifier, blockKeyToIndexMap) {\r\n    const candidatePosition = candidateModifier.config.position;\r\n    const comparePosition = compareModifier.config.position;\r\n    const candidateBlockIndex = blockKeyToIndexMap[candidatePosition.blockKey];\r\n    const compareBlockIndex = blockKeyToIndexMap[comparePosition.blockKey];\r\n\r\n    // check blocks: \r\n    if (candidateBlockIndex < compareBlockIndex) return true;\r\n    if (candidateBlockIndex > compareBlockIndex) return false;\r\n\r\n    // blocks are the same, now check offsets in block:\r\n    if (candidatePosition.offset < comparePosition.offset) return true;\r\n    if (candidatePosition.offset > comparePosition.offset) return false;\r\n\r\n    // character offset are the same also, now check index:\r\n    return candidatePosition.index < comparePosition.index;\r\n  }\r\n\r\n  static afterPositionInSameBlock(candidateModifier, compareBlockKey, compareOffset, compareIndex) {\r\n    const candidatePosition = candidateModifier.config.position;\r\n    return (candidatePosition.blockKey === compareBlockKey)\r\n      && (candidatePosition.offset > compareOffset || (candidatePosition.offset === compareOffset && candidatePosition.index > compareIndex));\r\n  }\r\n\r\n  static inBlock(candidateModifier, compareBlockKey) {\r\n    return candidateModifier.config.position.blockKey === compareBlockKey;\r\n  }\r\n\r\n  static getLastBlockOfFragment(dynamicFragment) {\r\n    const { blocks } = dynamicFragment.config;\r\n    return blocks.length < 1 ? undefined : blocks[blocks.length - 1];\r\n  }\r\n\r\n  static getLastModifierPerOffset(candidateModifiers) {\r\n    let result;\r\n    candidateModifiers.forEach((candidate, index, all) => {\r\n      if (result === undefined || PositionCalculationHelper.isGreaterPositionOffset(candidate.config.position, result.config.position)) {\r\n        result = candidate;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  static isGreaterPositionOffset(left, right) {\r\n    if (left.offset > right.offset) return true;\r\n    if (right.offset > left.offset) return false;\r\n    return left.index > right.index;\r\n  }\r\n\r\n\r\n  static getModifierStateInEditorState(contentModifierIndex, contentModifierParentPath, contentModifiersInEditorState) {\r\n    const fromState = contentModifiersInEditorState[IndexPathHelper.appendIndexToPageSegment(contentModifierParentPath, contentModifierIndex)];\r\n    return fromState === undefined\r\n      ? {\r\n        injectText: \"\",\r\n        active: false\r\n      }\r\n      : fromState;\r\n  }\r\n\r\n\r\n}\r\n","import { EditorState, Modifier, SelectionState, convertFromRaw, RichUtils } from 'draft-js';\r\n\r\n/**\r\n * Helper methods to work with the Draft.js editor state.\r\n */\r\nexport default class EditorStateHelper {\r\n\r\n\r\n  static replaceTextInBlock(editorState, startBlockKey, startOffset, endBlockKey, endOffset, toBeInserted) {\r\n    return EditorState.push(editorState,\r\n      Modifier.replaceText(\r\n        editorState.getCurrentContent(),\r\n        EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset),\r\n        toBeInserted\r\n      ),\r\n      'insert-characters')\r\n  }\r\n\r\n  static replaceWithBlocks(editorState, startBlockKey, startOffset, endBlockKey, endOffset, rawBlocksArrayToInsert, entityMapToInsert) {\r\n    const rawValue = {\r\n      blocks: rawBlocksArrayToInsert,\r\n      entityMap: entityMapToInsert\r\n    };\r\n    const blockMap = convertFromRaw(rawValue).getBlockMap();\r\n    return EditorState.push(editorState,\r\n      Modifier.replaceWithFragment(\r\n        editorState.getCurrentContent(),\r\n        EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset),\r\n        blockMap\r\n      ),\r\n      'insert-fragment')\r\n  }\r\n\r\n  static removeBlocks(editorState, startBlockKey, startOffset, endBlockKey, endOffset) {\r\n    return EditorState.push(editorState,\r\n      Modifier.removeRange(\r\n        editorState.getCurrentContent(),\r\n        EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset),\r\n        'forward'\r\n      ),\r\n      'remove-range')\r\n  }\r\n\r\n  static applyInlineStyles(editorState, startBlockKey, startOffset, endBlockKey, endOffset, styleNames) {\r\n    let modifiedEditorState = editorState;\r\n    if (styleNames !== undefined) {\r\n      const targetSelection = EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset);\r\n      styleNames.forEach((styleName, index, all) => {\r\n        modifiedEditorState = EditorState.push(modifiedEditorState,\r\n          Modifier.applyInlineStyle(modifiedEditorState.getCurrentContent(), targetSelection, styleName),\r\n          'change-inline-style');\r\n      });\r\n    }\r\n    return modifiedEditorState;\r\n  }\r\n\r\n  static applyEntities(editorState, startBlockKey, startOffset, endBlockKey, endOffset, entityNames) {\r\n    let modifiedEditorState = editorState;\r\n    if (entityNames !== undefined) {\r\n      const targetSelection = EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset);\r\n      entityNames.forEach((entityName, index, all) => {\r\n        modifiedEditorState = EditorState.push(modifiedEditorState,\r\n          Modifier.applyEntity(modifiedEditorState.getCurrentContent(), targetSelection, entityName),\r\n          'apply-entity');\r\n      });\r\n    }\r\n    return modifiedEditorState;\r\n  }\r\n\r\n\r\n  static forceSelection(editorState, startBlockKey, startOffset, endBlockKey, endOffset) {\r\n    return EditorState.forceSelection(editorState, EditorStateHelper.buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset))\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Toggle style on a selection in editor state\r\n   * \r\n   * @param {*} editorState \r\n   * @param {*} selection \r\n   * \r\n   * @returns {EditorState} EditorState\r\n   */\r\n  static toggleEditorStateStyleOnSelection(editorState, selection) {\r\n    const { startKey, startOffset, endKey, endOffset, highlightKey } = selection;\r\n    let newEditorState = EditorStateHelper.forceSelection(editorState, startKey, startOffset, endKey, endOffset);\r\n    newEditorState = RichUtils.toggleInlineStyle(newEditorState, highlightKey);\r\n\r\n    return newEditorState;\r\n  }\r\n\r\n  static buildDraftSelectionState(startBlockKey, startOffset, endBlockKey, endOffset) {\r\n    return SelectionState.createEmpty('notUsed').merge({\r\n      anchorKey: startBlockKey,\r\n      anchorOffset: startOffset,\r\n      focusKey: endBlockKey,\r\n      focusOffset: endOffset\r\n    });\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CommonActionsHelper from \"../CommonActionsHelper\";\r\nimport IndexPathHelper from '../../state/IndexPathHelper'\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\n\r\n/**\r\n * A display component used by CbaRichTextField to display 'embedded links'. \r\n */\r\nclass DraftLink extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onClickHandler = this.onClickHandler.bind(this);\r\n    this.getData = this.getData.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { runtime, parentPath } = this.props;\r\n    runtime.componentDirectory.registerComponent(DraftLink.buildMyPath(parentPath, this.getData()), this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { runtime, parentPath } = this.props;\r\n    runtime.componentDirectory.deregisterComponent(DraftLink.buildMyPath(parentPath, this.getData()));\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    const { runtime, parentPath } = this.props;\r\n    if (!(parentPath === nextProps.parentPath)) {\r\n      runtime.componentDirectory.deregisterComponent(DraftLink.buildMyPath(parentPath, this.getData()));\r\n      runtime.componentDirectory.registerComponent(DraftLink.buildMyPath(nextProps.parentPath, nextProps.contentState.getEntity(nextProps.entityKey).getData()), this);\r\n    }\r\n  }\r\n\r\n  onClickHandler(event) {\r\n    const { runtime, parentPath, linkReceiver, fullRichTextPath } = this.props;\r\n    const isDisabled = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractDisabled, fullRichTextPath, runtime);\r\n\r\n    if (!isDisabled) {\r\n      const data = this.getData();\r\n      const myPath = DraftLink.buildMyPath(parentPath, data)\r\n\r\n      CommonActionsHelper.doBasicOnClick(event, myPath, runtime);\r\n      CommonActionsHelper.traceUserInteraction('EmbeddedLink', myPath, undefined, event, undefined, runtime);\r\n\r\n      // Update the 'visited' state: \r\n      const state = DraftLink.getOrBuildState(parentPath, data, runtime);\r\n      state.selected = true;\r\n      DraftLink.persistState(state, parentPath, data, runtime);\r\n\r\n      CommonActionsHelper.doPageSwitch(data.link, runtime, linkReceiver, parentPath);\r\n    }\r\n\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      this.onClickHandler(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fix for Firefox not respecting tabIndex=-1 in DraftLink \r\n   * (DraftJS may modify contentEditable attribute making the browser think it should be focus visible)\r\n   * \r\n   * @param {*} event \r\n   */\r\n  handleMouseDown(event) {\r\n    event.currentTarget.contentEditable = true;\r\n    event.currentTarget.contentEditable = false;\r\n  }\r\n\r\n  getData() {\r\n    const { contentState, entityKey } = this.props;\r\n    return contentState.getEntity(entityKey).getData();\r\n  }\r\n\r\n  static getOrBuildState(parentPath, data, runtime) {\r\n    return runtime.componentStateManager.findOrBuildStateForPathId(DraftLink.buildMyPath(parentPath, data), runtime);\r\n  }\r\n\r\n  static persistState(fullState, parentPath, data, runtime) {\r\n    runtime.componentStateManager.registerStateByPathId(DraftLink.buildMyPath(parentPath, data), fullState, runtime);\r\n  }\r\n\r\n  static buildMyPath(parentPath, data) {\r\n    return IndexPathHelper.appendIndexToPageSegment(parentPath, data.id);\r\n  }\r\n\r\n  static buildStyle(state, data) {\r\n    return {\r\n      color: state.selected ? data.color.visited : data.color.notVisited,\r\n      cursor: \"pointer\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { runtime, parentPath, children, tabIndex } = this.props;\r\n    const data = this.getData();\r\n    const state = DraftLink.getOrBuildState(parentPath, data, runtime);\r\n    const style = DraftLink.buildStyle(state, data);\r\n    CommonConfigHelper.setStyleAttribute(style, 'display', 'inline-block');\r\n    CommonConfigHelper.setStyleAttribute(style, 'lineHeight', '1');\r\n    const className = style.color !== undefined ? 'cba-link' : '';\r\n\r\n    return (\r\n      <span\r\n        className={`CbaLink ${className}`}\r\n        style={style}\r\n        onClick={this.onClickHandler}\r\n        onKeyDown={e => this.handleKeyDown(e)}\r\n        onMouseDown={e => this.handleMouseDown(e)}\r\n        tabIndex={tabIndex}\r\n      >\r\n        {children}\r\n      </span>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n/*\r\n  Function which specifies the strategy in finding link entities in DraftJS content\r\n*/\r\nconst findLinkEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n    (character) => {\r\n      const entityKey = character.getEntity();\r\n      return (\r\n        entityKey !== null && contentState.getEntity(entityKey).getType() === 'LINK'\r\n      );\r\n    },\r\n    callback\r\n  );\r\n}\r\n\r\nDraftLink.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  parentPath: PropTypes.string.isRequired,\r\n  contentState: PropTypes.object.isRequired,\r\n  entityKey: PropTypes.string.isRequired,\r\n  children: PropTypes.array.isRequired,\r\n  fullRichTextPath: PropTypes.string.isRequired,\r\n  linkReceiver: PropTypes.string,\r\n  tabIndex: PropTypes.number,\r\n}\r\n\r\nDraftLink.defaultProps = {\r\n  linkReceiver: undefined,\r\n  tabIndex: -1\r\n}\r\n\r\nexport { DraftLink, findLinkEntities }\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CommonConfigHelper from \"../../config/CommonConfigHelper\";\r\n\r\nconst Audio = (props) => {\r\n  const { src, style } = props;\r\n  return <audio><track kind=\"captions\" controls src={src} style={style} /></audio>;\r\n};\r\n\r\nconst Image = (props) => {\r\n  const { src, style } = props;\r\n  return <img src={src} style={style} alt={src} />;\r\n};\r\n\r\nconst Video = (props) => {\r\n  const { src, style } = props;\r\n  return <video><track kind=\"captions\" controls src={src} style={style} /></video>;\r\n};\r\n\r\nexport const Media = runtime => (\r\n  // Passing arguments to a JavaScript callback function\r\n  (props) => {\r\n    const entity = props.contentState.getEntity(\r\n      props.block.getEntityAt(0)\r\n    );\r\n    const { src, style } = entity.getData();\r\n    const type = entity.getType();\r\n\r\n    const relativePathSrc = CommonConfigHelper.getProperResourcePath(src, runtime);\r\n\r\n    let media;\r\n    if (type === 'audio') {\r\n      media = <Audio src={relativePathSrc} style={style} />;\r\n    } else if (type === 'image') {\r\n      media = <Image src={relativePathSrc} style={style} />;\r\n    } else if (type === 'video') {\r\n      media = <Video src={relativePathSrc} style={style} />;\r\n    }\r\n\r\n    return media;\r\n  });\r\n\r\nAudio.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  style: PropTypes.object.isRequired\r\n}\r\n\r\nImage.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  style: PropTypes.object.isRequired\r\n}\r\n\r\nVideo.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  style: PropTypes.object.isRequired\r\n}\r\n\r\nMedia.propTypes = {\r\n  doHighlight: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Media as default }\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * A react component used by the CbaRichTextField to display bulleted or numbered lists.\r\n */\r\nclass DraftBullet extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.style = this.getStyle();\r\n    this.bullet = this.getBullet();\r\n  }\r\n\r\n  getStyle = () => {\r\n    const { contentState, entityKey } = this.props;\r\n    return contentState.getEntity(entityKey).getData().style;\r\n  }\r\n\r\n  getBullet = () => {\r\n    const { children } = this.props;\r\n    const rawSymbol = children[0].props.text;\r\n    let bullet = \"\";\r\n\r\n    if (rawSymbol.indexOf(\"num-\") === 0) {\r\n      // ordered list\r\n      [, bullet] = rawSymbol.split(\"-\");\r\n    } else {\r\n      // unordered list\r\n      switch (rawSymbol) {\r\n        case \"a\": bullet = String.fromCharCode(\"0x25CF\"); break;// black circle\r\n        case \"b\": bullet = String.fromCharCode(\"0x25CB\"); break;// white circle\r\n        case \"c\": bullet = String.fromCharCode(\"0x25A0\"); break;// black square\r\n        case \"d\": bullet = String.fromCharCode(\"0x25A1\"); break;// white square\r\n        default: bullet = String.fromCharCode(\"0x25CF\"); break;// black circle\r\n      }\r\n    }\r\n\r\n    return bullet;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <span suppressContentEditableWarning=\"true\" className=\"cbaListBullet\" style={this.style} contentEditable=\"false\">\r\n        {this.bullet}\r\n      </span>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst findBulletEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n    (character) => {\r\n      const entityKey = character.getEntity();\r\n      return (\r\n        entityKey !== null && contentState.getEntity(entityKey).getType() === 'LIST-BULLET'\r\n      );\r\n    },\r\n    callback\r\n  );\r\n}\r\n\r\nDraftBullet.propTypes = {\r\n  contentState: PropTypes.object.isRequired,\r\n  entityKey: PropTypes.string.isRequired,\r\n  children: PropTypes.array.isRequired\r\n}\r\n\r\nexport { findBulletEntities, DraftBullet };\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class MathJaxTranspiler extends Component {\r\n\r\n  componentDidMount() {\r\n    if (!window.MathJax) {\r\n      this.interval = window.setInterval(() => {\r\n        const { MathJax } = window;\r\n\r\n        if (MathJax) {\r\n          this.setState(prevState => ({\r\n            // eslint-disable-next-line react/no-unused-state\r\n            update: prevState + 1\r\n          }));\r\n\r\n          clearInterval(this.interval);\r\n        }\r\n      }, 100);\r\n\r\n      // Timeout for clearing interval if no library is found\r\n      window.setTimeout(() => {\r\n        if (!window.MathJax) {\r\n          console.error(\"MathJax not found, check item dependency library\");\r\n          clearInterval(this.interval);\r\n        }\r\n      }, 10000)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const { MathJax } = window;\r\n    const { tex } = this.props;\r\n\r\n    if (!MathJax) {\r\n      return <span>MathJax Not loaded</span>\r\n    }\r\n\r\n    MathJax.texReset();\r\n\r\n    const result = MathJax.tex2chtml(tex);\r\n\r\n    MathJax.startup.document.clear();\r\n    MathJax.startup.document.updateDocument();\r\n\r\n    return (\r\n      // eslint-disable-next-line react/no-danger\r\n      <span dangerouslySetInnerHTML={{\r\n        __html: result.innerHTML\r\n      }}\r\n      />\r\n    )\r\n  }\r\n\r\n}\r\n\r\nMathJaxTranspiler.propTypes = {\r\n  tex: PropTypes.string.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MathJaxTranspiler from '../MathJax/MathJaxTranspiler'\r\n/**\r\n * A react component used by the CbaRichTextField to display Mathematical expressions via MathJax.\r\n */\r\nclass MathJaxEntity extends React.Component {\r\n\r\n  getPropertyData = (property) => {\r\n    const { contentState, entityKey } = this.props;\r\n    return contentState.getEntity(entityKey).getData()[property];\r\n  }\r\n\r\n  render() {\r\n    const fontSize = this.getPropertyData(\"fontSize\");\r\n    const color = this.getPropertyData(\"fontColor\");\r\n\r\n    const style = {\r\n      fontSize,\r\n      color\r\n    }\r\n\r\n    return (\r\n      <span style={style} suppressContentEditableWarning=\"true\" contentEditable=\"false\">\r\n        <MathJaxTranspiler tex={this.getPropertyData(\"tex\")} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst findMathJaxEntities = (contentBlock, callback, contentState) => {\r\n  contentBlock.findEntityRanges(\r\n    (character) => {\r\n      const entityKey = character.getEntity();\r\n      return (\r\n        entityKey !== null && contentState.getEntity(entityKey).getType() === 'TEX'\r\n      );\r\n    },\r\n    callback\r\n  );\r\n}\r\n\r\nMathJaxEntity.propTypes = {\r\n  contentState: PropTypes.object.isRequired,\r\n  entityKey: PropTypes.string.isRequired,\r\n}\r\n\r\nexport { findMathJaxEntities, MathJaxEntity };\r\n","import React from 'react';\r\nimport { EditorState, RichUtils, convertFromRaw, convertToRaw, DefaultDraftBlockRenderMap } from 'draft-js';\r\nimport Editor from 'draft-js-plugins-editor';\r\nimport PropTypes from 'prop-types';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport './css/Draft.css';\r\nimport './css/plugin.css';\r\nimport './css/custom.css';\r\nimport './css/repeatable.css';\r\n\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport SelectGroupHelper from '../SelectGroupHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport TermEvaluator from '../../eval/TermEvaluator';\r\nimport Utils from '../../utils/Utils';\r\nimport SelectionHelper from './SelectionHelper';\r\nimport PositionCalculationHelper from './PositionCalculationHelper';\r\nimport EditorStateHelper from './EditorStateHelper';\r\nimport { DraftLink, findLinkEntities } from './DraftLink';\r\nimport { Media } from './Media'\r\nimport { findBulletEntities, DraftBullet } from './DraftBullet'\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport TableHelper from '../table/TableHelper';\r\nimport { findMathJaxEntities, MathJaxEntity } from './MathJaxEntity';\r\n\r\n/**\r\n * A display component for rich text content.\r\n * \r\n * We use this to implement the HTMLTextField and the RichText known on the Java side.\r\n * On the long run we hope to merge HTMLTextField and RichText on the Java side.\r\n * \r\n * The component supports 'highlighting', 'embedded links' and 'content modifiers'.\r\n * \r\n * An 'embedded link' is a selectable section of the text that will trigger a page switch on selection.\r\n * \r\n * There are two types of 'content modifiers': 'EvaluatedInject' and 'DynamicFragment'. \r\n * An 'Evaluated Inject' is a text snippet that we calculate at runtime as result of an operator call\r\n * and insert into the displayed text. \r\n * A 'Dynamic Fragment' is a text snippet with a 'selected' status flag and a User Defined ID. We will display \r\n * the text snippet as long as it is in 'selected'==true state. \r\n * \r\n * The 'content modifiers' and the 'embedded links' have their own index paths: \r\n *  - embedded links append a pseudo index 1 and their own index in the list of content modifiers to the component's path, e.g.:\r\n *     <rich text field index path>/index=1/index=3 for the fourth content modifier of the component\r\n *  - content modifiers append a pseudo index 2 and their own index in the list of content modifiers to the component's path, e.g.:\r\n *     <rich text field index path>/index=2/index=7 for the eighth content modifier of the component\r\n * Lookups for these index paths in the component directory will return the rich text field component, i.e. re-rendering calls on \r\n * these index paths are delegated to the rich text field component.\r\n * The page configurations manager will return configuration data for the embedded link paths (but not for the content modifiers)\r\n * for use by the DraftLink components. \r\n * The component state manager will return state data for the embedded link index paths and the content modifier index paths. \r\n * \r\n */\r\nexport default class CbaRichTextField extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.lastUserEvent = Utils.isTouchDevice() ? \"touch\" : \"mouse\";\r\n  }\r\n\r\n\r\n  // ------------ lifecycle methods ---------------------------------------------------------------------------\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n    // In addition to registering myself I register myself as component to be re-rendered in lieu of all my content modifiers:\r\n    const { config, path, row, column, runtime } = this.props;\r\n    const editorComponent = this;\r\n    CbaRichTextField.forEachContentModifier(config, path, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.registerComponent(modifierPath, editorComponent);\r\n    });\r\n\r\n    // register for deselect event\r\n    if (row !== undefined && column !== undefined) {\r\n      runtime.eventEmitter.addListener(`${TableHelper.buildTablePath(path)}-removeLastSelection-[${row},${column}]`, this.onRemoveLastSelection.bind(this));\r\n    }\r\n\r\n    // register for flash text events\r\n    if (config.fromSecond !== undefined) {\r\n      runtime.eventEmitter.addListener(\"currentTimeUpdate\", this.onCurrentTimeUpdate.bind(this));\r\n      runtime.eventEmitter.addListener(\"clearFlashTexts\", this.onClearFlashTexts.bind(this));\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n\r\n    // Deregister myself as component to be re-rendered in lieu of all my content modifiers:\r\n    const { config, path } = this.props;\r\n    const editorComponent = this;\r\n    CbaRichTextField.forEachContentModifier(config, path, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.deregisterComponent(modifierPath);\r\n    });\r\n\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n\r\n    // In addition to my own registration I update the registration of all my content modifiers:\r\n    const editorComponent = this;\r\n\r\n    const { config: oldConfig, path: oldPath } = this.props;\r\n    CbaRichTextField.forEachContentModifier(oldConfig, oldPath, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.deregisterComponent(modifierPath);\r\n    });\r\n\r\n    const { config: newConfig, path: newPath } = nextProps;\r\n    CbaRichTextField.forEachContentModifier(newConfig, newPath, (modifier, modifierPath) => {\r\n      editorComponent.props.runtime.componentDirectory.registerComponent(modifierPath, editorComponent);\r\n    });\r\n\r\n  }\r\n\r\n  // ------------ component state initialization ---------------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Build the initial state in the component state manager. \r\n   * \r\n   * The component state manager will call this method to initialize state for new display component instances.\r\n   */\r\n  static addAttributesToInitialState(initialState, configProps) {\r\n    const styleMap = CbaRichTextField.findStylesMapInConfig(configProps);\r\n\r\n    // deactivate deep copy in state manager since editor state cannot be cloned. \r\n    StateAttributeAccess.setDeepCopy(initialState, false);\r\n    StateAttributeAccess.setComponentClassName(initialState, \"CbaRichTextField\");\r\n\r\n    initialState.editorState = CbaRichTextField.buildInitialEditorState(configProps);\r\n\r\n    // We keep the currently 'highlighted' areas in the text as 'selections' attribute in the component state. \r\n    // (In the editor state these areas have a 'HIGHLIGHTED' style setting which is a kind of duplication of the information here.)\r\n    initialState.selections = [];\r\n\r\n    // style map is not defined for HTMLTextField without any text content -> insert default value (highlight color is never used in this case)\r\n    initialState.defaultHighlightColor = styleMap === undefined ? \"rgba(0,0,0,0)\" : styleMap.HIGHLIGHT.backgroundColor;\r\n\r\n    initialState.modifiersInEditorState = {};\r\n\r\n    // keep an unformatted representation of our text content in the component state\r\n    StateAttributeAccess.setTextValue(initialState, CbaRichTextField.calculateTextValue(initialState.editorState));\r\n\r\n    // keep highlightable flag in component state manager\r\n    StateAttributeAccess.setHighlightable(initialState, configProps.highlightText);\r\n\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Build an initial editor state for the Draft editor. \r\n   */\r\n  static buildInitialEditorState(configProps) {\r\n    const contentState = convertFromRaw(configProps.value);\r\n    return EditorState.createWithContent(contentState);\r\n  }\r\n\r\n\r\n  /**\r\n   * Add the specific pseudo index for 'embedded links' to the index path of the rich text field.  \r\n   */\r\n  static addLinkIndex(richTextFieldPageSegment) {\r\n    return IndexPathHelper.appendIndexToPageSegment(richTextFieldPageSegment, 1);\r\n  }\r\n\r\n  /**\r\n   * Add the specific pseudo index for 'content modifier children' to the index path of the rich text field.  \r\n   */\r\n  static addContentModifierIndex(richTextFieldPageSegment) {\r\n    return IndexPathHelper.appendIndexToPageSegment(richTextFieldPageSegment, 2);\r\n  }\r\n\r\n  /**\r\n   * Build an array of 'standard' configuration structures for the links defined \r\n   *  - in the editor state and\r\n   *  - in the dynamic fragment content modifiers.\r\n   * The page configurations manager expects a structure with the attributes type and config\r\n   * when it adds configuration entries for the embedded link index paths.  \r\n   */\r\n  static buildLinkConfigurationsArray(configProps) {\r\n    const result = [];\r\n    CbaRichTextField.insertLinkConfigurationsFromEntityMap(configProps.value.entityMap, result);\r\n    if (configProps.contentModifiers !== undefined) {\r\n      configProps.contentModifiers.forEach((modifier) => {\r\n        if (modifier.type === 'DynamicFragment') {\r\n          CbaRichTextField.insertLinkConfigurationsFromEntityMap(modifier.config.entityMap, result);\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * (Internal helper) Scan the given entity map from the Draft editor state and create an entry in the given \r\n   * result array for each entity of type 'LINK':\r\n   *  - the key in the array is the entity's data.id attribute -> the data.id should be a number!\r\n   *  - the value in the array is the usual config structure expected by the configurations manager: \r\n   *     { type: 'RichTextEmbeddedLink', config: { ... } }\r\n   */\r\n  static insertLinkConfigurationsFromEntityMap(entityMap, resultArray) {\r\n    Object.values(entityMap).forEach((entity) => {\r\n      if (entity.type === 'LINK') {\r\n        resultArray[entity.data.id] = {\r\n          type: 'RichTextEmbeddedLink',\r\n          config: {\r\n            state: {\r\n              disabled: false,\r\n              selected: false,\r\n              hidden: false\r\n            },\r\n          }\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Internal helper. Transforms from an 'HIGHLIGHT key to it's value\r\n   * \r\n   * HIGHLIGHT_r_g_b_a -> rgba(r,g,b,a)\r\n   * \r\n   * @param {String} key Highlight Key\r\n   * @param {String} path RichTextComponent Path \r\n   * @param {Object} runtime runtime object\r\n   * @returns {String} value\r\n   */\r\n  static convertHighlightKeyToValue(key, path, runtime) {\r\n    const defaultHighlightColor = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractDefaultHighlightColor, path, runtime);\r\n\r\n    const rgba = key.split('_').slice(1);\r\n    const convertedValue = `rgba(${rgba.join(',')})`\r\n\r\n    return key !== \"HIGHLIGHT\" ? convertedValue : defaultHighlightColor.replace(/\\s+/g, '');\r\n  }\r\n\r\n  /**\r\n   * Internal helper. Transforms from an rgba value to the HIGHLIGHT key\r\n   * \r\n   * rgba(r,g,b,a) -> HIGHLIGHT_r_g_b_a\r\n   * \r\n   * @param {String} value \r\n   * @returns {String} key\r\n   */\r\n  static convertHighlightValueToKey(value) {\r\n    const rgba = value.substring(5, value.length - 1)\r\n      .replace(/\\s+/g, '')\r\n      .split(',');\r\n\r\n    return `HIGHLIGHT_${rgba.join('_')}`;\r\n  }\r\n\r\n  // ----------- snapshot related ------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Transform the component state as stored in the component state manager into its snapshot representation.\r\n   * \r\n   * The component state manager will call this method when creating a snapshot.\r\n   */\r\n  static toSnapshot(indexPath, state) {\r\n    const result = {};\r\n    Object.entries(state).forEach((entry) => {\r\n      const [key, value] = entry;\r\n      switch (key) {\r\n        case 'editorState':\r\n          result[key] = CbaRichTextField.toSnapshotForEditorState(value);\r\n          break;\r\n        default:\r\n          result[key] = StateManagerHelper.deepCopy(value);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Transform the state in snapshot representation to the format used in the component state manager.\r\n   * \r\n   * The component state manager will call this method when preloading state from a snapshot.\r\n   */\r\n  static fromSnapshot(indexPath, state) {\r\n    const result = {};\r\n    Object.entries(state).forEach((entry) => {\r\n      const [key, value] = entry;\r\n      switch (key) {\r\n        case 'editorState':\r\n          result[key] = CbaRichTextField.fromSnapshotForEditorState(value);\r\n          break;\r\n        default:\r\n          result[key] = StateManagerHelper.deepCopy(value);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Transform the given selections state into its snapshot representation.\r\n   */\r\n  static toSnapshotForEditorState(editorState) {\r\n    return convertToRaw(editorState.getCurrentContent());\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Transform the given snapshot representation of the editor state \r\n   * into the editorState attribute value in the state used at runtime.\r\n   */\r\n  static fromSnapshotForEditorState(editorState) {\r\n    return EditorState.createWithContent(convertFromRaw(editorState));\r\n  }\r\n\r\n\r\n  // --------- table related------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * This will automatically deselect the field.\r\n   */\r\n  onRemoveLastSelection() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n\r\n    this.updateStateAndTriggerRendering(pathState, false);\r\n  }\r\n\r\n  // ----------- text flash related -------------------------------\r\n  onCurrentTimeUpdate(currentTime) {\r\n    const { config, runtime } = this.props;\r\n    const { fromSecond, toSecond } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    if (currentTime >= fromSecond && currentTime <= toSecond) {\r\n      runtime.eventEmitter.emit(\"clearFlashTexts\");\r\n      StateAttributeAccess.setHidden(pathState, false);\r\n    } else {\r\n      StateAttributeAccess.setHidden(pathState, true);\r\n    }\r\n\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onClearFlashTexts() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setHidden(pathState, true);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  // ----------- public interaction API ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Trigger a re-render after a change in the highlight background color.\r\n   * \r\n   * Due to a bug Draft will not re-render if the only change is a modification of the styles map.\r\n   * see: https://github.com/facebook/draft-js/issues/999 \r\n   * \r\n   * We 'redefine' the current selection without changing its values to force the re-render.\r\n   */\r\n  highlightColorChanged() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const editorState = StateAttributeAccess.extractEditorState(pathState);\r\n    const finalEditorState = EditorState.forceSelection(editorState, editorState.getSelection());\r\n    this.saveEditorStateInPathState(finalEditorState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * Grab the focus.\r\n   */\r\n  focus = () => {\r\n    this.editor.focus();\r\n  }\r\n\r\n\r\n  // --------------- our own event handlers -------------------------------------------------------------------------\r\n\r\n  onClickHandler = (event) => {\r\n    const { runtime, config, path, onParentClick, checkSelectable } = this.props;\r\n\r\n    // Silently forget event if we are child of a CbaTableCell that is not selectable currenty:\r\n    if (checkSelectable !== undefined && !checkSelectable()) {\r\n      CommonActionsHelper.stopEventPropagation(event);\r\n      return;\r\n    }\r\n\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\r\n    const { fromSecond, toSecond } = config;\r\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n    if (fromSecond !== undefined) {\r\n      const traceDetails = {\r\n        from: fromSecond,\r\n        to: toSecond\r\n      }\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, traceDetails, event, runtime);\r\n    } else {\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path,\r\n        CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\r\n        event, runtime);\r\n    }\r\n\r\n    // Flip the selected state: 'yes' <-> 'no'\r\n    if (config.toggleType !== 'none') {\r\n      this.updateStateAndTriggerRendering(pathState);\r\n    }\r\n\r\n    // Call parent click handler if available, needed for standard table single select feature\r\n    if (onParentClick !== undefined) {\r\n      onParentClick(event);\r\n    }\r\n\r\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\r\n\r\n    // send statemachine event depending on state:\r\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\r\n\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Update our component state in the components state manager and trigger rendering.\r\n   */\r\n  updateStateAndTriggerRendering(pathState, isRemoveSelection) {\r\n    const { runtime, path } = this.props;\r\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\r\n    StateAttributeAccess.setVisited(pathState, true);\r\n\r\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\r\n  }\r\n\r\n  debouncedDoHighlightActions = debounce((editorState) => {\r\n    this.doHighlightActions(editorState);\r\n  }, 2000)\r\n\r\n\r\n  /**\r\n   * The Draft editor will call this method when the editor state\r\n   * is modified due to a user interaction in the editor.\r\n   * \r\n   * We should make sure that we update our structures to make sure that\r\n   * we will provide the modified editor state at the next \r\n   * render call to the Draft editor.\r\n   */\r\n  onChange = (editorState) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldEditorState = StateAttributeAccess.extractEditorState(pathState);\r\n    const oldSelections = StateAttributeAccess.extractSelections(pathState);\r\n    const highlightActive = StateAttributeAccess.extractHighlightable(pathState);\r\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\r\n\r\n    const { config, runtime } = this.props;\r\n    const blockKeysList = SelectionHelper.getListOfBlockKeysInBlockOrder(config.value.blocks);\r\n    let hasContentChanges = false;\r\n\r\n    // ignore content state modifications\r\n    if (!SelectionHelper.contentStateEqual(oldEditorState, editorState)) {\r\n      hasContentChanges = true;\r\n      // block modifications of the editor's text content: do not persist onChange editor state.\r\n    } else {\r\n      this.saveEditorStateInPathState(editorState);\r\n    }\r\n\r\n    // Do highlight actions if not disabled and no content changes\r\n    if (!hasContentChanges && !isDisabled && highlightActive) {\r\n      if (SelectionHelper.isSelection(editorState)) {\r\n        if (this.lastUserEvent === \"mouse\") {\r\n          this.doHighlightActions(editorState);\r\n        } else {\r\n          this.debouncedDoHighlightActions(editorState)\r\n        }\r\n      } else {\r\n        const clickedSelection = SelectionHelper.getSelectionHitByClick(editorState.getSelection(), oldSelections, blockKeysList);\r\n        if (clickedSelection !== undefined) {\r\n          editorState = this.removeClickedSelection(clickedSelection, editorState, oldSelections);\r\n        }\r\n      }\r\n    } else if (this.editor) {\r\n      // we are not in highlighting mode -> selections in our component state will not change\r\n      this.editor.blur();\r\n    }\r\n\r\n    if (this.lastUserEvent === \"touch\" && !hasContentChanges) {\r\n      this.saveEditorStateInPathState(editorState);\r\n    }\r\n\r\n    runtime.replayStepMonitor.incrementReplayStep();\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Combine the current selection in the editor state with our catalog of highlight selections in the component state.\r\n   */\r\n  doHighlightActions = (editorState) => {\r\n    const { config } = this.props;\r\n    const blockKeysList = SelectionHelper.getListOfBlockKeysInBlockOrder(config.value.blocks);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const currentHighlightKey = this.getHighlightColorKey(pathState);\r\n\r\n    this.processHighlightClick(editorState, blockKeysList, currentHighlightKey);\r\n\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * Remove the clicked selection from the editor state and from our selections\r\n   * Save the result in the pathState\r\n   * @param {*} clickedSelection \r\n   * @param {*} editorState \r\n   * @param {*} oldSelections \r\n   */\r\n  removeClickedSelection = (clickedSelection, editorState, oldSelections) => {\r\n    const { startKey, startOffset, endKey, endOffset, highlightKey } = clickedSelection;\r\n    let newEditorState = EditorStateHelper.forceSelection(editorState, startKey, startOffset, endKey, endOffset);\r\n    newEditorState = RichUtils.toggleInlineStyle(newEditorState, highlightKey);\r\n    newEditorState = EditorState.moveFocusToEnd(newEditorState);\r\n    const selections = SelectionHelper.removeSelectionFromSelectionsArray(oldSelections, clickedSelection);\r\n    this.saveEditorStateInPathState(newEditorState);\r\n    this.saveSelectionsInPathState(selections);\r\n    this.triggerHighlightEvent();\r\n\r\n    return newEditorState;\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Update the highlight style settings in the editor state to include the new selected area \r\n   * and add the new selected area to our list of highlight selections in the component state.\r\n   */\r\n  processHighlightClick = (currentEditorState, blockKeysList, currentHighlightKey) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldSelections = StateAttributeAccess.extractSelections(pathState);\r\n    const currentSelection = SelectionHelper.getSelection(currentEditorState, currentHighlightKey, blockKeysList);\r\n\r\n    // Clear old highlights from curently selected area.\r\n    const toggleOffOperationsList = [];\r\n\r\n    oldSelections.forEach((oldSelection) => {\r\n      const intersection = SelectionHelper.getIntersect(currentSelection, oldSelection, blockKeysList);\r\n      switch (intersection.type) {\r\n        case \"left\":\r\n          toggleOffOperationsList\r\n            .push(SelectionHelper.buildSelection(\r\n              oldSelection.startKey, currentSelection.endKey, oldSelection.startOffset,\r\n              currentSelection.endOffset, oldSelection.highlightKey\r\n            ));\r\n          break;\r\n        case \"right\":\r\n          toggleOffOperationsList\r\n            .push(SelectionHelper.buildSelection(\r\n              currentSelection.startKey, oldSelection.endKey, currentSelection.startOffset,\r\n              oldSelection.endOffset, oldSelection.highlightKey\r\n            ));\r\n          break;\r\n        case \"inside\":\r\n          toggleOffOperationsList\r\n            .push(Object.assign({}, currentSelection, {\r\n              highlightKey: oldSelection.highlightKey\r\n            }));\r\n          break;\r\n        case \"cover\":\r\n          toggleOffOperationsList\r\n            .push(Object.assign({}, oldSelection));\r\n          break;\r\n        case \"none\":\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    toggleOffOperationsList.forEach((operation) => {\r\n      currentEditorState = EditorStateHelper.toggleEditorStateStyleOnSelection(currentEditorState, operation);\r\n    });\r\n\r\n    // Apply the HIGHLIGHT style to the current selection -> makes newly selected area part of the currently highlighted areas.\r\n    currentEditorState = EditorStateHelper.toggleEditorStateStyleOnSelection(currentEditorState, currentSelection);\r\n\r\n    // Deduce the new highlighted areas by inspecting the HIGHLIGHT style setting in the toggled editor state.\r\n    const selections = SelectionHelper.calculateSelectionsArray(currentEditorState, blockKeysList);\r\n\r\n    // Move the focus to the end \r\n    currentEditorState = EditorState.moveFocusToEnd(currentEditorState);\r\n\r\n    // update the editor state and the highlighted selections in our component state \r\n    this.saveEditorStateInPathState(currentEditorState);\r\n    this.saveSelectionsInPathState(selections);\r\n    this.triggerHighlightEvent();\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Trigger the optional highlight click event on the current state machine. \r\n   */\r\n  triggerHighlightEvent = () => {\r\n    const { config, runtime } = this.props;\r\n    const { highlightChangeEvent } = config;\r\n    if (highlightChangeEvent !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(highlightChangeEvent);\r\n    }\r\n  }\r\n\r\n\r\n  // --------------- content modifier activities -------------------------------------------------------------------------\r\n\r\n  /**\r\n   * (Internal helper) Apply the modifications to the editor's content defined by our content modifiers.\r\n   * \r\n   * The method returns the modified editor state and a new modifier-effects-in-editor-state extract.\r\n   * \r\n   * The caller should use the new editor state for rendering the Draft editor. \r\n   * The caller should store both structures in the rich text field's component state in the component state manager\r\n   * and provide these to a future applyContentModifiers call. \r\n   * \r\n   * The concept behind this is:\r\n   * We keep an extract of the modifications applied to the edtitor's content by the content modifiers.\r\n   * This extract is stored in the modifiersInEditorState attribute of the rich text field's state.\r\n   * We use this extract to decide whether we need to update the editor state due to changes in the content modifiers.\r\n   * Example: \r\n   *  - Dynamic fragments can be 'activated' by setting their 'selected' attribute in their component manager state (e.g. by the TermEvaluator). \r\n   *    When we render the rich text field we 'apply' the content modifiers to the editor's state. There we check whether the \r\n   *    current 'selected' setting in the component state of the modifier matches the current modification implanted in the editor's state by comparing\r\n   *    with the 'active' attribute in the extract.\r\n   * Since modifying the editor state might destroy the current highlight selections we try to avoid modifying the editor state without need.\r\n   * \r\n   * \r\n   * @param editorState: The editor state that was used for the last render. We will modify this editor state and return it at the end.\r\n   * @param modifiersInEditorState: The extract of the modifications done by the content modifiers in the given editor state. \r\n   *   We will return a new version of this extract that reflects the modifications implanted the the modified editor state. \r\n   *   We need the extract representing the modifications in the old editor state to decide whether we have to modify the editor state\r\n   *   at all.\r\n   * @param editorPath: The index path of the rich text field display component instance.\r\n   * @param propsConfig: The static 'config' structure of the rich text field diplay component.\r\n   * @param runtime: The common runtime context structure.\r\n   * \r\n   */\r\n  static applyContentModifiers(editorState, modifiersInEditorState, editorPath, propsConfig, runtime) {\r\n    const { contentModifiers } = propsConfig;\r\n\r\n    let modifiedEditorState = editorState;\r\n    const newModifiersInEditorState = StateManagerHelper.deepCopy(modifiersInEditorState);\r\n\r\n    // we need the ordering of the block keys for position comparisons:\r\n    const configBlocks = propsConfig.value.blocks;\r\n    const blockKeyToIndexMap = SelectionHelper.getBlockKeysToBlockIndexMap(SelectionHelper.getListOfBlockKeysInBlockOrder(configBlocks));\r\n\r\n    CbaRichTextField.forEachContentModifier(propsConfig, editorPath, (modifierInConfig, modifierPath, modifierParentPath) => {\r\n      const modifierState = runtime.componentStateManager.findOrBuildStateForPathId(modifierPath, runtime);\r\n      if (newModifiersInEditorState[modifierPath] === undefined) {\r\n        newModifiersInEditorState[modifierPath] = CbaRichTextField.buildNonActiveModifierInEditorState(modifierInConfig.type);\r\n      }\r\n      const actualPosition = PositionCalculationHelper.calculateActualPosition(\r\n        modifierInConfig,\r\n        configBlocks,\r\n        blockKeyToIndexMap,\r\n        contentModifiers,\r\n        newModifiersInEditorState,\r\n        modifierParentPath,\r\n        modifiedEditorState\r\n      );\r\n      const modifierInEditorState = newModifiersInEditorState[modifierPath];\r\n      let newModifierInEditorState;\r\n      switch (modifierInConfig.type) {\r\n        case 'EvaluatedInject':\r\n          [modifiedEditorState, newModifierInEditorState] = CbaRichTextField.applyEvaluatedInjectModifier(modifiedEditorState, modifierState, modifierInEditorState, modifierInConfig.config, actualPosition, runtime);\r\n          break;\r\n        case 'DynamicFragment':\r\n          [modifiedEditorState, newModifierInEditorState] = CbaRichTextField.applyDynamicFragmentModifier(modifiedEditorState, modifierState, modifierInEditorState, modifierInConfig.config, actualPosition, runtime);\r\n          break;\r\n        default:\r\n          console.error(`Unknown modifier type: ${modifierInConfig.type}`);\r\n      }\r\n      newModifiersInEditorState[modifierPath] = newModifierInEditorState;\r\n    });\r\n\r\n    return [modifiedEditorState, newModifiersInEditorState];\r\n  }\r\n\r\n\r\n  /**\r\n   * (Internal helper) Build the extract of the modifications done to the editor's content by an inactive content modifier.\r\n   */\r\n  static buildNonActiveModifierInEditorState(contentModifierType) {\r\n    return (contentModifierType === 'EvaluatedInject')\r\n      ? {\r\n        injectText: \"\"\r\n      }\r\n      : {\r\n        active: false\r\n      };\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Apply a content modifier of type 'evaluated inject' to the editor's state and calculate the new extract structure\r\n   * for the content modifier.\r\n   */\r\n  static applyEvaluatedInjectModifier(editorState, modifierState, modifierInEditorState, modifierConfig, actualPosition, runtime) {\r\n    // avoid unnecessary modification of editor state\r\n    const currentInjectText = modifierState.selected === true ? `${TermEvaluator.evaluateTerm(modifierConfig.insertString, runtime, [], 'inject')}` : \"\";\r\n    const oldInjectText = modifierInEditorState.injectText;\r\n    if (oldInjectText === currentInjectText) {\r\n      return [editorState, modifierInEditorState];\r\n    }\r\n\r\n    const newModifierInEditorState = StateManagerHelper.deepCopy(modifierInEditorState);\r\n    newModifierInEditorState.injectText = currentInjectText;\r\n\r\n    // TODO: second step improvement: if a modification is necessary do a best effort to modify the selections too\r\n    let modifiedEditorState = EditorStateHelper.replaceTextInBlock(editorState,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset + oldInjectText.length,\r\n      currentInjectText);\r\n\r\n    modifiedEditorState = EditorStateHelper.applyInlineStyles(modifiedEditorState,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset + currentInjectText.length,\r\n      modifierConfig.inlineStyles);\r\n\r\n    modifiedEditorState = EditorStateHelper.applyEntities(modifiedEditorState,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset,\r\n      actualPosition.blockKey,\r\n      actualPosition.offset + currentInjectText.length,\r\n      modifierConfig.entities);\r\n\r\n    return [modifiedEditorState, newModifierInEditorState];\r\n  }\r\n\r\n  /**\r\n   * (Internal helper) Apply a content modifier of type 'dynamic fragment' to the editor's state and calculate the new extract structure\r\n   * for the content modifier.\r\n   */\r\n  static applyDynamicFragmentModifier(editorState, modifierState, modifierInEditorState, modifierConfig, actualPosition, runtime) {\r\n    // avoid unnecessary modification of editor state\r\n    if (modifierState.selected === modifierInEditorState.active) {\r\n      return [editorState, modifierInEditorState];\r\n    }\r\n\r\n    const newModifierInEditorState = StateManagerHelper.deepCopy(modifierInEditorState);\r\n    newModifierInEditorState.active = modifierState.selected;\r\n\r\n    // TODO: second step improvement: if a modification is necessary do a best effort to modify the selections too\r\n    let modifiedEditorState;\r\n    if (modifierState.selected === true) {\r\n      modifiedEditorState = EditorStateHelper.replaceWithBlocks(editorState,\r\n        actualPosition.blockKey,\r\n        actualPosition.offset,\r\n        actualPosition.blockKey,\r\n        actualPosition.offset,\r\n        modifierConfig.blocks,\r\n        modifierConfig.entityMap);\r\n    } else {\r\n      const numberInjectedBlocks = modifierConfig.blocks.length - 1;\r\n\r\n      modifiedEditorState = EditorStateHelper.removeBlocks(editorState,\r\n        actualPosition.blockKey,\r\n        actualPosition.offset,\r\n        PositionCalculationHelper.calculateBlockKey(actualPosition.blockKey, numberInjectedBlocks, editorState),\r\n        (numberInjectedBlocks === 0 ? actualPosition.offset : 0) + modifierConfig.blocks[numberInjectedBlocks].text.length);\r\n    }\r\n\r\n    return [modifiedEditorState, newModifierInEditorState];\r\n  }\r\n\r\n\r\n  // ------------ common helper methods ---------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Run in a loop through all content modifiers specified in our static config structure and execute the given callback for each.\r\n   * \r\n   * We will provide the following parameters to the callback\r\n   *  - modifier: The content modifier configuration from the 'contentModifiers' array in the rich text field configuration.\r\n   *  - indexPathOfModifier: The index path of the content modifier \r\n   *    (i.e. the index path of the rich text field extended with a pseudo index to discern between content-modifier and embedded-link children and the index of the content modifier itself.)\r\n   *  - indexPathOfModifierParent: The index path of the node containing all content-modifier children. \r\n   *    (i.e. the index path of the rich text field extended with a pseudo index to discern between content-modifier and embedded-link children.)\r\n   * \r\n   * @param {object} propsConfig The config structure of the rich text field that contains the content modifier definitions in the 'contentModifiers' attribute.\r\n   * @param {String} editorPath The index path of the rich text field that contains the content modifiers.\r\n   * @param { callback(modifier, indexPathOfModifier) } doForEach The method to call for each content modifier. \r\n   */\r\n  static forEachContentModifier(propsConfig, editorPath, doForEach) {\r\n    const { contentModifiers } = propsConfig;\r\n    if (contentModifiers !== undefined) {\r\n      const modifierParentPath = CbaRichTextField.addContentModifierIndex(editorPath);\r\n      contentModifiers.forEach((modifier, index, all) => {\r\n        const modifierPath = IndexPathHelper.appendIndexToPageSegment(modifierParentPath, index);\r\n        doForEach(modifier, modifierPath, modifierParentPath);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract an unformatted plain text representation from our editor state.\r\n   */\r\n  static calculateTextValue(editorState) {\r\n    // stripping white space character, including space, tab, form feed, line feed.\r\n    // The content is stripped to the plain text (i.e. all formatting is stripped, newlines are replaced by blanks).\r\n    return editorState.getCurrentContent().getPlainText('').replace(/\\s/g, ' ');\r\n  }\r\n\r\n  /**\r\n   * Save the given content modifiers state in our component state object in the components state manager.\r\n   */\r\n  saveModifiersStateInPathState = (modifiersInEditorState) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setModifiersInEditorState(pathState, modifiersInEditorState)\r\n    const { runtime, path } = this.props;\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Save the given Draft editor state in our component state object in the components state manager.\r\n   * We also keep an unformatted plain text representation of our current editor's text content in our component state object.\r\n   */\r\n  saveEditorStateInPathState = (editorState) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setEditorState(pathState, editorState);\r\n    StateAttributeAccess.setTextValue(pathState, CbaRichTextField.calculateTextValue(editorState));\r\n    const { runtime, path } = this.props;\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Save the given selections in our component state object in the components state manager\r\n   * and create a trace log entry.\r\n   */\r\n  saveSelectionsInPathState = (newSelections) => {\r\n    const { runtime, path } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const selections = StateAttributeAccess.extractSelections(pathState);\r\n\r\n    CbaRichTextField.traceHighlightChange(path, selections, newSelections, runtime);\r\n\r\n    StateAttributeAccess.setSelections(pathState, newSelections);\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Trace a change in the highlight selections.\r\n   */\r\n  static traceHighlightChange(path, oldSelectionsRaw, newSelectionsRaw, runtime) {\r\n    const oldSelections = SelectionHelper.TransformSelectionsToTraceSelectionsDTO(oldSelectionsRaw, path, runtime);\r\n    const newSelections = SelectionHelper.TransformSelectionsToTraceSelectionsDTO(newSelectionsRaw, path, runtime);\r\n    CommonActionsHelper.traceUserInteraction('RichTextHighlight', path,\r\n      {\r\n        oldSelections,\r\n        newSelections\r\n      },\r\n      undefined, undefined, runtime);\r\n  }\r\n\r\n  // ------------ rendering ---------------------------------------------------------------------------------------\r\n\r\n  myBlockStyleFn = (contentBlock) => {\r\n    const type = contentBlock.getType();\r\n    if (type.substr(0, 3) === 'cba') {\r\n      return type.replace(/_/g, \" \");\r\n    } else {\r\n      if (type === 'atomic') {\r\n        return 'cbaImageLeft'\r\n      }\r\n      if (type === 'atomic_rtl') {\r\n        return 'cbaImageRight'\r\n      }\r\n      if (type === 'empty_block') {\r\n        return 'cbaClearImage'\r\n      }\r\n\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  mediaBlockRenderer = (block) => {\r\n    const { runtime } = this.props;\r\n    if (block.getType() === 'atomic' || block.getType() === 'atomic_rtl') {\r\n      return {\r\n        component: Media(runtime),\r\n        editable: false,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Calculate the styles map to use for rendering.\r\n   * \r\n   * We start with the styles map from the fixed component configuration \r\n   * and inject the current highlight background color setting from the task state.\r\n   */\r\n  getStylesMap = () => {\r\n    const { config, runtime } = this.props;\r\n    const { highlightColors } = runtime.taskManager.getTopLevelConfiguration();\r\n    const originalStylesMap = CbaRichTextField.findStylesMapInConfig(config);\r\n\r\n    const highlightStyleMap = highlightColors.reduce((accum, rgbaColor) => {\r\n      const rgbaKey = CbaRichTextField.convertHighlightValueToKey(rgbaColor);\r\n      accum[rgbaKey] = {\r\n        backgroundColor: rgbaColor\r\n      };\r\n      return accum;\r\n    }, {});\r\n\r\n    return Object.assign({}, originalStylesMap, highlightStyleMap);\r\n  }\r\n\r\n  /**\r\n   * The generator for the RichTextField puts the styles map into the value attribute itself.\r\n   * Our test items and the generator for the HTMLTextField put the styles map besides the value attribute.\r\n   * On the long run want to have it besides the value attribute since the value attribute is used by the Editor component.\r\n   * \r\n   * This method finds the style map in both places.\r\n   * \r\n   * @param {*} config The config structure for the component given in the page description.\r\n   */\r\n  static findStylesMapInConfig(config) {\r\n    return config.stylesMap === undefined ? config.value.stylesMap : config.stylesMap;\r\n  }\r\n\r\n  /**\r\n   * Get the current highlight color. \r\n   * \r\n   * Precedence: \r\n   *  - current task state setting\r\n   *  - our static config setting\r\n   *  - undefined\r\n   */\r\n  getHighlightColor = (pathState) => {\r\n    const { runtime, config } = this.props;\r\n    const highlightable = StateAttributeAccess.extractHighlightable(pathState);\r\n    if (!highlightable) return undefined;\r\n    return (\r\n      runtime.taskManager.getTopLevelConfiguration().itemHighlightColor\r\n      || config.stylesMap.HIGHLIGHT.backgroundColor\r\n      || undefined);\r\n  }\r\n\r\n  /**\r\n   * Get the current highlight color. \r\n   * \r\n   */\r\n  getHighlightColorKey = (pathState) => {\r\n    const currentColor = this.getHighlightColor(pathState);\r\n    const currentColorKey = CbaRichTextField.convertHighlightValueToKey(currentColor);\r\n    const defaultHighlightKey = \"HIGHLIGHT\";\r\n    const styleMap = this.getStylesMap();\r\n\r\n    return styleMap[currentColorKey] ? currentColorKey : defaultHighlightKey;\r\n  }\r\n\r\n  /**\r\n   * Generate a style tag to put into our top level div tag.\r\n   * \r\n   * This is the only way we found to inject a ::selection pseudo selector.\r\n   */\r\n  generateSelectionStyle = (isHighlightActive, highlightColor, wrapperId, isDisabled) => {\r\n    const selectionColor = isHighlightActive && !isDisabled ? highlightColor : \"transparent\";\r\n\r\n    return (\r\n      /**\r\n       * Handles selection color change #5339\r\n       * Handles caret-color transparent when highlight is not active #5489\r\n       * Handles isDisabled flag inheriting color #5427\r\n       */\r\n      // eslint-disable-next-line react/no-danger\r\n      <style dangerouslySetInnerHTML={\r\n        {\r\n          __html: `\r\n            #${wrapperId} .DraftEditor-root span::selection  { background-color: ${selectionColor}; }\r\n            #${wrapperId} .DraftEditor-root span::-moz-selection  { background-color: ${selectionColor}; }\r\n            ${isHighlightActive ? \"\" : `#${wrapperId}{ caret-color: transparent }`}\r\n            ${isDisabled ? `#${wrapperId} span { color: inherit!important; }` : \"\"}\r\n            ${isDisabled ? `#${wrapperId} .cbaImageRight, #${wrapperId} .cbaImageLeft { opacity: 0.4 }` : \"\"}\r\n          `\r\n        }\r\n      }\r\n      />\r\n    );\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      this.onClickHandler(event);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { runtime, path, config, orientation } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const highlightColor = this.getHighlightColor(pathState);\r\n    const highlightActive = StateAttributeAccess.extractHighlightable(pathState);\r\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\r\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\r\n    const wrapperId = IndexPathHelper.getValidCssIdFromPath(path);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\r\n    if (config.toggleType === \"upDown\") {\r\n      CommonConfigHelper.setStyleAttribute(style, \"borderStyle\", selectedState ? \"inset\" : \"outset\");\r\n    }\r\n\r\n    const styleMap = this.getStylesMap();\r\n\r\n    const oldEditorState = StateAttributeAccess.extractEditorState(pathState);\r\n    const modifiersInEditorState = StateAttributeAccess.extractModifiersInEditorState(pathState);\r\n\r\n    const [editorState, newModifiersInEditorState] = CbaRichTextField.applyContentModifiers(oldEditorState, modifiersInEditorState, path, config, runtime);\r\n\r\n    this.saveEditorStateInPathState(editorState);\r\n    this.saveModifiersStateInPathState(newModifiersInEditorState);\r\n\r\n    const linkReceiver = CommonActionsHelper.getDefaultLinkReceiver(this);\r\n    const customDecorators = [\r\n      {\r\n        strategy: findLinkEntities,\r\n        component: DraftLink,\r\n        props: {\r\n          linkReceiver,\r\n          parentPath: CbaRichTextField.addLinkIndex(path),\r\n          runtime,\r\n          tabIndex: config.tabIndex,\r\n          fullRichTextPath: path\r\n        }\r\n      },\r\n      {\r\n        strategy: findBulletEntities,\r\n        component: DraftBullet\r\n      },\r\n      {\r\n        strategy: findMathJaxEntities,\r\n        component: MathJaxEntity\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <div\r\n        id={wrapperId}\r\n        style={style}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n        data-cba-id={config.pageEditId}\r\n        onClick={this.onClickHandler}\r\n        onKeyDown={e => this.handleKeyDown(e)}\r\n        onMouseDown={() => { this.lastUserEvent = \"mouse\" }}\r\n        onTouchStart={() => { this.lastUserEvent = \"touch\" }}\r\n      >\r\n        {this.generateSelectionStyle(highlightActive, highlightColor, wrapperId, isDisabled)}\r\n        <Editor\r\n          runtime={runtime}\r\n          blockStyleFn={this.myBlockStyleFn}\r\n          blockRendererFn={this.mediaBlockRenderer}\r\n          blockRenderMap={DefaultDraftBlockRenderMap}\r\n          handleBeforeInput={() => 'handled'}\r\n          handlePastedText={() => true}\r\n          keyBindingFn={() => 'not-handled-command'}\r\n          customStyleMap={styleMap}\r\n          editorState={editorState}\r\n          decorators={customDecorators}\r\n          onChange={this.onChange}\r\n          plugins={this.plugins}\r\n          ref={(element) => { this.editor = element; }}\r\n          tabIndex={config.tabIndex}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaRichTextField.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\r\n      {\r\n        value: PropTypes.object.isRequired,\r\n        stylesMap: PropTypes.object,\r\n        contentModifiers: PropTypes.array,\r\n        highlightText: PropTypes.bool.isRequired,\r\n        toggleType: PropTypes.oneOf(['none', 'upDown', 'colorChange']).isRequired,\r\n        highlightChangeEvent: PropTypes.string\r\n      }\r\n    )\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n  row: PropTypes.number,\r\n  column: PropTypes.number,\r\n  onParentClick: PropTypes.func,\r\n  checkSelectable: PropTypes.func,\r\n  fromSecond: PropTypes.number,\r\n  toSecond: PropTypes.number\r\n}\r\n\r\nCbaRichTextField.defaultProps = {\r\n  row: undefined,\r\n  column: undefined,\r\n  onParentClick: undefined,\r\n  checkSelectable: undefined,\r\n  fromSecond: undefined,\r\n  toSecond: undefined\r\n}\r\n","import { convertToRaw, SelectionState } from 'draft-js';\r\nimport Utils from '../../utils/Utils';\r\nimport CbaRichTextField from './CbaRichTextField';\r\n\r\n/**\r\n * Helper mehtods used for the 'highlighting' implementation\r\n * in CbaRichTextField.\r\n */\r\nexport default class SelectionHelper {\r\n\r\n  // ------------- editor state related methods ------------------------------------------------------------\r\n\r\n  /**\r\n   * Compare the texts inside the content structures of the given Draft editor states. \r\n   * The method will not take style ranges into account (e.g. highlighted areas do not matter here).\r\n   */\r\n  static contentStateEqual = (oldEditorState, newEditorState) => {\r\n    const oldContentRaw = convertToRaw(oldEditorState.getCurrentContent());\r\n    const newContentRaw = convertToRaw(newEditorState.getCurrentContent());\r\n\r\n    for (let i = 0; i < oldContentRaw.blocks.length; i += 1) {\r\n      if (oldContentRaw.blocks[i].key !== newContentRaw.blocks[i].key || oldContentRaw.blocks[i].text !== newContentRaw.blocks[i].text) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Is there a non-empty selection active in the given Draft editor state?\r\n   */\r\n  static isSelection(editorState) {\r\n    const selection = editorState.getSelection();\r\n    const startKey = selection.getStartKey();\r\n    const endKey = selection.getEndKey();\r\n    const startOffset = selection.getStartOffset();\r\n    const endOffset = selection.getEndOffset();\r\n    return startOffset !== endOffset || startKey !== endKey;\r\n  }\r\n\r\n  static areEqual(selection1, selection2) {\r\n    return selection1.startKey === selection2.startKey\r\n      && selection1.startKey === selection2.startKey\r\n      && selection1.endKey === selection2.endKey\r\n      && selection1.startOffset === selection2.startOffset\r\n      && selection1.endOffset === selection2.endOffset\r\n      && selection1.currentHighlightKey === selection2.currentHighlightKey\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Serializes the selection from the editorState object\r\n   * \r\n   * @param {EditorState} editorState \r\n   * @param {String} highlightKey \r\n   */\r\n  static getSelection(editorState, highlightKey, blockKeysList) {\r\n    const selection = editorState.getSelection();\r\n    const editorContent = editorState.getCurrentContent();\r\n    const rawContent = convertToRaw(editorContent);\r\n\r\n    const builtSelection = SelectionHelper.buildSelection(selection.getStartKey(), selection.getEndKey(),\r\n      selection.getStartOffset(), selection.getEndOffset(), highlightKey);\r\n\r\n    // Move start of selection to begining of next available block if start of selection is beyond the end of it's block\r\n    while (rawContent.blocks[builtSelection.startKey].text.length === builtSelection.startOffset) {\r\n      const startKeyIndex = blockKeysList.indexOf(builtSelection.startKey);\r\n      if (blockKeysList[startKeyIndex + 1]) {\r\n        builtSelection.startOffset = 0;\r\n        builtSelection.startKey = blockKeysList[startKeyIndex + 1];\r\n      } else break;\r\n\r\n    }\r\n\r\n    return builtSelection;\r\n  }\r\n\r\n  static buildSelection(startKey, endKey, startOffset, endOffset, highlightKey) {\r\n    return {\r\n      startKey, endKey, startOffset, endOffset, highlightKey\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} selection1 \r\n   * @param {*} selection2 \r\n   * \r\n   * @returns {Object} interesction - intersection object\r\n   * @returns {Boolean} intersection.isIntersect - \r\n   * @returns {String} intersection.type - one of [\"left\", \"right\", \"cover\", \"inside\", \"none\"]. Specifies the raport of selection 1 with selection 2\r\n   */\r\n  static getIntersect(selection1, selection2, blockKeysList) {\r\n    let type = \"\";\r\n    let isIntersect = true;\r\n\r\n    const selection1StartKeyIndex = blockKeysList.indexOf(selection1.startKey);\r\n    const selection2StartKeyIndex = blockKeysList.indexOf(selection2.startKey);\r\n    const selection1EndKeyIndex = blockKeysList.indexOf(selection1.endKey);\r\n    const selection2EndKeyIndex = blockKeysList.indexOf(selection2.endKey);\r\n\r\n    const isSameRowStart = selection1StartKeyIndex === selection2StartKeyIndex;\r\n    const isSameRowEnd = selection1EndKeyIndex === selection2EndKeyIndex;\r\n\r\n    const isS1StartSameRowAsS2End = selection1StartKeyIndex === selection2EndKeyIndex;\r\n    const isS1EndSameRowAsS2Start = selection1EndKeyIndex === selection2StartKeyIndex;\r\n\r\n    const isSel1StartToLeftOfSel2 = selection1StartKeyIndex < selection2StartKeyIndex || (isSameRowStart && selection1.startOffset < selection2.startOffset);\r\n    const isSel1EndToLeftOfSel2 = selection1EndKeyIndex < selection2StartKeyIndex || (isS1EndSameRowAsS2Start && selection1.endOffset < selection2.startOffset)\r\n    const isSel1StartToRightOfSel2 = selection1StartKeyIndex > selection2EndKeyIndex || (isS1StartSameRowAsS2End && selection1.startOffset > selection2.endOffset)\r\n    const isSel1EndToRightOfSel2 = selection1EndKeyIndex > selection2EndKeyIndex || (isSameRowEnd && selection1.endOffset > selection2.endOffset);\r\n\r\n    if (isSel1StartToLeftOfSel2 && isSel1EndToRightOfSel2) {\r\n      type = \"cover\";\r\n    }\r\n\r\n    if (!isSel1StartToLeftOfSel2 && !isSel1EndToRightOfSel2) {\r\n      type = \"inside\";\r\n    }\r\n\r\n    if (isSel1StartToLeftOfSel2 && !isSel1EndToRightOfSel2) {\r\n      type = \"left\";\r\n    }\r\n\r\n    if (!isSel1StartToLeftOfSel2 && isSel1EndToRightOfSel2) {\r\n      type = \"right\";\r\n    }\r\n\r\n    if (!type || (isSel1StartToLeftOfSel2 && isSel1EndToLeftOfSel2) || (isSel1StartToRightOfSel2 && isSel1EndToRightOfSel2)) {\r\n      type = \"none\";\r\n      isIntersect = false;\r\n    }\r\n\r\n    return {\r\n      type,\r\n      isIntersect\r\n    };\r\n  }\r\n\r\n\r\n  /*\r\n   * Build a selections array from the 'HIGHLIGHT'-styled areas in the given Draft editor state.\r\n   */\r\n  static calculateSelectionsArray = (editorState, blockKeysList) => {\r\n    const editorContent = editorState.getCurrentContent();\r\n    const rawContent = convertToRaw(editorContent);\r\n    return SelectionHelper.calculateSelectionsArrayFromContentState(rawContent, blockKeysList);\r\n  }\r\n\r\n\r\n  // -------------- selection related methods ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Create a new list of selections that contains all selections of the given list\r\n   * excluding the given selection to be removed.\r\n   * \r\n   * The method expects and returns selection objects with the four attributes startKey, startOffset, endKey, endOffset.\r\n   */\r\n  static removeSelectionFromSelectionsArray(selectionsArray, toRemove) {\r\n    const selections = selectionsArray.slice();\r\n    const filteredArray = selections.filter(item => !(\r\n      toRemove.startOffset === item.startOffset\r\n      && toRemove.endOffset === item.endOffset\r\n      && toRemove.startKey === item.startKey\r\n      && toRemove.endKey === item.endKey\r\n      && toRemove.highlightKey === item.highlightKey))\r\n\r\n    return filteredArray;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the selection from the given selections that is hit be the given click.\r\n   * \r\n   * The method expects and returns selection objects with the four attributes startKey, startOffset, endKey, endOffset.\r\n   * \r\n   * The method returns undefined if the click does not hit any selection in the given selections array.\r\n   */\r\n  static getSelectionHitByClick(click, selections, keyRowOrder) {\r\n    const clickedPosition = {\r\n      rowKey: click.getStartKey(),\r\n      pos: click.getStartOffset()\r\n    }\r\n\r\n    const filterConditions = selection => (\r\n      SelectionHelper.isMultipleRow(selection)\r\n        ? SelectionHelper.isSelectionHitByClickOnMultipleRows(clickedPosition, selection, keyRowOrder)\r\n        : (\r\n          SelectionHelper.isSelectionHitByClickInsideOneRow(clickedPosition, selection)\r\n          || SelectionHelper.isSelectionHitByClickOnOneCharacter(clickedPosition, selection)\r\n        )\r\n    );\r\n\r\n    const filteredSelections = selections.filter(selection => filterConditions(selection));\r\n\r\n    const { length } = filteredSelections;\r\n\r\n    return length > 0 ? filteredSelections[length - 1] : undefined;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the given selection object\r\n   * Selection keeps the position of the cursor\r\n   * @param {*} selection -> Given selection state object\r\n   * @returns {*} SelectionState\r\n   */\r\n  static clearSelection(selection) {\r\n\r\n    const focusKey = selection.getFocusKey();\r\n    const startOffset = selection.getStartOffset();\r\n    const endOffset = selection.getEndOffset();\r\n\r\n    const emptySelection = SelectionState.createEmpty(focusKey);\r\n\r\n    if (selection.getIsBackward()) {\r\n      return emptySelection.merge({\r\n        focusOffset: startOffset,\r\n        anchorOffset: startOffset\r\n      });\r\n    }\r\n\r\n    return emptySelection.merge({\r\n      focusOffset: endOffset,\r\n      anchorOffset: endOffset\r\n    });\r\n\r\n  }\r\n\r\n  // ---------------- blocks related methods ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the list of block keys in the the order of the blocks appearing in the given blocks list, \r\n   * e.g. [\"k0\", \"k1\"] \r\n   */\r\n  static getListOfBlockKeysInBlockOrder(blocks) {\r\n    return blocks.map(block => block.key);\r\n  }\r\n\r\n  /**\r\n   * Get a map from block-key to index-of-block for the given block keys list.\r\n   */\r\n  static getBlockKeysToBlockIndexMap(blockKeysList) {\r\n    const keyToIndexMap = {};\r\n    blockKeysList.forEach((element, index) => {\r\n      keyToIndexMap[element] = index;\r\n    });\r\n    return keyToIndexMap;\r\n  }\r\n\r\n  /**\r\n   * Transforms given Selections list to a list of DTOs for tracing\r\n   * @param {Array} selections \r\n   */\r\n  static TransformSelectionsToTraceSelectionsDTO(selections, path, runtime) {\r\n    const traceSelectionsDTO = [];\r\n\r\n    selections.forEach((selection) => {\r\n      const { startKey, endKey, startOffset, endOffset, highlightKey } = selection;\r\n      traceSelectionsDTO.push({\r\n        startKey,\r\n        endKey,\r\n        startOffset,\r\n        endOffset,\r\n        highlightColor: CbaRichTextField.convertHighlightKeyToValue(highlightKey, path, runtime)\r\n      })\r\n    });\r\n\r\n    return traceSelectionsDTO;\r\n  }\r\n\r\n\r\n  // ------------------ private stuff ----------------------------------------------------------\r\n  //\r\n  // All methods here expect and return selection objects with the four attributes startKey, startOffset, endKey, endOffset.\r\n  // \r\n\r\n  /*\r\n   * Build a selections array from the 'HIGHLIGHT'-styled areas in the given \r\n   * serializable content state (i.e. a RawDraftContentState).\r\n   * \r\n   * The returned array contains selection objects with five attributes: startKey, startOffset, endKey, endOffset, highlightKey.\r\n   */\r\n  static calculateSelectionsArrayFromContentState = (rawContent, blockKeysList) => {\r\n    const highlightSelections = {\r\n      blockTextLengths: {},\r\n      rawSelections: []\r\n    }\r\n\r\n    // Find all areas in the editor's blocks with 'HIGHLIGHT' style and collect them in the builtSelections structure:\r\n    rawContent.blocks.forEach((block, blockIndex) => {\r\n      // set block length\r\n      highlightSelections.blockTextLengths[block.key] = block.text.length;\r\n      block.inlineStyleRanges.forEach((inlineStyle) => {\r\n        if (inlineStyle.style && inlineStyle.style.includes(\"HIGHLIGHT\")) {\r\n          highlightSelections.rawSelections.push({\r\n            startKey: blockKeysList[blockIndex],\r\n            endKey: blockKeysList[blockIndex],\r\n            startOffset: inlineStyle.offset,\r\n            endOffset: inlineStyle.offset + inlineStyle.length,\r\n            highlightKey: inlineStyle.style\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    // merge all selections that overlap\r\n    return SelectionHelper.mergeRowSelections(highlightSelections.rawSelections, highlightSelections.blockTextLengths, blockKeysList);\r\n  }\r\n\r\n\r\n  /** \r\n   * Merge each group of contiguous (or even overlapping?) selections into a single selection. \r\n   * \r\n   * The method returns a new selections array with the merged selections (having attributes startKey, startOffset, endKey, endOffset).\r\n   * \r\n   * @param {[*]} selections Array of selections to be merged. Each selection must have the four attributes startKey, startOffset, endKey, endOffset.\r\n   * @param {*} blockTextLengths Map 'block key -> block's text length'\r\n   * @param {[string]} keyRowOrder List of block keys in the order of block appearance in the editor content.\r\n   */\r\n  static mergeRowSelections(selections, blockTextLengths, keyRowOrder) {\r\n    const blockKeyToIndexMap = SelectionHelper.getBlockKeysToBlockIndexMap(keyRowOrder);\r\n    const selectionsMergedStepByStep = Utils.deepCopy(selections);\r\n\r\n    for (let currentSelectionIndex = 0; currentSelectionIndex < selectionsMergedStepByStep.length - 1; currentSelectionIndex += 1) {\r\n      const currentSelection = selectionsMergedStepByStep[currentSelectionIndex];\r\n      const nextSelection = selectionsMergedStepByStep[currentSelectionIndex + 1];\r\n\r\n      const isSelectionToEndOfBlock = currentSelection.endOffset === blockTextLengths[currentSelection.endKey];\r\n      const isNextSelectionFromStart = (blockKeyToIndexMap[currentSelection.endKey] + 1) === blockKeyToIndexMap[nextSelection.startKey] && nextSelection.startOffset === 0;\r\n      const isNextSelectionSameColor = currentSelection.highlightKey === nextSelection.highlightKey;\r\n\r\n      if (isNextSelectionSameColor && isSelectionToEndOfBlock && isNextSelectionFromStart) {\r\n        const newMergedSelection = {\r\n          startKey: currentSelection.startKey,\r\n          endKey: nextSelection.endKey,\r\n          startOffset: currentSelection.startOffset,\r\n          endOffset: nextSelection.endOffset,\r\n          highlightKey: currentSelection.highlightKey\r\n        }\r\n\r\n        selectionsMergedStepByStep[currentSelectionIndex] = newMergedSelection;\r\n        selectionsMergedStepByStep.splice(currentSelectionIndex + 1, 1);\r\n        currentSelectionIndex -= 1;\r\n      }\r\n    }\r\n\r\n    return selectionsMergedStepByStep;\r\n  }\r\n\r\n  /**\r\n   * Does the given selection  span more than one row (i.e. block in the Draft's editor value model)?\r\n   */\r\n  static isMultipleRow = selection => selection.startKey !== selection.endKey\r\n\r\n  /**\r\n   * Does the given clicked position hit the given multiline selection?\r\n   */\r\n  static isSelectionHitByClickOnMultipleRows(clickedPosition, selection, keyRowOrder) {\r\n    return (\r\n      SelectionHelper.isTopRowClick(clickedPosition, selection)\r\n      || SelectionHelper.isBottomRowClick(clickedPosition, selection)\r\n      || SelectionHelper.isMiddleRowClick(clickedPosition, selection, keyRowOrder));\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit a 'middle' row of the given multiline selection?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isMiddleRowClick(clickedPosition, selection, keyRowOrder) {\r\n    const startIndex = keyRowOrder.indexOf(selection.startKey);\r\n    const endIndex = keyRowOrder.indexOf(selection.endKey);\r\n\r\n    for (let i = startIndex + 1; i < endIndex; i += 1) {\r\n      if (keyRowOrder[i] === clickedPosition.rowKey) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit the given multiline selection in its first row?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isTopRowClick(clickedPosition, selection) {\r\n    return clickedPosition.rowKey === selection.startKey && clickedPosition.pos > selection.startOffset;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit the given multiline selection in its last row?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isBottomRowClick(clickedPosition, selection) {\r\n    return clickedPosition.rowKey === selection.endKey && clickedPosition.pos < selection.endOffset;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit inside the given single row selection?\r\n   * \r\n   * We accept a click between the characters of the selection but not before or after the selection.\r\n   */\r\n  static isSelectionHitByClickInsideOneRow(clickedPosition, selection) {\r\n    return clickedPosition.pos > selection.startOffset\r\n      && clickedPosition.pos < selection.endOffset\r\n      && clickedPosition.rowKey === selection.startKey;\r\n  }\r\n\r\n  /**\r\n   * Does the given clicked position hit the given single character selection?\r\n   * \r\n   * We accept a click before and after the single character.\r\n   */\r\n  static isSelectionHitByClickOnOneCharacter(clickedPosition, selection) {\r\n    return (clickedPosition.rowKey === selection.startKey && selection.endOffset - selection.startOffset === 1)\r\n      && (clickedPosition.pos === selection.startOffset || clickedPosition.pos === selection.endOffset);\r\n  }\r\n\r\n\r\n}\r\n","import SelectionHelper from './SelectionHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\n\r\n\r\n/**\r\n * Helper methods to check the current 'highlight' selections\r\n * in a rich text field. These methods answer questions like:\r\n * Are there any non-blank characters selected?\r\n * Is a named 'text block' currently completely or partially selected?\r\n */\r\nexport default class TextBlockSelectHelper {\r\n\r\n  /**\r\n   * Is there any non-blank character inside the current selection of the given rich text field?\r\n   * @param {*} richTextPathState The full path state of the rich text field containing the text block.\r\n   * @param {*} richTextConfig The JSON configuration of the rich text field containing the text block.\r\n   */\r\n  static isSelectionContainsNonBlank(richTextPathState, richTextConfig) {\r\n    if (richTextConfig.value === undefined) {\r\n      console.warn(\"Invalid configuration found in rich text field!\");\r\n      return false;\r\n    }\r\n\r\n    const draftBlocks = richTextConfig.value.blocks;\r\n    if (draftBlocks === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const blockKeyToIndexMap = TextBlockSelectHelper.buildBlockKeyToIndexMap(richTextConfig);\r\n    const currentSelections = TextBlockSelectHelper.getSpansFromSelections(richTextPathState);\r\n\r\n    return TextBlockSelectHelper.spanArrayContainsNonBlank(currentSelections, draftBlocks, blockKeyToIndexMap);\r\n  }\r\n\r\n  /**\r\n   * Is the text block identified by the given text block name (at least partially) selected by the current selection \r\n   * in the rich text field?\r\n   * @param {*} blockName The name of the text block to look at.\r\n   * @param {*} richTextPathState The full path state of the rich text field containing the text block.\r\n   * @param {*} richTextConfig The JSON configuration of the rich text field containing the text block.\r\n   * @param {*} partial Is it sufficient to have at least one non-blank character selected of do we need a full selection of all non-blank characters?\r\n   */\r\n  static isTextBlockSelected(blockName, richTextPathState, richTextConfig, partial) {\r\n\r\n    if (richTextConfig.value === undefined) {\r\n      console.warn(\"Invalid configuration found in rich text field!\");\r\n      return false;\r\n    }\r\n\r\n    const draftBlocks = richTextConfig.value.blocks;\r\n    if (draftBlocks === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const allBlocksConfig = richTextConfig.textBlocks;\r\n    if (allBlocksConfig === undefined) {\r\n      console.warn(`Text block with name ${blockName} not found in rich text field ${CommonConfigHelper.getIdentifyingInfoForLogMessage(richTextConfig)} (no text blocks there)`);\r\n      return false;\r\n    }\r\n\r\n    const blockConfig = TextBlockSelectHelper.findBlockConfigForBlockName(blockName, richTextConfig.textBlocks);\r\n    if (blockConfig === undefined) {\r\n      console.warn(`Text block with name ${blockName} not found in rich text field ${CommonConfigHelper.getIdentifyingInfoForLogMessage(richTextConfig)} (no such block)`);\r\n      return false;\r\n    }\r\n\r\n    const currentSelections = TextBlockSelectHelper.getSpansFromSelections(richTextPathState);\r\n\r\n    const blockKeyToIndexMap = TextBlockSelectHelper.buildBlockKeyToIndexMap(richTextConfig);\r\n\r\n    const { spans } = blockConfig;\r\n\r\n    return (partial\r\n      ? (spans.find(span => TextBlockSelectHelper.selectionsCoverANonBlankInSpan(currentSelections, span, draftBlocks, blockKeyToIndexMap)) !== undefined)\r\n      : spans.every(span => TextBlockSelectHelper.selectionsCoverNonBlanksInSpan(currentSelections, span, draftBlocks, blockKeyToIndexMap)));\r\n  }\r\n\r\n\r\n  static findBlockConfigForBlockName(blockName, allBlocksConfig) {\r\n    return allBlocksConfig.find(blockConfig => blockConfig.name === blockName)\r\n  }\r\n\r\n  static buildBlockKeyToIndexMap(richTextConfig) {\r\n    return SelectionHelper.getBlockKeysToBlockIndexMap(SelectionHelper.getListOfBlockKeysInBlockOrder(richTextConfig.value.blocks));\r\n  }\r\n\r\n\r\n  /**\r\n   * Return spans representing the current selections in the rich text field.\r\n   * @param {*} richTextPathState \r\n   */\r\n  static getSpansFromSelections(richTextPathState) {\r\n    return richTextPathState.selections.map(editorSelection => TextBlockSelectHelper.getSpanFromSelection(editorSelection));\r\n  }\r\n\r\n  /**\r\n   * Return a span representing the given current selection.\r\n   * \r\n   * @param {{startKey, startOffset, endKey, endOffset}} currentSelection A selection object representing one area of the current selections.\r\n   * @return {{start: { blockKey, offset}, end: {blockKey, offset}}}\r\n   */\r\n  static getSpanFromSelection(currentSelection) {\r\n    return {\r\n      start: {\r\n        blockKey: currentSelection.startKey,\r\n        offset: currentSelection.startOffset\r\n      },\r\n      end: {\r\n        blockKey: currentSelection.endKey,\r\n        offset: currentSelection.endOffset\r\n      }\r\n    };\r\n  }\r\n\r\n  static selectionsCoverANonBlankInSpan(selections, spanToCover, draftBlocks, blockKeyToIndexMap) {\r\n    return selections.find((selection, index, all) => TextBlockSelectHelper.selectionCoversANonBlankInSpan(selection, spanToCover, draftBlocks, blockKeyToIndexMap)) !== undefined;\r\n  }\r\n\r\n  static selectionCoversANonBlankInSpan(selection, spanToCover, draftBlocks, blockKeyToIndexMap) {\r\n    const overlap = TextBlockSelectHelper.getOverlap(selection, spanToCover, blockKeyToIndexMap);\r\n    return overlap === undefined ? false : TextBlockSelectHelper.spanContainsNonBlank(overlap, draftBlocks, blockKeyToIndexMap);\r\n  }\r\n\r\n\r\n  static selectionsCoverNonBlanksInSpan(selections, spanToCover, draftBlocks, blockKeyToIndexMap) {\r\n    //  Calculate areas in the span not covered by the selection. \r\n    const uncoveredAreas = TextBlockSelectHelper.calculateUncoveredAreas(selections, spanToCover, blockKeyToIndexMap);\r\n\r\n    //  Look for non-blanks in the uncovered areas. Result is true if no non-blanks are there, otherwise false.\r\n    return !TextBlockSelectHelper.spanArrayContainsNonBlank(uncoveredAreas, draftBlocks, blockKeyToIndexMap);\r\n  }\r\n\r\n  /**\r\n   * Calculate an array of spans not covered by the given selections.\r\n   * \r\n   * @param {*} selections \r\n   * @param {*} spanToCover \r\n   * @param {*} blockKeyToIndexMap \r\n   */\r\n  static calculateUncoveredAreas(selections, spanToCover, blockKeyToIndexMap) {\r\n    // Start with the complete span to cover as only element in a list of 'uncovered areas'. \r\n    // Loop over all selections: \r\n    //   Find the first uncovered area that is hit by the selection, punch out the part covered by the selection.\r\n    //   This may trim the uncovered area or split it in a left and a right part. Replace the original uncovered area with the rests of it \r\n    //   in the list of uncovered areas (in correct order: left first, right after that).\r\n    //  The loop keeps the list of uncovered areas sorted. Since the selections do not overlap we have to process \r\n    //  the first afflicted uncovered area only for each selection.\r\n    let uncoveredAreas = [spanToCover];\r\n    selections.forEach((currentSelection, index, all) => {\r\n      uncoveredAreas = TextBlockSelectHelper.calculateUncoveredAreasBySingleSelection(currentSelection, uncoveredAreas, blockKeyToIndexMap);\r\n    });\r\n    return uncoveredAreas;\r\n  }\r\n\r\n  /**\r\n   * Calculate an array of spans not covered by the given selection.\r\n   * \r\n   * @param {*} selection \r\n   * @param {*} spansToCover \r\n   * @param {*} blockKeyToIndexMap \r\n   */\r\n  static calculateUncoveredAreasBySingleSelection(selection, spansToCover, blockKeyToIndexMap) {\r\n    // Start with the complete span to cover as only element in a list of 'uncovered areas'. \r\n    // Loop over all selections: \r\n    //   Find the first uncovered area that is hit by the selection, punch out the part covered by the selection.\r\n    //   This may trim the uncovered area or split it in a left and a right part. Replace the original uncovered area with the rests of it \r\n    //   in the list of uncovered areas (in correct order: left first, right after that).\r\n    //  The loop keeps the list of uncovered areas sorted. Since the selections do not overlap we have to process \r\n    //  the first afflicted uncovered area only for each selection.\r\n    let uncoveredAreas = spansToCover;\r\n    let hitFound = false;\r\n    let areaIndex;\r\n    for (areaIndex = 0; !hitFound && areaIndex < uncoveredAreas.length; areaIndex+=1) {\r\n      const punchTarget = uncoveredAreas[areaIndex];\r\n      const remainingAreas = TextBlockSelectHelper.punch(selection, punchTarget, blockKeyToIndexMap);\r\n      if (remainingAreas !== undefined) {\r\n        hitFound = true;\r\n        uncoveredAreas = TextBlockSelectHelper.replaceEntryByArray(uncoveredAreas, areaIndex, remainingAreas);\r\n      }\r\n    }\r\n    return uncoveredAreas;\r\n  }\r\n\r\n  static dumpObject(object) {\r\n    return JSON.stringify(object);\r\n  }\r\n\r\n  static replaceEntryByArray(arrayToModify, indexToReplace, arrayToBeInserted) {\r\n    return arrayToModify.slice(0, indexToReplace).concat(arrayToBeInserted).concat(arrayToModify.slice(indexToReplace + 1));\r\n  }\r\n\r\n\r\n  /**\r\n   * Does the given span array contain any non-blank character?\r\n   * \r\n   * @param {[{start: { blockKey, offset}, end: {blockKey, offset}}] } spanArray An array of spans to be checked.\r\n   * @param {[{key, text}]} draftBlocks The text content blocks for the Draft editor.\r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static spanArrayContainsNonBlank(spanArray, draftBlocks, blockKeyToIndexMap) {\r\n    let nonBlankFound = false;\r\n    let spanIndex;\r\n    for (spanIndex = 0; !nonBlankFound && spanIndex < spanArray.length; spanIndex+=1) {\r\n      if (TextBlockSelectHelper.spanContainsNonBlank(spanArray[spanIndex], draftBlocks, blockKeyToIndexMap)) {\r\n        nonBlankFound = true;\r\n      }\r\n    }\r\n    return nonBlankFound;\r\n  }\r\n\r\n\r\n  /**\r\n   * Does the given span contain any non-blank character?\r\n   * \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}} } span A span to be checked.\r\n   * @param {[{key, text}]} draftBlocks The text content blocks for the Draft editor.\r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static spanContainsNonBlank(span, draftBlocks, blockKeyToIndexMap) {\r\n    const startKeyIndex = blockKeyToIndexMap[span.start.blockKey];\r\n    const endKeyIndex = blockKeyToIndexMap[span.end.blockKey];\r\n\r\n    if (startKeyIndex === endKeyIndex) {\r\n      return TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[startKeyIndex].text.substring(span.start.offset, span.end.offset));\r\n    }\r\n\r\n    let nonBlankFound = TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[startKeyIndex].text.substring(span.start.offset));\r\n    let keyIndex;\r\n    for (keyIndex = startKeyIndex + 1; !nonBlankFound && keyIndex < endKeyIndex; keyIndex+=1) {\r\n      nonBlankFound = TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[keyIndex].text);\r\n    }\r\n    if (!nonBlankFound) {\r\n      nonBlankFound = TextBlockSelectHelper.stringContainsNonBlank(draftBlocks[endKeyIndex].text.substring(0, span.end.offset));\r\n    }\r\n\r\n    return nonBlankFound;\r\n  }\r\n\r\n  static stringContainsNonBlank(string) {\r\n    return /\\S/.test(string);\r\n  }\r\n\r\n  /**\r\n   * Punch out the given selection from the given target span. \r\n   * If they don't overlap return undefined. \r\n   * Otherwise return one or two spans that remain after punching out the given punch span from the given target span. \r\n   * \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}}} punchSpan A span to be punched from the target span. \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}} } targetSpan A span the punch is applied to.\r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   * @returns {[{start: { blockKey, offset}, end: {blockKey, offset} }]} The rest of the target span afer punching. \r\n   */\r\n  static punch(punchSpan, targetSpan, blockKeyToIndexMap) {\r\n    const leftPunchBorder = TextBlockSelectHelper.max(punchSpan.start, targetSpan.start, blockKeyToIndexMap);\r\n    const rightPunchBorder = TextBlockSelectHelper.min(punchSpan.end, targetSpan.end, blockKeyToIndexMap);\r\n    if (TextBlockSelectHelper.isLessOrEqual(leftPunchBorder, rightPunchBorder, blockKeyToIndexMap)) {\r\n      const result = [];\r\n      if (TextBlockSelectHelper.isLess(targetSpan.start, leftPunchBorder, blockKeyToIndexMap)) {\r\n        result.push({\r\n          start: targetSpan.start,\r\n          end: leftPunchBorder\r\n        });\r\n      }\r\n      if (TextBlockSelectHelper.isGreater(targetSpan.end, rightPunchBorder, blockKeyToIndexMap)) {\r\n        result.push({\r\n          start: rightPunchBorder,\r\n          end: targetSpan.end\r\n        });\r\n      }\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the overlap of two spans.\r\n   * If they don't overlap return undefined. \r\n   * \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}}} oneSpan \r\n   * @param {{start: { blockKey, offset}, end: {blockKey, offset}} } anotherSpan \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   * @returns {[{start: { blockKey, offset}, end: {blockKey, offset} }]} The overlap or undefined if the spans do not overlap. \r\n   */\r\n  static getOverlap(oneSpan, anotherSpan, blockKeyToIndexMap) {\r\n    const leftOverlapBorder = TextBlockSelectHelper.max(oneSpan.start, anotherSpan.start, blockKeyToIndexMap);\r\n    const rightOverlapBorder = TextBlockSelectHelper.min(oneSpan.end, anotherSpan.end, blockKeyToIndexMap);\r\n    return (TextBlockSelectHelper.isLessOrEqual(leftOverlapBorder, rightOverlapBorder, blockKeyToIndexMap)\r\n      ? {\r\n        start: leftOverlapBorder,\r\n        end: rightOverlapBorder\r\n      }\r\n      : undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Return the maximum of the given span borders.\r\n   * \r\n   * @param {{blockKey, offset}} one\r\n   * @param {{blockKey, offset}} another \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static max(one, another, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isLess(one, another, blockKeyToIndexMap) ? another : one;\r\n  }\r\n\r\n  /**\r\n   * Return the minimum of the given span borders.\r\n   * \r\n   * @param {{blockKey, offset}} one\r\n   * @param {{blockKey, offset}} another \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static min(one, another, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isLess(one, another, blockKeyToIndexMap) ? one : another;\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static isLessOrEqual(leftBorder, rightBorder, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isEqual(leftBorder, rightBorder) || TextBlockSelectHelper.isLess(leftBorder, rightBorder, blockKeyToIndexMap);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static isGreater(leftBorder, rightBorder, blockKeyToIndexMap) {\r\n    return !TextBlockSelectHelper.isLessOrEqual(leftBorder, rightBorder, blockKeyToIndexMap);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   * @param {*} blockKeyToIndexMap A map from the draft block keys to their index in the draft block array.\r\n   */\r\n  static isLess(leftBorder, rightBorder, blockKeyToIndexMap) {\r\n    return TextBlockSelectHelper.isLessBlockKey(leftBorder.blockKey, rightBorder.blockKey, blockKeyToIndexMap) || (leftBorder.blockKey === rightBorder.blockKey && leftBorder.offset < rightBorder.offset);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {{blockKey, offset}} leftBorder \r\n   * @param {{blockKey, offset}} rightBorder \r\n   */\r\n  static isEqual(leftBorder, rightBorder) {\r\n    return leftBorder.blockKey === rightBorder.blockKey && leftBorder.offset === rightBorder.offset;\r\n  }\r\n\r\n  static isLessBlockKey(leftKey, rightKey, blockKeyToIndexMap) {\r\n    return blockKeyToIndexMap[leftKey] < blockKeyToIndexMap[rightKey];\r\n  }\r\n\r\n}\r\n","import CommonActionsHelper from './CommonActionsHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport RenderingHelper from './RenderingHelper';\nimport TableHelper from './table/TableHelper';\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport UserDefPathHelper from '../state/UserDefPathHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\n\n/**\n * Static methods used by our input components CbaInputField and CbaSingleLineInputField. \n */\nexport default class InputComponent {\n\n  static addAttributesToInitialState(initialState, configProps) {\n    StateAttributeAccess.setTextValue(initialState, configProps.text.label === undefined ? '' : configProps.text.label);\n  }\n\n  static isValidText(text, validationPattern) {\n    if (validationPattern === undefined) {\n      return true;\n    }\n    try {\n      const expression = new RegExp(`${validationPattern}`, 'm');\n      return expression.test(text);\n    } catch (exception) {\n      console.log(`Invalid regular expression ${validationPattern} on input field -> accepting input without check.`);\n      return true;\n    }\n  }\n\n  static onChangeHandler(component, event, userInteraction, traceType) {\n    const pathState = ComponentStateHelper.getState(component);\n    const oldText = StateAttributeAccess.extractTextValue(pathState);\n    const newText = event.target.value;\n    const { path, config, runtime, isInEditMode } = component.props;\n\n\n    const { validationPattern, validationFailEvent, sourceInputPath } = config;\n    const newTextIsValid = InputComponent.isValidText(newText, validationPattern);\n    const newTextValue = newTextIsValid ? newText : oldText;\n    const traceDetails = (userInteraction === 'ValueInputModified')\n      ? {\n        newValue: newText,\n      }\n      : {\n        oldTextValue: oldText,\n        newTextValue,\n        origin: 'keyboard',\n        validationPattern,\n        invalidTextValue: newTextIsValid ? undefined : newText\n      };\n    // do not trace in for table cells\n    if (!isInEditMode) {\n      CommonActionsHelper.traceUserInteraction(\n        userInteraction, path,\n        traceDetails,\n        event,\n        {\n          type: traceType,\n          value: path\n        },\n        runtime\n      );\n    }\n\n    // update our full state in state manager:\n    // handle variable value input\n    if (config.isVariableValueInput) {\n      if (newText === '' || newText === '-') {\n        component.blockedDynamicUpdateText = newText;\n      } else {\n        component.blockedDynamicUpdateText = undefined;\n        if (InputComponent.isValidText(newText, '^[\\\\-]?[0-9]+$')) {\n          const { taskManager, variableManager } = runtime;\n          const currentTaskId = taskManager.getCurrentStatePathRoot();\n\n          const variableName = config.text.dynamic.variable;\n          const variableValue = parseInt(newText, 10);\n\n          variableManager.setVariable(currentTaskId, variableName, variableValue, \"integer\", runtime);\n        }\n      }\n\n    } else {\n      StateAttributeAccess.setTextValue(pathState, newTextValue);\n      if (sourceInputPath !== undefined) {\n        runtime.eventEmitter.emit(`inputFieldUpdated-${sourceInputPath}`, newTextValue);\n      }\n    }\n    StateAttributeAccess.setVisited(pathState, true);\n    ComponentStateHelper.registerState(component, pathState);\n\n    // trigger rendering by updating component's local state:\n    RenderingHelper.triggerRendering(component);\n\n    if (!newTextIsValid) {\n      CommonActionsHelper.sendEvent(validationFailEvent, runtime);\n    }\n  }\n\n  static onClickHandler(component, event) {\n    const { runtime, config, path, isInEditMode } = component.props;\n    const readOnly = config.readOnly === undefined ? false : config.readOnly;\n    CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, readOnly, InputComponent.updateTextValue, component, runtime);\n    InputComponent.registerAsInsertPosition(component, event);\n    const pathState = ComponentStateHelper.getState(component);\n    const currentText = StateAttributeAccess.extractTextValue(pathState);\n    const traceDetails = (config.isVariableValueInput === true)\n      ? {}\n      : {\n        currentTextValue: currentText\n      }\n    // do not trace in trace log for table cells\n    if (!isInEditMode) {\n      CommonActionsHelper.doStandardOnClick(event, traceDetails, component);\n    } else {\n      // when double click is made in a table cell we need to avoid propagation\n      const { row, column } = config;\n      const tablePath = TableHelper.buildTablePath(path);\n      const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tablePath, runtime);\n      const oldSelected = TableHelper.isOldSelected(tableUserDefIdPath, runtime);\n      const cellTraceDetails = {\n        tableUserDefIdPath,\n        tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\n        row,\n        column,\n        oldSelected\n      }\n\n      const cellPath = IndexPathHelper.dropIndexFromPageSegment(path);\n      CommonActionsHelper.traceUserInteractionPerConfig(config, cellPath,\n        cellTraceDetails,\n        event, runtime);\n      // avoid container tracing \n      CommonActionsHelper.stopEventPropagation(event);\n    }\n  }\n\n  static onContextMenuHandler(component, event) {\n    CommonActionsHelper.doContextMenuOpen(component, event);\n  }\n\n  static onSelectionHandler(component, event) {\n    const { runtime, path, config } = component.props;\n    const readOnly = config.readOnly === undefined ? false : config.readOnly;\n    CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, readOnly, InputComponent.updateTextValue, component, runtime);\n    InputComponent.registerAsInsertPosition(component, event);\n    CommonActionsHelper.stopEventPropagation(event);\n  }\n\n  static registerAsInsertPosition = (component, event) => {\n    const { runtime, path, config } = component.props;\n    const { selectionStart, selectionEnd } = event.target;\n    const readOnly = config.readOnly === undefined ? false : config.readOnly;\n    if (!readOnly) {\n      runtime.clipboardManager.registerInsertPosition(\n        path,\n        contentToInsert => InputComponent.updateTextValue(component, selectionStart, selectionEnd, contentToInsert)\n      );\n    }\n  }\n\n  static onBlurHandler(component) {\n    CommonActionsHelper.doStandardOnBlur(component);\n  }\n\n  static onFocusHandler(component) {\n    CommonActionsHelper.doStandardOnFocus(component);\n  }\n\n  /* disable the cut copy paste default browser handling of events */\n  static onCutCopyPaste(component, event) {\n    event.preventDefault();\n    return false;\n  }\n\n  static updateTextValue = (component, startPosition, endPosition, replacementText) => {\n    const pathState = ComponentStateHelper.getState(component);\n    const oldText = StateAttributeAccess.extractTextValue(pathState);\n    const newText = `${oldText.substring(0, startPosition)}${replacementText}${oldText.substring(endPosition)}`;\n\n    const { config, runtime, path, isInEditMode } = component.props;\n    const { validationPattern, validationFailEvent, trace } = config;\n    const newTextIsValid = InputComponent.isValidText(newText, validationPattern);\n    const eventType = trace.type === 'SingleLineInputField' ? 'SingleLineInputFieldModified' : 'InputFieldModified'\n\n    // do not trace in table cell edit mode\n    if (!isInEditMode) {\n      CommonActionsHelper.traceUserInteraction(\n        eventType, path,\n        {\n          oldTextValue: oldText,\n          newTextValue: newTextIsValid ? newText : oldText,\n          origin: 'cutAndPaste',\n          validationPattern,\n          invalidTextValue: newTextIsValid ? undefined : newText\n        },\n        undefined,\n        undefined,\n        runtime\n      );\n    }\n\n    if (newTextIsValid) {\n      // update our full state in state manager:\n      StateAttributeAccess.setTextValue(pathState, newText);\n      ComponentStateHelper.registerState(component, pathState);\n      RenderingHelper.triggerRendering(component);\n    } else {\n      CommonActionsHelper.sendEvent(validationFailEvent, runtime);\n    }\n\n  }\n\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport RenderingHelper from './RenderingHelper';\nimport TableHelper from './table/TableHelper';\nimport InputComponent from './InputComponent';\nimport IndexPathHelper from '../state/IndexPathHelper';\n\nexport default class CbaSingleLineInputField extends Component {\n\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.blockedDynamicUpdateText = undefined;\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n    const { runtime, config, path, isInEditMode } = this.props;\n    const { isSpreadsheet } = config;\n    if (isSpreadsheet) {\n      runtime.eventEmitter.addListener(`${TableHelper.buildTablePath(path)}-inputContentUpdate`, this.onContentUpdate.bind(this));\n\n      if (isInEditMode) {\n        this.focus();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  focus = () => {\n    this.inputRef.current.focus();\n  }\n\n  // ------------- Table specific handlers ------------------- //\n\n  onContentUpdate(value, receivedRow, receivedColumn) {\n    const { config } = this.props;\n    const { row, column } = config;\n    if (row === receivedRow && column === receivedColumn) {\n      const pathState = ComponentStateHelper.getState(this);\n\n      // update our full state in state manager:\n      StateAttributeAccess.setTextValue(pathState, value);\n      StateAttributeAccess.setVisited(pathState, true);\n      ComponentStateHelper.registerState(this, pathState);\n    }\n  }\n\n  onKeyDownHandler = (e) => {\n    const { path, runtime, config, isInEditMode } = this.props;\n    TableHelper.handleKeyDown(e, runtime, config, TableHelper.buildTablePath(path), isInEditMode);\n  }\n\n  onFocusHandler = () => {\n    const { path, runtime, isInEditMode } = this.props;\n    InputComponent.onFocusHandler(this);\n    TableHelper.handleCellFocus(runtime, TableHelper.buildTablePath(path), isInEditMode);\n  }\n\n  onKeyPressOnInput = (e) => {\n    const { runtime, config, path, isInEditMode, onBlur } = this.props;\n    // handle 'Enter' key pressed only we are inside of a table cell \n    if (isInEditMode) {\n      const { row, column } = config;\n      if (e.key === 'Enter') {\n        runtime.eventEmitter.emit(`${TableHelper.buildTablePath(path)}-contentUpdate`, e.target.value, row, column, false);\n        onBlur(e);\n        e.preventDefault();\n      }\n    }\n  }\n\n\n  render() {\n    const { config, path, runtime, orientation, isInEditMode, onBlur, title } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selected = StateAttributeAccess.extractSelected(pathState);\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selected, orientation, runtime);\n\n    if (isInEditMode) {\n      // use the evaluated value as initial text if the config text is a formula\n      const textValue = StateAttributeAccess.extractTextValue(pathState);\n      if (textValue !== undefined && textValue === config.text.label\n        && TableHelper.isFormula(textValue)) {\n        const cellPath = IndexPathHelper.dropIndexFromPageSegment(path);\n        const cellPathState = runtime.componentStateManager.findOrBuildStateForPathId(cellPath, runtime);\n        const cellValue = StateAttributeAccess.extractTextValue(cellPathState);\n        StateAttributeAccess.setTextValue(pathState, cellValue);\n      }\n\n      // force border style when in table cell\n      CommonConfigHelper.setStyleAttribute(style, \"zIndex\", 1);\n      CommonConfigHelper.setStyleAttribute(style, \"boxShadow\", \"inset rgb(79, 124, 177) 0px 0px 4px\");\n    }\n\n    const value = this.blockedDynamicUpdateText === undefined ? CommonConfigHelper.buildDisplayText(config, pathState, runtime) : this.blockedDynamicUpdateText;\n    this.blockedDynamicUpdateText = undefined;\n    const userInteraction = config.isVariableValueInput ? 'ValueInputModified' : 'SingleLineInputFieldModified';\n    const traceType = config.isVariableValueInput ? 'ValueInputField_onChange' : 'CbaSingleLineInputField_onChange';\n\n    return (\n      <input\n        ref={this.inputRef}\n        type=\"text\"\n        title={isInEditMode ? title : CommonConfigHelper.buildTitle(config)}\n        style={style}\n        data-cba-id={config.pageEditId}\n        readOnly={config.readOnly}\n        disabled={StateAttributeAccess.extractDisabled(pathState)}\n        value={value}\n        onClick={event => InputComponent.onClickHandler(this, event)}\n        onContextMenu={event => InputComponent.onContextMenuHandler(this, event)}\n        onChange={event => InputComponent.onChangeHandler(this, event, userInteraction, traceType)}\n        onSelect={event => InputComponent.onSelectionHandler(this, event)}\n        onBlur={e => (isInEditMode ? onBlur(e, StateAttributeAccess.extractTextValue(pathState), false) : InputComponent.onBlurHandler(this))}\n        onFocus={this.onFocusHandler}\n        onKeyPress={this.onKeyPressOnInput}\n        onKeyDown={this.onKeyDownHandler}\n        onCut={event => InputComponent.onCutCopyPaste(this, event)}\n        onCopy={event => InputComponent.onCutCopyPaste(this, event)}\n        onPaste={event => InputComponent.onCutCopyPaste(this, event)}\n        tabIndex={config.tabIndex}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaSingleLineInputField\")}\n        spellCheck={config.spellCheck}\n      />\n    );\n  }\n\n}\n\n\nCbaSingleLineInputField.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        validationPattern: PropTypes.string,\n        validationFailEvent: PropTypes.string,\n        sourceInputPath: PropTypes.string\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n  isInEditMode: PropTypes.bool,\n  onBlur: PropTypes.func,\n  title: PropTypes.string\n}\n\nCbaSingleLineInputField.defaultProps = {\n  isInEditMode: false,\n  onBlur: () => {},\n  title: \"\"\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport CbaSingleLineInputField from '../CbaSingleLineInputField';\r\nimport CbaComboBox from '../CbaComboBox';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CbaRichTextField from '../CbaRichTextField/CbaRichTextField';\r\nimport TableHelper from './TableHelper';\r\nimport PathTranslationHelper from '../../state/PathTranslationHelper';\r\nimport UserDefPathHelper from '../../state/UserDefPathHelper';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\n\r\nexport default class CbaTableCell extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { runtime, config } = this.props;\r\n    this.eventEmitter = runtime.eventEmitter;\r\n    this.state = {\r\n      isInEditMode: config.isInEditMode,\r\n      hasHover: false\r\n    }\r\n    this.onCellFocused = this.onCellFocused.bind(this);\r\n    this.onClickHandler = this.onClickHandler.bind(this);\r\n    this.buildTableIndexPath = this.buildTableIndexPath.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { config } = this.props;\r\n    if (config.isSpreadsheet) {\r\n      this.initializeSpreadsheet();\r\n    }\r\n\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-removeLastSelection-[${config.row},${config.column}]`, this.onRemoveLastSelection.bind(this));\r\n  }\r\n\r\n  initializeSpreadsheet = () => {\r\n    const { config, path, runtime } = this.props;\r\n    const { row, column, isReadOnly } = config;\r\n    this.registerEventListeners(row, column);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const hadFocus = StateAttributeAccess.extractCellHadFocus(pathState);\r\n    // the default selected cell will be cell[1,1] if there was no focus registered for the page\r\n    const pagePath = IndexPathHelper.getPagePath(path);\r\n    if (row === 1 && column === 1 && !hadFocus\r\n      && !runtime.focusRegister.hasActionsRegisteredForPath(pagePath)) {\r\n      window.setTimeout(() => {\r\n        this.onCellFocused(row, column, isReadOnly);\r\n      }, 100);\r\n      StateAttributeAccess.setCellHadFocus(pathState, true);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n      this.updateStateAndTriggerRender(true);\r\n    }\r\n  }\r\n\r\n  registerEventListeners(row) {\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-rowHeaderUpdate`, this.onRowHeaderUpdate.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-columnHeaderUpdate`, this.onColumnHeaderUpdate.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-cell-mouse-enter-${row}`, this.onCellMouseEnter.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-cell-mouse-leave-${row}`, this.onCellMouseLeave.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-updateCellValue`, this.onUpdateValue.bind(this));\r\n    this.eventEmitter.addListener(`${this.buildTableIndexPath()}-autoFocus`, this.onAutoFocus.bind(this));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  /**\r\n   * Callback method registered as a listener for cell update events. \r\n   * Update the cell state accordingly and notifies the edit mode component about the current updates.\r\n   * @param {*} selectedCell \r\n   * @param {*} value \r\n   * @param {*} isNotValidFormula \r\n   * @param {*} formula \r\n   * @param {*} errorMessage \r\n   * @param {*} isInitialization \r\n   */\r\n  onUpdateValue(selectedCell, value, isNotValidFormula, formula, errorMessage, isInitialization) {\r\n    const { config } = this.props;\r\n    if (selectedCell.row === config.row && selectedCell.column === config.column) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-inputContentUpdate`, value, selectedCell.row, selectedCell.column);\r\n      this.updateStateAndTriggerRender(true);\r\n\r\n      const pathState = ComponentStateHelper.getState(this);\r\n      const oldValue = StateAttributeAccess.extractTextValue(pathState);\r\n      const oldFormula = StateAttributeAccess.extractFormula(pathState);\r\n\r\n      // update our full state in state manager:\r\n      if (isNotValidFormula !== undefined) {\r\n        StateAttributeAccess.setCellHasError(pathState, isNotValidFormula);\r\n      }\r\n      if (errorMessage !== undefined) {\r\n        StateAttributeAccess.setCellTitle(pathState, errorMessage);\r\n      }\r\n      StateAttributeAccess.setTextValue(pathState, value);\r\n      StateAttributeAccess.setFormula(pathState, formula);\r\n      StateAttributeAccess.setVisited(pathState, true);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n\r\n\r\n      // handle tracing \r\n      if (!isInitialization && oldValue !== undefined && oldValue !== value) {\r\n        this.traceCellModified(undefined, oldValue, value, oldFormula, formula, errorMessage);\r\n      }\r\n\r\n      this.setState({\r\n        isInEditMode: false\r\n      });\r\n    }\r\n  }\r\n\r\n  onClickHandler = (event, keepHover) => {\r\n    const { config, runtime, path } = this.props;\r\n    const { row, column, isSpreadsheet, readOnly } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldSelected = StateAttributeAccess.extractSelected(pathState);\r\n\r\n    if (isSpreadsheet) {\r\n      if (row !== 0 && column !== 0) {\r\n        this.onCellFocused(row, column, readOnly);\r\n        this.updateStateAndTriggerRender(true);\r\n      } else if (row === 0) {\r\n        // second row same column should be focused\r\n        this.eventEmitter.emit(`${this.buildTableIndexPath()}-autoFocus`, row + 1, column);\r\n        // avoid container tracing \r\n        CommonActionsHelper.stopEventPropagation(event);\r\n        return;\r\n      } else if (column === 0) {\r\n        // same row second column should be focused\r\n        this.eventEmitter.emit(`${this.buildTableIndexPath()}-autoFocus`, row, column + 1);\r\n        // avoid container tracing \r\n        CommonActionsHelper.stopEventPropagation(event);\r\n        return;\r\n      }\r\n    } else {\r\n      // ignore click if our parent table is switched to 'not selectable' currently:\r\n      const tableState = runtime.componentStateManager.findOrBuildStateForPathId(this.buildTableIndexPath(), runtime);\r\n      if (StateAttributeAccess.extractSelectable(tableState)) {\r\n        // when multi select is disabled we need to clean the last selection \r\n        if (!config.isMultiSelectEnabled) {\r\n          this.onCellFocused(row, column, readOnly);\r\n        }\r\n        this.updateStateAndTriggerRender();\r\n      }\r\n    }\r\n\r\n    // handle tracing\r\n    const tablePath = this.buildTableIndexPath();\r\n    const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tablePath, runtime);\r\n    const traceDetails = {\r\n      tableUserDefIdPath,\r\n      tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n      row,\r\n      column,\r\n      oldSelected\r\n    }\r\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\r\n      traceDetails,\r\n      event, runtime);\r\n    // avoid container tracing \r\n    CommonActionsHelper.stopEventPropagation(event);\r\n\r\n    // when a cell is clicked the row hover should disapeer \r\n    if (row !== 0 && !keepHover) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-cell-mouse-leave-${row}`, row);\r\n    }\r\n  }\r\n\r\n  checkSelectable = () => {\r\n    const { config, runtime } = this.props;\r\n\r\n    if (config.isSpreadsheet) {\r\n      return true;\r\n    }\r\n\r\n    const tableState = runtime.componentStateManager.findOrBuildStateForPathId(this.buildTableIndexPath(), runtime);\r\n    return StateAttributeAccess.extractSelectable(tableState);\r\n  }\r\n\r\n  updateStateAndTriggerRender = (keepSelection, selectionValue) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const { runtime, path } = this.props;\r\n\r\n    // update our full state in state manager:\r\n    if (!keepSelection) {\r\n      const oldSelected = StateAttributeAccess.extractSelected(pathState);\r\n      StateAttributeAccess.setSelected(pathState, selectionValue !== undefined ? selectionValue : !oldSelected);\r\n    }\r\n\r\n    StateAttributeAccess.setVisited(pathState, true);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRenderingViaPath(path, runtime);\r\n  }\r\n\r\n  onAutoFocus(rowToFocus, columnToFocus) {\r\n    const { config } = this.props;\r\n    const { row, column } = config;\r\n\r\n    if (row === rowToFocus && column === columnToFocus) {\r\n      this.onClickHandler(undefined, true);\r\n    }\r\n  }\r\n\r\n  onCellFocused(row, column, isReadOnly) {\r\n    const { config } = this.props;\r\n    this.eventEmitter.emit(`${this.buildTableIndexPath()}-cellFocused`, row, column, config.address, isReadOnly);\r\n    this.setState({\r\n      isInEditMode: true\r\n    });\r\n  }\r\n\r\n  onRowHeaderUpdate(currentSelected, newSelected) {\r\n    const { config } = this.props;\r\n    if ((config.row === currentSelected || config.row === newSelected)\r\n      && (currentSelected !== newSelected) && (config.column === 0)) {\r\n      this.updateStateAndTriggerRender();\r\n    }\r\n  }\r\n\r\n  onColumnHeaderUpdate(currentSelected, newSelected) {\r\n    const { config } = this.props;\r\n    if ((config.column === currentSelected || config.column === newSelected)\r\n      && (currentSelected !== newSelected) && (config.row === 0)) {\r\n      this.updateStateAndTriggerRender();\r\n    }\r\n  }\r\n\r\n  onRemoveLastSelection() {\r\n    this.updateStateAndTriggerRender(false, false);\r\n  }\r\n\r\n  onMouseEnter() {\r\n    const { config } = this.props;\r\n    const { row } = config;\r\n    if (row !== 0) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-cell-mouse-enter-${row}`, row);\r\n    }\r\n  }\r\n\r\n  onCellMouseEnter(row) {\r\n    const { config } = this.props;\r\n    if (config.row === row && config.column !== 0) {\r\n      this.setState({\r\n        hasHover: true\r\n      });\r\n    }\r\n  }\r\n\r\n  onMouseLeave() {\r\n    const { config } = this.props;\r\n    const { row } = config;\r\n    if (row !== 0) {\r\n      this.eventEmitter.emit(`${this.buildTableIndexPath()}-cell-mouse-leave-${row}`, row);\r\n    }\r\n  }\r\n\r\n  onCellMouseLeave(row) {\r\n    const { config } = this.props;\r\n    if (config.row === row && config.column !== 0) {\r\n      this.setState({\r\n        hasHover: false\r\n      });\r\n    }\r\n  }\r\n\r\n  onKeyDownHandler(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      this.onClickHandler(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback method sent as prop to edit mode components.\r\n   * Will forward the changed data to the table component and exit the edit mode(rerender).\r\n   */\r\n  onSelectionChange = (e, textValue, isReadOnly) => {\r\n    if (textValue !== undefined) {\r\n      const pathState = ComponentStateHelper.getState(this);\r\n      const oldValue = StateAttributeAccess.extractTextValue(pathState);\r\n      const { config } = this.props;\r\n      if (textValue !== oldValue) {\r\n        const { row, column } = config;\r\n        this.eventEmitter.emit(`${this.buildTableIndexPath()}-contentUpdate`, textValue, row, column, isReadOnly);\r\n      }\r\n    }\r\n\r\n    this.updateStateAndTriggerRender(false, true);\r\n    this.setState({\r\n      isInEditMode: false\r\n    });\r\n  }\r\n\r\n  buildLabel = (config, pathState) => {\r\n    let label = StateAttributeAccess.extractTextValue(pathState);\r\n    const { text } = config;\r\n\r\n    label = (label === undefined ? text.label : label);\r\n\r\n    if (TableHelper.isInt(label)) {\r\n      label = Number.parseInt(label, 10);\r\n    }\r\n\r\n    if (TableHelper.isFloat(label)) {\r\n      if (config.numberOfDecimalPlaces !== -1) {\r\n        label = Number.parseFloat(label).toFixed(config.numberOfDecimalPlaces);\r\n      } else if (config.defaultNumberOfDecimalPlaces !== 0) {\r\n        label = Number.parseFloat(label).toFixed(config.defaultNumberOfDecimalPlaces);\r\n      }\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  buildTitle = (config, pathState) => {\r\n    const hasError = StateAttributeAccess.extractCellHasError(pathState);\r\n    let title;\r\n    if (hasError) {\r\n      const errorMessage = StateAttributeAccess.extractCellTitle(pathState);\r\n      title = errorMessage !== undefined ? errorMessage : '';\r\n    } else if (config.hasStandardTooltip) {\r\n      title = CommonConfigHelper.buildTitle(config);\r\n      if (title === undefined || title === '') {\r\n        title = config.address;\r\n      }\r\n    }\r\n    return title;\r\n  }\r\n\r\n  /**\r\n   * Helper method used to decide which kind of React component will be rendered as a table cell.\r\n   * In standard mode this will usually return a CbaRichTextField or a <div>. \r\n   * In spreadsheed mode the cell in read mode will be represented by a <div> \r\n   * and in edit mode they'll become a CbaSingleLineInputField or a CbaCombobox.\r\n   */\r\n  buildTableCell = (config, path, runtime, orientation, style) => {\r\n    const { isSpreadsheet, tabIndex } = config;\r\n    const { isInEditMode } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const imageStyle = {\r\n      maxHeight: \"100%\",\r\n      maxWidth: \"100%\"\r\n    }\r\n    let tableCell;\r\n    if (isSpreadsheet) {\r\n      tableCell = (\r\n        <div\r\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaSpreadsheetCell\")}\r\n          style={style}\r\n          data-cba-id={config.pageEditId}\r\n          onClick={this.onClickHandler}\r\n          onDoubleClick={this.onDoubleClickCaptureHandler}\r\n          title={this.buildTitle(config, pathState)}\r\n          onMouseEnter={() => this.onMouseEnter()}\r\n          onMouseLeave={() => this.onMouseLeave()}\r\n          onKeyDown={event => this.onKeyDownHandler(event)}\r\n          tabIndex={tabIndex}\r\n        >\r\n          {config.imageReference\r\n            && <img src={CommonConfigHelper.getProperResourcePath(config.imageReference, runtime)} style={imageStyle} alt=\"\" />}\r\n          {this.buildLabel(config, pathState)}\r\n        </div>\r\n      );\r\n\r\n      // in edit we render a child component \r\n      if (isInEditMode) {\r\n        const cellConfig = {\r\n          config\r\n        }\r\n        if (config.items !== undefined) {\r\n          const comboboxCopy = CbaTableCell.createCellCopy(cellConfig, path, \"CbaComboBox\");\r\n          tableCell = <CbaComboBox config={comboboxCopy.config} path={comboboxCopy.path} runtime={runtime} orientation={orientation} title={this.buildTitle(config, pathState)} onBlur={this.onSelectionChange} isInEditMode={isInEditMode} />\r\n          StateAttributeAccess.setCellType(pathState, \"combo\");\r\n        } else {\r\n          const inputCopy = CbaTableCell.createCellCopy(cellConfig, path, \"CbaSingleLineInputField\");\r\n          tableCell = <CbaSingleLineInputField config={inputCopy.config} path={inputCopy.path} runtime={runtime} orientation={orientation} title={this.buildTitle(config, pathState)} onBlur={this.onSelectionChange} isInEditMode={isInEditMode} />\r\n          StateAttributeAccess.setCellType(pathState, \"text\");\r\n        }\r\n        ComponentStateHelper.registerState(this, pathState);\r\n      }\r\n    } else {\r\n      const delegates = config.cbaChildren.map((child, index) => {\r\n        const childPath = IndexPathHelper.appendIndexToPageSegment(path, index);\r\n\r\n        // Override child config with some of the table cell config attributes,\r\n        // needed for selected/deselected behavior, \r\n        // because the text field model doesn't contain the selectGroupMember attribute\r\n        const childCopy = StateManagerHelper.deepCopy(child);\r\n        childCopy.config.color = config.color;\r\n        childCopy.config.toggleType = \"colorChange\";\r\n        childCopy.config.tabIndex = config.tabIndex;\r\n\r\n        return (\r\n          <CbaRichTextField\r\n            key={childPath}\r\n            config={childCopy.config}\r\n            path={childPath}\r\n            runtime={runtime}\r\n            orientation={orientation}\r\n            row={config.row}\r\n            column={config.column}\r\n            parentTableUserDefId={config.parentTableUserDefId}\r\n            onParentClick={this.onClickHandler}\r\n            checkSelectable={this.checkSelectable}\r\n          />\r\n        )\r\n      });\r\n\r\n      // shrink borders inside the cell\r\n      style.boxSizing = 'border-box';\r\n      tableCell = (\r\n        <div\r\n          className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaTableCell\")}\r\n          style={style}\r\n          data-cba-id={config.pageEditId}\r\n          onClick={this.onClickHandler}\r\n          title={CommonConfigHelper.buildTitle(config)}\r\n          tabIndex={delegates.length ? \"-1\" : tabIndex}\r\n          onKeyDown={event => this.onKeyDownHandler(event)}\r\n        >\r\n          {config.imageReference\r\n            && <img src={CommonConfigHelper.getProperResourcePath(config.imageReference, runtime)} style={imageStyle} alt=\"\" />}\r\n          {delegates}\r\n        </div>\r\n      )\r\n    }\r\n    return tableCell;\r\n  }\r\n\r\n  /**\r\n   * The method returns the index path of the parent table\r\n   */\r\n  buildTableIndexPath() {\r\n    const { path } = this.props;\r\n    return IndexPathHelper.dropIndexFromPageSegment(path);\r\n  }\r\n\r\n  traceCellModified(event, oldEvaluatedValue, newEvaluatedValue, oldValue, newValue, errorInFormula) {\r\n    const { config, path, runtime } = this.props;\r\n    const { row, column } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const tablePath = this.buildTableIndexPath();\r\n    const tableUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(tablePath, runtime);\r\n    const currentCellType = StateAttributeAccess.extractCellType(pathState);\r\n    const cellType = TableHelper.isFormula(newValue) ? 'formula' : currentCellType;\r\n    const oldCellType = TableHelper.isFormula(oldValue) ? 'formula' : currentCellType;\r\n    const oldErrorState = Number.isNaN(Number.parseFloat(oldEvaluatedValue));\r\n    let traceDetails;\r\n\r\n    if (oldCellType !== 'formula') {\r\n      // do not show old evaluated value for old text cells  \r\n      oldValue = oldEvaluatedValue;\r\n      oldEvaluatedValue = undefined;\r\n    } else if (oldErrorState) {\r\n      // do not show old evaluated value for old formula cells with errors \r\n      oldEvaluatedValue = undefined;\r\n    }\r\n\r\n    // do not show new evaluated value for new formula cells with errors \r\n    if (errorInFormula) {\r\n      newEvaluatedValue = undefined;\r\n    }\r\n\r\n    if (cellType === 'formula') {\r\n      traceDetails = {\r\n        tableUserDefIdPath,\r\n        tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n        row,\r\n        column,\r\n        oldValue,\r\n        newValue,\r\n        cellType,\r\n        oldEvaluatedValue,\r\n        newEvaluatedValue,\r\n        errorInFormula\r\n      }\r\n    } else {\r\n      newValue = newEvaluatedValue;\r\n      traceDetails = {\r\n        tableUserDefIdPath,\r\n        tableUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(tableUserDefIdPath),\r\n        row,\r\n        column,\r\n        oldValue,\r\n        newValue,\r\n        cellType,\r\n        oldEvaluatedValue\r\n      }\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteraction(\"TableCellModified\", path, traceDetails,\r\n      event,\r\n      undefined,\r\n      runtime);\r\n  }\r\n\r\n  /**\r\n   * Helper method used to create a copy of the cell coponent and override some info.\r\n   * @param {*} cell the table cell component instance\r\n   * @param {*} type the type of the copy created\r\n   */\r\n  static createCellCopy(cell, path, type) {\r\n    const cellCopy = StateManagerHelper.deepCopy(cell);\r\n    cellCopy.config.userDefinedId = undefined;\r\n    cellCopy.type = type;\r\n    cellCopy.path = IndexPathHelper.appendIndexToPageSegment(path, 0);\r\n    return cellCopy;\r\n  }\r\n\r\n  static getFormulaOrValue(selector, userDefPath, runtime) {\r\n    const cellState = runtime.componentStateManager.findOrBuildStateByUserDefPath(userDefPath, runtime);\r\n    if (selector === 'formula') {\r\n      return StateAttributeAccess.extractFormula(cellState);\r\n    }\r\n    return StateAttributeAccess.extractTextValue(cellState);\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n    const { hasHover } = this.state;\r\n    const hoverBackgroundColor = \"-webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(235, 235, 235)), to(rgb(213, 213, 213)))\";\r\n\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const selectedState = StateAttributeAccess.extractSelected(pathState);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\r\n\r\n    const { isSpreadsheet } = config;\r\n    if (isSpreadsheet) {\r\n      // when a cell has hover a grey gradient will be applied to its background, \r\n      // otherwise should return to its previous state\r\n      if (hasHover) {\r\n        CommonConfigHelper.setStyleAttribute(style, \"background\", hoverBackgroundColor);\r\n      } else if (selectedState) {\r\n        CommonConfigHelper.setStyleAttribute(style, \"background\", config.color.background.selected);\r\n      } else {\r\n        CommonConfigHelper.setStyleAttribute(style, \"background\", config.color.background.default);\r\n      }\r\n\r\n      // these are styling settings to keep the label inside the cell \r\n      CommonConfigHelper.setStyleAttribute(style, \"textOverflow\", \"ellipsis\");\r\n      CommonConfigHelper.setStyleAttribute(style, \"whiteSpace\", \"nowrap\");\r\n      CommonConfigHelper.setStyleAttribute(style, \"overflow\", \"hidden\");\r\n\r\n    }\r\n\r\n    return this.buildTableCell(config, path, runtime, orientation, style);\r\n  }\r\n\r\n}\r\n\r\nCbaTableCell.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        row: PropTypes.number.isRequired,\r\n        column: PropTypes.number.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDrop, useDrag } from 'react-dnd'\r\nimport TreeUtils from '../TreeUtils';\r\nimport DragAndDropHelper from '../../../config/DragAndDropHelper';\r\nimport PropTypesHelper from '../../PropTypesHelper';\r\n\r\n\r\nexport default function CbaTreeHeader(props) {\r\n  const { column } = props;\r\n  const { mouseOver, label, font } = column;\r\n  // const style = TreeUtils.buildTreeCellStyle(column); use this when/if generator generates the full column header style\r\n  const style = {\r\n    textAlign: font ? font.alignmentHorizontal : \"\"\r\n  }\r\n\r\n  const headerRef = useRef(null);\r\n\r\n  const [collectedPropsDrop, drop] = useDrop({\r\n    accept: `${column.parentPath}-header`,\r\n    drop: (item) => {\r\n      TreeUtils.handleColumnMove(column, item.id);\r\n    },\r\n    canDrop: item => item.id !== column.key,\r\n    collect: monitor => ({\r\n      dragIsOver: monitor.isOver(),\r\n      dragCanDrop: monitor.canDrop(),\r\n    })\r\n  });\r\n\r\n  const [, drag] = useDrag({\r\n    item: {\r\n      id: column.key,\r\n      type: `${column.parentPath}-header`\r\n    },\r\n    canDrag: () => column.moveable\r\n  });\r\n\r\n  drag(drop(headerRef));\r\n\r\n  DragAndDropHelper.addCanDropStyleAttributes(style, collectedPropsDrop);\r\n\r\n  return (\r\n    <div\r\n      title={mouseOver}\r\n      className=\"CbaTreeHeaderInner\"\r\n      style={style}\r\n      ref={headerRef}\r\n    >\r\n      <span>{label}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nCbaTreeHeader.propTypes = {\r\n  column: PropTypes.shape(PropTypesHelper.getCbaTreeColumnConfig())\r\n}\r\n\r\nCbaTreeHeader.defaultProps = {\r\n  column: {\r\n    label: \"default\",\r\n    key: \"\"\r\n  }\r\n}\r\n","import CommonActionsHelper from \"../CommonActionsHelper\";\r\nimport TreeUtils from \"./TreeUtils\";\r\n\r\nexport default class TreeTraceHelper {\r\n\r\n  /**\r\n   * Trace tree view sort action \r\n  */\r\n  static traceSort(path, columnId, sortDirection, runtime) {\r\n\r\n    const { treeColumns } = TreeUtils.getTreeDataByPath(path, runtime);\r\n\r\n    let columnName;\r\n    let columnIndex;\r\n\r\n    treeColumns.forEach((column, index) => {\r\n      if (column.key === columnId) {\r\n        columnName = column.label;\r\n        columnIndex = index;\r\n      }\r\n    });\r\n\r\n    const traceDetails = {\r\n      columnName,\r\n      columnIndex,\r\n      sortDirection: TreeTraceHelper.getSortDirectionForTrace(sortDirection)\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteraction(\"TreeViewSort\", path, traceDetails, undefined, undefined, runtime);\r\n  }\r\n\r\n  static getSortDirectionForTrace(sortDirection) {\r\n    switch (sortDirection) {\r\n      case 'ASC':\r\n        return 'ascending';\r\n      case 'DESC':\r\n        return 'descending';\r\n      case 'NONE':\r\n        return 'none';\r\n      default:\r\n        return `<unknown: ${sortDirection}>`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traces any kind of node action \r\n   */\r\n  static traceNodeAction(actionType, treePath, rowData, runtime, oldValue, newValue, columnName) {\r\n    const { isTreeView, treeViewPath, nodeType, nodePathId, nodeTypes } = rowData;\r\n    const eventType = isTreeView ? \"TreeViewNode\" : \"TreeNode\";\r\n    const path = isTreeView ? treeViewPath : treePath;\r\n\r\n    let triggeredEvent;\r\n    let nodeName;\r\n\r\n    if (!newValue && !oldValue && !columnName) {\r\n      nodeName = TreeUtils.getNodeName(rowData);\r\n    }\r\n\r\n    if (nodeType && nodeTypes) {\r\n      const nodeTypeInstance = TreeUtils.getNodeType(nodeTypes, nodeType);\r\n      const { deleteEvent } = nodeTypeInstance;\r\n      triggeredEvent = TreeTraceHelper.isTriggeredEventRequired(deleteEvent, actionType) ? deleteEvent : undefined;\r\n    }\r\n\r\n    const traceDetails = {\r\n      operation: actionType,\r\n      nodeName,\r\n      oldValue,\r\n      newValue,\r\n      columnName,\r\n      nodeType,\r\n      nodePathId,\r\n      triggeredEvent\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteraction(eventType, path, traceDetails, undefined, undefined, runtime);\r\n  }\r\n\r\n  static isTriggeredEventRequired = (deleteEvent, operation) => deleteEvent !== undefined && deleteEvent !== \"\" && operation === \"delete\";\r\n\r\n}\r\n","import TreeUtils from \"./TreeUtils\";\r\nimport TreeTraceHelper from \"./TreeTraceHelper\";\r\n\r\nexport default class TreeContextMenuHelper {\r\n\r\n  static openContextMenu(event, rowData, columnKey) {\r\n    event.persist();\r\n    const { runtime } = rowData;\r\n    const entries = TreeContextMenuHelper.buildContextMenuEntries(rowData, columnKey);\r\n\r\n    if (entries.length) {\r\n      runtime.contextMenu.openMenuItemTree({\r\n        event,\r\n        entries\r\n      })\r\n    }\r\n  }\r\n\r\n  static buildContextMenuEntries = (rowData, columnKey) => {\r\n    const { nodeType, nodeTypes } = rowData;\r\n    const nodeTypeInstance = TreeUtils.getNodeType(nodeTypes, nodeType);\r\n    const { contextMenuCommands } = nodeTypeInstance;\r\n\r\n    return contextMenuCommands.map((entry) => {\r\n      let command = Object.assign({}, entry);\r\n      switch (entry.type) {\r\n        case \"action\": command = TreeContextMenuHelper.buildContextMenuActionEntry(command, rowData, columnKey); break;\r\n        case \"submenu\": command = Object.assign(command, {\r\n          submenu: command.submenu.map(e => TreeContextMenuHelper.buildContextMenuActionEntry(e, rowData, columnKey)),\r\n          disabled: !command.submenu.length\r\n        }); break;\r\n        default: console.error(\"Invalid context menu config in tree\", rowData);\r\n      }\r\n\r\n      return command;\r\n    });\r\n  }\r\n\r\n  static buildContextMenuActionEntry(entry, rowData, columnKey) {\r\n    const actionEntry = Object.assign({}, entry);\r\n    const { action } = entry;\r\n\r\n    switch (action) {\r\n      case \"CUT\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeCut);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"COPY\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeCopy);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"PASTE\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreePaste);\r\n        actionEntry.disabled = TreeContextMenuHelper.handlePasteDisabled(rowData);\r\n        break;\r\n      case \"DELETE\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeDelete);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"RENAME\": // rename operation needs specific data for tracing, thus we'll trace inside the rename handler\r\n        actionEntry.action = () => TreeUtils.startRenameOperation(rowData, columnKey);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      case \"NEW\":\r\n        actionEntry.action = () => TreeContextMenuHelper.buildContextMenuAction(action, rowData, TreeUtils.doTreeNew, actionEntry.label);\r\n        actionEntry.disabled = false;\r\n        break;\r\n      default: console.error(\"Invalid context menu config in tree\", rowData);\r\n    }\r\n\r\n    return actionEntry;\r\n  }\r\n\r\n  static buildContextMenuAction = (actionType, rowData, actionHandler, label) => {\r\n    const { path: nodePath, treePath, runtime, isTreeView, treeViewPath } = rowData;\r\n\r\n    TreeTraceHelper.traceNodeAction(actionType.toLowerCase(), treePath, rowData, runtime);\r\n    actionHandler(treePath, nodePath, runtime, label, isTreeView, treeViewPath);\r\n  }\r\n\r\n  static handlePasteDisabled = (rowData) => {\r\n    const { treePath, runtime, path: nodePath, nodeType: nodeTypeName } = rowData;\r\n\r\n    const { treeState, nodeTypes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const { copiedNode, currentlyCutNodePath } = treeState;\r\n    const nodeType = TreeUtils.getNodeType(nodeTypes, nodeTypeName);\r\n\r\n    // mark as disabled if there is no node to paste\r\n    if (!treeState.copiedNode) {\r\n      return true;\r\n    }\r\n\r\n    // mark as disabled if the copied node does not have the accepted node type\r\n    if (!nodeType.childTypes.includes(copiedNode.nodeType)) {\r\n      return true;\r\n    }\r\n\r\n    // mark as disabled if cut node is a parent of the node that opened context menu\r\n    if (copiedNode && currentlyCutNodePath) {\r\n      let cutNodes = []\r\n      if (copiedNode.nodes.length) {\r\n        cutNodes = TreeUtils.flattenNodes(copiedNode.nodes);\r\n      }\r\n      cutNodes.push(copiedNode);\r\n\r\n      if (cutNodes.find(n => n.path === nodePath)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // mark enabled if it gets here\r\n    return false\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TreeUtils from '../TreeUtils';\r\nimport TreeContextMenuHelper from '../TreeContextMenuHelper';\r\nimport CommonActionsHelper from '../../CommonActionsHelper';\r\nimport ComponentStateHelper from '../../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../../state/StateAttributeAccess';\r\nimport Utils from '../../../utils/Utils';\r\nimport TreeTraceHelper from '../TreeTraceHelper';\r\nimport PropTypesHelper from '../../PropTypesHelper';\r\n\r\n\r\nexport default class CbaTreeCell extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = this.getInitialState();\r\n    this.inputRef = React.createRef();\r\n  }\r\n\r\n  handleContextMenuClick = (event, updateOnSingleClick) => {\r\n    const { rowData, column } = this.props;\r\n    const { onRowSelect, runtime, isReadOnly } = rowData;\r\n\r\n    if (!runtime.contextMenu) console.error(\"Context menu not found in tree row\", rowData);\r\n\r\n    if (updateOnSingleClick) {\r\n      onRowSelect(event, rowData);\r\n    }\r\n\r\n    if (!isReadOnly) {\r\n      TreeContextMenuHelper.openContextMenu(event, rowData, column.key);\r\n    }\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  handleRenameCell = () => {\r\n    // setTimeout needed because method is called from render function\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isRenameState: true,\r\n        cellEditedValue: this.getInitialState().cellEditedValue\r\n      }, () => {\r\n        const { rowData } = this.props;\r\n        const { treePath, runtime } = rowData;\r\n        const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n        const pathState = ComponentStateHelper.getState(treeInstance);\r\n        const treeState = StateAttributeAccess.extractTreeState(pathState) || {};\r\n\r\n        treeState.currentRenameNode = null;\r\n\r\n        StateAttributeAccess.setTreeState(pathState, treeState);\r\n        ComponentStateHelper.registerState(treeInstance, pathState);\r\n\r\n        this.inputRef.current.focus();\r\n      });\r\n    }, 0)\r\n  }\r\n\r\n  handleCellInputFocus = (event) => {\r\n    event.target.select();\r\n  }\r\n\r\n  handleCellInputBlur = (event) => {\r\n    const { rowData, column } = this.props;\r\n    const { cellEditedValue } = this.state;\r\n    const initialState = this.getInitialState();\r\n\r\n    if (initialState.cellEditedValue !== cellEditedValue) {\r\n      TreeUtils.doTreeRename(rowData, column.key, cellEditedValue);\r\n    }\r\n\r\n    this.setState(this.getInitialState());\r\n  }\r\n\r\n  handleCellInputKeyDown = (event) => {\r\n    event.stopPropagation();\r\n    if (Utils.keyCodes.Enter === event.keyCode) {\r\n      // blur to save state\r\n      this.inputRef.current.blur();\r\n    }\r\n\r\n    if (Utils.keyCodes.Escape === event.keyCode) {\r\n      // ESC to cancel saving state\r\n      this.setState(this.getInitialState())\r\n    }\r\n  }\r\n\r\n  handleCellInputChange = (event) => {\r\n    event.stopPropagation();\r\n    const newValue = event.target.value;\r\n\r\n    this.setState(() => ({\r\n      cellEditedValue: newValue\r\n    }))\r\n\r\n    return false;\r\n  }\r\n\r\n  onDoubleClick = (event, updateOnSingleClick, onRowSelect, rowData) => {\r\n    event.stopPropagation();\r\n    const { treePath, runtime } = rowData;\r\n    TreeTraceHelper.traceNodeAction(\"doubleClick\", treePath, rowData, runtime);\r\n\r\n    if (!updateOnSingleClick) {\r\n      onRowSelect(event, rowData)\r\n    }\r\n  }\r\n\r\n  getCellData = () => {\r\n    const { rowData, column } = this.props;\r\n    const { cells } = rowData;\r\n    return cells.find(cell => cell.columnId === column.key) || {};\r\n  }\r\n\r\n  getInitialState = () => {\r\n    const cellData = this.getCellData();\r\n    return {\r\n      isRenameState: false,\r\n      cellEditedValue: cellData ? cellData.label : \"\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { rowData, idx, column } = this.props;\r\n    const { isRenameState, cellEditedValue } = this.state;\r\n    const { expanded, nodes, imagePath, depth, isLeaf, onRowExpandClick, onRowSelect, updateOnSingleClick, isTreeView, path: rowPath, runtime, treePath } = rowData;\r\n    const cellData = this.getCellData();\r\n\r\n    // JSX Conditionals\r\n    const hasSubRows = (nodes.length !== 0);\r\n\r\n    // CellData\r\n    const value = cellData.label || \"\";\r\n    const title = cellData.mouseOver || \"\";\r\n\r\n    // Styles\r\n    const rowStartStyle = {\r\n      paddingLeft: `${(depth - 1) * 16}px`\r\n    }\r\n    const rowImageStyle = {\r\n      backgroundImage: imagePath ? `url(${imagePath})` : null\r\n    }\r\n    const cellOuterStyle = {\r\n      width: column.width,\r\n      height: rowData.height,\r\n      left: column.left\r\n    }\r\n    const cellStyle = TreeUtils.buildTreeCellStyle(cellData);\r\n\r\n\r\n    // click logic\r\n    let updateOnClick;\r\n    if (isTreeView) {\r\n      updateOnClick = isLeaf;\r\n    } else {\r\n      updateOnClick = updateOnSingleClick;\r\n    }\r\n\r\n    // check if renamed\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const { currentRenameNode } = treeState;\r\n    if (currentRenameNode && currentRenameNode.cellPath === TreeUtils.buildCellPath(rowPath, column.key) && currentRenameNode.isTreeView === isTreeView) {\r\n      this.handleRenameCell();\r\n    }\r\n\r\n    return (\r\n      <div className=\"react-grid-Cell\" style={cellOuterStyle}>\r\n        <div\r\n          className=\"CbaTreeCellInner\"\r\n          onClick={event => (updateOnClick ? onRowSelect(event, rowData) : event.stopPropagation())}\r\n          onDoubleClick={event => this.onDoubleClick(event, updateOnClick, onRowSelect, rowData)}\r\n          onContextMenu={event => this.handleContextMenuClick(event, updateOnClick)}\r\n          title={title}\r\n          style={cellStyle}\r\n        >\r\n          {idx === 0 && (\r\n            <div className=\"CbaTreeCellInner-rowStart\" style={rowStartStyle}>\r\n              <div\r\n                className={`CbaTreeCellInner-expander ${expanded ? \"expanded\" : \"\"} ${hasSubRows ? \"hasSubRows\" : \"\"}`}\r\n                onClick={event => onRowExpandClick(event, rowData)}\r\n              />\r\n              <div className=\"CbaTreeCellInner-image\" style={rowImageStyle} />\r\n            </div>\r\n          )}\r\n\r\n          {!isRenameState && <div className=\"CbaTreeCellInner-value\" title={value}>{value}</div>}\r\n          {isRenameState && (\r\n            <input\r\n              ref={this.inputRef}\r\n              type=\"text\"\r\n              value={cellEditedValue}\r\n              onBlur={this.handleCellInputBlur}\r\n              onFocus={this.handleCellInputFocus}\r\n              onKeyDown={this.handleCellInputKeyDown}\r\n              onChange={this.handleCellInputChange}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTreeCell.propTypes = {\r\n  column: PropTypes.shape(PropTypesHelper.getCbaTreeColumnConfig()),\r\n  rowData: PropTypes.shape(PropTypesHelper.getCbaTreeRowConfig()).isRequired,\r\n  idx: PropTypes.number.isRequired\r\n}\r\n\r\n\r\nCbaTreeCell.defaultProps = {\r\n  column: {\r\n    label: \"default\"\r\n  }\r\n}\r\n","import React, { useRef, PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDrop, useDrag } from 'react-dnd';\r\nimport CbaTreeCell from './CbaTreeCell';\r\nimport PropTypesHelper from '../../PropTypesHelper';\r\nimport DragAndDropHelper from '../../../config/DragAndDropHelper';\r\nimport TreeUtils from '../TreeUtils';\r\nimport TreeTraceHelper from '../TreeTraceHelper';\r\n\r\nconst CbaTreeRow = (props) => {\r\n  const { row, columns, idx, height } = props;\r\n  const { nodeTypes, nodeType, treePath, runtime, isReadOnly } = row;\r\n\r\n  const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n  const { currentNode, currentlyCutNodePath } = treeState\r\n\r\n  const selectedClass = currentNode === row.path ? \"selected\" : \"\";\r\n  const cutClass = currentlyCutNodePath === row.path ? \"cut\" : \"\";\r\n  const reactGridClass = idx % 2 ? \"react-grid-Row--even\" : \"react-grid-Row--odd\";\r\n\r\n  const width = columns.map(c => c.width).reduce((accum, reducer) => accum + reducer, 0);\r\n\r\n  const rowStyle = {\r\n    height,\r\n    width\r\n  }\r\n\r\n  const nodeTypeInstance = TreeUtils.getNodeType(nodeTypes, nodeType);\r\n  const treeAction = TreeUtils.getTreeDragDropAction(treePath, runtime);\r\n\r\n  let hoverCount = 0;\r\n  let firstHover;\r\n\r\n  const rowRef = useRef(null);\r\n  const [collectedPropsDrop, drop] = useDrop({\r\n    accept: nodeTypes.map(ct => `${treePath}-${ct.name}`),\r\n    hover: () => {\r\n      hoverCount += 1;\r\n\r\n      if (hoverCount === 1) {\r\n        firstHover = new Date();\r\n      }\r\n\r\n      const deltaTime = new Date() - firstHover;\r\n\r\n      if (deltaTime > 1400 && deltaTime < 1600) {\r\n        row.onRowExpandClick(null, row, true);\r\n      }\r\n    },\r\n    drop: (item) => {\r\n      switch (treeAction) {\r\n        case \"DROP_COPY\": TreeUtils.doTreeCopyAction(treePath, item.path, row.path, runtime); break;\r\n        case \"DROP_MOVE\": TreeUtils.doTreeMoveAction(treePath, item.path, row.path, runtime); break;\r\n        case \"DROP_SWITCH\":\r\n        case \"DROP_NONE\": break;\r\n        default: console.error(\"Invalid Tree drag&dropMode\", treePath);\r\n      }\r\n\r\n      TreeTraceHelper.traceNodeAction(\"drop\", treePath, row, runtime, undefined);\r\n    },\r\n    canDrop: item => TreeUtils.canNodeTypeDrop(nodeTypeInstance, treePath, runtime, item.nodeType, isReadOnly),\r\n    collect: monitor => ({\r\n      dragIsOver: monitor.isOver(),\r\n      dragCanDrop: monitor.canDrop(),\r\n    })\r\n  });\r\n\r\n  const [, drag] = useDrag({\r\n    item: {\r\n      path: row.path,\r\n      type: `${treePath}-${nodeType}`,\r\n      nodePathId: row.nodePathId,\r\n      nodeType: row.nodeType,\r\n      runtime\r\n    },\r\n    canDrag: () => TreeUtils.canNodeTypeDrag(nodeTypeInstance, treePath, runtime, isReadOnly),\r\n    begin: () => {\r\n      TreeTraceHelper.traceNodeAction(\"drag\", treePath, row, runtime, undefined);\r\n    }\r\n  });\r\n\r\n  drag(drop(rowRef));\r\n\r\n  DragAndDropHelper.addCanDropStyleAttributes(rowStyle, collectedPropsDrop);\r\n\r\n  return (\r\n    <div\r\n      ref={rowRef}\r\n      style={rowStyle}\r\n      className={` react-grid-Row ${selectedClass} ${cutClass} ${reactGridClass}`}\r\n    >\r\n      {columns.map((column, index) => (\r\n        <CbaTreeCell key={column.key} column={column} rowData={row} idx={index} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nCbaTreeRow.propTypes = {\r\n  columns: PropTypes.arrayOf(PropTypes.shape(PropTypesHelper.getCbaTreeColumnConfig())).isRequired,\r\n  row: PropTypes.shape(PropTypesHelper.getCbaTreeRowConfig()).isRequired,\r\n  idx: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired\r\n}\r\n\r\n/**\r\n * Passthrough component required because CbaTreeRow is a functional component and the library react-data-grid uses ref's on it\r\n * Refs are only supported on Components\r\n */\r\nclass CbaTreeRowWrapper extends PureComponent {\r\n\r\n  render() {\r\n    return <CbaTreeRow {...this.props} />\r\n  }\r\n\r\n}\r\n\r\nexport default CbaTreeRowWrapper;\r\n","import React from 'react';\r\nimport Utils from '../../utils/Utils';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport PathTranslationHelper from '../../state/PathTranslationHelper';\r\nimport { CbaTreeHeader } from './DataGridRenderers';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport TreeTraceHelper from './TreeTraceHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\n/**\r\n * Helper class for CbaTree, CbaTreeView & CbaTreeChildArea:\r\n * \r\n * - contains constans\r\n * \r\n * - contains static methods\r\n *\r\n *  ____________________\r\n * | TREE   | TREE VIEW |\r\n * |________|___________|\r\n * |  TREE CHILD AREA   |\r\n * |____________________|\r\n * \r\n */\r\nexport default class TreeUtils {\r\n\r\n  static\r\n    const = {\r\n      COLUMN_HEIGHT: 34,\r\n      ROW_HEIGHT: 25,\r\n      DEFAULT_COLUMN: {\r\n        label: \"default\",\r\n        isPrimary: true,\r\n        isDefault: true\r\n      }\r\n    }\r\n\r\n  /* Static string builder functions */\r\n\r\n  static buildCellPath = (rowPath, columnPath) => `${rowPath}_${columnPath}`;\r\n\r\n  static buildColumnId = (path, index) => `${path}--${index}`;\r\n\r\n  static generateNodePathId = (node, parentNode) => `${parentNode.nodePathId}_${node.userDefinedId}-${parentNode.children + 1}`;\r\n\r\n  static generateNodePathIdChild = (node, parentNode) => `${parentNode.nodePathId}_${node.nodePathId.split(\"_\").slice(-1).pop()}`;\r\n\r\n  /** Get the name for change events issued by the given tree (specified as full index path). */\r\n  static getTreeEventChangeName = treePath => `${treePath}-TreeChangeEvent`;\r\n\r\n  static getTreePathFromColumnPath = columnPath => columnPath.split(\"--\")[0];\r\n\r\n\r\n  /* Initialisation functions */\r\n  static initTreeNodes(rootNodes, nodeTypes, path, runtime, treeSettings) {\r\n    rootNodes = Utils.deepCopy(rootNodes);\r\n\r\n    TreeUtils.resetPathsToNodes(rootNodes, path);\r\n\r\n    TreeUtils.parseNodes(rootNodes, (node) => {\r\n      const nodeType = TreeUtils.getNodeType(nodeTypes, node.nodeType);\r\n\r\n      node.cells = node.cells.map((cell, index) => {\r\n        cell.columnId = TreeUtils.buildColumnId(path, index);\r\n        return cell;\r\n      });\r\n\r\n      node.isLeaf = nodeType.childTypes.length === 0; // leaf is defined by not having the possiblity of children.\r\n      node.imagePath = CommonConfigHelper.getProperResourcePath(nodeType.image, runtime);\r\n      node.expanded = TreeUtils.isNodeExpandedAtInit(node, nodeType, treeSettings.startCollapsed);\r\n      node.children = node.nodes.length - 1; // needed to compute the userDefPath of pasted/new nodes\r\n      return true;\r\n    });\r\n\r\n    return rootNodes;\r\n  }\r\n\r\n  static initTreeColumns(columns, path) {\r\n    columns = Utils.deepCopy(columns);\r\n\r\n    if (columns.length === 0) {\r\n      columns.push(TreeUtils.const.DEFAULT_COLUMN);\r\n    }\r\n\r\n    return columns.map((column, index) => {\r\n      column.key = TreeUtils.buildColumnId(path, index);\r\n      column.name = column.label;\r\n\r\n      if (column.width === 0) {\r\n        delete column.width;\r\n      }\r\n\r\n      return column\r\n    });\r\n\r\n  }\r\n\r\n  static initTreeState(columns) {\r\n    const modifiedColumns = {}\r\n    columns.forEach((column, index) => {\r\n      modifiedColumns[column.key] = {\r\n        order: index,\r\n        width: column.width\r\n      }\r\n    });\r\n\r\n    return {\r\n      modifiedColumns\r\n    }\r\n  }\r\n\r\n  /* Column operations */\r\n  static handleColumnResize(columnKey, newWidth, instance) {\r\n    const state = ComponentStateHelper.getState(instance);\r\n    const treeState = StateAttributeAccess.extractTreeState(state) || {};\r\n\r\n    treeState.modifiedColumns[columnKey].width = newWidth;\r\n\r\n    StateAttributeAccess.setTreeState(state, treeState);\r\n    ComponentStateHelper.registerState(instance, state);\r\n  }\r\n\r\n  static handleColumnMove(displayDroppedColumn, draggedColumnId) {\r\n    const { runtime, key, parentPath } = displayDroppedColumn;\r\n    const treePath = TreeUtils.getTreePathFromColumnPath(key);\r\n\r\n    const parentInstance = runtime.componentDirectory.findComponent(parentPath);\r\n    const parentPathState = ComponentStateHelper.getState(parentInstance);\r\n    const parentTreeState = StateAttributeAccess.extractTreeState(parentPathState) || {};\r\n    const { modifiedColumns } = parentTreeState;\r\n\r\n    const draggedColumn = modifiedColumns[draggedColumnId];\r\n    const droppedColumn = modifiedColumns[displayDroppedColumn.key];\r\n\r\n    // figure out direction of dragging\r\n    const isDraggedToStart = draggedColumn.order > droppedColumn.order;\r\n\r\n    Object.keys(modifiedColumns)\r\n      .map((columnKey) => {\r\n        const column = modifiedColumns[columnKey];\r\n\r\n        // drag column gets the order of the dropped column\r\n        if (columnKey === draggedColumnId) {\r\n          return {\r\n            key: columnKey,\r\n            order: droppedColumn.order\r\n          }\r\n        }\r\n\r\n        // handle drag to start case\r\n        if (isDraggedToStart && (column.order >= droppedColumn.order && column.order < draggedColumn.order)) {\r\n          return {\r\n            key: columnKey,\r\n            order: column.order + 1\r\n          }\r\n        }\r\n\r\n        // handle drag to end case\r\n        if (!isDraggedToStart && (column.order > draggedColumn.order && column.order <= droppedColumn.order)) {\r\n          return {\r\n            key: columnKey,\r\n            order: column.order - 1\r\n          }\r\n        }\r\n\r\n        return {\r\n          key: columnKey,\r\n          order: column.order\r\n        }\r\n\r\n      }).forEach((column) => {\r\n        modifiedColumns[column.key].order = column.order;\r\n      });\r\n\r\n    StateAttributeAccess.setTreeState(parentPathState, parentTreeState);\r\n    ComponentStateHelper.registerState(parentInstance, parentPathState);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static getDisplayColumns(treeColumns, sortable, modifiedColumns, parentPath, runtime) {\r\n    treeColumns = Utils.deepCopy(treeColumns);\r\n\r\n    return treeColumns.map((column) => {\r\n      column.sortable = sortable;\r\n      column.headerRenderer = <CbaTreeHeader column={column} />;\r\n      column.parentPath = parentPath;\r\n      column.runtime = runtime;\r\n\r\n      // handles losing resize on rerender\r\n      if (modifiedColumns && modifiedColumns[column.key] && modifiedColumns[column.key].width) {\r\n        column.width = modifiedColumns[column.key].width;\r\n      }\r\n      return column;\r\n    }).sort(TreeUtils.sortAscendingByParameter(\"order\", c => modifiedColumns[c.key].order));\r\n  }\r\n\r\n  static isDefaultColumn(treeColumns) {\r\n    return treeColumns.length === 1 && treeColumns[0].isDefault;\r\n  }\r\n\r\n  /**\r\n   * Calculate the array of nodes (= rows) to be displayed in the CbaTree.\r\n   * \r\n   * We start with the given root nodes and flatten their subtrees out:\r\n   *  - drop leaf nodes (i.e. isLeaf flag is set on the node) if the hideLeaves flag is set\r\n   *  - include child nodes in the flat result if the expanded flag is true for the parent node\r\n   *  - sort the resulting list of nodes by their index path\r\n   *  - for each node calculate its depth in the node hierarchy\r\n   * \r\n   * @param {*} rootNodes An array of root nodes to start with.\r\n   * @param {*} path The path of the Tree that contains the tree nodes.\r\n   * @param {*} hideLeaves Should we drop leaf nodes from the result?\r\n   * @returns \r\n   */\r\n  static getTreeDisplayNodes(rootNodes, path, hideLeaves) {\r\n    rootNodes = Utils.deepCopy(rootNodes);\r\n    const flatmap = [];\r\n    TreeUtils.parseNodes(rootNodes, (node) => {\r\n      if (!(node.isLeaf && hideLeaves)) {\r\n        flatmap.push(node);\r\n      }\r\n\r\n      return node.expanded;\r\n    });\r\n\r\n    flatmap.sort(TreeUtils.sortAscendingByIndexHierarchy(path));\r\n    flatmap.map((node) => {\r\n      node.depth = IndexPathHelper.extractTreeChildPathFromTreePath(path, node.path).split(\"/\").length - 1\r\n\r\n      return node;\r\n    });\r\n\r\n    return flatmap;\r\n  }\r\n\r\n  static getTreeViewDisplayNodes(treeNodes, treePath, filterLeaves, selectedNodePath, sort) {\r\n    const allNodes = Utils.deepCopy(treeNodes);\r\n    const isRoot = !selectedNodePath;\r\n    const selectedNode = TreeUtils.getNode(allNodes, selectedNodePath);\r\n\r\n    let shownNodes;\r\n\r\n    if (!isRoot && selectedNode) {\r\n      shownNodes = selectedNode.isLeaf ? TreeUtils.getParentNode(allNodes, selectedNode.path).nodes : selectedNode.nodes;\r\n    } else {\r\n      shownNodes = allNodes;\r\n    }\r\n\r\n    const flatmap = shownNodes.map((child) => {\r\n      child.expanded = false;\r\n      child.depth = 1;\r\n      child.nodes = [];\r\n      return child;\r\n    });\r\n\r\n    const sortCellFinderFunction = (node, param) => {\r\n      const cell = node.cells.find(c => c.columnId === sort.column);\r\n      return cell ? cell[param] : \"\";\r\n    };\r\n\r\n    switch (sort.type) {\r\n      case \"NONE\": flatmap.sort(TreeUtils.sortAscendingByIndexHierarchy(treePath)); break;\r\n      case \"ASC\": flatmap.sort(TreeUtils.sortAscendingByParameter(\"label\", sortCellFinderFunction)); break;\r\n      case \"DESC\": flatmap.sort(TreeUtils.sortDescendingByParameter(\"label\", sortCellFinderFunction)); break;\r\n      default: flatmap.sort(TreeUtils.sortAscendingByIndexHierarchy(treePath)); break;\r\n    }\r\n\r\n    const filteredFlatMap = filterLeaves ? flatmap.filter(child => child.isLeaf && filterLeaves) : flatmap;\r\n\r\n    return filteredFlatMap;\r\n  }\r\n\r\n  /* helper methods */\r\n  static resetPathsToNodes(nodes, rootPath) {\r\n    nodes.forEach((node, index) => {\r\n      node.path = IndexPathHelper.appendIndexToPageSegment(rootPath, index);\r\n\r\n      if (node.nodes.length > 0) {\r\n        TreeUtils.resetPathsToNodes(node.nodes, node.path)\r\n      }\r\n    })\r\n  }\r\n\r\n  static flattenNodes(nodes) {\r\n    const flatmap = [];\r\n    TreeUtils.parseNodes(nodes, node => flatmap.push(node));\r\n    return flatmap;\r\n  }\r\n\r\n  /**\r\n   * Apply the given callback to all given root nodes and recurse down to the\r\n   * descendants of each node as long as the callback returns true. \r\n   * \r\n   * @param {*} rootNodes The array of root nodes where we start to apply the callback. Each node must have a node attribute containing an array of child nodes.\r\n   * @param {*} callback The callback to apply to the nodes. The callback must return a boolean value.\r\n   */\r\n  static parseNodes(rootNodes, callback) {\r\n    rootNodes.forEach((node) => {\r\n\r\n      const shouldContinue = callback(node);\r\n\r\n      if (node.nodes.length > 0 && shouldContinue) {\r\n        TreeUtils.parseNodes(node.nodes, callback);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  static isNodeExpandedAtInit(node, nodeType, treeStartCollapsed) {\r\n    if (node.nodes.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    return treeStartCollapsed ? false : !nodeType.startCollapsed;\r\n\r\n  }\r\n\r\n  static getNodeType(nodeTypes, type) {\r\n    return nodeTypes.filter(nodeType => nodeType.name === type)[0];\r\n  }\r\n\r\n  static createNodeFromNodeType(nodeType, treeColumns, parentNode, runtime) {\r\n    const cells = Utils.deepCopy(nodeType.cellInitSettings);\r\n\r\n    return {\r\n      cells: cells.map((c, i) => Object.assign(c, {\r\n        columnId: treeColumns[i].key\r\n      })),\r\n      contentPage: nodeType.contentPage,\r\n      event: nodeType.event,\r\n      expanded: false,\r\n      imagePath: CommonConfigHelper.getProperResourcePath(nodeType.image, runtime),\r\n      isLeaf: nodeType.childTypes.length === 0,\r\n      link: nodeType.link,\r\n      nodePathId: TreeUtils.generateNodePathId(nodeType, parentNode),\r\n      nodeType: nodeType.name,\r\n      nodes: [],\r\n      path: null,\r\n      tooltip: nodeType.tooltip,\r\n      children: -1, // -1 so that first child has index 0;\r\n      userDefinedId: nodeType.userDefId, // figure out what to do here\r\n    }\r\n  }\r\n\r\n  static getNode(nodes, searchedNodePath) {\r\n    let foundNode;\r\n    TreeUtils.parseNodes(nodes, (node) => {\r\n      if (node.path === searchedNodePath) {\r\n        foundNode = node;\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    return foundNode\r\n  }\r\n\r\n  static getNodeName(rowData) {\r\n    if (rowData !== undefined) {\r\n      const cell = rowData.cells.find(c => c.isPrimary);\r\n\r\n      if (cell !== undefined) return cell.label;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static getParentNode(nodes, searchedNodePath) {\r\n    const parentPath = IndexPathHelper.dropIndexFromPageSegment(searchedNodePath);\r\n    const parentNode = TreeUtils.getNode(nodes, parentPath);\r\n\r\n    if (parentNode) {\r\n      return parentNode;\r\n    } else {\r\n      return {\r\n        root: true,\r\n        nodes\r\n      }\r\n    }\r\n  }\r\n\r\n  static buildTreeCellStyle(cell) {\r\n    if (!cell) return {};\r\n\r\n    const result = {\r\n      fontFamily: `${cell.font.name}, Geneva, sans-serif`,\r\n      fontSize: cell.font.size,\r\n      fontWeight: cell.font.bold ? 'bold' : 'normal',\r\n      fontStyle: cell.font.italic ? 'italic' : 'normal',\r\n      textDecoration: cell.font.underlined ? 'underline' : 'none',\r\n      textAlign: cell.font.alignmentHorizontal,\r\n    }\r\n\r\n    CommonConfigHelper.setStyleAttribute(result, \"color\", CommonConfigHelper.chooseImageOrColorVariant(cell.color.text, false, false, false));\r\n\r\n    return result;\r\n  }\r\n\r\n  /* User actions */\r\n  static selectNodeAction(treePath, rowData) {\r\n    const { runtime, path, contentPage } = rowData;\r\n\r\n    const { treeState, treeNodes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const currentNode = TreeUtils.getNode(treeNodes, path);\r\n\r\n    treeState.currentNode = path;\r\n    treeState.currentPage = contentPage;\r\n    currentNode.visited = true;\r\n\r\n    TreeTraceHelper.traceNodeAction(\"selection\", treePath, rowData, runtime);\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, treeNodes, treeState, null, null);\r\n\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static emitTreeEvent(eventEmitter, treePath, replayStepMonitor) {\r\n    replayStepMonitor.incrementReplayStep();\r\n    eventEmitter.emit(TreeUtils.getTreeEventChangeName(treePath));\r\n  }\r\n\r\n  static sortAscendingByParameter = (param, compareLocator) => (node1, node2) => {\r\n    const comparator1 = compareLocator ? compareLocator(node1, param) : node1[param];\r\n    const comparator2 = compareLocator ? compareLocator(node2, param) : node2[param];\r\n\r\n    let comparison = 0;\r\n    if (comparator1 > comparator2) {\r\n      comparison = 1;\r\n    } else if (comparator1 < comparator2) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n  static sortDescendingByParameter = (param, compareLocator) => (node1, node2) => {\r\n    const comparator1 = compareLocator ? compareLocator(node1, param) : node1[param];\r\n    const comparator2 = compareLocator ? compareLocator(node2, param) : node2[param];\r\n\r\n    let comparison = 0;\r\n    if (comparator1 < comparator2) {\r\n      comparison = 1;\r\n    } else if (comparator1 > comparator2) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n  static sortAscendingByIndexHierarchy = treePath => (node1, node2) => {\r\n    const path1 = IndexPathHelper.extractTreeChildPathFromTreePath(treePath, node1.path);\r\n    const path2 = IndexPathHelper.extractTreeChildPathFromTreePath(treePath, node2.path);\r\n\r\n    const indexArray1 = path1.split('/index=');\r\n    const indexArray2 = path2.split('/index=');\r\n    const commonDepth = Math.min(indexArray1.length, indexArray2.length);\r\n\r\n    for (let checkedDepth = 0; checkedDepth < commonDepth; checkedDepth += 1) {\r\n      const number1 = parseInt(indexArray1[checkedDepth], 10);\r\n      const number2 = parseInt(indexArray2[checkedDepth], 10);\r\n      if (number1 > number2) {\r\n        return 1;\r\n      }\r\n      if (number1 < number2) {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    if (indexArray1.length > indexArray2.length) {\r\n      return 1;\r\n    }\r\n    if (indexArray1.length < indexArray2.length) {\r\n      return -1;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  static collapseNode = (node) => {\r\n    node.expanded = false;\r\n\r\n    if (!node.isLeaf && node.nodes.length) {\r\n      TreeUtils.parseNodes(node.nodes, (innerNode) => {\r\n        innerNode.expanded = false;\r\n        return true;\r\n      })\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /* Drag&Drop Actions */\r\n  static getTreeDragDropAction = (treePath, runtime) => {\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n    if (treeInstance) {\r\n      return treeInstance.props.config[\"drag&dropMode\"];\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  static canNodeTypeDrag = (nodeType, treePath, runtime, isReadOnly) => {\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n    const canTreeDoIt = treeInstance.props.config.dragSource;\r\n    const canNodeTypeDoIt = nodeType.dragSource;\r\n\r\n    return !isReadOnly && canTreeDoIt && canNodeTypeDoIt\r\n  }\r\n\r\n  static canNodeTypeDrop = (nodeType, treePath, runtime, type, isReadOnly) => {\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n    const canTreeDoIt = treeInstance.props.config.dropTarget;\r\n    const canNodeTypeDoIt = nodeType.dropTarget;\r\n\r\n    return !isReadOnly && canTreeDoIt && canNodeTypeDoIt && nodeType.childTypes.includes(type);\r\n  }\r\n\r\n  /* Methods used by tree child components (CbaTreeView or CbaTreeChildArea) */\r\n\r\n  /**\r\n   * Get the component instance of the tree that is associated with the tree child component instance (CbaTreeView or CbaTreeChildArea).\r\n   * \r\n   * Both components must be part of the same page. \r\n   * \r\n   * @param {*} props The properties of the tree child component instance. \r\n   * @returns {*} The associated tree component instance. \r\n   */\r\n  static getTreeInstanceFromChildComponent = (props) => {\r\n    const { runtime, config, path } = props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const treeInstance = runtime.componentDirectory.findComponent(treePath);\r\n\r\n    return treeInstance;\r\n  }\r\n\r\n  /**\r\n   * Get the full index path of the tree component using the given tree path (page segment as in the page configuration) and\r\n   * the full path of the component (CbaTreeView or CbaTreeChildArea) associated with the tree. \r\n   * \r\n   * The associated component must be part of the same page as the tree component. \r\n   * \r\n   * @param {string} treePathId Page segment of tree (according to page configuration).\r\n   * @param {string} path Full path of the component associated with the tree (must reside in the same page as the tree).\r\n   * @returns {string} Full path of the tree. \r\n   */\r\n  static getTreePathFromChildComponent = (treePathId, path) => IndexPathHelper.dropPageSegmentFromPath(path) + treePathId;\r\n\r\n  /* Methods handling userDefIdPath operations */\r\n\r\n  static getTreeFromUserDefIdPath = (userDefPath, runtime) => runtime.componentDirectory.findComponent(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime));\r\n\r\n  static getTreeFlatNodesFromUserDefIdPath = (userDefPath, runtime) => {\r\n    const path = PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime);\r\n    const treeData = TreeUtils.getTreeDataByPath(path, runtime);\r\n    return TreeUtils.flattenNodes(treeData.treeNodes);\r\n  }\r\n\r\n  /* Methods handling Getting/Setting TreeState */\r\n\r\n  static getTreeDataByPath = (path, runtime) => {\r\n    const treeNodes = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeNodes, path, runtime) || [];\r\n    const treeState = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeState, path, runtime) || {};\r\n    const treeColumns = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeColumns, path, runtime) || [];\r\n    const nodeTypes = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractNodeTypes, path, runtime) || [];\r\n    const treeReadOnly = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTreeReadOnly, path, runtime) || false;\r\n\r\n    return {\r\n      treeNodes,\r\n      treeState,\r\n      treeColumns,\r\n      nodeTypes,\r\n      treeReadOnly\r\n    }\r\n  }\r\n\r\n  static setTreeDataByPath = (path, runtime, treeNodes, treeState, treeColumns, nodeTypes) => {\r\n    if (treeNodes) {\r\n      const { extractTreeNodes: getter, setTreeNodes: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, treeNodes, path, runtime, false);\r\n    }\r\n\r\n    if (treeState) {\r\n      const { extractTreeState: getter, setTreeState: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, treeState, path, runtime, false);\r\n    }\r\n\r\n    if (treeColumns) {\r\n      const { extractTreeColumns: getter, setTreeColumns: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, treeColumns, path, runtime, false);\r\n    }\r\n\r\n    if (nodeTypes) {\r\n      const { extractNodeTypes: getter, setNodeTypes: setter } = StateAttributeAccess;\r\n      ComponentStateHelper.updateStateAttribute(getter, setter, nodeTypes, path, runtime, false);\r\n    }\r\n  }\r\n\r\n  /* Methods used by State Machine */\r\n\r\n  static getVisitedPathIds(userDefPath, runtime) {\r\n    const nodes = TreeUtils.getTreeFlatNodesFromUserDefIdPath(userDefPath, runtime);\r\n\r\n    return nodes.filter(node => node.visited).map(node => node.nodePathId);\r\n  }\r\n\r\n  static getNodePathIds(userDefPath, runtime) {\r\n    const nodes = TreeUtils.getTreeFlatNodesFromUserDefIdPath(userDefPath, runtime);\r\n\r\n    return nodes.map(node => node.nodePathId);\r\n  }\r\n\r\n  static getCurrentNodePathId(userDefPath, runtime) {\r\n    const path = PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime);\r\n    const { treeState, treeNodes } = TreeUtils.getTreeDataByPath(path, runtime);\r\n    const nodes = TreeUtils.flattenNodes(treeNodes);\r\n    const currentNodePath = treeState.currentNode;\r\n\r\n    const currentNode = nodes.find(node => node.path === currentNodePath);\r\n\r\n    return currentNode ? currentNode.nodePathId : null;\r\n  }\r\n\r\n  static getColumnValuesMap(userDefPath, nodePathIds, runtime) {\r\n    const nodes = TreeUtils.getTreeFlatNodesFromUserDefIdPath(userDefPath, runtime);\r\n    const map = new Map();\r\n\r\n    nodePathIds.forEach((nodePath) => {\r\n      const node = nodes.find(n => n.nodePathId === nodePath);\r\n      const columnValues = node.cells.map(cell => cell.label);\r\n      map.set(nodePath, columnValues);\r\n    });\r\n\r\n    return map;\r\n  }\r\n\r\n  static treeMoveCurrentNode(userDefPath, targetNode, runtime) {\r\n    TreeUtils.treeActionCurrentNode(userDefPath, targetNode, runtime, TreeUtils.doTreeMoveAction);\r\n  }\r\n\r\n  static treeCopyCurrentNode(userDefPath, targetNode, runtime) {\r\n    TreeUtils.treeActionCurrentNode(userDefPath, targetNode, runtime, TreeUtils.doTreeCopyAction);\r\n  }\r\n\r\n  static treeActionCurrentNode(userDefPath, targetNode, runtime, action) {\r\n    const treePath = PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime);\r\n    const { treeState, treeNodes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const currentNodePath = treeState.currentNode;\r\n    const flatNodes = TreeUtils.flattenNodes(treeNodes);\r\n    const targetNodeInstance = flatNodes.find(node => node.nodePathId === targetNode);\r\n\r\n    if (targetNodeInstance && !targetNodeInstance.isLeaf && treeState.currentNode) {\r\n      action(treePath, currentNodePath, targetNodeInstance.path, runtime)\r\n    }\r\n  }\r\n\r\n  /*\r\n    Methods used by Drag&Drop\r\n  */\r\n  static doTreeMoveAction(treePath, fromPath, toPath, runtime) {\r\n    if (toPath.includes(fromPath)) {\r\n      console.error(\"Could not move tree node from parent to child\", fromPath, toPath);\r\n      return;\r\n    }\r\n\r\n    TreeUtils.doTreeCut(treePath, fromPath, runtime);\r\n    TreeUtils.doTreePaste(treePath, toPath, runtime);\r\n  }\r\n\r\n  static doTreeCopyAction(treePath, fromPath, toPath, runtime) {\r\n    TreeUtils.doTreeCopy(treePath, fromPath, runtime);\r\n    TreeUtils.doTreePaste(treePath, toPath, runtime);\r\n  }\r\n\r\n  /* Context menu operations */\r\n  static doTreeCopy(treePath, nodePath, runtime, shouldNotClearCut) {\r\n    // get tree state\r\n    const { treeNodes: nodes, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    // copy logic\r\n    const node = TreeUtils.getNode(nodes, nodePath);\r\n    if (!shouldNotClearCut) {\r\n      treeState.currentlyCutNodePath = null;\r\n    }\r\n\r\n    treeState.copiedNode = Utils.deepCopy(node);\r\n    treeState.copiedNode = TreeUtils.collapseNode(treeState.copiedNode);\r\n    // treeState.copiedNode.path = null;\r\n\r\n    // set tree state\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, null, treeState, null);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static doTreeCut = (treePath, nodePath, runtime) => {\r\n    // get tree state\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    // cut logic\r\n    treeState.currentlyCutNodePath = nodePath;\r\n\r\n    // set tree state\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, null, treeState, null);\r\n\r\n    // this also emits event\r\n    TreeUtils.doTreeCopy(treePath, nodePath, runtime, true);\r\n  }\r\n\r\n  static doTreePaste(treePath, nodePath, runtime) {\r\n    // get tree state\r\n    let { treeNodes: nodes, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    // paste logic\r\n    let node = TreeUtils.getNode(nodes, nodePath);\r\n\r\n    const { copiedNode, currentlyCutNodePath } = treeState;\r\n\r\n    if (!copiedNode) {\r\n      console.error(\"Tree context menu error, no node to paste\");\r\n      return;\r\n    }\r\n\r\n    // delete node if cut node exists\r\n    if (currentlyCutNodePath) {\r\n      TreeUtils.doTreeDelete(treePath, currentlyCutNodePath, runtime, true);\r\n      // update function variables to new state after delete\r\n      ({ treeNodes: nodes, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime));\r\n      node = TreeUtils.getNode(nodes, nodePath);\r\n\r\n      // clear copied node and cut node\r\n      treeState.currentlyCutNodePath = null;\r\n      treeState.copiedNode = null;\r\n    }\r\n\r\n    // update nodePathId for copied node and children\r\n    copiedNode.nodePathId = TreeUtils.generateNodePathId(copiedNode, node);\r\n    TreeUtils.parseNodes(copiedNode.nodes, (copiedNodeChild) => {\r\n      let copiedNodeParent = TreeUtils.getParentNode(copiedNode.nodes, copiedNodeChild.path);\r\n      if (copiedNodeParent.root) {\r\n        copiedNodeParent = copiedNode;\r\n      }\r\n      copiedNodeChild.nodePathId = TreeUtils.generateNodePathIdChild(copiedNodeChild, copiedNodeParent);\r\n      return true;\r\n    });\r\n\r\n    // add node\r\n    node.nodes.push(copiedNode);\r\n\r\n    // update children number\r\n    node.children += 1;\r\n\r\n    // reset paths\r\n    TreeUtils.resetPathsToNodes(nodes, treePath);\r\n\r\n    // update tree state\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, treeState, null);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static doTreeDelete(treePath, nodePath, runtime, isPasted) {\r\n    // get tree state\r\n    const treeData = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    let { treeNodes: nodes } = treeData;\r\n    const { treeState, nodeTypes } = treeData;\r\n\r\n    // delete logic \r\n    const parentNode = TreeUtils.getParentNode(nodes, nodePath);\r\n    const deletedNode = TreeUtils.getNode(nodes, nodePath);\r\n    const deleteEventNodeType = TreeUtils.getNodeType(nodeTypes, deletedNode.nodeType);\r\n\r\n    // Don't delete for raised event\r\n    if (!isPasted && deleteEventNodeType.deleteEvent) {\r\n      CommonActionsHelper.sendEvent(deleteEventNodeType.deleteEvent, runtime);\r\n      return;\r\n    }\r\n\r\n    // clear selection in deleted nodes\r\n    TreeUtils.parseNodes(nodes, (currentParsedNode) => {\r\n      let deletedNodes = [];\r\n      if (currentParsedNode.path === nodePath) {\r\n        deletedNodes = TreeUtils.flattenNodes(currentParsedNode.nodes);\r\n        deletedNodes.push(currentParsedNode);\r\n\r\n        const selectedNodeInDeletedNodes = !!deletedNodes.find(node => treeState.currentNode === node.path);\r\n        const cutNodeInDeleteNodes = !!deletedNodes.find(node => treeState.currentlyCutNodePath === node.path);\r\n\r\n        if (selectedNodeInDeletedNodes) treeState.currentNode = null;\r\n        if (cutNodeInDeleteNodes) {\r\n          treeState.currentlyCutNodePath = null;\r\n          treeState.copiedNode = null\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    // filter out node\r\n    if (parentNode.root) {\r\n      nodes = nodes.filter(node => node.path !== nodePath);\r\n    } else {\r\n      parentNode.nodes = parentNode.nodes.filter(node => node.path !== nodePath);\r\n    }\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, treeState);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static startRenameOperation(rowData, columnKey) {\r\n    const { treePath, path: nodePath, runtime, isTreeView } = rowData;\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    treeState.currentRenameNode = {\r\n      isTreeView,\r\n      cellPath: TreeUtils.buildCellPath(nodePath, columnKey)\r\n    }\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, null, treeState, null, null)\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n  }\r\n\r\n  static doTreeRename(rowData, columnKey, newValue) {\r\n    const { treePath, path: nodePath, runtime } = rowData;\r\n    const { treeNodes: nodes, treeColumns: columns } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n\r\n    const node = TreeUtils.getNode(nodes, nodePath);\r\n    const cell = node.cells.find(c => c.columnId === columnKey);\r\n    const column = columns.find(c => c.key === columnKey);\r\n    const oldValue = cell.label;\r\n\r\n    cell.label = newValue;\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, null, null, null);\r\n    TreeUtils.emitTreeEvent(runtime.eventEmitter, treePath, runtime.replayStepMonitor);\r\n    TreeTraceHelper.traceNodeAction(\"rename\", treePath, rowData, runtime, oldValue, newValue, column.name);\r\n  }\r\n\r\n  static doTreeNew(treePath, nodePath, runtime, newTreeType, isTreeView, treeViewPath) {\r\n    const { treeNodes: nodes, treeColumns, nodeTypes } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const node = TreeUtils.getNode(nodes, nodePath); // need this to compute pathid of new node\r\n\r\n    const newNodeType = TreeUtils.getNodeType(nodeTypes, newTreeType);\r\n    const newNode = TreeUtils.createNodeFromNodeType(newNodeType, treeColumns, node, runtime);\r\n\r\n    node.expanded = true;\r\n    node.nodes.push(newNode);\r\n    node.children += 1;\r\n    TreeUtils.resetPathsToNodes(nodes, treePath)\r\n\r\n    TreeUtils.setTreeDataByPath(treePath, runtime, nodes, null, null, null);\r\n\r\n    const primaryColumn = newNode.cells.find(c => c.isPrimary).columnId;\r\n    const mockRowData = Object.assign({\r\n      runtime,\r\n      treePath,\r\n      isTreeView,\r\n      treeViewPath\r\n    }, newNode);\r\n\r\n    TreeUtils.selectNodeAction(treePath, mockRowData);\r\n    TreeUtils.startRenameOperation(mockRowData, primaryColumn);\r\n  }\r\n\r\n}\r\n","\nexport const FORMATS = {\n  DE: {\n    decimal: \",\", grouping: \".\"\n  },\n  EN: {\n    decimal: \".\", grouping: \",\"\n  }\n}\n\n/**\n  * Translate a value given as number (or as string with dot as decimal separator)\n  * to a string with decimal and thousand separators as specified by our format members.\n  */\nexport function formatValue(number, withThousandSeparator, addTrailingDecimalSeparator, format) {\n  if (number === null || number === undefined) return number;\n\n  const parts = number.toString().split('.');\n  if (withThousandSeparator) {\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, format.grouping);\n  }\n  return `${parts.join(format.decimal)}${addTrailingDecimalSeparator ? format.decimal : ''}`;\n}\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport TreeUtils from './TreeUtils';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport PageAreaRenderer from '../PageAreaRenderer';\r\nimport Utils from '../../utils/Utils';\r\n\r\n\r\nexport default class CbaTreeChildArea extends PureComponent {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { runtime } = this.props;\r\n    this.scrollableAreaRef = React.createRef();\r\n    this.eventEmitter = runtime.eventEmitter;\r\n\r\n    this.onClickHandler = this.onClickHandler.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n    // Make our tree change handler listen to change events issued by our tree:\r\n    const { path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    this.subscription = this.eventEmitter.addListener(TreeUtils.getTreeEventChangeName(treePath), this.handleTreeChange);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n\r\n    // Remove our tree change event subscription:\r\n    this.subscription.remove();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onClickHandler(event) {\r\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  /**\r\n   * Callback handling changes in our associated tree.\r\n   */\r\n  handleTreeChange = () => {\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * Get the name of the currently embedded (i.e. displayed) page. \r\n   * \r\n   * The embedded page follows the selected node in the associated tree. \r\n   * We return 'undefined' if the currently selected node does not have a page assigned. \r\n   * \r\n   */\r\n  static getEmbeddedPageName(path, config, runtime) {\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const { treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    return treeState.currentPage || undefined;\r\n  }\r\n\r\n  scroll(x, y) {\r\n    const scrollElement = this.scrollableAreaRef.current;\r\n    if (!scrollElement) return;\r\n    Utils.doScrollOnHTMLElement(x, y, scrollElement, scrollElement);\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const currentPage = CbaTreeChildArea.getEmbeddedPageName(path, config, runtime);\r\n    const emptyStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    // TODO: CKI: factor that out in a common helper method shared with CbaPageArea\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const positionOnlyState = {};\r\n    StateAttributeAccess.setPosition(positionOnlyState, StateAttributeAccess.extractPosition(pathState));\r\n\r\n\r\n    if (currentPage === undefined) {\r\n      return (\r\n        <div\r\n          style={emptyStyle}\r\n          data-cba-id={config.pageEditId}\r\n          onClick={event => CommonActionsHelper.doStandardOnClick(event, undefined, this)}\r\n          title={CommonConfigHelper.buildTitle(config)}\r\n          className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <PageAreaRenderer\r\n          onClick={this.onClickHandler}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          orientation={orientation}\r\n          embeddedPageName={currentPage}\r\n          hasTabs={false}\r\n          tabsBar={<span />}\r\n          path={path}\r\n          position={positionOnlyState}\r\n          config={config}\r\n          scrollableAreaRef={this.scrollableAreaRef}\r\n          runtime={runtime}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nCbaTreeChildArea.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        treePathId: PropTypes.string.isRequired,\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","\r\nimport React, { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './media.css'\r\n\r\nconst MediaPreview = ({ type, stream, style, pauseRecording, resumeRecording, shouldPause }) => {\r\n  const mediaRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (mediaRef.current && stream) {\r\n      mediaRef.current.srcObject = stream;\r\n    }\r\n    if (mediaRef.current !== null && mediaRef.current !== undefined\r\n      && shouldPause) {\r\n      mediaRef.current.pause();\r\n    }\r\n  }, [stream, shouldPause]);\r\n  if (!stream) {\r\n    return null;\r\n  }\r\n  let media;\r\n  if (type === \"video\") {\r\n    media = (\r\n      <video\r\n        ref={mediaRef}\r\n        style={style}\r\n        onPause={pauseRecording}\r\n        onPlay={resumeRecording}\r\n        autoPlay\r\n        controls\r\n      />\r\n    )\r\n  } else {\r\n    media = (\r\n      <div style={style}>\r\n        <audio\r\n          ref={mediaRef}\r\n          onPause={pauseRecording}\r\n          onPlay={resumeRecording}\r\n          autoPlay\r\n          controls\r\n          className=\"audio\"\r\n        />\r\n        {!shouldPause && <span className=\"recording\" />}\r\n      </div>\r\n    )\r\n  }\r\n  return media;\r\n};\r\n\r\nMediaPreview.propTypes = {\r\n  stream: PropTypes.object,\r\n  style: PropTypes.object.isRequired,\r\n  pauseRecording: PropTypes.func.isRequired,\r\n  resumeRecording: PropTypes.func.isRequired\r\n}\r\n\r\nMediaPreview.defaultProps = {\r\n  stream: null\r\n}\r\n\r\nexport default MediaPreview;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport debounce from 'lodash.debounce';\r\nimport { ReactMediaRecorder } from 'react-media-recorder';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CbaInterpreter from '../CbaInterpreter';\r\nimport MediaPreview from './MediaPreview';\r\nimport PathTranslationHelper from '../../state/PathTranslationHelper';\r\n\r\nexport const OPERATION_PLAY = 'play';\r\nexport const OPERATION_PAUSE = 'pause';\r\nexport const OPERATION_STOP = 'stop';\r\nexport const OPERATION_ENDED = 'ended';\r\n\r\nexport default class CbaMedia extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.mediaRef = React.createRef();\r\n    this.isStatemachineTriggered = false;\r\n    this.startRecordingTime = undefined;\r\n    this.shouldPlayOnResume = false;\r\n    this.shouldSendStartRecordingEvent = true;\r\n    this.isPauseHandled = false;\r\n    this.isTaskPlayerPausePlay = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { runtime, config, path } = this.props;\r\n    if (config.src !== undefined && config.src.dynamic !== undefined) {\r\n      runtime.variableManager.addVariableChangeObserver(path, config.src.dynamic.variable);\r\n    }\r\n\r\n    this.setVolumeFromState();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    const { runtime, config, path } = this.props;\r\n    if (config.src !== undefined && config.src.dynamic !== undefined) {\r\n      runtime.variableManager.dropVariableChangeObserver(path, config.src.dynamic.variable);\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.setVolumeFromState();\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n  }\r\n\r\n  onClickCapture = (event) => {\r\n    // TODO: check if this is really needed otherwise remove it as it block access to text flash children\r\n    // CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  onPlayHandler = (event) => {\r\n    const { config, runtime } = this.props;\r\n\r\n    // skip play trace event, save operation and FSM event when play is triggered by TaskPlayer resume command\r\n    if (this.isTaskPlayerPausePlay) {\r\n      this.isTaskPlayerPausePlay = false;\r\n      return;\r\n    }\r\n\r\n    this.saveInStateLastOperation(OPERATION_PLAY);\r\n    this.traceMedia(OPERATION_PLAY, this.isStatemachineTriggered, event);\r\n    CommonActionsHelper.sendEvent(config.startEvent, runtime);\r\n    this.isStatemachineTriggered = false;\r\n  }\r\n\r\n  onPauseHandler = (event) => {\r\n    const { config, runtime } = this.props;\r\n    const player = this.getMediaPlayer();\r\n\r\n    // skip pause tracing events, save operation and FSM event when: a) ended is reached and b) is handled by stop;\r\n    // a) When the player reaches the end: currentTime == duration -> browser calls onPauseHandler and the onEndHandler. We want only the end handler to happen.\r\n    // b) FSM stop implementation will send pause to player but wants to skip onPauseHandler and call onStopHandler instead.\r\n    // c) When the player enters a pause triggered by pause task\r\n    if (player.duration === player.currentTime || this.isPauseHandled || this.isTaskPlayerPausePlay) {\r\n      this.isPauseHandled = false;\r\n      this.isTaskPlayerPausePlay = false;\r\n      return;\r\n    }\r\n\r\n    this.saveInStateLastOperation(OPERATION_PAUSE);\r\n    this.traceMedia(OPERATION_PAUSE, this.isStatemachineTriggered, event);\r\n    CommonActionsHelper.sendEvent(config.pauseEvent, runtime);\r\n    this.isStatemachineTriggered = false;\r\n  }\r\n\r\n  onStopHandler = () => {\r\n    const { config, runtime } = this.props;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const lastOperation = StateAttributeAccess.extractLastOperation(state);\r\n\r\n    if (lastOperation !== OPERATION_STOP) {\r\n      this.saveInStateLastOperation(OPERATION_STOP);\r\n      this.traceMedia(OPERATION_STOP, this.isStatemachineTriggered, undefined);\r\n      CommonActionsHelper.sendEvent(config.stopEvent, runtime);\r\n    }\r\n    this.isStatemachineTriggered = false;\r\n  }\r\n\r\n\r\n  onEndedHandler = (event) => {\r\n    const { config, runtime } = this.props;\r\n    this.saveInStateLastOperation(OPERATION_ENDED);\r\n    this.increasePlayNumberAndCheckMaxPlay();\r\n    this.traceMedia(OPERATION_ENDED, false, event);\r\n    CommonActionsHelper.sendEvent(config.endEvent, runtime);\r\n  }\r\n\r\n  handleTaskPauseOrResume = (enterPause) => {\r\n    const player = this.getMediaPlayer();\r\n\r\n    if (!player) return null;\r\n\r\n    const lastOperation = StateAttributeAccess.extractLastOperation(ComponentStateHelper.getState(this));\r\n\r\n    if (enterPause && lastOperation === OPERATION_PLAY) {\r\n      this.shouldPlayOnResume = true;\r\n      this.isTaskPlayerPausePlay = true;\r\n      player.pause();\r\n    }\r\n\r\n    if (!enterPause && this.shouldPlayOnResume) {\r\n      player.play();\r\n      this.shouldPlayOnResume = false;\r\n      this.isTaskPlayerPausePlay = true;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  onVolumeChange = () => {\r\n    const state = ComponentStateHelper.getState(this);\r\n    const player = this.getMediaPlayer();\r\n\r\n    // the mediaRef volume value is between [0,1] and the state media volume stores values between [0,10]\r\n    StateAttributeAccess.setMediaVolume(state, parseInt(player.volume * 10, 10));\r\n    ComponentStateHelper.registerState(this, state);\r\n  }\r\n\r\n  onTimeUpdate = () => {\r\n    const { runtime } = this.props;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const player = this.getMediaPlayer();\r\n    const newTime = parseInt(player.currentTime, 10);\r\n    const oldTime = StateAttributeAccess.extractCurrentTime(state);\r\n    if (oldTime !== newTime) {\r\n      StateAttributeAccess.setCurrentTime(state, newTime);\r\n      runtime.eventEmitter.emit(\"currentTimeUpdate\", newTime);\r\n    }\r\n    ComponentStateHelper.registerState(this, state);\r\n  }\r\n\r\n\r\n  play(isStatemachineTriggered = false) {\r\n    const { config } = this.props;\r\n    const { recording } = config;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const maxRecord = StateAttributeAccess.extractMaxRecord(state);\r\n    const recordNumber = StateAttributeAccess.extractRecordNumber(state);\r\n\r\n    if (recording) {\r\n      // when maxRecord is reached we should stop here\r\n      if (maxRecord > 0 && recordNumber === maxRecord) {\r\n        console.info(\"The max record number was reached!\");\r\n        return;\r\n      }\r\n      this.isRecording = true;\r\n      this.startRecordingTime = moment().format();\r\n\r\n      if (this.resumeRecording) {\r\n        this.resumeRecording();\r\n      }\r\n\r\n      StateAttributeAccess.setRecordNumber(state, recordNumber + 1);\r\n      ComponentStateHelper.registerState(this, state);\r\n      RenderingHelper.triggerRendering(this);\r\n    } else {\r\n      const player = this.getMediaPlayer();\r\n      if (!player) return;\r\n      this.isStatemachineTriggered = isStatemachineTriggered;\r\n      player.play();\r\n    }\r\n  }\r\n\r\n  stop(isStatemachineTriggered = false) {\r\n    if (this.stopRecording) {\r\n      this.stopRecording();\r\n    } else {\r\n      const player = this.getMediaPlayer();\r\n      if (!player) return;\r\n\r\n      this.isStatemachineTriggered = isStatemachineTriggered;\r\n      this.isPauseHandled = true;\r\n\r\n      player.pause();\r\n      player.currentTime = 0;\r\n      this.onStopHandler();\r\n    }\r\n  }\r\n\r\n  pause(isStatemachineTriggered = false) {\r\n    if (this.pauseRecording) {\r\n      this.pauseRecording();\r\n      RenderingHelper.triggerRendering(this)\r\n    } else {\r\n      const player = this.getMediaPlayer();\r\n      if (!player) return;\r\n      this.isStatemachineTriggered = isStatemachineTriggered;\r\n\r\n      player.pause();\r\n    }\r\n  }\r\n\r\n  saveInStateLastOperation(operation) {\r\n    const state = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setLastOperation(state, operation);\r\n    ComponentStateHelper.registerState(this, state);\r\n  }\r\n\r\n  setVolumeFromState() {\r\n    const state = ComponentStateHelper.getState(this);\r\n\r\n    const volume = StateAttributeAccess.extractMediaVolume(state);\r\n    const newVolume = volume !== undefined ? CbaMedia.convertToMediaRefVolume(volume) : undefined;\r\n\r\n    // mediaRef might refer to a simple div if there is nothing to play currently:\r\n    if (newVolume !== undefined && this.mediaRef.current !== null) {\r\n      this.mediaRef.current.volume = newVolume;\r\n    }\r\n  }\r\n\r\n  increasePlayNumberAndCheckMaxPlay() {\r\n    const state = ComponentStateHelper.getState(this);\r\n    const maxPlay = StateAttributeAccess.extractMaxPlay(state);\r\n    const playNo = StateAttributeAccess.extractPlayNumber(state);\r\n    const currentPlayNumber = playNo + 1;\r\n    StateAttributeAccess.setPlayNumber(state, currentPlayNumber);\r\n    ComponentStateHelper.registerState(this, state);\r\n\r\n    // when current play number equals maxPlay we need to disable media controls\r\n    if (currentPlayNumber === maxPlay) {\r\n      StateAttributeAccess.setHideControls(state, true);\r\n      ComponentStateHelper.registerState(this, state);\r\n      RenderingHelper.triggerRendering(this);\r\n    }\r\n  }\r\n\r\n  traceMedia(operation, isStatemachineTriggered, event) {\r\n    const { config, path, runtime } = this.props;\r\n    const { trace } = config;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const automaticStart = StateAttributeAccess.extractAutomaticStart(state);\r\n    const maxPlay = StateAttributeAccess.extractMaxPlay(state);\r\n    const hideControls = StateAttributeAccess.extractHideControls(state);\r\n    const modifiedTraceConfig = StateManagerHelper.deepCopy(config.trace);\r\n\r\n    if (trace.type !== undefined && trace.type !== 'ValueDisplay') {\r\n      modifiedTraceConfig.type = `${trace.type}Control`;\r\n    }\r\n\r\n    CommonActionsHelper.traceUserInteractionPerTraceConfig(\r\n      modifiedTraceConfig,\r\n      path,\r\n      trace.type === 'ValueDisplay' ? {} : {\r\n        operation,\r\n        maxPlay,\r\n        currentPlayNo: StateAttributeAccess.extractPlayNumber(state),\r\n        automaticStart,\r\n        hideControls,\r\n        volumeLevel: CbaMedia.computeVolumeInPercentage(StateAttributeAccess.extractMediaVolume(state)),\r\n        isStatemachineTriggered\r\n      },\r\n      trace.type === 'ValueDisplay' ? event : undefined,\r\n      runtime\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns player instance if available, else returns null\r\n   */\r\n  getMediaPlayer = () => {\r\n    const player = this.mediaRef.current;\r\n    if (player === null || player === undefined) {\r\n      console.info(\"The player is not there (anymore); probably max play number was reached or there is nothing to play.\");\r\n      return null;\r\n    }\r\n\r\n    return player;\r\n  }\r\n\r\n  // ------------ media recorder methods ----------------\r\n\r\n  /**\r\n   * Creates a media recorder component and exposes callbacks to the current instance\r\n   * @param {*} type The media component type\r\n   * @param {*} mediaStyle The component style\r\n   * @param {*} config the component config (needed for the start/pause/stop event names)\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  createMediaRecorder(type, mediaStyle, config, runtime) {\r\n    return (\r\n      <ReactMediaRecorder\r\n        audio\r\n        video={type === \"video\"}\r\n        render={({ status, startRecording, stopRecording, pauseRecording, resumeRecording, mediaBlobUrl, previewStream }) => {\r\n          this.stopRecording = () => {\r\n            CommonActionsHelper.sendEvent(config.stopRecordingEvent, runtime);\r\n            stopRecording();\r\n            this.shouldSendStartRecordingEvent = true;\r\n          }\r\n\r\n          this.pauseRecording = () => {\r\n            CommonActionsHelper.sendEvent(config.pauseRecordingEvent, runtime);\r\n            pauseRecording();\r\n            this.shouldPause = true;\r\n            this.shouldSendStartRecordingEvent = true;\r\n          }\r\n\r\n          this.resumeRecording = () => {\r\n            if (this.shouldSendStartRecordingEvent) {\r\n              CommonActionsHelper.sendEvent(config.startRecordingEvent, runtime);\r\n              this.shouldSendStartRecordingEvent = false;\r\n            }\r\n\r\n            resumeRecording();\r\n            this.shouldPause = false;\r\n            if (type === \"audio\") {\r\n              // we need to rerender the preview in order to have recording resume feedback\r\n              RenderingHelper.triggerRendering(this)\r\n            }\r\n          }\r\n\r\n          if (status === \"idle\") {\r\n            // directly start the recording when the media recorder is mounted\r\n            startRecording();\r\n          }\r\n          if (status === \"stopped\" && mediaBlobUrl) {\r\n            // offsetting rerendering \r\n            this.debouncedEndRecording(mediaBlobUrl);\r\n          }\r\n\r\n          return (\r\n            <MediaPreview\r\n              type={type}\r\n              stream={status === \"recording\" ? previewStream : null}\r\n              style={mediaStyle}\r\n              pauseRecording={this.pauseRecording}\r\n              resumeRecording={this.resumeRecording}\r\n              shouldPause={this.shouldPause}\r\n            />\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handles the end recording logic which will store the recorded blob inside the component state,\r\n   * then passes it to the transfer mechanism for global storage.\r\n   * @param {*} mediaBlob The recorded media blob URL\r\n   */\r\n  endRecording = (mediaBlob) => {\r\n    const { runtime, config, path } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const recordNumber = StateAttributeAccess.extractRecordNumber(pathState);\r\n    StateAttributeAccess.setMediaBlob(pathState, mediaBlob)\r\n    ComponentStateHelper.registerState(this, pathState);\r\n\r\n    const taskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\r\n    const userDefinedIDPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime);\r\n    runtime.recordingBuffer.reportRecording(config.userDefinedId, this.startRecordingTime, recordNumber, mediaBlob, taskInfo, userDefinedIDPath);\r\n\r\n    this.isRecording = false;\r\n    this.shouldPause = false;\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  /**\r\n   * a debounced version of the previous method.\r\n   */\r\n  debouncedEndRecording = debounce(this.endRecording, 500);\r\n\r\n  /**\r\n   * Converts the config value to a range value supported by MediaRef.\r\n   * @param volume \r\n   */\r\n  static convertToMediaRefVolume(volume) {\r\n    if (volume < 0) {\r\n      volume = 0;\r\n    } else if (volume > 10) {\r\n      volume = 10;\r\n    }\r\n    return volume / 10;\r\n  }\r\n\r\n  static computeVolumeInPercentage(volume) {\r\n    const volumeValue = parseInt(volume * 10, 10);\r\n    return volumeValue;\r\n  }\r\n\r\n  static addAttributesToInitialState(initialState, configProps) {\r\n    initialState.volume = configProps.useAudio ? 1 : 0;\r\n    initialState.lastOperation = undefined;\r\n    initialState.playNumber = 0;\r\n    initialState.hideControls = configProps.hideControls;\r\n    initialState.automaticStart = configProps.automaticStart;\r\n    initialState.hideControls = configProps.hideControls;\r\n    initialState.maxPlay = configProps.maxPlay;\r\n    initialState.maxRecord = configProps.maxRecord;\r\n    initialState.recordNumber = 0;\r\n  }\r\n\r\n  static createDelegateComponent(component, path, type) {\r\n    const delegateComponent = StateManagerHelper.deepCopy(component);\r\n    delegateComponent.config.userDefinedId = undefined;\r\n    delegateComponent.type = type;\r\n    const delegatePath = IndexPathHelper.appendIndexToPageSegment(path, 0);\r\n    return {\r\n      delegatePath, delegateComponent\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const { type, imageReference } = config;\r\n    const state = ComponentStateHelper.getState(this);\r\n    const muted = StateAttributeAccess.extractMediaVolume(state) <= 0;\r\n    const automaticStart = StateAttributeAccess.extractAutomaticStart(state);\r\n    const hideControls = StateAttributeAccess.extractHideControls(state);\r\n    const mediaBlob = StateAttributeAccess.extractMediaBlob(state);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const srcFromVariable = (config.src !== undefined && config.src.dynamic !== undefined)\r\n      ? CommonConfigHelper.getDynamicValueFromStatemachineAndMapper(config.src.dynamic, runtime)\r\n      : undefined;\r\n    // const src = mediaBlobUrl !== undefined ? mediaBlobUrl\r\n    //   : CommonConfigHelper.getProperResourcePath((srcFromVariable === undefined || srcFromVariable.length === 0) ? config.src.mediaReference : srcFromVariable, runtime);\r\n\r\n    const src = mediaBlob || CommonConfigHelper.getProperResourcePath((srcFromVariable === undefined || srcFromVariable.length === 0) ? config.src.mediaReference : srcFromVariable, runtime);\r\n    const altSrc = (config.src.mediaAlternateRef) ? CommonConfigHelper.getProperResourcePath(config.src.mediaAlternateRef, runtime) : undefined;\r\n    const extSrc = config.src.mediaReferenceExternal;\r\n    const altExtSrc = config.src.mediaAlternateRefExternal;\r\n    const poster = (imageReference === undefined || imageReference.length === 0) ? undefined : CommonConfigHelper.getProperResourcePath(imageReference, runtime);\r\n\r\n    // Avoid blocking the loading mechanism if there is nothing to play currently:\r\n    const someResourceToPlay = (\r\n      (src !== undefined && src !== null && src.length > 0)\r\n      || (altSrc !== undefined && altSrc.length > 0)\r\n      || (extSrc !== undefined && extSrc.length > 0)\r\n      || (altExtSrc !== undefined && altExtSrc.length > 0)\r\n      || this.isRecording);\r\n\r\n    // Make sure the audio/video reload each time the primary local resource changes:\r\n    // (Alternate and external resources do not change dynamically.)\r\n    const key = src;\r\n    const mediaStyle = {\r\n      width: '100%',\r\n      height: '100%'\r\n    }\r\n\r\n    // we might have childrens only for video component\r\n    const delegates = config.cbaChildren !== undefined ? config.cbaChildren.map((child, index) => {\r\n      const childPath = IndexPathHelper.appendIndexToPageSegment(path, index);\r\n      return (\r\n        <CbaInterpreter\r\n          key={childPath}\r\n          config={child}\r\n          path={childPath}\r\n          runtime={runtime}\r\n          orientation={orientation}\r\n        />\r\n      )\r\n    }) : undefined;\r\n\r\n    let media;\r\n    if (this.isRecording) {\r\n      media = this.createMediaRecorder(type, mediaStyle, config, runtime)\r\n    } else if (type === 'audio') {\r\n      media = (\r\n        <audio\r\n          ref={this.mediaRef}\r\n          key={key}\r\n          style={mediaStyle}\r\n          controls={!hideControls}\r\n          autoPlay={automaticStart}\r\n          muted={muted}\r\n          controlsList=\"nodownload\"\r\n          onClick={this.onClickHandler}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          onPlay={this.onPlayHandler}\r\n          onPause={this.onPauseHandler}\r\n          onEnded={this.onEndedHandler}\r\n          onVolumeChange={this.onVolumeChange}\r\n          title={CommonConfigHelper.buildTitle(config)}\r\n          tabIndex={config.tabIndex}\r\n        >\r\n          <source src={src} />\r\n          {(altSrc) && <source src={altSrc} />}\r\n          {(extSrc) && <source src={extSrc} />}\r\n          {(altExtSrc) && <source src={altExtSrc} />}\r\n          Your browser does not support the audio element.\r\n        </audio>\r\n      );\r\n    } else if (type === 'video') {\r\n      media = (\r\n        <video\r\n          ref={this.mediaRef}\r\n          key={key}\r\n          style={mediaStyle}\r\n          controls={!hideControls}\r\n          autoPlay={automaticStart}\r\n          muted={muted}\r\n          poster={poster}\r\n          controlsList=\"nodownload nofullscreen noremoteplayback noplaybackrate\"\r\n          disablePictureInPicture\r\n          onClick={this.onClickHandler}\r\n          onContextMenu={this.onContextMenuHandler}\r\n          onPlay={this.onPlayHandler}\r\n          onPause={this.onPauseHandler}\r\n          onEnded={this.onEndedHandler}\r\n          onVolumeChange={this.onVolumeChange}\r\n          onTimeUpdate={this.onTimeUpdate}\r\n          title={CommonConfigHelper.buildTitle(config)}\r\n          tabIndex={config.tabIndex}\r\n        >\r\n          <source src={src} type=\"video/mp4\" />\r\n          {(altSrc) && <source src={altSrc} type=\"video/mp4\" />}\r\n          {(extSrc) && <source src={extSrc} type=\"video/mp4\" />}\r\n          {(altExtSrc) && <source src={altExtSrc} type=\"video/mp4\" />}\r\n          Your browser does not support the video element.\r\n        </video>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        onClick={someResourceToPlay ? undefined : this.onClickHandler}\r\n        onClickCapture={this.onClickCapture}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n      >\r\n        {someResourceToPlay && media}\r\n        {delegates}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nCbaMedia.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.getStandardConfigPropTypes(false)\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n}\r\n","import ComponentStateHelper from '../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport SelectGroupHelper from '../components/SelectGroupHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\nimport TextBlockSelectHelper from '../components/CbaRichTextField/TextBlockSelectHelper';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\nimport BookmarkHelper from '../components/BookmarkHelper';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\nimport CbaRichTextField from '../components/CbaRichTextField/CbaRichTextField';\r\nimport CbaTableCell from '../components/table/CbaTableCell';\r\nimport TreeUtils from '../components/CbaTree/TreeUtils';\r\nimport PropagationHelper from './PropagationHelper';\r\nimport Utils from '../utils/Utils';\r\nimport CbaContainer from '../components/CbaContainer';\r\nimport * as ValueFormatter from \"../components/calculator/ValueFormatter\";\r\nimport CbaTreeChildArea from '../components/CbaTree/CbaTreeChildArea';\r\nimport { OPERATION_PLAY, OPERATION_PAUSE, OPERATION_STOP, OPERATION_ENDED } from '../components/media/CbaMedia';\r\n\r\n\r\nexport default class TermEvaluator {\r\n\r\n  // all operators we know: -----------------------------------------------------------------\r\n  static operators = {\r\n    // context value access\r\n    contextValue: TermEvaluator.contextValue,\r\n\r\n    // basic boolean\r\n    and: TermEvaluator.and,\r\n    or: TermEvaluator.or,\r\n    not: TermEvaluator.not,\r\n    ifThenElse: TermEvaluator.ifThenElse,\r\n    ifGuard: TermEvaluator.ifGuard,\r\n\r\n    // compare\r\n    equal: TermEvaluator.equal,\r\n    notEqual: TermEvaluator.notEqual,\r\n    greater: TermEvaluator.greater,\r\n    greaterEqual: TermEvaluator.greaterEqual,\r\n    less: TermEvaluator.less,\r\n    lessEqual: TermEvaluator.lessEqual,\r\n    max: TermEvaluator.max,\r\n    maxNamed: TermEvaluator.maxNamed,\r\n    matches: TermEvaluator.matches,\r\n\r\n    // arrays \r\n    arrayLength: TermEvaluator.arrayLength,\r\n    union: TermEvaluator.union,\r\n    intersection: TermEvaluator.intersection,\r\n\r\n    // numbers\r\n    add: TermEvaluator.add,\r\n    subtract: TermEvaluator.subtract,\r\n    multiply: TermEvaluator.multiply,\r\n    divide: TermEvaluator.divide,\r\n    modulo: TermEvaluator.modulo,\r\n    floor: TermEvaluator.floor,\r\n    ceil: TermEvaluator.ceil,\r\n    trunc: TermEvaluator.trunc,\r\n    round: TermEvaluator.round,\r\n\r\n    // strings\r\n    stringFormat: TermEvaluator.stringFormat,\r\n    concatenate: TermEvaluator.concatenate,\r\n    boolToString: TermEvaluator.boolToString,\r\n    numberToString: TermEvaluator.numberToString,\r\n    contains: TermEvaluator.contains,\r\n\r\n    // currently running\r\n    getCurrentTest: TermEvaluator.getCurrentTest,\r\n    getCurrentTask: TermEvaluator.getCurrentTask,\r\n    getCurrentItem: TermEvaluator.getCurrentItem,\r\n    getCurrentPage: TermEvaluator.getCurrentPage,\r\n    getEmbeddedPage: TermEvaluator.getEmbeddedPage,\r\n\r\n    switchPage: TermEvaluator.switchPage,\r\n    closeDialog: TermEvaluator.closeDialog,\r\n\r\n    saveTaskResults: TermEvaluator.saveTaskResults,\r\n    previousTask: TermEvaluator.previousTask,\r\n    nextTask: TermEvaluator.nextTask,\r\n    cancelTask: TermEvaluator.cancelTask,\r\n    switchTaskInTest: TermEvaluator.switchTaskInTest,\r\n    switchTaskAndTest: TermEvaluator.switchTaskAndTest,\r\n\r\n    recommend: TermEvaluator.recommend,\r\n\r\n    // interaction events\r\n    nbUserInteractions: TermEvaluator.nbUserInteractions,\r\n    nbUserInteractionsTotal: TermEvaluator.nbUserInteractionsTotal,\r\n    firstReactionTime: TermEvaluator.firstReactionTime,\r\n    firstReactionTimeTotal: TermEvaluator.firstReactionTimeTotal,\r\n    taskExecutionTime: TermEvaluator.taskExecutionTime,\r\n    taskExecutionTimeTotal: TermEvaluator.taskExecutionTimeTotal,\r\n\r\n    // get/set on widgets\r\n    focus: TermEvaluator.focus,\r\n\r\n    getDisabled: TermEvaluator.getDisabled,\r\n    setDisabled: TermEvaluator.setDisabled,\r\n\r\n    getSelected: TermEvaluator.getSelected,\r\n    setSelected: TermEvaluator.setSelected,\r\n\r\n    getHidden: TermEvaluator.getHidden,\r\n    setHidden: TermEvaluator.setHidden,\r\n\r\n    getVisited: TermEvaluator.getVisited,\r\n    setVisited: TermEvaluator.setVisited,\r\n\r\n    getTextValue: TermEvaluator.getTextValue,\r\n    setTextValue: TermEvaluator.setTextValue,\r\n\r\n    setHighlightable: TermEvaluator.setHighlightable,\r\n    isSelectedComponentOrTextBlock: TermEvaluator.isSelectedComponentOrTextBlock,\r\n    isHighlighted: TermEvaluator.isHighlighted,\r\n    getIntegerValue: TermEvaluator.getIntegerValue,\r\n\r\n    setMediaPlayerVolume: TermEvaluator.setMediaPlayerVolume,\r\n    setMediaPlayer: TermEvaluator.setMediaPlayer,\r\n    initMediaPlayer: TermEvaluator.initMediaPlayer,\r\n\r\n    setDragAndDropMode: TermEvaluator.setDragAndDropMode,\r\n\r\n    setSingleSelectMode: TermEvaluator.setSingleSelectMode,\r\n    setAllowDeselect: TermEvaluator.setAllowDeselect,\r\n    setSelectable: TermEvaluator.setSelectable,\r\n    setSelectChangeBlockMode: TermEvaluator.setSelectChangeBlockMode,\r\n\r\n    // named calculations\r\n    evaluateNamedCalculation: TermEvaluator.evaluateNamedCalculation,\r\n    getCalculationResult: TermEvaluator.getCalculationResult,\r\n\r\n    // variables\r\n    getVariable: TermEvaluator.getVariable,\r\n    setVariable: TermEvaluator.setVariable,\r\n    switchVariables: TermEvaluator.switchVariables,\r\n    getImplicitVariable: TermEvaluator.getImplicitVariable,\r\n\r\n    // state machine\r\n    raiseEvent: TermEvaluator.raiseEvent,\r\n    postponeTaskSwitch: TermEvaluator.postponeTaskSwitch,\r\n    setTimedEventInterval: TermEvaluator.setTimedEventInterval,\r\n    setStatemachineAssignedPage: TermEvaluator.setStatemachineAssignedPage,\r\n    getNbStatemachineEventsRaised: TermEvaluator.getNbStatemachineEventsRaised,\r\n    getCurrentLeafStates: TermEvaluator.getCurrentLeafStates,\r\n    getRaisedStatemachineEvents: TermEvaluator.getRaisedStatemachineEvents,\r\n    getVisitedStates: TermEvaluator.getVisitedStates,\r\n    getRaisedEventsInState: TermEvaluator.getRaisedEventsInState,\r\n    getStatemachineVariableValues: TermEvaluator.getStatemachineVariableValues,\r\n\r\n    // trace\r\n    traceText: TermEvaluator.traceText,\r\n    traceSnapshot: TermEvaluator.traceSnapshot,\r\n\r\n    // calculator\r\n    calcGetMem: TermEvaluator.calcGetMem,\r\n    calcOp: TermEvaluator.calcOp,\r\n    calcOpnd: TermEvaluator.calcOpnd,\r\n    calcSettings: TermEvaluator.calcSettings,\r\n\r\n    // tree\r\n    currentNode: TermEvaluator.currentNode,\r\n    getVisitedNodes: TermEvaluator.getVisitedNodes,\r\n    matchNodes: TermEvaluator.matchNodes,\r\n    matchNodesWithColumns: TermEvaluator.matchNodesWithColumns,\r\n    treeMove: TermEvaluator.treeMove,\r\n    treeCopy: TermEvaluator.treeCopy,\r\n\r\n    // scroll\r\n    scrollEmbeddedPage: TermEvaluator.scrollEmbeddedPage,\r\n    scrollTopLevelPage: TermEvaluator.scrollTopLevelPage,\r\n\r\n    // system environment\r\n    currentTimestamp: TermEvaluator.currentTimestamp,\r\n    consoleLog: TermEvaluator.consoleLog,\r\n\r\n    setGlobalPropertyHighlightColor: TermEvaluator.setGlobalPropertyHighlightColor,\r\n\r\n    // others\r\n    containerMembersFormLocalGroup: TermEvaluator.containerMembersFormLocalGroup,\r\n    containerRangeContainsMembers: TermEvaluator.containerRangeContainsMembers,\r\n    isInBookmarksList: TermEvaluator.isInBookmarksList,\r\n    callExternalPageFrame: TermEvaluator.callExternalPageFrame,\r\n\r\n  }\r\n\r\n  static contextValue(params, runtime, contextSlots) {\r\n    const mainEntry = contextSlots[params.valueIndex];\r\n    if (params.attributes === undefined) {\r\n      return mainEntry;\r\n    }\r\n    let result = mainEntry;\r\n    params.attributes.forEach((attribute) => { result = result === undefined ? undefined : result[attribute]; })\r\n    return result;\r\n  }\r\n\r\n  // basic boolean ------------------------------------\r\n  static and(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous && current, true);\r\n    }\r\n    return params.left && params.right;\r\n  }\r\n\r\n  static or(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous || current, false);\r\n    }\r\n    return params.left || params.right;\r\n  }\r\n\r\n  static not(params, runtime) {\r\n    return !params.value;\r\n  }\r\n\r\n  static ifThenElse(params, runtime) {\r\n    return params.if ? params.then : params.else;\r\n  }\r\n\r\n  static ifGuard(params, runtime) {\r\n    // Th internal evaluation evaluated guarded branches implicitly\r\n    // and puts term of first passed guard as 'activeBranch' into the params structure.\r\n    // We just return that branch here:\r\n    return params.activeBranch;\r\n  }\r\n\r\n  // compare ------------------------------------\r\n  static equal(params, runtime) {\r\n    return params.left === params.right;\r\n  }\r\n\r\n  static notEqual(params, runtime) {\r\n    return params.left !== params.right;\r\n  }\r\n\r\n  static greater(params, runtime) {\r\n    return params.left > params.right;\r\n  }\r\n\r\n  static greaterEqual(params, runtime) {\r\n    return params.left >= params.right;\r\n  }\r\n\r\n  static less(params, runtime) {\r\n    return params.left < params.right;\r\n  }\r\n\r\n  static lessEqual(params, runtime) {\r\n    return params.left <= params.right;\r\n  }\r\n\r\n  static max(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.sort((a, b) => b - a)[0];\r\n    }\r\n    return params.left > params.right ? params.left : params.right;\r\n  }\r\n\r\n  static maxNamed(params, runtime) {\r\n    // use the params names as return\r\n    // compare params values and return params name of max value\r\n    let currentMaximumValue;\r\n    let currentMaximumName;\r\n    Object.keys(params).forEach((candidateName) => {\r\n      const candidateValue = params[candidateName];\r\n      if (currentMaximumValue === undefined || currentMaximumValue < candidateValue) {\r\n        currentMaximumValue = candidateValue;\r\n        currentMaximumName = candidateName;\r\n      }\r\n    });\r\n    return currentMaximumName;\r\n  }\r\n\r\n  static matches(params) {\r\n    try {\r\n      const matcher = RegExp(params.pattern, 'm');\r\n      return matcher.test(params.candidate);\r\n    } catch (exception) {\r\n      console.log(`Invalid regular expression in matches operator: ${params.pattern} -> evaluate matches call to 'false'`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // arrays -----------------------------------\r\n  static arrayLength(params, runtime) {\r\n    return params.value.length;\r\n  }\r\n\r\n  static union(params, runtime) {\r\n    const { left, right } = params;\r\n\r\n    const result = [];\r\n    left.forEach((candidate) => {\r\n      if (!result.includes(candidate)) {\r\n        result.push(candidate);\r\n      }\r\n    })\r\n    right.forEach((candidate) => {\r\n      if (!result.includes(candidate)) {\r\n        result.push(candidate);\r\n      }\r\n    })\r\n    return result;\r\n  }\r\n\r\n\r\n  static intersection(params, runtime) {\r\n    const { left, right } = params;\r\n\r\n    const result = [];\r\n    left.forEach((candidate) => {\r\n      if (right.includes(candidate) && !result.includes(candidate)) {\r\n        result.push(candidate);\r\n      }\r\n    })\r\n    return result;\r\n  }\r\n\r\n  // numbers ------------------------------------\r\n  static add(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous + current, 0);\r\n    }\r\n    return params.left + params.right;\r\n  }\r\n\r\n  static subtract(params, runtime) {\r\n    return params.left - params.right;\r\n  }\r\n\r\n  static multiply(params, runtime) {\r\n    if (params.paramsArray !== undefined) {\r\n      return params.paramsArray.reduce((previous, current, index, all) => previous * current, 1);\r\n    }\r\n    return params.left * params.right;\r\n  }\r\n\r\n  static divide(params, runtime) {\r\n    return params.left / params.right;\r\n  }\r\n\r\n  static modulo(params, runtime) {\r\n    return params.left % params.right;\r\n  }\r\n\r\n  static floor(params, runtime) {\r\n    return Math.floor(params.value);\r\n  }\r\n\r\n  static ceil(params, runtime) {\r\n    return Math.ceil(params.value);\r\n  }\r\n\r\n  static trunc(params, runtime) {\r\n    return Math.trunc(params.value);\r\n  }\r\n\r\n  static round(params, runtime) {\r\n    return Math.round(params.value);\r\n  }\r\n\r\n  // strings --------------------------------------------------------------\r\n  static stringFormat(params, runtime) {\r\n    let result = params.expression;\r\n    params.valuesArray.forEach((value, index) => {\r\n      // build regex based on the value index\r\n      const exp = `%${index + 1}[$]s`;\r\n      const regexp = new RegExp(exp, \"g\");\r\n      result = result.replace(regexp, value);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  static concatenate(params, runtime) {\r\n    const { left, right } = params;\r\n    return left + right;\r\n  }\r\n\r\n  static boolToString(params, runtime) {\r\n    const { cond } = params;\r\n    return cond.toString();\r\n  }\r\n\r\n  static numberToString(params, runtime) {\r\n    const { expression } = params;\r\n    return expression.toString();\r\n  }\r\n\r\n  static contains(params, runtime) {\r\n    const { container, candidates } = params;\r\n    return candidates.every(candidate => container.includes(candidate));\r\n  }\r\n\r\n  // currently running -----------------------------------------------------\r\n  static getCurrentTest(params, runtime) {\r\n    return runtime.taskManager.getCurrentTestTaskItemNames().test;\r\n  }\r\n\r\n  static getCurrentTask(params, runtime) {\r\n    return runtime.taskManager.getCurrentTestTaskItemNames().task;\r\n  }\r\n\r\n  static getCurrentItem(params, runtime) {\r\n    return runtime.taskManager.getCurrentTestTaskItemNames().item;\r\n  }\r\n\r\n  static getCurrentPage(params, runtime) {\r\n    switch (params.pageType) {\r\n      case \"standard\":\r\n        return runtime.taskManager.getCurrentPageNames().standardPage;\r\n      case \"xPage\":\r\n        return runtime.taskManager.getCurrentPageNames().xPage;\r\n      default:\r\n        console.error(`Illegal page type in getCurrentPage call: ${params.pageType}`);\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  static getEmbeddedPage(params, runtime) {\r\n    const path = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(UserDefPathHelper.getLastUserDefIdFromPath(params.absoluteUserDefId));\r\n    const pageAreaConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (pageAreaConfig === undefined) {\r\n      console.error(`Illegal page area reference in getEmbeddedPage call: ${params.absoluteUserDefId}`);\r\n      return undefined;\r\n    }\r\n    switch (pageAreaConfig.type) {\r\n      case 'CbaPageArea': return CbaPageArea.getEmbeddedPageName(path, pageAreaConfig.config, runtime);\r\n      case 'CbaTreeChildArea': return CbaTreeChildArea.getEmbeddedPageName(path, pageAreaConfig.config, runtime);\r\n      default: {\r\n        console.error(`Not supported component type ${pageAreaConfig.type} in getEmbeddedPage call with reference: ${params.absoluteUserDefId}`);\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  static switchPage(params, runtime) {\r\n    // translate the user defined id path to the target CBAPageArea to a proper state path \r\n    const receiverPath = params.receiver === undefined ? undefined\r\n      : IndexPathHelper.trimRootAndPageAreaFromPath(PathTranslationHelper.getIndexPathForUserDefPath(params.receiver, runtime));\r\n    const receiverTabInfo = params.receiverTabName === undefined ? undefined : {\r\n      name: params.receiverTabName,\r\n      image: params.receiverTabImage\r\n    }\r\n    const position = (params.x === undefined || params.y === undefined) ? undefined : {\r\n      x: params.x, y: params.y\r\n    }\r\n\r\n    runtime.taskManager.switchPage(\r\n      params.pageName, undefined, params.pageUrl,\r\n      params.pageAreaType, params.pageAreaName, receiverPath,\r\n      receiverTabInfo, undefined, position\r\n    );\r\n    return undefined;\r\n  }\r\n\r\n  static closeDialog(params, runtime) {\r\n    const presenter = runtime.dialogPresenter;\r\n    if (presenter !== undefined) {\r\n      presenter.closeDialog({\r\n        pageAreaName: params.pageAreaName,\r\n        type: params.pageAreaType\r\n      })\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static saveTaskResults(params, runtime) {\r\n    runtime.taskManager.saveCurrentTaskResults();\r\n    return undefined;\r\n  }\r\n\r\n  static previousTask(params, runtime) {\r\n    runtime.taskManager.switchTaskPrevious();\r\n    return undefined;\r\n  }\r\n\r\n  static nextTask(params, runtime) {\r\n    runtime.taskManager.switchTaskNext();\r\n    return undefined;\r\n  }\r\n\r\n  static cancelTask(params, runtime) {\r\n    runtime.taskManager.cancelTask();\r\n    return undefined;\r\n  }\r\n\r\n  static switchTaskInTest(params, runtime) {\r\n    runtime.taskManager.switchFirstMatchingTaskIntraTest(params.taskName);\r\n    return undefined;\r\n  }\r\n\r\n  static switchTaskAndTest(params, runtime) {\r\n    runtime.taskManager.switchFirstMatchingTaskInterTest(params.testName, params.taskName);\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * The parameter recommendations must be an array of recommendation objects.\r\n   * Each recommendation object \r\n   * - must have a testName attribute and \r\n   * - may have a taskName atrribute and \r\n   * - may have an absoluteUserDef attribute if a taskName attribute is given.\r\n   */\r\n  static recommend(params, runtime) {\r\n    runtime.recommendationsManager.setRecommendations(params.recommendations);\r\n    return undefined;\r\n  }\r\n\r\n  // interaction events ---------------------------------------------------\r\n  static nbUserInteractions(params, runtime) {\r\n    return runtime.incidentsAccumulator.nbUserInteractions(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static nbUserInteractionsTotal(params, runtime) {\r\n    return runtime.incidentsAccumulator.nbUserInteractionsTotal(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static firstReactionTime(params, runtime) {\r\n    return runtime.incidentsAccumulator.firstReactionTime(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static firstReactionTimeTotal(params, runtime) {\r\n    return runtime.incidentsAccumulator.firstReactionTimeTotal(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n  static taskExecutionTime(params, runtime) {\r\n    return runtime.incidentsAccumulator.taskExecutionTime(runtime.taskManager.getCurrentStatePathRoot(), new Date().getTime());\r\n  }\r\n\r\n  static taskExecutionTimeTotal(params, runtime) {\r\n    return runtime.incidentsAccumulator.taskExecutionTimeTotal(runtime.taskManager.getCurrentStatePathRoot());\r\n  }\r\n\r\n\r\n  // get/set on widgets ------------------------------------------------------------------\r\n  static focus(params, runtime) {\r\n    const component = TermEvaluator.findComponentByAbsoluteUserDefId(params.absoluteUserDefId, runtime);\r\n    const pathId = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pagePath = IndexPathHelper.getPagePath(pathId);\r\n    if (component !== undefined) {\r\n      component.focus();\r\n    } else {\r\n      runtime.actionRegister.registerAction(pathId, \"focus\");\r\n    }\r\n    runtime.focusRegister.registerFocus(pagePath);\r\n    return undefined;\r\n  }\r\n\r\n  static getDisabled(params, runtime) {\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractDisabled, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setDisabled(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    PropagationHelper.applySimpleSetter(absoluteUserDefId, groupName, StateAttributeAccess.extractDisabled, StateAttributeAccess.setDisabled, value, true, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static getSelected(params, runtime) {\r\n    const pathId = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(pathId, runtime);\r\n    return SelectGroupHelper.extractSelectedState(pathState, pathId, runtime);\r\n  }\r\n\r\n  static setSelected(params, runtime) {\r\n    const pathId = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(pathId, runtime);\r\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(params.value, pathId, pathState, false, true, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static getHidden(params, runtime) {\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractHidden, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setHidden(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    PropagationHelper.applySimpleSetter(absoluteUserDefId, groupName, StateAttributeAccess.extractHidden, StateAttributeAccess.setHidden, value, true, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static getVisited(params, runtime) {\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractVisited, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setVisited(params, runtime) {\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractVisited, StateAttributeAccess.setVisited, params.value, params.absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n\r\n  static getTextValue(params, runtime) {\r\n    const { selector } = params;\r\n    if (selector) {\r\n      return CbaTableCell.getFormulaOrValue(selector, params.absoluteUserDefId, runtime);\r\n    }\r\n    return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static setTextValue(params, runtime) {\r\n\r\n    // create trace log entry\r\n    const oldTextValue = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, params.absoluteUserDefId, runtime);\r\n    const newTextValue = TermEvaluator.caluculateTextInsert(oldTextValue, params.value, params.insertPosition, params.dropLength);\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(params.absoluteUserDefId, runtime);\r\n    const traceDetails = {\r\n      indexPath,\r\n      userDefIdPath: params.absoluteUserDefId,\r\n      userDefId: UserDefPathHelper.getLastUserDefIdFromPath(params.absoluteUserDefId),\r\n      oldTextValue,\r\n      newTextValue,\r\n      insertedValue: params.value,\r\n      insertPosition: params.insertPosition,\r\n      dropLength: params.dropLength\r\n    };\r\n    runtime.traceLogBuffer.reportEvent('OperatorSetTextValue', new Date(), traceDetails);\r\n\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, StateAttributeAccess.setTextValue, newTextValue, params.absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n  static caluculateTextInsert(oldText, insertText, insertPosition, dropLength) {\r\n    const prefix = insertPosition < 0 ? oldText : oldText.substr(0, insertPosition);\r\n    const postfix = (insertPosition < 0 || dropLength < 0) ? \"\" : oldText.substr(insertPosition + dropLength);\r\n    return prefix + insertText + postfix;\r\n  }\r\n\r\n  static setHighlightable(params, runtime) {\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractHighlightable, StateAttributeAccess.setHighlightable, params.value, params.absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n  static isSelectedComponentOrTextBlock(params, runtime) {\r\n    const pathParameter = params.absolutePath;\r\n    const blockOwnerPathId = PathTranslationHelper.getIndexPathForTextBlockPath(pathParameter, runtime);\r\n    if (blockOwnerPathId === undefined) {\r\n      const pathId = PathTranslationHelper.getIndexPathForUserDefPath(pathParameter, runtime);\r\n      const pathState = runtime.componentStateManager.findOrBuildStateForPathId(pathId, runtime);\r\n      return SelectGroupHelper.extractSelectedState(pathState, pathId, runtime);\r\n    } else {\r\n      const { partial } = params;\r\n      const richTextPathState = runtime.componentStateManager.findOrBuildStateForPathId(blockOwnerPathId, runtime);\r\n      const blockName = UserDefPathHelper.getLastUserDefIdFromPath(pathParameter);\r\n      const richTextPageSegment = runtime.pageConfigurationsManager.findPageSegmentForTextBlockOwner(blockName);\r\n      const richTextConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(richTextPageSegment);\r\n      return TextBlockSelectHelper.isTextBlockSelected(blockName, richTextPathState, richTextConfig.config, partial);\r\n    }\r\n  }\r\n\r\n  static isHighlighted(params, runtime) {\r\n    const richTextPathState = runtime.componentStateManager.findOrBuildStateByUserDefPath(params.absoluteUserDefId, runtime);\r\n    const richTextPageSegment = runtime.pageConfigurationsManager.findPageSegmentForUserDefId(UserDefPathHelper.getLastUserDefIdFromPath(params.absoluteUserDefId));\r\n    const richTextConfig = runtime.pageConfigurationsManager.findConfigurationForPageSegment(richTextPageSegment);\r\n    return TextBlockSelectHelper.isSelectionContainsNonBlank(richTextPathState, richTextConfig.config);\r\n  }\r\n\r\n  static getIntegerValue(params, runtime) {\r\n    const { absoluteUserDefId, roundingMode, defaultValue } = params;\r\n    // TODO: CKI or BHO: unfortunately the TableCell component puts a Number into the textValue field -> cast that to String:\r\n    const valueAsText = String(ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, absoluteUserDefId, runtime));\r\n\r\n    if (valueAsText === undefined || valueAsText.length === 0) {\r\n      return defaultValue;\r\n    }\r\n\r\n    const parsedValue = TermEvaluator.integerValueFromString(valueAsText, roundingMode);\r\n    return parsedValue === undefined ? defaultValue : parsedValue;\r\n  }\r\n\r\n  /**\r\n   * Internal helper: Parse the given String as integer with rounding applied.\r\n   * \r\n   * The method returns undefined if the string does not represent a decimal number. \r\n   * \r\n   * @param {String} valueAsString The value given as string\r\n   * @param {String} roundingMode The rounding mode, one of 'up', 'down', 'half_up', 'half_down'\r\n   */\r\n  static integerValueFromString(valueAsString, roundingMode) {\r\n    const parseResult = TermEvaluator.parseDecimalString(valueAsString);\r\n    if (parseResult === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const { wholeValue: whole, fractionClass } = parseResult;\r\n    const wholeUp = whole >= 0 ? (whole + 1) : (whole - 1);\r\n    switch (roundingMode) {\r\n      case 'up':\r\n        return fractionClass === 'zero' ? whole : wholeUp;\r\n      case 'down':\r\n        return whole;\r\n      case 'half_up':\r\n        return fractionClass === 'five' || fractionClass === 'greaterThanFive' ? wholeUp : whole;\r\n      case 'half_down':\r\n        return fractionClass === 'greaterThanFive' ? wholeUp : whole;\r\n      default:\r\n        console.warn(`Invalid rounding mode: ${roundingMode}`);\r\n        return undefined;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Internal helper that parses a decimal string into the whole part\r\n   * and a classification of the fractional part: 'zero', 'lessThanFive', 'five', greaterThanFive'.\r\n   * \r\n   * The method returns undefined if the given String is not a proper decimal number.\r\n   * \r\n   * @param {String} valueAsString \r\n   */\r\n  static parseDecimalString(valueAsString) {\r\n    const dotIndex = valueAsString.indexOf('.');\r\n    const wholeString = dotIndex === -1 ? valueAsString : valueAsString.substr(0, dotIndex);\r\n    const fractionString = dotIndex === -1 ? '0' : valueAsString.substr(dotIndex + 1);\r\n    const wholeValue = parseInt(wholeString, 10);\r\n    const fractionValue = parseInt(fractionString, 10);\r\n    if (String(wholeValue) !== wholeString) {\r\n      return undefined;\r\n    }\r\n    let fractionCompareString = fractionString;\r\n    while (fractionCompareString.startsWith('0')) {\r\n      fractionCompareString = fractionCompareString.substr(1);\r\n    }\r\n    if (fractionCompareString.length === 0) {\r\n      fractionCompareString = '0';\r\n    }\r\n    if (String(fractionValue) !== fractionCompareString) {\r\n      return undefined;\r\n    }\r\n    if (fractionValue < 0) {\r\n      return undefined;\r\n    }\r\n    let fractionClass;\r\n    if (fractionValue === 0) {\r\n      fractionClass = 'zero'\r\n    } else if (fractionString[0] === '0' || fractionValue < 5) {\r\n      fractionClass = 'lessThanFive'\r\n    } else if (fractionValue > 5) {\r\n      fractionClass = 'greaterThanFive'\r\n    } else {\r\n      fractionClass = 'five'\r\n    }\r\n    return {\r\n      wholeValue, fractionClass\r\n    };\r\n  }\r\n\r\n  static setMediaPlayerVolume(params, runtime) {\r\n    if (params.value >= 0 && params.value <= 10) {\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractMediaVolume, StateAttributeAccess.setMediaVolume, params.value, params.absoluteUserDefId, runtime, true);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static setMediaPlayer(params, runtime) {\r\n    const component = TermEvaluator.findComponentByAbsoluteUserDefId(params.absoluteUserDefId, runtime);\r\n    if (component !== undefined) {\r\n      const operation = params.value.toLowerCase();\r\n      switch (operation) {\r\n        case 'start':\r\n          component.play(true);\r\n          break;\r\n        case 'stop':\r\n          component.stop(true);\r\n          break;\r\n        case 'pause':\r\n          component.pause(true);\r\n          break;\r\n        default:\r\n          TermEvaluator.logMessage(`invalid operation ${operation}`);\r\n          break;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static initMediaPlayer(params, runtime) {\r\n    const { absoluteUserDefId, automaticStart, hideControls, maxPlay } = params;\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractAutomaticStart, StateAttributeAccess.setAutomaticStart, automaticStart, absoluteUserDefId, runtime, true);\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractHideControls, StateAttributeAccess.setHideControls, hideControls, absoluteUserDefId, runtime, true);\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractMaxPlay, StateAttributeAccess.setMaxPlay, maxPlay, absoluteUserDefId, runtime, true);\r\n  }\r\n\r\n  static setDragAndDropMode(params, runtime) {\r\n    const { isSender, isReceiver, absoluteUserDefId } = params;\r\n    const modeToSet = {\r\n      isSender,\r\n      isReceiver\r\n    }\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractDragAndDrop, StateAttributeAccess.setDragAndDrop, modeToSet, absoluteUserDefId, runtime, true);\r\n    return undefined;\r\n  }\r\n\r\n  static setSingleSelectMode(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    SelectGroupHelper.setSingleSelectActiveForController(absoluteUserDefId, groupName, value, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static setAllowDeselect(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    SelectGroupHelper.setAllowDeselectForController(absoluteUserDefId, groupName, value, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Operator to set the selectable flag in the ComponentStateManager explcitily. \r\n   * For use on components, that never use the select-group approach to control selectability (e.g. CbaTable).\r\n   */\r\n  static setSelectable(params, runtime) {\r\n    const { value, absoluteUserDefId } = params;\r\n    ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractSelectable, StateAttributeAccess.setSelectable, value, absoluteUserDefId, runtime, false);\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Operator to switch selectability for a component possibly controlled by a select group controller.\r\n   */\r\n  static setSelectChangeBlockMode(params, runtime) {\r\n    const { value, absoluteUserDefId, groupName } = params;\r\n    const pathState = runtime.componentStateManager.findOrBuildStateByUserDefPath(params.absoluteUserDefId, runtime);\r\n    const selectableFlagInPathState = StateAttributeAccess.extractSelectable(pathState);\r\n    if (selectableFlagInPathState === undefined) {\r\n      // selectability is controlled by select group:\r\n      SelectGroupHelper.setSelectionChangesBlockedForController(absoluteUserDefId, groupName, value, runtime);\r\n    } else {\r\n      // selectability is explicitly controlled by component itself:\r\n      ComponentStateHelper.updateStateAttributeByUserDefPath(StateAttributeAccess.extractSelectable, StateAttributeAccess.setSelectable, !value, absoluteUserDefId, runtime, false);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n\r\n  // named calculations ----------------------------------------------------------------------\r\n\r\n  static evaluateNamedCalculation(params, runtime, contextSlots) {\r\n    const currentTaskName = runtime.taskManager.getCurrentTestTaskItemNames().task;\r\n    const termIdentifiedByName = runtime.calculationsConfigurationManager.findCalculationByTaskName(currentTaskName, params.calculationName);\r\n\r\n    // Shortcut to avoid repetitive calculations during a full task result calculation (i.e. starting with a cleared task result):\r\n    if (\r\n      contextSlots !== undefined\r\n      && contextSlots[0] !== undefined\r\n      && contextSlots[0].useExistingCalculationResults === true\r\n      && contextSlots[0].taskPath !== undefined) {\r\n      const existingResult = runtime.taskResultsManager.getResult(contextSlots[0].taskPath, params.calculationName);\r\n      if (existingResult !== undefined) {\r\n        return existingResult;\r\n      }\r\n    }\r\n\r\n    return TermEvaluator.evaluateTerm(termIdentifiedByName, runtime, contextSlots, params.calculationName);\r\n  }\r\n\r\n  static getCalculationResult(params, runtime) {\r\n\r\n    const currentTaskName = runtime.taskManager.getCurrentTestTaskItemNames().task;\r\n    if (currentTaskName === params.taskName) {\r\n      // evaluate ad hoc in current task\r\n      return TermEvaluator.evaluateNamedCalculation({\r\n        calculationName: params.calculationName\r\n      }, runtime);\r\n    } else {\r\n      // look up calculation result in stored result of inactive task\r\n      const taskPath = runtime.taskManager.getStatePathRootForTask(params.taskName);\r\n      return runtime.taskResultsManager.getResult(taskPath, params.calculationName);\r\n    }\r\n  }\r\n\r\n  // variables  --------------------------------------------------------------------------\r\n\r\n  static getVariable(params, runtime) {\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    return variableManager.getVariable(currentTaskId, params.name);\r\n  }\r\n\r\n  static setVariable(params, runtime) {\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    variableManager.setVariable(currentTaskId, params.name, params.value, params.type, runtime);\r\n    return undefined;\r\n  }\r\n\r\n  static switchVariables(params, runtime) {\r\n    const { left, right } = params;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n    const { value: oldValueLeft, type: oldTypeLeft } = variableManager.getVariable(currentTaskId, left, true);\r\n    const { value: oldValueRight, type: oldTypeRight } = variableManager.getVariable(currentTaskId, right, true);\r\n\r\n    variableManager.setVariable(currentTaskId, left, oldValueRight, oldTypeRight, runtime);\r\n    variableManager.setVariable(currentTaskId, right, oldValueLeft, oldTypeLeft, runtime);\r\n  }\r\n\r\n  // implicit variables ---------------------------------------------------------------\r\n  static getImplicitVariable(params, runtime) {\r\n    const { groupName, absoluteUserDefId, selector } = params;\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const componentType = ComponentStateHelper.getComponentTypeForIndexPath(indexPath, runtime);\r\n    switch (componentType) {\r\n      // evaluated to String\r\n      case 'CbaInputField':\r\n      case 'CbaSingleLineInputField':\r\n        return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, absoluteUserDefId, runtime);\r\n      case 'CbaTableCell':\r\n        if (selector) {\r\n          return CbaTableCell.getFormulaOrValue(selector, absoluteUserDefId, runtime);\r\n        }\r\n        return ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractTextValue, absoluteUserDefId, runtime);\r\n      case 'CbaComboBox': {\r\n        return SelectGroupHelper.getComboboxSelectedItem(indexPath, runtime);\r\n      }\r\n      case 'CbaList': {\r\n        return SelectGroupHelper.getListSelectedItems(indexPath, runtime);\r\n      }\r\n      case 'CbaTree': {\r\n        const currentNode = TreeUtils.getCurrentNodePathId(absoluteUserDefId, runtime);\r\n        return (currentNode === null) ? '' : currentNode;\r\n      }\r\n      case 'CbaMedia': {\r\n        const lastOperation = ComponentStateHelper.getStateAttributeByUserDefPath(StateAttributeAccess.extractLastOperation, absoluteUserDefId, runtime);\r\n        if (lastOperation === OPERATION_PLAY) return 'mp_start';\r\n        if (lastOperation === OPERATION_PAUSE) return 'mp_pause';\r\n        if (lastOperation === OPERATION_STOP) return 'mp_stop';\r\n        if (lastOperation === OPERATION_ENDED) return 'mp_end';\r\n        return '';\r\n      }\r\n      case 'CbaContainer': {\r\n        if (groupName === undefined) {\r\n          return SelectGroupHelper.getNonSelectGroupSelectedChildren(indexPath, runtime);\r\n        }\r\n        return SelectGroupHelper.getSelectGroupSelectedChildren(indexPath, groupName, runtime);\r\n      }\r\n      // evaluated to Boolean\r\n      case 'CbaCheckbox':\r\n      case 'CbaRadioButton':\r\n      case 'CbaButton':\r\n      case 'CbaLink':\r\n      case 'CbaRichTextField':\r\n        return TermEvaluator.getSelected(params, runtime);\r\n      // evaluated to Integer\r\n      case 'CbaTimer': {\r\n        const { pageConfigurationsManager, statemachinesManager } = runtime;\r\n        const { timerEvent } = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config;\r\n        if (timerEvent !== undefined) {\r\n          const timerData = statemachinesManager.getTimerData(timerEvent);\r\n          const remainingTimeInMillis = timerData.remainingTime;\r\n          return (remainingTimeInMillis ? Math.ceil(remainingTimeInMillis / 1000) : 0);\r\n        }\r\n        return 0;\r\n      }\r\n      default:\r\n        console.log(`Unknown component type: ${componentType}. We will do nothing!`);\r\n        return '';\r\n    }\r\n  }\r\n\r\n  // state machine  --------------------------------------------------------------------------\r\n\r\n  static raiseEvent(params, runtime) {\r\n    runtime.statemachinesManager.triggerEvent(params.event);\r\n    return undefined;\r\n  }\r\n\r\n  static postponeTaskSwitch(params, runtime) {\r\n    runtime.statemachinesManager.setPostponedTaskSwitch(params.switchCall.deferred);\r\n    return undefined;\r\n  }\r\n\r\n  static setTimedEventInterval(params, runtime) {\r\n    const { eventName, interval } = params;\r\n    const { statemachinesManager } = runtime;\r\n    statemachinesManager.setTimedEventInterval(eventName, interval, runtime);\r\n  }\r\n\r\n  static setStatemachineAssignedPage(params, runtime) {\r\n    const { state, pageName, pageAreaType, pageAreaName } = params;\r\n    const { statemachinesManager } = runtime;\r\n    statemachinesManager.setStatePageAssignment(state, pageName, pageAreaType, pageAreaName);\r\n  }\r\n\r\n  static getNbStatemachineEventsRaised(params, runtime) {\r\n    return runtime.statemachinesManager.getTotalNbOfRaisedEvents();\r\n  }\r\n\r\n  static getCurrentLeafStates(params, runtime) {\r\n    return runtime.statemachinesManager.getCurrentStateMachineLeafStates();\r\n  }\r\n\r\n  static getRaisedStatemachineEvents(params, runtime) {\r\n    return runtime.statemachinesManager.getRaisedEvents();\r\n  }\r\n\r\n  static getVisitedStates(params, runtime) {\r\n    return runtime.statemachinesManager.getVisitedStates();\r\n  }\r\n\r\n  static getRaisedEventsInState(params, runtime) {\r\n    return runtime.statemachinesManager.getRaisedEventsInState(params.state);\r\n  }\r\n\r\n  static getStatemachineVariableValues(params, runtime) {\r\n    return runtime.statemachinesManager.getValuesOfVariable(params.variable);\r\n  }\r\n\r\n  // trace ----------------------------------------------------------------------------------\r\n\r\n  static traceText(params, runtime) {\r\n    TermEvaluator.traceTextInternal('OperatorTraceText', params, runtime);\r\n    return true;\r\n  }\r\n\r\n  static traceSnapshot(params, runtime) {\r\n    TermEvaluator.traceTextInternal('OperatorTraceSnapshot', params, runtime);\r\n    TraceLogHelper.dumpSnapshotToTrace(runtime);\r\n    return true;\r\n  }\r\n\r\n  static traceTextInternal(operator, params, runtime) {\r\n    const text = TermEvaluator.evaluateTerm(params.expression, runtime, [], `text_${operator}`);\r\n    const type = params.type === undefined ? undefined : TermEvaluator.evaluateTerm(params.type, runtime, [], `type_${operator}`);\r\n    const traceDetails = {\r\n      type,\r\n      text\r\n    };\r\n    runtime.traceLogBuffer.reportEvent(operator, new Date(), traceDetails);\r\n  }\r\n\r\n  // calculator ----------------------------------------------------------------------------------\r\n\r\n  static calcGetMem(params, runtime) {\r\n    return runtime.calculatorsManager.calcGetMem(TermEvaluator.evaluateTerm(params.expression, runtime, [], 'calcGetMem'));\r\n  }\r\n\r\n  static calcOp(params, runtime) {\r\n    const value = (params.expression !== undefined) ? TermEvaluator.evaluateTerm(params.expression, runtime, [], `calcOp${params.operation}`) : undefined;\r\n    runtime.calculatorsManager.calcOp(params.operation, value);\r\n    return undefined;\r\n  }\r\n\r\n  static calcOpnd(params, runtime) {\r\n    const value = (params.expression !== undefined) ? TermEvaluator.evaluateTerm(params.expression, runtime, [], `calcOpnd${params.operation}`) : undefined;\r\n    runtime.calculatorsManager.calcOpnd(params.operation, value);\r\n    return undefined;\r\n  }\r\n\r\n  static calcSettings(params, runtime) {\r\n    const settings = {};\r\n    const { scale, displayWidth, withThousandSeparator, includeOperandInHistory, angle, format } = params;\r\n    if (scale !== undefined) {\r\n      settings.scale = scale;\r\n    }\r\n    if (displayWidth !== undefined) {\r\n      settings.displayWidth = displayWidth;\r\n    }\r\n    if (withThousandSeparator !== undefined) {\r\n      settings.withThousandSeparator = withThousandSeparator;\r\n    }\r\n    if (includeOperandInHistory !== undefined) {\r\n      settings.includeOperandInHistory = includeOperandInHistory;\r\n    }\r\n    if (angle !== undefined) {\r\n      settings.angle = angle;\r\n    }\r\n    if (format !== undefined) {\r\n      settings.format = TermEvaluator.getValueFormatForCalculator(params.format);\r\n    }\r\n    runtime.calculatorsManager.calcSettings(settings);\r\n  }\r\n\r\n  // system environment -----------------------------------------------------------------------\r\n\r\n  static currentTimestamp(params, runtime) {\r\n    return new Date().getTime();\r\n  }\r\n\r\n  static consoleLog(params, runtime) {\r\n    console.log(params.message);\r\n    return undefined;\r\n  }\r\n\r\n  static setGlobalPropertyHighlightColor(params, runtime) {\r\n    const topLevelConfiguration = runtime.presenterStateManager.getTaskState(runtime.taskManager.getCurrentStatePathRoot());\r\n    topLevelConfiguration.itemHighlightColor = params.value;\r\n    runtime.presenterStateManager.saveTaskState(runtime.taskManager.getCurrentStatePathRoot(), topLevelConfiguration, runtime);\r\n\r\n    runtime.componentDirectory.findByComponentType(CbaRichTextField).forEach((richTextComponent) => {\r\n      richTextComponent.highlightColorChanged();\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  // scroll -----------------------------------------------------------------------\r\n  static scrollEmbeddedPage(params, runtime) {\r\n    const { absoluteUserDefId, xPosition, yPosition, xPositionType, yPositionType } = params;\r\n    const indexPath = PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime);\r\n    const componentInstance = runtime.componentDirectory.findComponent(indexPath);\r\n\r\n    if (componentInstance) {\r\n      const x = `${xPosition}${xPositionType === '%' ? xPositionType : ''}`;\r\n      const y = `${yPosition}${yPositionType === '%' ? yPositionType : ''}`;\r\n      componentInstance.scroll(x, y);\r\n    } else {\r\n      console.warn(`Term Evaluator - scrollEmbeddedPage - component is not currently on screen or can't be found`);\r\n    }\r\n  }\r\n\r\n  static scrollTopLevelPage(params, runtime) {\r\n    const { isXPage, xPosition, yPosition, xPositionType, yPositionType } = params;\r\n    const currentPages = runtime.taskManager.getCurrentPageNames();\r\n    const pageAreaName = isXPage ? \"xPage\" : \"standard\";\r\n    const pageName = isXPage ? currentPages.xPage : currentPages.standardPage;\r\n\r\n    if (pageAreaName && pageName) {\r\n      const pagePath = IndexPathHelper.appendPageSegmentToPathRoot(\r\n        runtime.taskManager.getCurrentStatePathRoot(),\r\n        'main',\r\n        pageAreaName,\r\n        IndexPathHelper.buildPageSegment(pageName)\r\n      );\r\n\r\n      const componentInstance = runtime.componentDirectory.findComponent(pagePath);\r\n      const containerRef = componentInstance && componentInstance instanceof CbaContainer && componentInstance.containerRendererRef.current;\r\n\r\n      if (containerRef) {\r\n        const parentNode = currentPages.xPage ? containerRef.parentNode.parentNode : containerRef.parentNode;\r\n        const x = `${xPosition}${xPositionType === '%' ? xPositionType : ''}`;\r\n        const y = `${yPosition}${yPositionType === '%' ? yPositionType : ''}`;\r\n        Utils.doScrollOnHTMLElement(x, y, containerRef, parentNode);\r\n      }\r\n    } else if (!pageName && isXPage) {\r\n      console.warn(`Term Evaluator - scrollTopLevelPage - xPage is either not currently on screen or can't be found`);\r\n    } else {\r\n      // should never go here\r\n      console.warn(`Term Evaluator - scrollTopLevelPage - unknown page tried scrolling`);\r\n    }\r\n  }\r\n\r\n  // others -----------------------------------------------------------------------\r\n  static containerMembersFormLocalGroup(params, runtime) {\r\n    const { container, minDistance, maxDistance, anchorPointType, groupMembers, checkNonMembers } = params;\r\n    const containerIndexPath = PathTranslationHelper.getIndexPathForUserDefPath(container, runtime);\r\n    const memberIndexPaths = TermEvaluator.getIndexPathsForUserDefIds(groupMembers, runtime);\r\n    if (!TermEvaluator.checkChildhood(containerIndexPath, memberIndexPaths)) {\r\n      console.warn('Some group members in containerMembersFormLocalGroup call are not children of the given container -> returning false.')\r\n      return false;\r\n    }\r\n    const { memberComparePoints, nonMemberComparePoints } = TermEvaluator.getComparePointSets(containerIndexPath, 'comparesPosition', anchorPointType, memberIndexPaths, runtime);\r\n\r\n    return TermEvaluator.checkLocalGroup(minDistance, maxDistance, memberComparePoints, checkNonMembers === false ? [] : nonMemberComparePoints);\r\n  }\r\n\r\n  static containerRangeContainsMembers(params, runtime) {\r\n    const { container, minX, maxX, minY, maxY, anchorPointType, rangeMembers, checkNonMembers } = params;\r\n    const containerIndexPath = PathTranslationHelper.getIndexPathForUserDefPath(container, runtime);\r\n    const memberIndexPaths = TermEvaluator.getIndexPathsForUserDefIds(rangeMembers, runtime);\r\n    if (!TermEvaluator.checkChildhood(containerIndexPath, memberIndexPaths)) {\r\n      console.warn('Some group members in containerRangeContainsMembers call are not children of the given container -> returning false.')\r\n      return false;\r\n    }\r\n    const { memberComparePoints, nonMemberComparePoints } = TermEvaluator.getComparePointSets(containerIndexPath, 'comparesPosition', anchorPointType, memberIndexPaths, runtime);\r\n\r\n    return TermEvaluator.checkInRange(minX, maxX, minY, maxY, memberComparePoints, checkNonMembers === false ? [] : nonMemberComparePoints);\r\n  }\r\n\r\n  static isInBookmarksList(params, runtime) {\r\n    const { pageName: pageToLookFor } = params;\r\n    const pageAreaPathList = ComponentStateHelper.findIndexPathsInCurrentTaskOfComponentWithType('CbaPageArea', runtime);\r\n\r\n    const pageAreaWithMatchingBookmark = pageAreaPathList.find(indexPath => BookmarkHelper.getBookmarks(indexPath, runtime).find(bookmark => bookmark.pageName === pageToLookFor) !== undefined);\r\n    return pageAreaWithMatchingBookmark !== undefined;\r\n  }\r\n\r\n  static callExternalPageFrame(params, runtime) {\r\n    const { absoluteUserDefId, values } = params;\r\n    const pageFrameInstance = runtime.componentDirectory.findComponent(PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime));\r\n\r\n    // don't try to send a message if the external page frame does not exist currently:\r\n    if (pageFrameInstance !== undefined) {\r\n      const targetWindow = pageFrameInstance.getFrameWindow();\r\n      const url = pageFrameInstance.getFrameContentUrl();\r\n      if (targetWindow !== undefined && url !== undefined) {\r\n        // send asynchronosly:\r\n        const sendPromise = new Promise((resolve, reject) => {\r\n          try {\r\n            targetWindow.postMessage(JSON.stringify(values), url.origin);\r\n          } catch (e) {\r\n            console.error(`Cannot call external page frame via postMessage`, e);\r\n            throw new Error(`Cannot call external page frame via postMessage`);\r\n          }\r\n        });\r\n        // currently we don't do anything once the send operation is complete:\r\n        sendPromise.then();\r\n      }\r\n    }\r\n  }\r\n\r\n  // client interface ------------------------------------------------------------------------\r\n  static evaluateTerm(term, runtime, contextSlots, topLogName) {\r\n    return TermEvaluator.evaluateTermInternal(term, runtime, contextSlots, `<${topLogName === undefined ? '' : topLogName}>`);\r\n  }\r\n\r\n\r\n  // internal methods of evaluation loop ------------------------------------------------------------------------\r\n  static evaluateTermInternal(term, runtime, contextSlots, logContext) {\r\n    if (runtime === undefined) TermEvaluator.logMessage(`Runtime undefined for ${logContext}`);\r\n\r\n    // detect atomic terms and return their values immediately:\r\n    const typeOfTerm = typeof term\r\n    if (typeOfTerm === 'string' || typeOfTerm === 'boolean' || typeOfTerm === 'number') {\r\n      TermEvaluator.logCalculation(`${logContext}=>${term}`);\r\n      return term;\r\n    }\r\n\r\n    if (!TermEvaluator.isTermComplete(term, logContext)) {\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n\r\n    // get operator\r\n    const operatorName = term.operator;\r\n\r\n    // detect non recursive structures (i.e. parameter objects that are not operator calls)\r\n    // and return them immediately\r\n    if (operatorName === undefined) {\r\n      TermEvaluator.logCalculation(`${logContext}=>${JSON.stringify(term)}`);\r\n      return term;\r\n    }\r\n\r\n    const operatorFunction = TermEvaluator.operators[operatorName];\r\n    if (operatorFunction === undefined) {\r\n      TermEvaluator.logMessage(`Unknown operator ${operatorName} in term in ${logContext}`);\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n\r\n    // evaluate parameters\r\n    const evaluatedParams = {};\r\n\r\n    if (operatorFunction === TermEvaluator.ifThenElse) {\r\n      // special case for if-then-else: evaluate one branch only:\r\n\r\n      const ifParamIndex = term.params.findIndex(param => param.name === 'if');\r\n      if (ifParamIndex === -1) {\r\n        TermEvaluator.logMessage(`Missing if parameter in if-then-else in ${logContext}`);\r\n        evaluatedParams.if = false;\r\n      } else {\r\n        const evaluationResult = TermEvaluator.evaluateParam(term.params[ifParamIndex], ifParamIndex, runtime, contextSlots, operatorName, logContext);\r\n        evaluatedParams[evaluationResult.name] = evaluationResult.value;\r\n      }\r\n\r\n      const chosenBranch = evaluatedParams.if === true ? 'then' : 'else';\r\n      const chosenBranchIndex = term.params.findIndex(param => param.name === chosenBranch);\r\n      if (chosenBranchIndex !== -1) {\r\n        const evaluationResult = TermEvaluator.evaluateParam(term.params[chosenBranchIndex], chosenBranchIndex, runtime, contextSlots, operatorName, logContext)\r\n        evaluatedParams[evaluationResult.name] = evaluationResult.value;\r\n      }\r\n    } else if (operatorFunction === TermEvaluator.ifGuard) {\r\n      // special case for an array of guarded evaluations: evaluate guards up to the first hit, evaluate that branch only:\r\n\r\n      const branchesIndex = term.params.findIndex(param => param.name === 'branches');\r\n      if (branchesIndex === -1) {\r\n        TermEvaluator.logMessage(`Missing branches parameter in guarded-if in ${logContext}`);\r\n      } else {\r\n        const branchesArray = term.params[branchesIndex].value;\r\n        if (branchesArray === undefined || !Array.isArray(branchesArray)) {\r\n          TermEvaluator.logMessage(`Branches parameter in guarded-if does not contain an array as value in ${logContext}`);\r\n        } else {\r\n          // find the first branch with a passed guard:\r\n          const activeBranch = branchesArray.find((branchInfo, branchIndex) => {\r\n            if (branchInfo.guard === undefined || branchInfo.branch === undefined) {\r\n              TermEvaluator.logMessage(`Ignored incomplete guarded branch at index ${branchIndex} in guarded-if in ${logContext}`);\r\n              return false;\r\n            }\r\n            return TermEvaluator.evaluateTermInternal(branchInfo.guard, runtime, contextSlots, operatorName, logContext);\r\n          });\r\n\r\n          // none of the guards might pass:\r\n          if (activeBranch === undefined) {\r\n            TermEvaluator.logMessage(`No active branch in guarded-if in ${logContext}`);\r\n          } else {\r\n            // put evaluated branch of first passed guard into parameter structure for operator implementation:\r\n            evaluatedParams.activeBranch = TermEvaluator.evaluateTermInternal(activeBranch.branch, runtime, contextSlots, operatorName, logContext);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // standard case: evaluate all parameters\r\n      term.params.forEach((param, index) => {\r\n        const evaluationResult = TermEvaluator.evaluateParam(param, index, runtime, contextSlots, operatorName, logContext);\r\n        evaluatedParams[evaluationResult.name] = evaluationResult.value;\r\n      });\r\n    }\r\n\r\n    // call operator with evaluated parameters\r\n    const result = operatorFunction(evaluatedParams, runtime, contextSlots);\r\n    TermEvaluator.logCalculation(`${logContext}=>${result}`);\r\n    return result;\r\n\r\n  }\r\n\r\n  static isTermComplete(term, logContext) {\r\n    if (term === undefined) {\r\n      TermEvaluator.logMessage(`Undefined term in ${logContext}`);\r\n      return false;\r\n    }\r\n    if (term.operator === undefined) {\r\n      // terms without operator are object value parameters that should not be evaluated\r\n      return true;\r\n    }\r\n    if (term.params === undefined) {\r\n      TermEvaluator.logMessage(`Undefined parameters for operator ${term.operator} in term in ${logContext}`);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  static evaluateParam(param, index, runtime, contextSlots, operatorName, logContext) {\r\n    if (param === undefined) {\r\n      TermEvaluator.logMessage(`Undefined parameter at index ${index} in term in ${logContext}`);\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n    if (param.name === undefined) {\r\n      TermEvaluator.logMessage(`Parameter without name at index ${index} in term in ${logContext}`);\r\n      TermEvaluator.logCalculation(`${logContext}=> undefined`);\r\n      return undefined;\r\n    }\r\n\r\n    const resultValue = (Array.isArray(param.value))\r\n      // manage arrays as param.value content: call evaluateTermInternal for each array element \r\n      // and create an array of these results in evaluatedParams[param.name]\r\n      ? param.value.map((value, index2, all) => TermEvaluator.evaluateTermInternal(value, runtime, contextSlots, `${logContext}-> parameter ${param.name}[${index2}] for operator ${operatorName}`))\r\n      : TermEvaluator.evaluateTermInternal(param.value, runtime, contextSlots, `${logContext}-> parameter ${param.name} for operator ${operatorName}`);\r\n\r\n    return {\r\n      name: param.name,\r\n      value: resultValue\r\n    }\r\n\r\n  }\r\n\r\n  static logMessage(message) {\r\n    console.warn(message);\r\n  }\r\n\r\n  static logCalculation(message) {\r\n    // console.log(message);\r\n  }\r\n\r\n\r\n  // ---- internal helper methods ------------------------------------------------------------------------------------------------------------\r\n  /**\r\n   * Private helper: Translate the format parameter value coming from the generator\r\n   * to a ValueFormatter format known to the calculator implementation.\r\n   */\r\n  static getValueFormatForCalculator(parameterValue) {\r\n    switch (parameterValue) {\r\n      case 'EN': return ValueFormatter.FORMATS.EN;\r\n      case 'DE': return ValueFormatter.FORMATS.DE;\r\n      default: return ValueFormatter.FORMATS.DE;\r\n    }\r\n  }\r\n\r\n  static checkLocalGroup(minDistance, maxDistance, memberComparePoints, nonMemberComparePoints) {\r\n    const membersNotKeepingDistance = memberComparePoints.filter((candidate, index) => !TermEvaluator.keepsDistanceToGroup(candidate, memberComparePoints, minDistance, maxDistance, index));\r\n    const nonMembersKeepingDistance = nonMemberComparePoints.filter(candidate => TermEvaluator.keepsDistanceToGroup(candidate, memberComparePoints, minDistance, maxDistance, undefined));\r\n\r\n    return membersNotKeepingDistance.length === 0 && nonMembersKeepingDistance.length === 0;\r\n\r\n  }\r\n\r\n  static keepsDistanceToGroup(candidate, group, minDistance, maxDistance, excludeIndex) {\r\n    return group.filter((groupMember, index) => excludeIndex !== index && !TermEvaluator.keepDistance(candidate, groupMember, minDistance, maxDistance)).length === 0;\r\n  }\r\n\r\n  static keepDistance(pointA, pointB, minDistance, maxDistance) {\r\n    const xDelta = pointA.x - pointB.x;\r\n    const yDelta = pointA.y - pointB.y;\r\n    const distance = Math.sqrt((xDelta * xDelta) + (yDelta * yDelta));\r\n    return minDistance < distance && distance < maxDistance;\r\n  }\r\n\r\n\r\n  static checkInRange(minX, maxX, minY, maxY, memberComparePoints, nonMemberComparePoints) {\r\n    const membersNotInRange = TermEvaluator.filterInRange(minX, maxX, minY, maxY, memberComparePoints);\r\n    const nonMembersInRange = TermEvaluator.filterOutOfRange(minX, maxX, minY, maxY, nonMemberComparePoints);\r\n\r\n    return membersNotInRange.length === 0 && nonMembersInRange.length === 0;\r\n\r\n  }\r\n\r\n  static filterInRange(minX, maxX, minY, maxY, points) {\r\n    return points.filter(point => minX > point.x || point.x > maxX || minY > point.y || point.y > maxY);\r\n  }\r\n\r\n  static filterOutOfRange(minX, maxX, minY, maxY, points) {\r\n    return points.filter(point => minX <= point.x && point.x <= maxX && minY <= point.y && point.y <= maxY);\r\n  }\r\n\r\n  static checkChildhood(container, children) {\r\n    const nonChildren = children.filter(candidatePath => !candidatePath.startsWith(container));\r\n    return nonChildren.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Get the positions of the children of the given container according to the given anchor point type: topLeft/center/bottomLeft/...\r\n   * The children are divided in two groups: \r\n   *  - the 'members' (i.e. those in the given memberIndexPaths set) and\r\n   *  - the 'non-members' (i.e. those not in the given memberIndexPaths set) \r\n   * \r\n   * @param {*} containerIndexPath \r\n   * @param {*} classifier \r\n   * @param {*} anchorPointType \r\n   * @param {*} memberIndexPaths \r\n   * @param {*} runtime \r\n   */\r\n  static getComparePointSets(containerIndexPath, classifier, anchorPointType, memberIndexPaths, runtime) {\r\n    const nonMemberIndexPaths = TermEvaluator.getIndexPathsForChildrenWithClassifier(containerIndexPath, classifier, runtime).filter(childPath => !memberIndexPaths.includes(childPath));\r\n    return {\r\n      memberComparePoints: TermEvaluator.getComparePointsForIndexPaths(memberIndexPaths, anchorPointType, runtime),\r\n      nonMemberComparePoints: TermEvaluator.getComparePointsForIndexPaths(nonMemberIndexPaths, anchorPointType, runtime)\r\n    }\r\n  }\r\n\r\n  static getIndexPathsForChildrenWithClassifier(containerIndexPath, classifier, runtime) {\r\n    const { pageConfigurationsManager } = runtime;\r\n    const matchingChildrenPaths = [];\r\n    const containerChildrenArray = pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(containerIndexPath)).config.cbaChildren;\r\n    if (containerChildrenArray !== undefined) {\r\n      containerChildrenArray.forEach((childConfig, index) => {\r\n        if (childConfig.config.classifiers !== undefined && childConfig.config.classifiers.includes(classifier)) {\r\n          matchingChildrenPaths.push(IndexPathHelper.appendIndexToPageSegment(containerIndexPath, index));\r\n        }\r\n      });\r\n    }\r\n    return matchingChildrenPaths;\r\n  }\r\n\r\n  static getIndexPathsForUserDefIds(userDefIdPaths, runtime) {\r\n    return userDefIdPaths.map(userDefIdPath => PathTranslationHelper.getIndexPathForUserDefPath(userDefIdPath, runtime));\r\n  }\r\n\r\n  /**\r\n   * For each given display component instance get the point that we should use for position compoarisons\r\n   * according to the given anchor point type: topLeft/center/bottomLeft/...\r\n   * \r\n   * @param {} indexPaths The index paths of the display component instances.\r\n   * @param {*} anchorPointType The anchor point type.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static getComparePointsForIndexPaths(indexPaths, anchorPointType, runtime) {\r\n    return indexPaths.map(indexPath => TermEvaluator.getComparePointForIndexPath(indexPath, anchorPointType, runtime));\r\n  }\r\n\r\n  /**\r\n   * Get the point of the given display component instance that we should use for position compoarisons\r\n   * according to the given anchor point type: topLeft/center/bottomLeft/...\r\n   * \r\n   * @param {} indexPath The index path of the display component instance.\r\n   * @param {*} anchorPointType The anchor point type.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  static getComparePointForIndexPath(indexPath, anchorPointType, runtime) {\r\n    const { componentStateManager, pageConfigurationsManager } = runtime;\r\n    return TermEvaluator.getComparePoint(\r\n      StateAttributeAccess.extractPosition(componentStateManager.findOrBuildStateForPathId(indexPath, runtime)),\r\n      pageConfigurationsManager.findConfigurationForPageSegment(IndexPathHelper.getLastPageSegmentFromPath(indexPath)).config.position,\r\n      anchorPointType\r\n    );\r\n  }\r\n\r\n  static getComparePoint(point, positionFromConfig, anchorPointType) {\r\n    switch (anchorPointType) {\r\n      case 'topLeft':\r\n        return {\r\n          x: point.x,\r\n          y: point.y\r\n        }\r\n      case 'bottomLeft':\r\n        return {\r\n          x: point.x,\r\n          y: point.y + positionFromConfig.height\r\n        }\r\n      case 'topRight':\r\n        return {\r\n          x: point.x + positionFromConfig.width,\r\n          y: point.y\r\n        }\r\n      case 'bottomRight':\r\n        return {\r\n          x: point.x + positionFromConfig.width,\r\n          y: point.y + positionFromConfig.height\r\n        }\r\n      case 'center':\r\n        return {\r\n          x: point.x + (positionFromConfig.width / 2),\r\n          y: point.y + (positionFromConfig.height / 2)\r\n        }\r\n      default:\r\n        console.error(`Unknown anchor point type ${anchorPointType} -> use upper left corner instead.`);\r\n        return {\r\n          x: point.x,\r\n          y: point.y\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n  static findComponentByAbsoluteUserDefId(absoluteUserDefId, runtime) {\r\n    return runtime.componentDirectory.findComponent(PathTranslationHelper.getIndexPathForUserDefPath(absoluteUserDefId, runtime));\r\n  }\r\n\r\n  static currentNode(params, runtime) {\r\n    return TreeUtils.getCurrentNodePathId(params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static getVisitedNodes(params, runtime) {\r\n    return TreeUtils.getVisitedPathIds(params.absoluteUserDefId, runtime);\r\n  }\r\n\r\n  static matchNodes(params, runtime) {\r\n    const { absoluteUserDefId, regularExpressions } = params;\r\n    const matchedNodes = [];\r\n    const nodePathIds = TreeUtils.getNodePathIds(absoluteUserDefId, runtime);\r\n    regularExpressions.forEach((pattern) => {\r\n      nodePathIds.forEach((nodePathId) => {\r\n        if (TermEvaluator.matches({\r\n          pattern,\r\n          candidate: nodePathId\r\n        }) && !matchedNodes.includes(nodePathId)) {\r\n          matchedNodes.push(nodePathId);\r\n        }\r\n      })\r\n    })\r\n\r\n    return matchedNodes;\r\n  }\r\n\r\n  static matchNodesWithColumns(params, runtime) {\r\n    const { absoluteUserDefId, regularExpressions } = params;\r\n    const matchedNodes = [];\r\n    if (regularExpressions.length > 0) {\r\n      const matchedNodesByPatternId = TermEvaluator.matchNodes({\r\n        absoluteUserDefId, regularExpressions: [regularExpressions[0]]\r\n      }, runtime);\r\n      const nodeToColumnValuesMap = TreeUtils.getColumnValuesMap(absoluteUserDefId, matchedNodesByPatternId, runtime);\r\n      regularExpressions.shift();\r\n      nodeToColumnValuesMap.forEach((values, key) => {\r\n        if (TermEvaluator.columnsMatch(regularExpressions, values)) {\r\n          matchedNodes.push(key);\r\n        }\r\n      });\r\n    } else {\r\n      console.log(\"Empty list of regular expressions!\");\r\n    }\r\n\r\n    return matchedNodes;\r\n  }\r\n\r\n  static columnsMatch = (patterns, candidates) => {\r\n    let hasMatch = true;\r\n    if (patterns === undefined || patterns === null\r\n      || patterns.length === 0) {\r\n      return hasMatch;\r\n    }\r\n\r\n    for (let i = 0; i < patterns.length; i += 1) {\r\n      if (!TermEvaluator.matches({\r\n        pattern: patterns[i],\r\n        candidate: candidates[i]\r\n      })) {\r\n        hasMatch = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return hasMatch;\r\n  }\r\n\r\n  static treeAction(params, runtime, callback) {\r\n    const { absoluteUserDefId, targetNode } = params;\r\n    const nodePathIds = TermEvaluator.matchNodes(\r\n      {\r\n        absoluteUserDefId,\r\n        regularExpressions: [targetNode]\r\n      }, runtime\r\n    );\r\n    if (nodePathIds.length === 1) {\r\n      callback(absoluteUserDefId, nodePathIds[0], runtime);\r\n    }\r\n  }\r\n\r\n  static treeCopy(params, runtime) {\r\n    TermEvaluator.treeAction(params, runtime, TreeUtils.treeCopyCurrentNode);\r\n  }\r\n\r\n  static treeMove(params, runtime) {\r\n    TermEvaluator.treeAction(params, runtime, TreeUtils.treeMoveCurrentNode);\r\n  }\r\n\r\n}\r\n","import { useDrag, useDrop } from 'react-dnd';\r\nimport CommonConfigHelper from './CommonConfigHelper';\r\nimport PathTranslationHelper from '../state/PathTranslationHelper';\r\nimport TermEvaluator from '../eval/TermEvaluator';\r\nimport StateAttributeAccess from '../state/StateAttributeAccess';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\n\r\n\r\n/**\r\n * All available drag&drop-content 'items' that we can move around via drag&drop.\r\n */\r\nexport const DndItemTypes = {\r\n  VALUE_DISPLAY: 'valueDisplay',\r\n}\r\n\r\n/**\r\n * Helper methods used for drag and drop event handling.\r\n */\r\nexport default class DragAndDropHelper {\r\n\r\n  // -------- public API ----------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Add the 'drag' part of a drag&drop functionality to a component renderer.\r\n   * \r\n   * @param {*} config The config structure of the component from the page configuration description.\r\n   * @param {String} path The index path of the component's state in the ComponentStateManager.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {String} itemType The type of the dragged item structure.\r\n   * @param {*} previewData The data that should be available for the preview in the drag layer.\r\n   * @returns The array returned by the useDrag call.\r\n   */\r\n  static addDrag(config, path, runtime, itemType, previewData) {\r\n    return useDrag({\r\n      item: {\r\n        type: itemType\r\n      },\r\n      begin: (monitor) => {\r\n        const dragAndDropConfig = CommonConfigHelper.getDragAndDrop(config);\r\n        const { sender: senderConfig } = dragAndDropConfig;\r\n        const { data, traceType, event: statemachineEvent } = senderConfig;\r\n        const dragAndDropData = {\r\n          type: itemType,\r\n          previewData,\r\n          indexPath: path,\r\n          senderData: data,\r\n          traceType,\r\n          startPosition: monitor.getInitialClientOffset()\r\n        };\r\n        DragAndDropHelper.triggerStatemachineEvent(statemachineEvent, runtime);\r\n        return dragAndDropData;\r\n      },\r\n      canDrag: monitor => DragAndDropHelper.isDragAndDropSender({\r\n        config, runtime, path\r\n      }),\r\n      collect: monitor => ({\r\n        idDragging: monitor.isDragging()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Add the 'drop' part of a drag&drop functionality to a component renderer.\r\n   * \r\n   * @param {*} config The config structure of the component from the page configuration description.\r\n   * @param {String} path The index path of the component's state in the ComponentStateManager.\r\n   * @param {*} runtime The common runtime context structure.\r\n   * @param {String} itemType The item type that we should accept as drop content.\r\n   * @param {bool} dropsOfMyChildrenOnly Should we restrict drops to children of the drop target component?\r\n   * @returns The array returned by the useDrop call.\r\n   */\r\n  static addDrop(config, path, runtime, itemType, dropsOfMyChildrenOnly) {\r\n    return useDrop({\r\n      accept: itemType,\r\n      drop: (item, monitor) => {\r\n        const transferredData = item;\r\n        const dragAndDropConfig = CommonConfigHelper.getDragAndDrop(config);\r\n        const { receiver: receiverConfig } = dragAndDropConfig;\r\n        const { actionTerms, traceType, event: statemachineEvent } = receiverConfig;\r\n        const endPosition = monitor.getClientOffset();\r\n        runtime.replayStepMonitor.incrementReplayStep();\r\n        const lastEvaluationResult = DragAndDropHelper.evaluateActionTerms(actionTerms, transferredData, runtime);\r\n        DragAndDropHelper.relocateIfNecessary(lastEvaluationResult, endPosition, transferredData, runtime);\r\n        DragAndDropHelper.triggerStatemachineEvent(statemachineEvent, runtime);\r\n        DragAndDropHelper.logAction(transferredData, path, endPosition, traceType, lastEvaluationResult, runtime);\r\n      },\r\n      canDrop: (item, monitor) => {\r\n        if (dropsOfMyChildrenOnly) {\r\n          const transferredData = item;\r\n          const senderIndexPath = transferredData.indexPath;\r\n          if (path !== IndexPathHelper.dropIndexFromPageSegment(senderIndexPath)) {\r\n            return false;\r\n          }\r\n        }\r\n        return DragAndDropHelper.isDragAndDropReceiver({\r\n          config, runtime, path\r\n        });\r\n      },\r\n      collect: monitor => (\r\n        {\r\n          dragIsOver: monitor.isOver({\r\n            shallow: true\r\n          }),\r\n          dragCanDrop: monitor.canDrop()\r\n        }\r\n      )\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add attributes to the given style configuration that give feedback\r\n   * highlighting a component instance as eligible drop target.\r\n   * \r\n   * @param {*} style The style attributes list to be modified.\r\n   * @param {*} props The props of the component instance.\r\n   */\r\n  static addCanDropStyleAttributes(style, props) {\r\n    const { dragIsOver, dragCanDrop } = props;\r\n    if (dragIsOver && dragCanDrop) {\r\n      CommonConfigHelper.setStyleAttribute(style, \"boxShadow\", \"0 0 8px 0 rgba(0, 0, 0, 0.5) inset\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add attributes to the given style configuration that give feedback\r\n   * highlighting a component instance as current drag source.\r\n   * \r\n   * @param {*} style The style attributes list to be modified.\r\n   * @param {*} props The props of the component instance.\r\n   */\r\n  static addIsDraggingStyleAttributes(style, props) {\r\n    const { isDragging } = props;\r\n    if (isDragging) {\r\n      CommonConfigHelper.setStyleAttribute(style, \"boxShadow\", \"0 0 8px 0 rgba(0, 0, 0, 0.5) inset\");\r\n    }\r\n  }\r\n\r\n\r\n  // -------- private stuff ----------------------------------------------------------------\r\n\r\n  /**\r\n   * Can the component instance start a drag currently?\r\n   * \r\n   * @param {*} props The full props structure of the component instance.\r\n   */\r\n  static isDragAndDropSender(props) {\r\n    const { config, runtime, path } = props;\r\n\r\n    // The TermEvaluator operator might declare a component to be a sender \r\n    // even though it has no proper drag&drop configuration.\r\n    // -> We check the necessary configuration in any case:\r\n    const dragAndDropInConfig = CommonConfigHelper.getDragAndDrop(config);\r\n    if (dragAndDropInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const { sender: senderInConfig } = dragAndDropInConfig;\r\n    if (senderInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    // Drag and drop participation can be changed by the TermEvaluator operators.\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n    const dragAndDropInState = StateAttributeAccess.extractDragAndDrop(pathState);\r\n    return dragAndDropInState.isSender;\r\n\r\n  }\r\n\r\n  /**\r\n   * Can the component instance receive a drop currently?\r\n   * \r\n   * @param {*} props The full props structure of the component instance.\r\n   */\r\n  static isDragAndDropReceiver(props) {\r\n    const { config, runtime, path } = props;\r\n\r\n    // The TermEvaluator operator might declare a component to be a receiver \r\n    // even though it has no proper drag&drop configuration.\r\n    // -> We check the necessary configuration in any case:\r\n    const dragAndDropInConfig = CommonConfigHelper.getDragAndDrop(config);\r\n    if (dragAndDropInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    const { receiver: receiverInConfig } = dragAndDropInConfig;\r\n    if (receiverInConfig === undefined) {\r\n      return false;\r\n    }\r\n\r\n    // Drag and drop participation can be changed by the TermEvaluator operators.\r\n    const pathState = runtime.componentStateManager.findOrBuildStateForPathId(path, runtime);\r\n    const dragAndDropInState = StateAttributeAccess.extractDragAndDrop(pathState);\r\n    return dragAndDropInState.isReceiver;\r\n\r\n  }\r\n\r\n\r\n  static evaluateActionTerms(actionTerms, transferredData, runtime) {\r\n    let lastEvaluationResult;\r\n    if (actionTerms !== undefined) {\r\n      actionTerms.forEach((term, index) => {\r\n        lastEvaluationResult = TermEvaluator.evaluateTerm(term, runtime, [transferredData], `drag&drop[${index}]`);\r\n      });\r\n    }\r\n    return lastEvaluationResult;\r\n  }\r\n\r\n  static relocateIfNecessary(lastEvaluationResult, endPosition, transferredData, runtime) {\r\n    if (lastEvaluationResult !== 'relocate') {\r\n      return;\r\n    }\r\n    const { startPosition } = transferredData;\r\n    if (endPosition === undefined || endPosition === null || startPosition === undefined || startPosition === null) {\r\n      console.warn(`Drag and drop without proper coordinates! -> We do not move the component instance.`);\r\n      return;\r\n    }\r\n    const translationX = endPosition.x - startPosition.x;\r\n    const translationY = endPosition.y - startPosition.y;\r\n    const { componentStateManager } = runtime;\r\n    const senderIndexPath = transferredData.indexPath;\r\n    const pathState = componentStateManager.findOrBuildStateForPathId(senderIndexPath, runtime);\r\n    const position = StateAttributeAccess.extractPosition(pathState);\r\n\r\n    position.x += translationX / runtime.app.state.scaleValue;\r\n    position.y += translationY / runtime.app.state.scaleValue;\r\n\r\n    StateAttributeAccess.setPosition(pathState, position);\r\n\r\n    componentStateManager.registerStateByPathId(senderIndexPath, pathState, runtime);\r\n    RenderingHelper.triggerRenderingViaPath(senderIndexPath, runtime);\r\n  }\r\n\r\n  static triggerStatemachineEvent(statemachineEvent, runtime) {\r\n    if (statemachineEvent !== undefined) {\r\n      runtime.statemachinesManager.triggerEvent(statemachineEvent);\r\n    }\r\n  }\r\n\r\n  static logAction(transferredData, indexPath, endPosition, traceType, operation, runtime) {\r\n    const timestamp = new Date();\r\n    const receiverUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\r\n    const senderUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(transferredData.indexPath, runtime);\r\n\r\n    runtime.incidentsAccumulator.userInteraction(timestamp.getTime(), undefined, runtime);\r\n    runtime.traceLogBuffer.reportEvent('DragAndDropReceive', timestamp, {\r\n      senderIndexPath: transferredData.indexPath,\r\n      senderUserDefIdPath,\r\n      senderUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(senderUserDefIdPath),\r\n      receiverIndexPath: indexPath,\r\n      receiverUserDefIdPath,\r\n      receiverUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(receiverUserDefIdPath),\r\n      startPosition: transferredData.startPosition,\r\n      endPosition,\r\n      sendingType: transferredData.traceType,\r\n      receivingType: traceType,\r\n      operation\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaInterpreter from './CbaInterpreter';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport DragAndDropHelper, { DndItemTypes } from '../config/DragAndDropHelper';\nimport RenderingHelper from './RenderingHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport Utils from '../utils/Utils';\n\n/**\n * A 'bare function component' used to manage the drag&drop functionality for the CbaContainer component.\n */\nconst ContainerRenderer = React.forwardRef(({ onClick, onContextMenu, title, style, className, onScroll, children, config, path, runtime }, ref) => {\n\n  const [dropCollectedProps, drop] = DragAndDropHelper.addDrop(config, path, runtime, DndItemTypes.VALUE_DISPLAY, true);\n  drop(ref);\n\n  const extendedStyle = Utils.safeDeepCopy(style);\n  DragAndDropHelper.addCanDropStyleAttributes(extendedStyle, dropCollectedProps);\n\n  return (\n    <div\n      ref={ref}\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      title={title}\n      style={extendedStyle}\n      data-cba-id={config.pageEditId}\n      className={className}\n      onScroll={onScroll}\n    >\n      {children}\n    </div>\n  );\n})\n\n\nexport default class CbaContainer extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.containerRendererRef = React.createRef();\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  render() {\n    const { config, runtime, path: controllerPath, orientation } = this.props;\n\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = StateAttributeAccess.extractSelected(pathState);\n\n    const delegates = config.cbaChildren.map((child, index) => {\n      const childPath = IndexPathHelper.appendIndexToPageSegment(controllerPath, index);\n      return (\n        <CbaInterpreter\n          key={childPath}\n          config={child}\n          path={childPath}\n          runtime={runtime}\n          orientation={orientation}\n        />\n      )\n    });\n\n    const containerStyle = CommonConfigHelper.buildStyleByIndexPath(controllerPath, config, selectedState, orientation, runtime);\n\n    return (\n      <ContainerRenderer\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        title={CommonConfigHelper.buildTitle(config)}\n        style={containerStyle}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"overflow-hidden\")}\n        onScroll={event => event.stopPropagation()}\n        config={config}\n        path={controllerPath}\n        runtime={runtime}\n        ref={this.containerRendererRef}\n      >\n        {delegates}\n      </ContainerRenderer>\n    )\n\n  }\n\n}\n\nCbaContainer.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(true))\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n}\n\nContainerRenderer.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  onContextMenu: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  style: PropTypes.object.isRequired,\n  className: PropTypes.string.isRequired,\n  onScroll: PropTypes.func.isRequired,\n  children: PropTypes.array.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(true))\n  ).isRequired,\n  path: PropTypes.string.isRequired,\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport RenderingHelper from './RenderingHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\n\nexport default class CbaRectangle extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.lineOnClickHandler = this.lineOnClickHandler.bind(this);\n    this.containerOnClickHandler = this.containerOnClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  lineOnClickHandler(event) {\n    const { config } = this.props;\n    const { blockEvents } = config;\n\n    if (!blockEvents) {\n      CommonActionsHelper.doStandardOnClick(event, undefined, this);\n    }\n  }\n\n  containerOnClickHandler(event) {\n    const { config } = this.props;\n    const { blockEvents } = config;\n\n    if (blockEvents) {\n      event.stopPropagation();\n      CommonActionsHelper.doStandardOnClick(event, undefined, this);\n    }\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  buildLineDiv(style, config) {\n    return (\n      <div\n        onClick={this.lineOnClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        title={CommonConfigHelper.buildTitle(config)}\n        style={style}\n        className=\"overflow-hidden\"\n      />\n    )\n  }\n\n  render() {\n    const { config, runtime, path: controllerPath, orientation } = this.props;\n\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = StateAttributeAccess.extractSelected(pathState);\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(controllerPath, config, selectedState, orientation, runtime);\n\n    const { lineWidth, pageEditId } = config;\n\n    const containerStyle = Object.assign({}, style, {\n      backgroundColor: \"rgba(255, 255, 255, 0)\",\n      cursor: undefined\n    })\n\n    const lineWidthString = `${lineWidth}px`;\n\n    const baseLineStyle = {\n      position: \"absolute\",\n      backgroundColor: style.backgroundColor,\n      width: lineWidthString,\n      height: lineWidthString,\n      cursor: style.cursor\n    }\n\n    const northStyle = Object.assign({}, baseLineStyle, {\n      top: 0,\n      left: 0,\n      width: \"100%\"\n    });\n\n    const eastStyle = Object.assign({}, baseLineStyle, {\n      top: 0,\n      right: 0,\n      height: \"100%\"\n    });\n\n    const southStyle = Object.assign({}, baseLineStyle, {\n      bottom: 0,\n      left: 0,\n      width: \"100%\"\n    });\n\n    const westStyle = Object.assign({}, baseLineStyle, {\n      top: 0,\n      left: 0,\n      height: \"100%\"\n    });\n\n    return (\n      <div\n        style={containerStyle}\n        data-cba-id={pageEditId}\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\n        onClick={this.containerOnClickHandler}\n      >\n        {this.buildLineDiv(northStyle, config)}\n        {this.buildLineDiv(southStyle, config)}\n        {this.buildLineDiv(eastStyle, config)}\n        {this.buildLineDiv(westStyle, config)}\n      </div>\n    )\n  }\n\n}\n\n\nCbaRectangle.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        lineWidth: PropTypes.number.isRequired,\n        blockEvents: PropTypes.bool.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n}\n","import React, { Component, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport DragAndDropHelper, { DndItemTypes } from '../config/DragAndDropHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport RenderingHelper from './RenderingHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport Utils from '../utils/Utils';\n\n/**\n * A 'bare function component' used to manage the drag&drop functionality for the CbaSimpleTextField component.\n */\nfunction SimpleTextFieldRenderer({ onClick, onContextMenu, onSelect, title, style, value, className, config, path, runtime }) {\n\n  const ref = useRef(null);\n  const [dragCollectedProps, drag, preview] = DragAndDropHelper.addDrag(\n    config, path, runtime, DndItemTypes.VALUE_DISPLAY, {\n      title,\n      style,\n      value\n    }\n  );\n\n  preview(getEmptyImage(), {\n    captureDraggingState: true\n  });\n\n  const [dropCollectedProps, drop] = DragAndDropHelper.addDrop(config, path, runtime, DndItemTypes.VALUE_DISPLAY, false);\n  drag(drop(ref));\n\n  const extendedStyle = Utils.safeDeepCopy(style);\n  DragAndDropHelper.addIsDraggingStyleAttributes(extendedStyle, dragCollectedProps);\n  DragAndDropHelper.addCanDropStyleAttributes(extendedStyle, dropCollectedProps);\n\n  if (config.renderAsDiv) {\n    CommonConfigHelper.setStyleAttribute(extendedStyle, \"whiteSpace\", \"pre-wrap\");\n    CommonConfigHelper.setStyleAttribute(extendedStyle, \"overflow\", \"auto\");\n\n    return (\n      <div\n        ref={ref}\n        readOnly\n        onClick={onClick}\n        onContextMenu={onContextMenu}\n        onSelect={onSelect}\n        title={title}\n        style={extendedStyle}\n        data-cba-id={config.pageEditId}\n        className={className}\n      >\n        {value}\n      </div>\n    )\n  }\n\n  // We use a textarea instead of a label since it preserves line breaks etc. \n  return (\n    <textarea\n      ref={ref}\n      readOnly\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      onSelect={onSelect}\n      title={title}\n      style={extendedStyle}\n      data-cba-id={config.pageEditId}\n      value={value}\n      className={className}\n    />\n  )\n}\n\nexport default class CbaSimpleTextField extends Component {\n\n  componentDidMount() {\n    const { config, runtime } = this.props;\n    const { textInputReferencePath } = config;\n    if (textInputReferencePath !== undefined) {\n      runtime.eventEmitter.addListener(`inputFieldUpdated-${textInputReferencePath}`, this.onInputFieldUpdate.bind(this));\n    }\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onInputFieldUpdate = (newTextValue) => {\n    const pathState = ComponentStateHelper.getState(this);\n    StateAttributeAccess.setTextValue(pathState, newTextValue);\n    ComponentStateHelper.registerState(this, pathState);\n    RenderingHelper.triggerRendering(this);\n  }\n\n  onClickHandler = (event) => {\n    const { runtime, path, config } = this.props;\n    if (!config.renderAsDiv) {\n      CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, true, undefined, undefined, runtime);\n    }\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  onSelectionHandler = (event) => {\n    const { runtime, path, config } = this.props;\n    const { suppressSelections } = config;\n\n    if (suppressSelections) {\n      event.target.selectionStart = event.target.selectionEnd;\n    } else {\n      CommonActionsHelper.processSelectedTextForCutAndPaste(path, event, true, undefined, undefined, runtime);\n    }\n\n  }\n\n  static addAttributesToInitialState(result, config, runtime) {\n    const { textInputReferencePath } = config;\n    if (textInputReferencePath !== undefined) {\n      const filteredPaths = runtime.componentStateManager.filterExistingPathIds(candidate => IndexPathHelper.getLastPageSegmentFromPath(candidate) === textInputReferencePath);\n      if (filteredPaths.length > 0) {\n        result.textValue = ComponentStateHelper.getStateAttributeByPathId(StateAttributeAccess.extractTextValue, filteredPaths[0], runtime);\n      } else {\n        const providerComponent = runtime.pageConfigurationsManager.findConfigurationForPageSegment(textInputReferencePath);\n        const { text } = providerComponent.config;\n        result.textValue = text.label;\n      }\n    }\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n    const { suppressSelections } = config;\n    const additionalCssClass = suppressSelections ? \"hide-selection\" : \"\";\n    const pathState = ComponentStateHelper.getState(this);\n\n    const text = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\n    CommonConfigHelper.setStyleAttribute(style, \"resize\", \"none\");\n\n    // override browser default padding value for textarea: \n    if (config.position.padding === undefined) {\n      CommonConfigHelper.setStyleAttribute(style, \"padding\", \"0px\");\n    }\n\n    return (\n      <SimpleTextFieldRenderer\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        onSelect={this.onSelectionHandler}\n        title={CommonConfigHelper.buildTitle(config)}\n        style={style}\n        value={text}\n        className={CommonConfigHelper.getCssClassNamesValue(config, additionalCssClass)}\n        config={config}\n        path={path}\n        runtime={runtime}\n      />\n    )\n  }\n\n}\n\n\nCbaSimpleTextField.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        textInputReferencePath: PropTypes.string,\n        renderAsDiv: PropTypes.bool\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n\nSimpleTextFieldRenderer.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  onContextMenu: PropTypes.func.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  style: PropTypes.object.isRequired,\n  value: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    {\n      dragAndDrop: PropTypes.object,\n      pageEditId: PropTypes.string,\n      renderAsDiv: PropTypes.bool\n    }\n  ).isRequired,\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n}\n","import React, { Component } from 'react';\nimport './CbaButton.css';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport MenuBuildHelper from \"./MenuBuildHelper\";\nimport SpecialClickActionsHelper from \"./SpecialClickActionsHelper\";\nimport CommonActionsHelper from \"./CommonActionsHelper\";\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport TermEvaluator from '../eval/TermEvaluator';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\nimport Utils from \"../utils/Utils\";\nimport MenuItemTree from './MenuItemTree';\n\n/**\n * A display component that displays a button.\n */\nexport default class CbaButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.backgroundImage = {\n      hover: \"\",\n      pressed: \"\",\n    }\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  onMouseDown = (event) => {\n    const { config, runtime, path } = this.props;\n\n    if (config.toggleType === \"upDown\") {\n      const selectedImage = Utils.isEmptyObject(config.image.selected) ? \"none\" : config.image.selected;\n      this.backgroundImage.pressed = selectedImage;\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n    return false;\n  }\n\n  onMouseUp = (event) => {\n    const { config, runtime, path } = this.props;\n\n    if (config.toggleType === \"upDown\") {\n      this.backgroundImage.pressed = \"\";\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n    return false;\n  }\n\n  onMouseEnter = (event) => {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\n\n    if (config.image.hover && !isDisabled) {\n      this.backgroundImage.hover = config.image.hover;\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n    return false;\n  }\n\n  onMouseLeave = (event) => {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\n\n    if ((config.image.hover && !isDisabled) || this.backgroundImage.pressed) {\n      this.backgroundImage.hover = \"\";\n      // if user leaves button frame with mouse clicked, then reset pressed state.\n      this.backgroundImage.pressed = \"\";\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n    return false;\n  }\n\n  getBackgroundImage = () => {\n    const { runtime } = this.props;\n\n    if (this.backgroundImage.pressed === \"none\") {\n      return \"none\";\n    }\n\n    if (this.backgroundImage.pressed) {\n      return `url(${CommonConfigHelper.getProperResourcePath(this.backgroundImage.pressed, runtime)})`;\n    }\n\n    if (this.backgroundImage.hover) {\n      return `url(${CommonConfigHelper.getProperResourcePath(this.backgroundImage.hover, runtime)})`;\n    }\n\n    return \"\";\n  }\n\n  onClickHandler = (event) => {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.stopEventPropagation(event);\n    if (!CbaButton.isClipboardManagerAction(config.selectionHandlerType)) {\n      CommonActionsHelper.signalFocusChangeToClipboardManager(path, runtime);\n    }\n\n    const traceDetails = CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState);\n    if (config.subtype !== undefined) {\n      traceDetails.subtype = config.subtype;\n    }\n\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      traceDetails,\n      event, runtime);\n\n    runtime.replayStepMonitor.incrementReplayStep();\n\n    // set selected and visited state:\n    this.updateStateAndTriggerRendering(pathState);\n\n    // run configured click event handler:\n    const { selectionHandlerParam, attachedScale, increment } = config;\n    const { path: indexPath } = this.props;\n    const triggeringType = 'button';\n    const buttonBoundingRect = MenuItemTree.buildTriggerBoundingRect(event);\n\n    switch (config.selectionHandlerType) {\n      case 'none':\n        SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n        break;\n      case 'switchPage':\n        runtime.taskManager.switchPage(\n          selectionHandlerParam.page,\n          undefined, undefined,\n          selectionHandlerParam.pageAreaType,\n          selectionHandlerParam.pageAreaName,\n          undefined, undefined, undefined, undefined\n        );\n        break;\n      case 'switchTask':\n        runtime.taskManager.switchTaskIntraItem(selectionHandlerParam.task);\n        break;\n      case 'switchTest':\n        runtime.taskManager.switchTaskInterTest(\n          selectionHandlerParam.test,\n          selectionHandlerParam.item,\n          selectionHandlerParam.task,\n        );\n        break;\n      case 'logTaskResult':\n        console.log(\"=== current task result: ===\", runtime.taskManager.getCurrentTaskResults());\n        break;\n      case 'recommend':\n        runtime.recommendationsManager.setRecommendations([{\n          testName: selectionHandlerParam.test,\n          taskName: selectionHandlerParam.task,\n        }]);\n        break;\n      case 'cut':\n        SpecialClickActionsHelper.cut(triggeringType, indexPath, runtime);\n        break;\n      case 'copy':\n        SpecialClickActionsHelper.copy(triggeringType, indexPath, runtime);\n        break;\n      case 'paste':\n        SpecialClickActionsHelper.paste(triggeringType, indexPath, runtime);\n        break;\n      case 'next_task':\n        SpecialClickActionsHelper.nextTask(runtime);\n        break;\n      case 'back_task':\n        SpecialClickActionsHelper.backTask(runtime);\n        break;\n      case 'cancel_task':\n        SpecialClickActionsHelper.cancelTask(runtime);\n        break;\n      case 'startFullscreen':\n        SpecialClickActionsHelper.startFullscreen(runtime);\n        break;\n      case 'stopFullscreen':\n        SpecialClickActionsHelper.stopFullscreen(runtime);\n        break;\n      case 'close':\n        SpecialClickActionsHelper.close(indexPath, runtime);\n        break;\n      case 'closeAndNextTask':\n        SpecialClickActionsHelper.close(indexPath, runtime);\n        SpecialClickActionsHelper.nextTask(runtime);\n        break;\n      case 'menu':\n        event.clientX = buttonBoundingRect.left;\n        event.clientY = buttonBoundingRect.bottom;\n        runtime.contextMenu.openMenuItemTreeWithDynamicConfig(\n          MenuBuildHelper.buildMenuTreeItemConfiguration(\n            selectionHandlerParam.contextMenu,\n            event,\n            indexPath,\n            StateAttributeAccess.extractDefaultLinkReceiver(pathState),\n            runtime\n          ),\n          runtime\n        );\n        break;\n      case 'back':\n        SpecialClickActionsHelper.back(indexPath, {}, runtime);\n        break;\n      case 'forward':\n        SpecialClickActionsHelper.forward(indexPath, {}, runtime);\n        break;\n      case 'home':\n        SpecialClickActionsHelper.home(indexPath, {}, runtime);\n        break;\n      case 'addBookmark':\n        SpecialClickActionsHelper.addBookmark('button', indexPath, {}, runtime);\n        break;\n      case 'manageBookmarks':\n        SpecialClickActionsHelper.manageBookmark('button', indexPath, selectionHandlerParam, runtime);\n        break;\n      case 'debugOperator':\n        TermEvaluator.evaluateTerm(selectionHandlerParam, runtime, [], 'callViaDebugButton');\n        break;\n      default:\n        if (config.selectionHandlerType !== undefined) {\n          console.error(`Unknown selection handler type in button: ${config.selectionHandlerType}`);\n        }\n    }\n\n    if (attachedScale !== undefined) {\n      SpecialClickActionsHelper.incrementScale(indexPath, attachedScale, increment, runtime);\n    }\n\n    // send statemachine event depending on old toggle state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  static isClipboardManagerAction(selectionHandlerType) {\n    return selectionHandlerType === 'cut' || selectionHandlerType === 'copy' || selectionHandlerType === 'paste' || selectionHandlerType === 'menu';\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering = (pathState) => {\n    const { runtime, config, path } = this.props;\n\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    StateAttributeAccess.setVisited(pathState, true);\n\n    if (config.toggleType !== 'none') {\n      // Flip the pressed state: 'yes' <-> 'no'\n      SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n    } else {\n      // save state and rerender myself: color may change due to visited flag!\n      runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\n      RenderingHelper.triggerRenderingViaPath(path, runtime);\n    }\n\n  }\n\n  addFlexTextAlignmentToStyles = (styleObject, config) => {\n    const alignment = config.font.alignmentHorizontal;\n    let flexAlignment = \"\";\n\n    switch (alignment) {\n      case \"left\": flexAlignment = \"flex-start\"; break;\n      case \"center\": flexAlignment = \"center\"; break;\n      case \"right\": flexAlignment = \"flex-end\"; break;\n      default: flexAlignment = \"center\"; break;\n    }\n\n    return Object.assign(styleObject, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: flexAlignment\n    });\n  }\n\n  buildStyleForMask = (buttonStyle) => {\n    const { width, height, top, left, right } = buttonStyle;\n    return {\n      position: \"absolute\",\n      width,\n      height,\n      top,\n      left,\n      right\n    }\n  }\n\n  render() {\n    const { runtime, config, path, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const pressedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    const style = this.addFlexTextAlignmentToStyles(CommonConfigHelper.buildStyleByIndexPath(path, config, pressedState, orientation, runtime), config);\n    const isDisabled = StateAttributeAccess.extractDisabled(pathState);\n\n    const { toggleType, highlight, position: positonInConfig } = config;\n\n    if (toggleType === \"upDown\") {\n      CommonConfigHelper.setStyleAttribute(style, \"borderStyle\", pressedState ? \"inset\" : \"outset\");\n    }\n\n    let className = '';\n    switch (highlight) {\n      case 'up': className = 'CbaButton-highlight-up';\n        break;\n      case 'down': className = 'CbaButton-highlight-down';\n        break;\n      default: className = 'CbaButton';\n        break;\n    }\n\n    const displayText = RenderingHelper.extractMultilineText(CommonConfigHelper.buildDisplayText(config, pathState, runtime));\n\n    // Disabled state does not support hovered/pressed states.\n    // Also, mouseleave events do not fire for disabled buttons.\n    // Overriding button states here.\n    if (isDisabled) {\n      this.backgroundImage.hover = \"\";\n      this.backgroundImage.pressed = \"\";\n    }\n\n    const backgroundImageStateResult = this.getBackgroundImage();\n    if (backgroundImageStateResult) {\n      CommonConfigHelper.setStyleAttribute(style, \"backgroundImage\", backgroundImageStateResult);\n    }\n\n    return (\n      <React.Fragment>\n        <button\n          className={CommonConfigHelper.getCssClassNamesValue(config, className)}\n          onClick={this.onClickHandler}\n          onContextMenu={this.onContextMenuHandler}\n          title={CommonConfigHelper.buildTitle(config)}\n          style={style}\n          data-cba-id={config.pageEditId}\n          onMouseDown={this.onMouseDown}\n          onMouseUp={this.onMouseUp}\n          onMouseEnter={this.onMouseEnter}\n          onMouseLeave={this.onMouseLeave}\n          type=\"button\"\n          disabled={isDisabled}\n          tabIndex={config.tabIndex}\n        >\n          {CommonConfigHelper.getImageTag(pathState, config, pressedState, runtime)}\n          <span style={{\n            maxHeight: positonInConfig.height\n          }}\n          >\n            {displayText}\n          </span>\n        </button>\n        {isDisabled && <div className=\"CbaButton-mask\" onContextMenu={e => e.preventDefault()} style={this.buildStyleForMask(style)} />}\n      </React.Fragment>\n    );\n  }\n\n}\n\nCbaButton.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        selectionHandlerParam: PropTypes.object,\n        selectionHandlerType: PropTypes.oneOf([\n          'none',\n          'switchPage', 'switchTask', 'switchTest',\n          'logTaskResult', 'recommend',\n          'cut', 'copy', 'paste',\n          'next_task', 'back_task', 'cancel_task',\n          'startFullscreen', 'stopFullscreen',\n          'close',\n          'menu',\n          'back', 'forward', 'home',\n          'addBookmark', 'manageBookmarks',\n          'debugOperator'\n        ]).isRequired,\n        highlight: PropTypes.oneOf(['none', 'horizontal', 'vertical']).isRequired,\n        toggleType: PropTypes.oneOf(['none', 'upDown', 'colorChange']).isRequired,\n        subtype: PropTypes.string\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\nimport './CbaRichTextField/css/repeatable.css';\n\nconst DEFAULT_LABEL_POSITION = 10;\n\nexport default class CbaRadioButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    // Flip the selected state: 'yes' <-> 'no'\n    this.updateStateAndTriggerRendering(pathState);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState) {\n    const { runtime, path } = this.props;\n\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    StateAttributeAccess.setVisited(pathState, true);\n\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n  }\n\n  static hasImage(config) {\n    const { displayMode } = config.image;\n\n    return displayMode !== \"none\";\n  }\n\n  render() {\n    const { runtime, path, config, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    const rawText = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\n    const text = RenderingHelper.extractMultilineText(rawText);\n    const { label, textWrap, controlIconSize } = config;\n    const { position, distance } = label;\n\n    const wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\n    CommonConfigHelper.setStyleAttribute(wrapperStyle, \"backgroundImage\", \"none\");\n\n    const isPositionLeft = position === \"left\";\n\n    const textWrapStyle = {\n      whiteSpace: textWrap ? \"initial\" : \"noWrap\",\n      marginLeft: isPositionLeft ? 0 : 20,\n      marginRight: isPositionLeft ? 20 : 0,\n      justifyContent: isPositionLeft ? \"flex-end\" : \"flex-start\"\n    }\n\n    const inputStyle = {\n      left: isPositionLeft ? \"auto\" : 2.5,\n      right: isPositionLeft ? 2.5 : \"auto\",\n      cursor: \"inherit\",\n    }\n\n    const labelPositionDelta = distance - DEFAULT_LABEL_POSITION;\n    const textStyle = {\n      marginLeft: isPositionLeft ? 0 : labelPositionDelta,\n      marginRight: isPositionLeft ? labelPositionDelta : 0,\n      display: rawText ? \"inline\" : \"none\"\n    }\n\n    const imageStyle = {\n      order: isPositionLeft ? 1 : 0,\n    }\n\n    const labelStyle = {\n      cursor: \"inherit\",\n    }\n\n    if (CbaRadioButton.hasImage(config)) {\n      textStyle.marginLeft = 0;\n      textStyle.marginRight = 0;\n      if (isPositionLeft) {\n        imageStyle.paddingRight = 5;\n        imageStyle.marginRight = labelPositionDelta;\n      } else {\n        imageStyle.paddingRight = 0;\n        imageStyle.marginRight = 0;\n        imageStyle.paddingLeft = 5;\n        imageStyle.marginLeft = labelPositionDelta;\n      }\n    }\n\n    const forKey = shortid.generate();\n\n    return (\n      <div\n        style={wrapperStyle}\n        data-cba-id={config.pageEditId}\n        title={CommonConfigHelper.buildTitle(config)}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"inputWrapper overflow-hidden\")}\n      >\n        <div className=\"radioWrap\">\n          <label\n            style={labelStyle}\n            htmlFor={forKey}\n            className=\"label\"\n            onClick={(event) => { event.stopPropagation(); }}\n          >\n            <span style={textWrapStyle}>\n              {CommonConfigHelper.getImageTag(pathState, config, selectedState, runtime, imageStyle)}\n              <span style={textStyle} className=\"inputTextWrap\">\n                {text}\n              </span>\n            </span>\n          </label>\n          <input\n            className={`radioCheckBoxSize${controlIconSize || 13}`}\n            name={forKey}\n            style={inputStyle}\n            id={forKey}\n            type=\"radio\"\n            checked={selectedState}\n            disabled={StateAttributeAccess.extractDisabled(pathState)}\n            // using a blank function to remove the warning src: https://stackoverflow.com/questions/36715901/reactjs-error-warning\n            onChange={() => { }}\n            tabIndex={config.tabIndex}\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\nCbaRadioButton.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        textWrap: PropTypes.bool.isRequired,\n        label: PropTypesHelper.getInputLabelConfig(),\n        controlIconSize: PropTypes.number.isRequired\n      },\n      true\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\nimport './CbaRichTextField/css/repeatable.css';\n\n\nconst DEFAULT_LABEL_POSITION = 10;\n\n/**\n * A display component that displays a labeled check box.\n */\nexport default class CbaCheckbox extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    // Flip state: 'true' <-> 'false'\n    this.updateStateAndTriggerRendering(pathState);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on old selected state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState) {\n    const { runtime, path } = this.props;\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    StateAttributeAccess.setVisited(pathState, true);\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n    const text = RenderingHelper.extractMultilineText(CommonConfigHelper.buildDisplayText(config, pathState, runtime));\n    const { label, textWrap, controlIconSize } = config;\n    const { position, distance } = label;\n\n    const wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, selectedState, orientation, runtime);\n\n    const isPositionLeft = position === \"left\";\n\n    const textWrapStyle = {\n      whiteSpace: textWrap ? \"initial\" : \"nowrap\",\n      marginLeft: isPositionLeft ? 0 : 20,\n      marginRight: isPositionLeft ? 20 : 0,\n      justifyContent: isPositionLeft ? \"flex-end\" : \"flex-start\"\n    }\n\n    const inputStyle = {\n      left: isPositionLeft ? \"auto\" : 2.5,\n      right: isPositionLeft ? 2.5 : \"auto\",\n      cursor: \"inherit\"\n    }\n\n    const labelPositionDelta = distance - DEFAULT_LABEL_POSITION;\n    const textStyle = {\n      marginLeft: isPositionLeft ? 0 : labelPositionDelta,\n      marginRight: isPositionLeft ? labelPositionDelta : 0,\n      display: text ? \"inline\" : \"none\"\n    }\n\n    const labelStyle = {\n      cursor: \"inherit\",\n    }\n\n    const forKey = shortid.generate();\n\n    // TODO: This class resembles CbaRadioButton pretty much \n    //       -> Merge into one class once we know that we keep implementation of both as <input> plus <div>.\n    return (\n      <div\n        style={wrapperStyle}\n        data-cba-id={config.pageEditId}\n        title={CommonConfigHelper.buildTitle(config)}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"inputWrapper overflow-hidden\")}\n      >\n        <div className=\"checkBoxWrap\">\n          <label\n            style={labelStyle}\n            htmlFor={forKey}\n            className=\"label\"\n            onClick={(event) => { event.stopPropagation(); }}\n          >\n            <span style={textWrapStyle}>\n              <span style={textStyle} className=\"inputTextWrap\">{text}</span>\n            </span>\n          </label>\n          <input\n            className={`radioCheckBoxSize${controlIconSize || 13}`}\n            style={inputStyle}\n            id={forKey}\n            type=\"checkbox\"\n            checked={selectedState}\n            disabled={StateAttributeAccess.extractDisabled(pathState)}\n            // using a blank function to remove the warning src: https://stackoverflow.com/questions/36715901/reactjs-error-warning\n            onChange={() => { }}\n            tabIndex={config.tabIndex}\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\nCbaCheckbox.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        textWrap: PropTypes.bool.isRequired,\n        label: PropTypesHelper.getInputLabelConfig(),\n        controlIconSize: PropTypes.number.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaLink extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    // Update the 'selected' state: \n    this.updateStateAndTriggerRendering(pathState);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on old selected state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState) {\n    const { runtime, path } = this.props;\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    StateAttributeAccess.setVisited(pathState, true);\n\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n\n  }\n\n  // accesibility event for tab navigation\n  onKeyDown(event) {\n    if (event.keyCode === 32) {\n      // space key\n      this.onClickHandler(event);\n    }\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n\n    const selected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    const text = RenderingHelper.extractMultilineText(CommonConfigHelper.buildDisplayText(config, pathState, runtime));\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selected, orientation, runtime);\n\n    return (\n      <div\n        style={style}\n        data-cba-id={config.pageEditId}\n        title={CommonConfigHelper.buildTitle(config)}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaLink\")}\n      >\n        <span\n          onClick={this.onClickHandler}\n          onKeyDown={e => this.onKeyDown(e)}\n          onContextMenu={this.onContextMenuHandler}\n          tabIndex={config.tabIndex}\n        >\n          {CommonConfigHelper.getImageTag(pathState, config, false, runtime)}\n          {text}\n        </span>\n      </div>\n    );\n  }\n\n}\n\n\nCbaLink.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport SelectGroupHelper from './SelectGroupHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaPolygon extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.updateStateAndTriggerRendering = this.updateStateAndTriggerRendering.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    const { config, runtime, path } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path,\n      CommonActionsHelper.buildOldSelectedTraceLogValueObject(selectedState),\n      event, runtime);\n\n    const oldSelected = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    // Flip the selected state: 'yes' <-> 'no'\n    this.updateStateAndTriggerRendering(pathState, oldSelected);\n\n    SelectGroupHelper.doPageSwitchOrLetTheContainerDoIt(this, pathState);\n\n    // send statemachine event depending on state:\n    CommonActionsHelper.sendStandardOrAlternateEvent(selectedState, config, runtime);\n\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  updateStateAndTriggerRendering(pathState, oldSelected) {\n    const { runtime, path } = this.props;\n    StateAttributeAccess.setVisited(pathState, true);\n\n    SelectGroupHelper.setSelectedForPossiblyControlledComponent(!oldSelected, path, pathState, true, false, runtime);\n  }\n\n  // accesibility event for tab navigation\n  onKeyDown(event) {\n    if (event.keyCode === 32) {\n      // space key\n      this.onClickHandler(event);\n    }\n  }\n\n\n  render() {\n    const { config, path, runtime, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n\n    const renderingSelectedState = SelectGroupHelper.extractSelectedState(pathState, path, runtime);\n\n    const polygonStyle = CommonConfigHelper.buildStyleSvg(pathState, config, renderingSelectedState, orientation, runtime);\n    const pointsString = CommonConfigHelper.buildPointsString(config.bendPoints);\n    const title = CommonConfigHelper.buildTitle(config);\n\n    return (\n      <polygon\n        points={pointsString}\n        style={polygonStyle}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        tabIndex={config.tabIndex}\n        onKeyDown={e => this.onKeyDown(e)}\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\n      >\n        {title !== \"\" && <title>{title}</title>}\n      </polygon>\n    );\n\n  }\n\n\n}\n\n\nCbaPolygon.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupMemberConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        bendPoints: PropTypes.arrayOf(PropTypes.shape({\n          x: PropTypes.number.isRequired,\n          y: PropTypes.number.isRequired\n        }))\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaPolygon from './CbaPolygon';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaRegionMap extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  render() {\n    const { runtime, path: controllerPath, config, orientation } = this.props;\n\n    const delegates = config.regions.map((child, index) => {\n      if (child.type !== \"CbaPolygon\") console.warn(`Unexpected region type: ${child.type}`);\n      const childPath = IndexPathHelper.appendIndexToPageSegment(controllerPath, index);\n\n      return (\n        <CbaPolygon\n          key={childPath}\n          config={child.config}\n          path={childPath}\n          orientation={orientation}\n          runtime={runtime}\n        />\n      )\n    });\n    return (\n      <div\n        title={CommonConfigHelper.buildTitle(config)}\n        style={CommonConfigHelper.buildStyleByIndexPath(controllerPath, config, false, orientation, runtime)}\n        data-cba-id={config.pageEditId}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaRegionMap\")}\n      >\n        <svg height=\"100%\" width=\"100%\">\n          {delegates}\n        </svg>\n      </div>\n    );\n  }\n\n}\n\nCbaRegionMap.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\n      {\n        regions: PropTypes.array.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport RenderingHelper from './RenderingHelper';\n\nexport default class CbaInnerHtml extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onClickHandler = this.onClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  onClickHandler(event) {\n    CommonActionsHelper.doStandardOnClick(event, undefined, this);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  static sanitizeHtml(original) {\n    // TODO: Should we scan the generated HTML code?\n    return {\n      __html: original\n    };\n  }\n\n  render() {\n    const { runtime, config, path, orientation } = this.props;\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\n    return (\n      <div\n        // We will check the embedded code in our sanitize method -> disable warning here:\n        // eslint-disable-next-line react/no-danger\n        dangerouslySetInnerHTML={CbaInnerHtml.sanitizeHtml(config.innerHtml)}\n        onClick={this.onClickHandler}\n        onContextMenu={this.onContextMenuHandler}\n        title={CommonConfigHelper.buildTitle(config)}\n        style={style}\n        data-cba-id={config.pageEditId}\n      />\n    );\n  }\n\n}\n\nCbaInnerHtml.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        innerHtml: PropTypes.string.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from './PropTypesHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport CommonActionsHelper from \"./CommonActionsHelper\";\nimport PathTranslationHelper from '../state/PathTranslationHelper';\nimport RenderingHelper from './RenderingHelper';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport Utils from '../utils/Utils';\n\nexport default class CbaExternalPageFrame extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.iframeRef = React.createRef();\n    this.currentSaveTimer = null;\n\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n    this.restoreIframeState();\n  }\n\n  componentWillUnmount() {\n    if (this.currentSaveTimer !== null) {\n      clearTimeout(this.currentSaveTimer);\n      this.currentSaveTimer = null;\n    }\n    this.saveIframeState();\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  // ----------- snapshot related ------------------------------------------------------------------------\n  /**\n   * Build the initial state in the component state manager. \n   * \n   * The component state manager will call this method to initialize state for new display component instances.\n   */\n  static addAttributesToInitialState(initialState, configProps) {\n    // activate volatile flag in state manager since state of external java code is not fully synchronized. \n    StateAttributeAccess.setVolatile(initialState, true);\n    StateAttributeAccess.setComponentClassName(initialState, \"CbaExternalPageFrame\");\n  }\n\n  updateStateInComponentStateManager() {\n    this.saveIframeState();\n  }\n\n  saveIframeState = () => {\n    const iframeWindow = this.iframeRef.current.contentWindow;\n    if (iframeWindow === undefined || iframeWindow === null) {\n      const { path } = this.props;\n      console.error(`No window in IFrame! -> We don't save state of code running in IFrame at path ${path}.`);\n      return;\n    }\n    try {\n      if (iframeWindow.getState !== undefined) {\n        const stateToSave = iframeWindow.getState();\n        const pathState = ComponentStateHelper.getState(this);\n        StateAttributeAccess.setExternalContentState(pathState, stateToSave);\n        ComponentStateHelper.registerState(this, pathState);\n      } else {\n        console.log(`No getState method found. ${this.reactionMessage(true)}`);\n      }\n    } catch (exception) {\n      if (CbaExternalPageFrame.isPermissionDeniedException(exception)) {\n        console.log(`We don't save state of code running in IFrame from another orgin. URL in IFrame is ${this.iframeRef.current.src}`);\n      } else {\n        console.error(`Exception while trying to save state. ${this.reactionMessage(true)}`, exception);\n      }\n    }\n\n  }\n\n  restoreIframeState = () => {\n    const pathState = ComponentStateHelper.getState(this);\n    const savedState = StateAttributeAccess.extractExternalContentState(pathState);\n    if (savedState !== undefined) {\n      if (this.currentSaveTimer != null) {\n        clearTimeout(this.currentSaveTimer);\n        this.currentSaveTimer = null;\n      }\n      this.currentSaveTimer = setTimeout(() => CbaExternalPageFrame.processSaveTimeout(this, savedState, 100), 20)\n    }\n  }\n\n  static processSaveTimeout(component, stateToRestore, callCount) {\n    component.currentSaveTimer = null;\n    const iframeWindow = component.iframeRef.current.contentWindow;\n    if (iframeWindow === undefined || iframeWindow === null) {\n      console.error(`No window in IFrame! ${component.reactionMessage(false)}`);\n      return;\n    }\n    try {\n      if (iframeWindow.setState !== undefined) {\n        iframeWindow.setState(stateToRestore);\n      } else if (callCount > 0) {\n        component.currentSaveTimer = setTimeout(() => CbaExternalPageFrame.processSaveTimeout(component, stateToRestore, callCount - 1), 20);\n      } else {\n        console.log(`No setState method found. ${component.reactionMessage(false)}`);\n      }\n    } catch (exception) {\n      if (CbaExternalPageFrame.isPermissionDeniedException(exception)) {\n        console.log(`We don't restore state of code running in IFrame from another orgin. URL in IFrame is ${component.iframeRef.current.src}`);\n      } else {\n        console.error(`Exception while trying to restore state ${component.reactionMessage(false)}`, exception);\n      }\n    }\n  }\n\n  static isPermissionDeniedException(exception) {\n    return exception.message.startsWith('Permission denied to access property')\n  }\n\n  reactionMessage = (isSaving) => {\n    const { path, runtime } = this.props;\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(path, runtime);\n    const userDefIdPathMessage = userDefIdPath === undefined ? \"\" : ` (user defined ID path: ${userDefIdPath})`;\n    return ` -> We don't ${isSaving ? \"save\" : \"restore\"} state of code running in IFrame at index path ${path}${userDefIdPathMessage}.`\n  }\n\n  // ----------- term evaluation helpers -----------------------------------------------------------------\n  /**\n   * Get the window that contains the running external java script code.\n   */\n  getFrameWindow = () => this.iframeRef.current.contentWindow;\n\n  /**\n   * Get the URL that we use to fill the frame.\n   */\n  getFrameContentUrl = () => {\n    const { config, runtime } = this.props;\n    const urlString = CommonConfigHelper.getProperResourcePathExternalResources(config.pageAddress, runtime);\n    return urlString.startsWith('http') ? new URL(urlString) : new URL(urlString, window.location);\n\n  }\n\n  // ----------- user interaction ------------------------------------------------------------------------\n\n  onClick = (event) => {\n    const { config, path, runtime } = this.props;\n    CommonActionsHelper.doBasicOnClick(event, path, runtime);\n    CommonActionsHelper.traceUserInteractionPerConfig(config, path, undefined, event, runtime);\n  }\n\n  onContextMenuHandler = (event) => {\n    CommonActionsHelper.doContextMenuOpen(this, event);\n  }\n\n  scroll = (x, y) => {\n    const iframeInstance = this.iframeRef.current;\n\n    if (!iframeInstance) return;\n\n    try {\n      const childDocument = iframeInstance.contentDocument ? iframeInstance.contentDocument : iframeInstance.contentWindow.document;\n      const childWindow = iframeInstance.contentWindow;\n\n      Utils.doScrollOnHTMLElement(x, y, childDocument.querySelector(\"html\"), childWindow, iframeInstance)\n\n    } catch (error) {\n      console.warn(\"Could not scroll external page \\n\", error)\n    }\n\n  }\n\n  // ----------- rendering ------------------------------------------------------------------------\n\n  static buildIframeUrl(configPageAddress, indexPath, runtime) {\n    const url = CommonConfigHelper.getProperResourcePathExternalResources(configPageAddress, runtime);\n\n    if (configPageAddress.startsWith('http')) {\n      // register foreign http server as source for post message events:\n      runtime.postMessageReceiver.registerAcceptableUrlForExternalPageFrameEvent(url);\n      return url;\n    } else {\n      const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(indexPath, runtime);\n\n      // add additional URL parameters for index path and user defined Id path\n      const urlContainsParametersAlready = url.indexOf('?') !== -1;\n      return `${url + (urlContainsParametersAlready ? '&' : '?')}indexPath=${indexPath}&userDefIdPath=${userDefIdPath}`;\n    }\n\n  }\n\n  render() {\n    const { path, config, runtime, orientation } = this.props;\n\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\n    CommonConfigHelper.setStyleAttribute(style, \"resize\", \"none\");\n\n    // <iframe> elements must have a unique title property\n    const uniqueTitle = `${config.pageAddress}-${(new Date()).getTime()}`;\n\n    const iframeUrl = CbaExternalPageFrame.buildIframeUrl(config.pageAddress, path, runtime);\n\n\n    return (\n      <iframe\n        ref={this.iframeRef}\n        title={uniqueTitle}\n        src={iframeUrl}\n        style={style}\n        data-cba-id={config.pageEditId}\n        onClick={this.onClick}\n        onContextMenu={this.onContextMenuHandler}\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\n      />\n    );\n  }\n\n}\n\nCbaExternalPageFrame.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.getStandardConfigPropTypes(false)\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport TreeUtils from './TreeUtils';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport { CbaTreeRow } from './DataGridRenderers';\r\nimport TreeTraceHelper from './TreeTraceHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport Utils from '../../utils/Utils';\r\n\r\nimport './CbaTree.css';\r\n\r\n\r\nexport default class CbaTree extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { path, runtime } = props;\r\n\r\n    this.eventEmitter = runtime.eventEmitter;\r\n    this.subscription = this.eventEmitter.addListener(TreeUtils.getTreeEventChangeName(path), this.triggerRendering);\r\n  }\r\n\r\n  static addAttributesToInitialState(initialState, config, path, runtime) {\r\n    const nodes = TreeUtils.initTreeNodes(config.nodes, config.nodeTypes, path, runtime, {\r\n      startCollapsed: config.startCollapsed\r\n    });\r\n    const treeColumns = TreeUtils.initTreeColumns(config.columns, path);\r\n    const treeState = TreeUtils.initTreeState(treeColumns);\r\n    const nodeTypes = Utils.deepCopy(config.nodeTypes);\r\n    const treeReadOnly = Utils.deepCopy(config.readOnly);\r\n\r\n    StateAttributeAccess.setTreeNodes(initialState, nodes);\r\n    StateAttributeAccess.setTreeColumns(initialState, treeColumns);\r\n    StateAttributeAccess.setTreeState(initialState, treeState);\r\n    StateAttributeAccess.setNodeTypes(initialState, nodeTypes);\r\n    StateAttributeAccess.setTreeReadOnly(initialState, treeReadOnly);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.subscription.remove();\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onRowExpandClick = (event, rowData, expandOnly) => {\r\n    if (event) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    const { path, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const nodes = StateAttributeAccess.extractTreeNodes(pathState);\r\n\r\n    const node = TreeUtils.getNode(nodes, rowData.path);\r\n    if (node.isLeaf && node.nodes.length === 0) return;\r\n\r\n    const oldExpandedValue = node.expanded;\r\n    node.expanded = expandOnly || !node.expanded;\r\n\r\n    if (oldExpandedValue !== node.expanded) {\r\n      runtime.replayStepMonitor.incrementReplayStep();\r\n      const actionType = node.expanded ? \"expandNode\" : \"collapseNode\";\r\n      TreeTraceHelper.traceNodeAction(actionType, path, rowData, runtime);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n      this.triggerRendering();\r\n    }\r\n  }\r\n\r\n  onRowSelect = (event, rowData) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const { path } = this.props;\r\n\r\n    TreeUtils.selectNodeAction(path, rowData);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", path, {\r\n      isTreeView: false,\r\n      cells: []\r\n    }, runtime);\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", path, {\r\n      isTreeView: false,\r\n      cells: []\r\n    }, runtime);\r\n  }\r\n\r\n  addRowReferences = (row = {}) => {\r\n    const { config, runtime, path } = this.props;\r\n    const { updateOnSingleClick, nodeTypes } = config;\r\n\r\n    row.onRowExpandClick = this.onRowExpandClick;\r\n    row.onRowSelect = this.onRowSelect;\r\n\r\n    row.updateOnSingleClick = updateOnSingleClick;\r\n    row.isTreeView = false\r\n\r\n    row.runtime = runtime;\r\n    row.nodeTypes = nodeTypes;\r\n    row.treePath = path;\r\n\r\n    row.isReadOnly = config.readOnly;\r\n    return row;\r\n  }\r\n\r\n  triggerRendering = () => {\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const { hideLeaves } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    const { treeNodes, treeColumns } = pathState;\r\n    const treeState = StateAttributeAccess.extractTreeState(pathState) || {};\r\n\r\n    const hideColumnsHeader = config.hideColumns || TreeUtils.isDefaultColumn(treeColumns);\r\n    const additionalCssClass = hideColumnsHeader ? \"hideColumns\" : \"\";\r\n\r\n    const displayNodes = TreeUtils.getTreeDisplayNodes(treeNodes, path, hideLeaves);\r\n    const displayTreeColumns = TreeUtils.getDisplayColumns(treeColumns, false, treeState.modifiedColumns, path, runtime);\r\n\r\n    if (config.hideColumns) {\r\n      // removes all columns except first\r\n      displayTreeColumns.length = 1;\r\n      delete displayTreeColumns[0].width;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, additionalCssClass)}\r\n        onClick={this.onClickHandler}\r\n        onContextMenu={this.onContextMenuHandler}\r\n        onScroll={event => event.stopPropagation()} // prevent scroll propagation (stops tracing)\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n      >\r\n        <ReactDataGrid\r\n          columns={displayTreeColumns}\r\n          headerRowHeight={TreeUtils.const.COLUMN_HEIGHT}\r\n          rowHeight={TreeUtils.const.ROW_HEIGHT} // this needs to be provided by generator by computing font in when no columns available\r\n          rowGetter={index => this.addRowReferences(displayNodes[index])}\r\n          rowsCount={displayNodes.length}\r\n          rowRenderer={CbaTreeRow}\r\n          onColumnResize={(columnIndex, newWidth) => TreeUtils.handleColumnResize(displayTreeColumns[columnIndex].key, newWidth, this)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTree.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        hideLeaves: PropTypes.bool.isRequired,\r\n        hideColumns: PropTypes.bool.isRequired,\r\n        updateOnSingleClick: PropTypes.bool.isRequired,\r\n        \"drag&dropMode\": PropTypes.string.isRequired,\r\n        userDefinedId: PropTypes.string.isRequired,\r\n        nodes: PropTypes.array.isRequired,\r\n        nodeTypes: PropTypes.array.isRequired,\r\n        columns: PropTypes.array.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport TreeUtils from './TreeUtils';\r\nimport { CbaTreeRow } from './DataGridRenderers';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport TreeTraceHelper from './TreeTraceHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\n\r\nexport default class CbaTreeView extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { runtime } = this.props;\r\n\r\n    this.eventEmitter = runtime.eventEmitter;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n\r\n    this.subscription = this.eventEmitter.addListener(TreeUtils.getTreeEventChangeName(treePath), this.handleTreeChange);\r\n\r\n    RenderingHelper.onMount(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    this.subscription.remove();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  handleTreeChange = () => {\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onRowSelect = (event, rowData) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const { path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n\r\n    TreeUtils.selectNodeAction(treePath, rowData);\r\n\r\n    // reset sort and triggers rendering;\r\n    // cannot visually reset sort due to library only allowing setting of current column and direction only on first init.\r\n    // this.handleGridSort(null, \"NONE\");\r\n  }\r\n\r\n  handleGridSort = (columnId, sortDirection) => {\r\n    const { path, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setTreeViewSort(pathState, {\r\n      type: sortDirection,\r\n      column: columnId\r\n    });\r\n\r\n    runtime.replayStepMonitor.incrementReplayStep();\r\n\r\n    TreeTraceHelper.traceSort(path, columnId, sortDirection, runtime);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", undefined, {\r\n      isTreeView: true,\r\n      treeViewPath: path,\r\n      cells: []\r\n    }, runtime);\r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    const { path, runtime } = this.props;\r\n    TreeTraceHelper.traceNodeAction(\"emptySelection\", undefined, {\r\n      isTreeView: true,\r\n      treeViewPath: path,\r\n      cells: []\r\n    }, runtime);\r\n  }\r\n\r\n  addRowReferences = (row = {}) => {\r\n    const { runtime, path, config } = this.props;\r\n    const { treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const { nodeTypes, treeReadOnly } = TreeUtils.getTreeDataByPath(treePath, runtime)\r\n\r\n    row.onRowSelect = this.onRowSelect;\r\n    row.updateOnSingleClick = false;\r\n    row.isTreeView = true;\r\n\r\n    row.onRowExpandClick = () => { };\r\n\r\n    row.runtime = runtime;\r\n    row.nodeTypes = nodeTypes;\r\n    row.treePath = treePath;\r\n    row.treeViewPath = path;\r\n\r\n    row.isReadOnly = treeReadOnly;\r\n    return row;\r\n  }\r\n\r\n  render() {\r\n    const { config, runtime, path, orientation } = this.props;\r\n    const { filterLeaves, sortable, treePathId } = config;\r\n    const treePath = TreeUtils.getTreePathFromChildComponent(treePathId, path);\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const sort = StateAttributeAccess.extractTreeViewSort(pathState) || {\r\n      type: \"NONE\",\r\n      column: null\r\n    };\r\n\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const { treeNodes, treeColumns, treeState } = TreeUtils.getTreeDataByPath(treePath, runtime);\r\n    const { currentNode } = treeState;\r\n\r\n    let treeViewState = StateAttributeAccess.extractTreeState(pathState);\r\n\r\n    // init tree view state if not initialised \r\n    if (!treeViewState) {\r\n      treeViewState = TreeUtils.initTreeState(treeColumns);\r\n\r\n      StateAttributeAccess.setTreeState(pathState, treeViewState);\r\n      ComponentStateHelper.registerState(this, pathState);\r\n    }\r\n\r\n    const displayNodes = TreeUtils.getTreeViewDisplayNodes(treeNodes, treePath, filterLeaves, currentNode, sort) || [];\r\n    const displayColumns = TreeUtils.getDisplayColumns(treeColumns, sortable, treeViewState.modifiedColumns, path, runtime) || [];\r\n    const hideColumnsHeader = TreeUtils.isDefaultColumn(treeColumns);\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        onClick={this.onClickHandler}\r\n        onContextMenu={this.onContextMenuHandler}\r\n        onScroll={event => event.stopPropagation()} // prevent scroll propagation (stops tracing)\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, hideColumnsHeader ? \"hideColumns\" : \"\")}\r\n      >\r\n        <ReactDataGrid\r\n          columns={displayColumns}\r\n          headerRowHeight={TreeUtils.const.COLUMN_HEIGHT}\r\n          rowHeight={TreeUtils.const.ROW_HEIGHT} // this needs to be provided by generator by computing font in when no columns available\r\n          rowGetter={index => this.addRowReferences(displayNodes[index])}\r\n          rowsCount={displayNodes.length}\r\n          rowRenderer={CbaTreeRow}\r\n          onGridSort={this.handleGridSort}\r\n          sortColumn={sort.column}\r\n          sortDirection={sort.type}\r\n          onColumnResize={(columnIndex, newWidth) => TreeUtils.handleColumnResize(displayColumns[columnIndex].key, newWidth, this)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTreeView.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        filterLeaves: PropTypes.bool.isRequired,\r\n        sortable: PropTypes.bool.isRequired,\r\n        treePathId: PropTypes.string.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import { Parser } from 'hot-formula-parser'\r\nimport TableHelper from './TableHelper';\r\n\r\n/**\r\n * Internal helper method: Build a result structure that signals an error.\r\n */\r\nfunction buildErrorResult(error) {\r\n  return {\r\n    error,\r\n    result: null\r\n  }\r\n}\r\n\r\n/**\r\n * Internal helper method: Build a result structure that contains a result value.\r\n */\r\nfunction buildValueResult(value) {\r\n  return {\r\n    error: null,\r\n    result: value\r\n  }\r\n}\r\n\r\n/**\r\n * Internal helper method: Sum up the values given as nested arrays of numbers or strings representing numbers.\r\n */\r\nfunction sumUpNestedValues(values) {\r\n  if (typeof values === 'number') return values;\r\n  if (typeof values === 'string') {\r\n    const number = Number.parseFloat(values);\r\n    if (Number.isNaN(number)) throw new Error(\"#NUM!\");\r\n    return number;\r\n  }\r\n  if (Array.isArray(values)) return values.reduce((previous, current) => previous + sumUpNestedValues(current), 0);\r\n  return 0;\r\n}\r\n\r\n\r\n/**\r\n * Evaluate the value of a cell in the given spreadsheet table. \r\n * \r\n * The cells table is an array of rows, with each row being an array of cells.\r\n * Indices start with 0.\r\n * Examples: \r\n *   - cellsTable[3][8] is the cell in the 9th column of the 4th row.\r\n * \r\n * The maxCellCoordinates parameter gives the coordinates of the cell in the lower \r\n * right corner of the cells table (i.e. the index of the last column in the last row).\r\n * \r\n * We assume that the cells table contains one header row (with column titles 'A', 'B', ...)\r\n * and one header column with row numbers (1, 2, 3, ...)\r\n * Therefore, cell references like A1, B1, C5 refer to cells in the cells table with an 'offset' of 1\r\n * to ignore the header row and column:\r\n * Examples: \r\n *  - A1 refers to data[1][1]. \r\n *  - B1 refers to data[1][2].\r\n *  - C5 refers to data[5][3].\r\n * \r\n * The cellToEvaluate parameter should not include this offset: \r\n * {row:0 , col: 0} should refer to cell A1 (=data[1][1]), {row:3, col:2} should refer to cell C5 (=data[5][3]).\r\n * \r\n * The evaluatedCellsList parameter should contain the indices of the cells that\r\n * are currently part of the evaluation stack (again including the offset). \r\n * The cellToEvaluate should not be part of that list yet. \r\n * We use this list to avoid an endless loop in case of a circular dependency.\r\n * \r\n * We return errors if we detect inconsistencies with the formulas:\r\n *  - #N/A: A reference beyond the borders of our data table was detected.\r\n *  - #REF!: A Circular dependency was detected.\r\n * \r\n * @param { [[string]]} cellsTable\r\n * @param { row: int, col: int} maxCellCoordinates\r\n * @param { row: int, col: int } cellToEvaluate\r\n * @param { [{ row: int, col: int}]} evaluatedCellsList\r\n * @returns { error: string, result: string} The evaluation result or an error.\r\n */\r\nexport default function evaluateCell(cellsTable, maxCellCoordinates, cellToEvaluate, evaluatedCellsList) {\r\n\r\n  const dataCellCoordinates = {\r\n    row: cellToEvaluate.row + 1,\r\n    col: cellToEvaluate.col + 1\r\n  }\r\n\r\n  // check coordinate ranges:\r\n  if (dataCellCoordinates.row < 1 || dataCellCoordinates.col < 1) {\r\n    return buildErrorResult('#N/A');\r\n  }\r\n  if (dataCellCoordinates.row > maxCellCoordinates.row || dataCellCoordinates.col > maxCellCoordinates.col) {\r\n    return buildErrorResult('#N/A');\r\n  }\r\n\r\n  // avoid endless loop in a circular dependeny:\r\n  if (evaluatedCellsList.find(candidate => candidate.row === cellToEvaluate.row && candidate.col === cellToEvaluate.col) !== undefined) {\r\n    return buildErrorResult('#REF!');\r\n  }\r\n\r\n  const cellContent = cellsTable[dataCellCoordinates.row][dataCellCoordinates.col];\r\n\r\n  // return cell content if cell does not contain a formula\r\n  if (!TableHelper.isFormula(cellContent)) {\r\n    return buildValueResult(cellContent);\r\n  }\r\n\r\n  // extract formula from cell content\r\n  const formula = cellContent.slice(1);\r\n\r\n  // evaluate formula \r\n  const extendedCellsList = evaluatedCellsList.slice();\r\n  extendedCellsList.push(cellToEvaluate);\r\n  const parser = new Parser();\r\n\r\n  parser.on('callCellValue', (referredCoordinates, done) => {\r\n    const recursiveResult = evaluateCell(cellsTable, maxCellCoordinates, {\r\n      row: referredCoordinates.row.index,\r\n      col: referredCoordinates.column.index\r\n    }, extendedCellsList);\r\n    if (recursiveResult.error !== null) {\r\n      throw new Error(recursiveResult.error);\r\n    }\r\n    return done(recursiveResult.result)\r\n  })\r\n\r\n  parser.on('callRangeValue', (startCellCoordinates, endCellCoordinates, done) => {\r\n    const resultRows = [];\r\n\r\n    for (let row = startCellCoordinates.row.index; row <= endCellCoordinates.row.index; row += 1) {\r\n      const resultRow = [];\r\n      for (let col = startCellCoordinates.column.index; col <= endCellCoordinates.column.index; col += 1) {\r\n        const recursiveResult = evaluateCell(cellsTable, maxCellCoordinates, {\r\n          row, col\r\n        }, extendedCellsList);\r\n        if (recursiveResult.error !== null) {\r\n          throw new Error(recursiveResult.error);\r\n        }\r\n        resultRow.push(recursiveResult.result);\r\n      }\r\n      resultRows.push(resultRow);\r\n    }\r\n    return done(resultRows)\r\n  })\r\n\r\n  /**\r\n   * Introduce German 'SUMME' function (calculates the sum of all given values).\r\n   */\r\n  parser.setFunction('SUMME', params => sumUpNestedValues(params));\r\n\r\n  return parser.parse(formula);\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CbaContainer from '../CbaContainer'\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport TableHelper from './TableHelper';\r\nimport evaluateCell from './CellEvaluator';\r\n\r\nexport default class CbaTable extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.runAllAvailableFormulas = this.runAllAvailableFormulas.bind(this);\r\n    this.notifyUpdateCellValue = this.notifyUpdateCellValue.bind(this);\r\n    this.notifyShowContent = this.notifyShowContent.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { config, path, runtime } = this.props;\r\n    runtime.eventEmitter.addListener(`${path}-cellFocused`, this.onCellFocused.bind(this));\r\n\r\n    if (config.isSpreadsheet) {\r\n      // register to cell-focused and content update events if you are spreadsheet table\r\n      runtime.eventEmitter.addListener(`${path}-contentUpdate`, this.onContentUpdate.bind(this));\r\n      runtime.eventEmitter.addListener(`${path}-removeOldSelection`, this.onRemoveOldSelection.bind(this));\r\n\r\n      // when the table is rendered we should see the values and not the formulas\r\n      this.runAllAvailableFormulas(true);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    const { runtime } = this.props;\r\n    runtime.eventEmitter.removeAllListeners();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  /**\r\n   * Used when component registers its state.\r\n   * @param {*} initialState \r\n   * @param {*} configProps \r\n   */\r\n  static addAttributesToInitialState(initialState, configProps) {\r\n    StateAttributeAccess.setSelectable(initialState, configProps.selectable);\r\n    if (configProps.isSpreadsheet) {\r\n      initialState.tableData = CbaTable.buildInitialData(configProps);\r\n      StateAttributeAccess.setComponentClassName(initialState, 'CbaTable');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the initial Table data as an array of arrays. \r\n   * The cells value is represented as string if available or empty string for not available cell data.\r\n   * @param {*} configProps \r\n   */\r\n  static buildInitialData(configProps) {\r\n    const data = [];\r\n    for (let i = 0; i < configProps.rows; i += 1) {\r\n      data.push([]);\r\n    }\r\n\r\n    configProps.cbaChildren.map((child, index) => {\r\n      data[child.config.row].push(child.config.text.label !== undefined ? child.config.text.label : \"\");\r\n      return false;\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * This is callback method registered as a listener for content update events triggered from cells or cell editor. \r\n   * The method update the table state accordingly and runs all the formulas at the end as one or more formula could rely on the changed cell value.\r\n   * @param {*} value \r\n   * @param {*} row \r\n   * @param {*} column \r\n   * @param {*} isReadOnly \r\n   */\r\n  onContentUpdate(value, row, column, isReadOnly) {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const data = StateAttributeAccess.extractTableData(pathState);\r\n\r\n    let isAnUpdate = false;\r\n    if (row !== undefined && column !== undefined) {\r\n      if (value !== undefined && data[row][column] !== value) {\r\n        isAnUpdate = true;\r\n        data[row][column] = value;\r\n        this.executeFormulaAndNotifyOthers(data, row, column, isReadOnly);\r\n      }\r\n    } else {\r\n      const selectedCell = StateAttributeAccess.extractSelectedCell(pathState);\r\n      if (selectedCell !== undefined && value !== undefined && data[selectedCell.row][selectedCell.column] !== value) {\r\n        isAnUpdate = true;\r\n        data[selectedCell.row][selectedCell.column] = value;\r\n        this.executeFormulaAndNotifyOthers(data, selectedCell.row, selectedCell.column, isReadOnly);\r\n      }\r\n\r\n    }\r\n    StateAttributeAccess.setTableData(pathState, data);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n\r\n    if (isAnUpdate) {\r\n      this.runAllAvailableFormulas();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes all the available formulas and notifies the cells when required.\r\n   * @param {*} isInitialization \r\n   */\r\n  runAllAvailableFormulas(isInitialization) {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const data = StateAttributeAccess.extractTableData(pathState);\r\n\r\n    for (let i = 1; i < data.length; i += 1) {\r\n      for (let j = 1; j < data[i].length; j += 1) {\r\n        if (TableHelper.isFormula(data[i][j])) {\r\n          const { valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow } = this.executeFormulaInternal(data, i, j);\r\n          this.notifyUpdateCellValue({\r\n            row: i, column: j\r\n          }, valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow, isInitialization);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  executeFormulaAndNotifyOthers(dataTable, row, column, isReadOnly) {\r\n    const { cellToUpdate, valueToUpdate, formulaToShow, isNotValidFormula, errorMessageToShow } = this.executeFormulaInternal(dataTable, row, column);\r\n    this.notifyUpdateCellValue(cellToUpdate, valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow);\r\n    this.notifyShowContent(formulaToShow, isNotValidFormula, isReadOnly, errorMessageToShow);\r\n  }\r\n\r\n  executeFormulaInternal(dataTable, row, column) {\r\n    const cellToUpdate = {\r\n      row, column\r\n    }\r\n    const formulaToShow = dataTable[row][column];\r\n\r\n    if (!TableHelper.isFormula(formulaToShow)) {\r\n      return {\r\n        cellToUpdate,\r\n        formulaToShow,\r\n        valueToUpdate: formulaToShow,\r\n        isNotValidFormula: false,\r\n        errorMessageToShow: undefined\r\n      }\r\n    }\r\n\r\n    const { config } = this.props;\r\n    const res = evaluateCell(\r\n      dataTable,\r\n      {\r\n        row: config.rows - 1, col: config.columns - 1\r\n      },\r\n      {\r\n        row: row - 1, col: column - 1\r\n      },\r\n      []\r\n    );\r\n    const hasError = res.error !== null;\r\n\r\n    return {\r\n      cellToUpdate,\r\n      formulaToShow,\r\n      valueToUpdate: CbaTable.buildResultString(hasError, res.result),\r\n      isNotValidFormula: hasError,\r\n      errorMessageToShow: hasError ? this.buildErrorMessage(res.error) : undefined\r\n    }\r\n\r\n  }\r\n\r\n  static buildResultString(hasError, resultValue) {\r\n    if (hasError) return \"###\";\r\n    if (resultValue === Infinity) return \"####\";\r\n    return resultValue;\r\n  }\r\n\r\n  buildErrorMessage(error) {\r\n    const { config } = this.props;\r\n    const { divByZeroError, naNError, syntaxError, circularError } = config;\r\n    switch (error) {\r\n      case '#DIV/0!':\r\n        return divByZeroError;\r\n      case '#VALUE!':\r\n        return naNError;\r\n      case '#REF!':\r\n        return circularError;\r\n      default:\r\n        return syntaxError;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method handles a cell focused event. \r\n   * It will forward address and content(value or formula) to the cell editor \r\n   * and will properly select the headers.\r\n   */\r\n  onCellFocused = (row, column, address, isReadOnly) => {\r\n    const { config, path, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    let currentSelection = StateAttributeAccess.extractSelectedCell(pathState);\r\n    let oldSelection = StateManagerHelper.deepCopy(currentSelection);\r\n\r\n    if (config.isSpreadsheet) {\r\n      const tableData = StateAttributeAccess.extractTableData(pathState);\r\n      const { cellToUpdate, valueToUpdate, formulaToShow, isNotValidFormula, errorMessageToShow } = this.executeFormulaInternal(tableData, row, column);\r\n      this.notifyShowAddress(address);\r\n      this.notifyShowContent(formulaToShow, isNotValidFormula, isReadOnly, errorMessageToShow);\r\n      this.notifyUpdateCellValue(cellToUpdate, valueToUpdate, isNotValidFormula, formulaToShow, errorMessageToShow);\r\n    }\r\n\r\n\r\n    // handle header selection \r\n    ({ currentSelection, oldSelection } = this.handleHeaderSelection(currentSelection, row, column, oldSelection));\r\n\r\n    StateAttributeAccess.setOldSelectedCell(pathState, oldSelection);\r\n\r\n    if (currentSelection.row !== oldSelection.row || currentSelection.column !== oldSelection.column) {\r\n      this.notifyRemoveLastSelection(oldSelection);\r\n    }\r\n\r\n    StateAttributeAccess.setOldSelectedCell(pathState, oldSelection);\r\n    StateAttributeAccess.setSelectedCell(pathState, currentSelection);\r\n\r\n    const oldSelected = StateAttributeAccess.extractSelected(pathState);\r\n\r\n    StateAttributeAccess.setSelected(pathState, !oldSelected);\r\n    runtime.componentStateManager.registerStateByPathId(path, pathState, runtime);\r\n    RenderingHelper.triggerRenderingViaPath(path, runtime);\r\n\r\n  }\r\n\r\n  onRemoveOldSelection() {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const oldSelection = StateAttributeAccess.extractOldSelectedCell(pathState);\r\n    this.notifyRemoveLastSelection(oldSelection);\r\n  }\r\n\r\n  notifyRemoveLastSelection(oldSelection) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-removeLastSelection-[${oldSelection.row},${oldSelection.column}]`);\r\n  }\r\n\r\n  notifyShowAddress(address) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-showAddress`, address);\r\n  }\r\n\r\n  notifyShowContent(value, isNotValidFormula, isReadOnly, errorMessageToShow) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-showContent`, value, isNotValidFormula, isReadOnly, errorMessageToShow);\r\n  }\r\n\r\n  notifyUpdateCellValue(cellToUpdate, value, isNotValidFormula, formulaToShow, errorMessageToShow, isInitialization) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-updateCellValue`, cellToUpdate, value, isNotValidFormula, formulaToShow, errorMessageToShow, isInitialization);\r\n  }\r\n\r\n  /**\r\n   * When a cell is selected its coresponding header cell will be highlighted.\r\n   * The current method is used for that purpose, it decides if row/column header selection changed and notifies them.\r\n   * @param {*} currentSelection \r\n   * @param {*} row \r\n   * @param {*} column \r\n   * @param {*} oldSelection \r\n   */\r\n  handleHeaderSelection(currentSelection, row, column, oldSelection) {\r\n    if (currentSelection === undefined && row !== undefined && column !== undefined) {\r\n      this.notifyRowHeaderUpdate(undefined, row);\r\n      this.notifyColumnHeaderUpdate(undefined, column);\r\n      currentSelection = {\r\n        row, column\r\n      };\r\n      oldSelection = currentSelection;\r\n    } else if (currentSelection.row !== row && currentSelection.column !== column) {\r\n      this.notifyRowHeaderUpdate(currentSelection.row, row);\r\n      this.notifyColumnHeaderUpdate(currentSelection.column, column);\r\n      currentSelection = {\r\n        row, column\r\n      };\r\n    } else if (currentSelection.row !== row) {\r\n      this.notifyRowHeaderUpdate(currentSelection.row, row);\r\n      currentSelection.row = row;\r\n    } else if (currentSelection.column !== column) {\r\n      this.notifyColumnHeaderUpdate(currentSelection.column, column);\r\n      currentSelection.column = column;\r\n    }\r\n    return {\r\n      currentSelection, oldSelection\r\n    };\r\n  }\r\n\r\n  notifyColumnHeaderUpdate(currentColumn, newColumn) {\r\n    const { path, runtime } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-columnHeaderUpdate`, currentColumn, newColumn);\r\n  }\r\n\r\n  notifyRowHeaderUpdate(currentRow, newRow) {\r\n    const { runtime, path } = this.props;\r\n    runtime.eventEmitter.emit(`${path}-rowHeaderUpdate`, currentRow, newRow);\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n\r\n    return (\r\n      <CbaContainer\r\n        config={config}\r\n        path={path}\r\n        runtime={runtime}\r\n        orientation={orientation}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaTable.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.getStandardConfigPropTypes(false),\r\n      {\r\n        rows: PropTypes.number.isRequired,\r\n        columns: PropTypes.number.isRequired,\r\n        selectable: PropTypes.bool.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport Utils from '../../utils/Utils';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\nexport default class CbaTableCellEditor extends Component {\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    const { runtime } = this.props;\r\n    runtime.eventEmitter.addListener(`${this.buildAttachedTableIndexPath()}-showAddress`, this.onAddressUpdate);\r\n    runtime.eventEmitter.addListener(`${this.buildAttachedTableIndexPath()}-showContent`, this.onContentUpdate);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onChangeHandler = (event) => {\r\n    this.updateContent(event.target.value);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    // avoid container tracing \r\n    CommonActionsHelper.stopEventPropagation(event);\r\n  }\r\n\r\n  onAddressUpdate = (value) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setCellEditorAddress(pathState, value);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onContentUpdate = (value, isNotValid, isReadOnly, errorMessage) => {\r\n    this.updateContent(value, isNotValid, isReadOnly, errorMessage);\r\n  }\r\n\r\n  updateContent(value, isNotValidFormula, isReadOnly, errorMessage) {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n\r\n    if (isNotValidFormula !== undefined) {\r\n      StateAttributeAccess.setCellEditorIsNotValid(pathState, isNotValidFormula);\r\n    }\r\n    if (errorMessage !== undefined) {\r\n      StateAttributeAccess.setCellEditorErrorMessage(pathState, errorMessage);\r\n    }\r\n    if (isReadOnly !== undefined) {\r\n      StateAttributeAccess.setCellEditorContentIsReadOnly(pathState, isReadOnly);\r\n    }\r\n\r\n    StateAttributeAccess.setCellEditorContent(pathState, value);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onKeyPressOnInput = (e) => {\r\n    const { runtime } = this.props;\r\n    if (e.key === 'Enter') {\r\n      runtime.eventEmitter.emit(`${this.buildAttachedTableIndexPath()}-contentUpdate`, e.target.value);\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method will compose the index path for the attached table, based on the current path.\r\n   */\r\n  buildAttachedTableIndexPath() {\r\n    const { config, path } = this.props;\r\n    const cellEditorPathWithoutLastPageSegment = IndexPathHelper.dropPageSegmentFromPath(path);\r\n    return IndexPathHelper.appendPageSegmentsToPath(cellEditorPathWithoutLastPageSegment, config.attachedTable);\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { adressTitle, contentTitle } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const address = StateAttributeAccess.extractCellEditorAddress(pathState);\r\n    const content = StateAttributeAccess.extractCellEditorContent(pathState);\r\n\r\n    const readOnly = StateAttributeAccess.extractCellEditorContentIsReadOnly(pathState);\r\n    const containerStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const addressWidth = config.cellAddressRelWidth * 100;\r\n    const contentWidth = 100 - addressWidth;\r\n    const addressrStyle = Utils.deepCopy(containerStyle);\r\n    addressrStyle.left = 0;\r\n    addressrStyle.top = 0;\r\n    addressrStyle.width = `${addressWidth}%`;\r\n    addressrStyle.height = '100%';\r\n    addressrStyle.boxSizing = \"border-box\";\r\n    addressrStyle.lineHeight = containerStyle.height;\r\n    addressrStyle.textAlign = \"center\";\r\n\r\n\r\n    const contentStyle = {\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: `${addressWidth}%`,\r\n      width: `${contentWidth}%`,\r\n      height: '100%',\r\n      boxSizing: 'border-box'\r\n    }\r\n\r\n    const isError = StateAttributeAccess.extractCellEditorIsNotValid(pathState);\r\n    const errorMessage = StateAttributeAccess.extractCellEditorErrorMessage(pathState);\r\n    const errorStyle = {\r\n      position: \"absolute\",\r\n      top: \"-2px\",\r\n      right: \"0\",\r\n      width: \"7px\",\r\n      height: \"8px\",\r\n      fontSize: \"8px\",\r\n      lineHeight: \"8px\",\r\n      backgroundColor: \"#d8424f\",\r\n      color: \"#fff\",\r\n      display: isError ? \"block\" : \"none\"\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={containerStyle}\r\n        data-cba-id={config.pageEditId}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaTableCellEditor\")}\r\n      >\r\n        <div style={addressrStyle} title={adressTitle}>\r\n          {address !== undefined ? address : ''}\r\n          <span style={errorStyle} title={errorMessage}>&#215;</span>\r\n        </div>\r\n        <input\r\n          style={contentStyle}\r\n          title={contentTitle}\r\n          onChange={this.onChangeHandler}\r\n          onKeyPress={this.onKeyPressOnInput}\r\n          onClick={this.onClickHandler}\r\n          type=\"text\"\r\n          value={content !== undefined ? content : ''}\r\n          readOnly={readOnly}\r\n          tabIndex={config.tabIndex}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaTableCellEditor.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.getStandardConfigPropTypes(false)\r\n  ).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from '../PropTypesHelper';\nimport CbaSimpleTextField from \"../CbaSimpleTextField\";\nimport RenderingHelper from '../RenderingHelper';\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\nimport IndexPathHelper from '../../state/IndexPathHelper';\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\nimport StateManagerHelper from '../../state/StateManagerHelper';\n\n/**\n * \n */\nexport default class CbaCalculatorHistory extends Component {\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n\n  static getSimpleTextFieldPath(path) {\n    return IndexPathHelper.appendIndexToPageSegment(path, 0);\n  }\n\n  static setDisplayValueInState(component, value) {\n    const myState = ComponentStateHelper.getState(component);\n    StateAttributeAccess.setTextValue(myState, value);\n    ComponentStateHelper.registerState(component, myState);\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n\n    const textValue = StateAttributeAccess.extractTextValue(ComponentStateHelper.getState(this));\n\n    // Set the new value for the CbaSimpleTextField that we use for display:\n    const simpleTextFieldPath = CbaCalculatorHistory.getSimpleTextFieldPath(path);\n    const simpleTextFieldState = runtime.componentStateManager.findOrBuildStateForPathId(simpleTextFieldPath, runtime);\n    StateAttributeAccess.setTextValue(simpleTextFieldState, textValue);\n    runtime.componentStateManager.registerStateByPathId(simpleTextFieldPath, simpleTextFieldState, runtime);\n\n    const simpleTextFieldConfig = StateManagerHelper.deepCopy(config);\n    simpleTextFieldConfig.userDefinedId = undefined;\n\n    return (\n      <CbaSimpleTextField\n        runtime={runtime}\n        path={simpleTextFieldPath}\n        config={simpleTextFieldConfig}\n        orientation={orientation}\n      />\n    );\n  }\n\n}\n\nCbaCalculatorHistory.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.getStandardConfigPropTypes(false)\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PropTypesHelper from '../PropTypesHelper';\nimport CbaSimpleTextField from '../CbaSimpleTextField';\nimport RenderingHelper from '../RenderingHelper';\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\nimport IndexPathHelper from '../../state/IndexPathHelper';\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\nimport StateManagerHelper from '../../state/StateManagerHelper';\n\n/**\n * \n */\nexport default class CbaCalculatorInput extends Component {\n\n  static keyboardShortcutsRegistered = 0;\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n\n    const { config } = this.props;\n    if (config.catchKeyboardInputEvents === true) {\n      if (!CbaCalculatorInput.keyboardShortcutsRegistered) {\n        document.addEventListener('keydown', this.keydown, false);\n        document.addEventListener('paste', this.paste, false);\n        // document.addEventListener('copy', this.copy, false);\n      }\n      CbaCalculatorInput.keyboardShortcutsRegistered += 1;\n    }\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n\n    const { config } = this.props;\n    if (config.catchKeyboardInputEvents === true) {\n      CbaCalculatorInput.keyboardShortcutsRegistered -= 1;\n      if (!CbaCalculatorInput.keyboardShortcutsRegistered) {\n        document.removeEventListener('keydown', this.keydown);\n        document.removeEventListener('paste', this.paste);\n        // document.removeEventListener('copy', this.copy);\n      }\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  keydown = (event) => {\n    // key press overrides the paste event\n    if (event.ctrlKey) {\n      return false;\n    } else {\n      event.preventDefault();\n      const { runtime } = this.props;\n      runtime.calculatorsManager.keypress(event.key);\n      return true;\n    }\n  }\n\n  paste = (event) => {\n    event.preventDefault();\n    const { runtime } = this.props;\n    runtime.calculatorsManager.paste(event.clipboardData.getData(\"Text\").toString());\n  }\n\n  static getSimpleTextFieldPath(path) {\n    return IndexPathHelper.appendIndexToPageSegment(path, 0);\n  }\n\n  static createDelegateComponent(component, path, type) {\n    const delegateComponent = StateManagerHelper.deepCopy(component);\n    delegateComponent.config.userDefinedId = undefined;\n    delegateComponent.type = type;\n    // Set the new value for the CbaSimpleTextField that we use for display:\n    const delegatePath = CbaCalculatorInput.getSimpleTextFieldPath(path);\n    return {\n      delegatePath, delegateComponent\n    };\n  }\n\n  static setDisplayValueInState(component, value) {\n    const myState = ComponentStateHelper.getState(component);\n    StateAttributeAccess.setTextValue(myState, value);\n    ComponentStateHelper.registerState(component, myState);\n  }\n\n  render() {\n    const { config, runtime, path, orientation } = this.props;\n\n    const textValue = StateAttributeAccess.extractTextValue(ComponentStateHelper.getState(this));\n\n    const { delegatePath, delegateComponent } = CbaCalculatorInput.createDelegateComponent({\n      config\n    }, path, \"CbaSimpleTextField\");\n    const simpleTextFieldState = runtime.componentStateManager.findOrBuildStateForPathId(delegatePath, runtime);\n    StateAttributeAccess.setTextValue(simpleTextFieldState, textValue);\n    runtime.componentStateManager.registerStateByPathId(delegatePath, simpleTextFieldState, runtime);\n\n\n    return (\n      <CbaSimpleTextField\n        runtime={runtime}\n        path={delegatePath}\n        config={delegateComponent.config}\n        orientation={orientation}\n      />\n    );\n  }\n\n}\n\nCbaCalculatorInput.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        catchKeyboardInputEvents: PropTypes.bool.isRequired\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\nimport StateAttributeAccess from '../state/StateAttributeAccess';\nimport ComponentStateHelper from '../state/ComponentStateHelper';\nimport PropTypesHelper from './PropTypesHelper';\nimport RenderingHelper from './RenderingHelper';\nimport InputComponent from './InputComponent';\n\nexport default class CbaInputField extends Component {\n\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n  }\n\n  componentDidMount() {\n    RenderingHelper.onMount(this);\n  }\n\n  componentWillUnmount() {\n    RenderingHelper.onUnmount(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    RenderingHelper.onReceiveProps(this, nextProps);\n  }\n\n  focus = () => {\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    const { config, path, runtime, orientation } = this.props;\n    const pathState = ComponentStateHelper.getState(this);\n    const selected = StateAttributeAccess.extractSelected(pathState);\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, selected, orientation, runtime);\n\n    // override browser default padding value for textarea: \n    if (config.position.padding === undefined) {\n      CommonConfigHelper.setStyleAttribute(style, \"padding\", \"0px\");\n    }\n\n    CommonConfigHelper.setStyleAttribute(style, \"resize\", \"none\");\n\n    return (\n      <textarea\n        style={style}\n        data-cba-id={config.pageEditId}\n        ref={this.inputRef}\n        title={CommonConfigHelper.buildTitle(config)}\n        disabled={StateAttributeAccess.extractDisabled(pathState)}\n        value={StateAttributeAccess.extractTextValue(pathState)}\n        onClick={event => InputComponent.onClickHandler(this, event)}\n        onContextMenu={event => InputComponent.onContextMenuHandler(this, event)}\n        onChange={event => InputComponent.onChangeHandler(this, event, 'InputFieldModified', 'InputField_onChange')}\n        onSelect={event => InputComponent.onSelectionHandler(this, event)}\n        onFocus={event => InputComponent.onFocusHandler(this, event)}\n        onBlur={event => InputComponent.onBlurHandler(this, event)}\n        onCut={event => InputComponent.onCutCopyPaste(this, event)}\n        onCopy={event => InputComponent.onCutCopyPaste(this, event)}\n        onPaste={event => InputComponent.onCutCopyPaste(this, event)}\n        readOnly={config.readOnly}\n        tabIndex={config.tabIndex}\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"CbaInputField\")}\n        spellCheck={config.spellCheck}\n      />\n    );\n  }\n\n}\n\n\nCbaInputField.propTypes = {\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\n  path: PropTypes.string.isRequired,\n  config: PropTypes.shape(\n    PropTypesHelper.addPropTypes(\n      PropTypesHelper.getStandardConfigPropTypes(false),\n      {\n        validationPattern: PropTypes.string,\n        validationFailEvent: PropTypes.string,\n        sourceInputPath: PropTypes.string\n      }\n    )\n  ).isRequired,\n  orientation: PropTypes.string.isRequired,\n}\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\n\r\n\r\nexport default class CbaStopWatch extends Component {\r\n\r\n  state = {\r\n    counterValue: moment(new Date(0, 0, 0, 0, 0, 0))\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n\r\n    this.reinitialiseState();\r\n    this.timer = this.startTimer();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n    this.setCounterValueToState();\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  setCounterValueToState = () => {\r\n    const { counterValue } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    StateAttributeAccess.setCounterValue(pathState, counterValue);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n  }\r\n\r\n  reinitialiseState = () => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const rawInitialCounterValue = StateAttributeAccess.extractCounterValue(pathState);\r\n    const initialCounterValue = rawInitialCounterValue ? moment(rawInitialCounterValue) : null;\r\n\r\n    if (initialCounterValue) {\r\n      this.setState((prevState) => {\r\n        const { counterValue } = prevState;\r\n        counterValue.add(initialCounterValue.hours(), 'hours');\r\n        counterValue.add(initialCounterValue.minutes(), 'minutes');\r\n        counterValue.add(initialCounterValue.seconds(), 'seconds');\r\n\r\n        return {\r\n          counterValue\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  startTimer = () => setInterval(() => {\r\n    this.setState((prevState) => {\r\n      const { counterValue } = prevState;\r\n\r\n      counterValue.add(1, 'seconds');\r\n\r\n      return {\r\n        counterValue\r\n      }\r\n    })\r\n  }, 1000);\r\n\r\n  formatTime = (counterValue) => {\r\n    const withHoursFormat = 'HH:mm:ss';\r\n    const withoutHoursFormat = 'mm:ss';\r\n\r\n    return !counterValue.hours() ? counterValue.format(withoutHoursFormat) : counterValue.format(withHoursFormat);\r\n  }\r\n\r\n  handleTaskPauseOrResume = (enterPause) => {\r\n    window.clearInterval(this.timer);\r\n\r\n    if (!enterPause) {\r\n      this.timer = this.startTimer();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n    const { counterValue } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const pressedState = StateAttributeAccess.extractSelected(pathState);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, pressedState, orientation, runtime);\r\n\r\n    return (\r\n      <div\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"centerVerticalHorizontal\")}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n      >\r\n        {this.formatTime(counterValue)}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaStopWatch.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(PropTypesHelper.getStandardConfigPropTypes(false)).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Slider from 'react-rangeslider'\r\n\r\n// To include the default styles\r\n// import 'react-rangeslider/lib/index.css'\r\nimport './slider.css'\r\nimport '../CbaRichTextField/css/repeatable.css';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\n\r\nclass CbaScaleValueInput extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.scaleValueInput = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { path, runtime } = this.props;\r\n    RenderingHelper.onMount(this);\r\n    this.subscription = runtime.eventEmitter.addListener(`${path}-incrementScale`, this.onIncrementScale.bind(this));\r\n\r\n    if (this.scaleValueInput.current) {\r\n      // set tabindex on 3rd party component slider.\r\n      // later edit, added the -1 to disable completly. This blocks tabbing across elements on the page if left to default\r\n      this.scaleValueInput.current.querySelector(\".rangeslider__handle\").tabIndex = -1 // should be config.tabIndex but does not work due to 3rd part implementation\r\n    }\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n    this.subscription.remove();\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    if (!pathState.disabled) {\r\n      const { config, path, runtime } = this.props;\r\n      CommonActionsHelper.doBasicOnClick(event, path, runtime);\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, undefined, event, runtime);\r\n      CommonActionsHelper.doPageSwitchForComponent(this);\r\n    } else {\r\n      CommonActionsHelper.stopEventPropagation(event);\r\n    }\r\n  }\r\n\r\n  onChangeCompleteHandler = ()  => {\r\n    const { config, runtime } = this.props;\r\n    CommonActionsHelper.sendStandardEvent(config, runtime);\r\n  }\r\n\r\n  onChangeHandler = (value) => {\r\n    const { config, runtime } = this.props;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    value = this.validateValue(value);\r\n    if (pathState.disabled || Number.isNaN(value)) {\r\n      // we should not update the statemachine variable with NaN value \r\n      return;\r\n    }\r\n\r\n    const { taskManager, variableManager, replayStepMonitor } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const oldValue = variableManager.getVariable(currentTaskId, variableName);\r\n\r\n    if (oldValue !== value) {\r\n      // set new variable only if a change occurs\r\n      variableManager.setVariable(currentTaskId, variableName, value, \"integer\", runtime);\r\n      replayStepMonitor.incrementReplayStep();\r\n      RenderingHelper.triggerRendering(this);\r\n    }\r\n  }\r\n\r\n  onKeyDownHandler = (e) => {\r\n    const { config, runtime } = this.props;\r\n    const { pageIncrement, minValue, maxValue } = config;\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n\r\n    if (e.keyCode === 33) {\r\n      let newValue = value + pageIncrement;\r\n      newValue = newValue > maxValue ? maxValue : newValue;\r\n      this.onChangeHandler(newValue);\r\n      this.onChangeCompleteHandler();\r\n      e.preventDefault();\r\n    }\r\n    if (e.keyCode === 34) {\r\n      let newValue = value - pageIncrement;\r\n      newValue = newValue < minValue ? minValue : newValue;\r\n      this.onChangeHandler(newValue);\r\n      this.onChangeCompleteHandler();\r\n      e.preventDefault();\r\n    }\r\n\r\n    // call the change complete handler for Arrow Keys - the actual logic is handled by the changeHandler\r\n    if ((e.keyCode === 37) || (e.keyCode === 38) || (e.keyCode === 39) || (e.keyCode === 40)) {\r\n      this.onChangeCompleteHandler();\r\n    }\r\n  }\r\n\r\n  onIncrementScale = (incrementValue) => {\r\n    const { config, runtime } = this.props;\r\n    const { minValue, maxValue } = config;\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n\r\n    const newValue = value + incrementValue;\r\n    let incrementedValue = newValue > maxValue ? maxValue : newValue;\r\n    incrementedValue = incrementedValue < minValue ? minValue : incrementedValue;\r\n    this.onChangeHandler(incrementedValue);\r\n  }\r\n\r\n  validateValue = (value, minValue, maxValue) => {\r\n    let numberValue = parseInt(value, 10);\r\n    numberValue = numberValue < minValue ? minValue : numberValue;\r\n    numberValue = numberValue > maxValue ? maxValue : numberValue;\r\n    return numberValue;\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { minValue, maxValue, stepIncrement, thumbSize, isHorizontal } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    let value = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\r\n    value = this.validateValue(value, minValue, maxValue);\r\n    const horizontal = `rangeslider-horizontal sliderHandleWidth${thumbSize}`;\r\n    const vertical = `rangeslider-vertical sliderHandleHeight${thumbSize}`;\r\n    const orientationClass = isHorizontal ? horizontal : vertical;\r\n\r\n    const additionalCssClass = `${orientationClass} ${pathState.disabled ? \"disabled\" : \"\"}`;\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        title={pathState.disabled ? undefined : CommonConfigHelper.buildTitle(config)}\r\n        onKeyDown={this.onKeyDownHandler}\r\n        onClickCapture={this.onClickHandler}\r\n        ref={this.scaleValueInput}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n      >\r\n        <Slider\r\n          className={additionalCssClass}\r\n          min={minValue}\r\n          max={maxValue}\r\n          tooltip={false}\r\n          step={stepIncrement}\r\n          value={value}\r\n          orientation={isHorizontal ? \"horizontal\" : \"vertical\"}\r\n          onChange={this.onChangeHandler}\r\n          onChangeComplete={this.onChangeCompleteHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaScaleValueInput.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape().isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CbaScaleValueInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport NumericInput from 'react-numeric-input';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport { debounce } from 'lodash';\r\n\r\nclass CbaSpinnerValueInput extends Component {\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  onClickHandler = (event) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    if (!pathState.disabled) {\r\n      CommonActionsHelper.doStandardOnClick(event, undefined, this);\r\n    } else {\r\n      CommonActionsHelper.stopEventPropagation(event);\r\n    }\r\n  }\r\n\r\n  onChangeHandlerDebounced = debounce((value) => {\r\n    this.onChangeHandler(value);\r\n  }, 2000);\r\n\r\n  onChangeHandler = (value) => {\r\n    const { config, runtime } = this.props;\r\n    const { minValue, maxValue } = config;\r\n    if (value !== null) {\r\n      const { taskManager, variableManager, replayStepMonitor } = runtime;\r\n      const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n      const variableName = config.text.dynamic.variable;\r\n\r\n      replayStepMonitor.incrementReplayStep();\r\n      value = this.validateValue(value, minValue, maxValue);\r\n      variableManager.setVariable(currentTaskId, variableName, value, \"integer\", runtime);\r\n    }\r\n\r\n    RenderingHelper.triggerRendering(this);\r\n  }\r\n\r\n  onInvalidHandler = (errorMessage, valueAsNumber, valueAsString) => {\r\n    // Issue with invalid handler within library - the function is not called\r\n    // see https://github.com/vlad-ignatov/react-numeric-input/issues/114\r\n    if (errorMessage !== undefined) {\r\n      const { config, runtime } = this.props;\r\n      const variableName = config.text.dynamic.variable;\r\n      const { taskManager, variableManager } = runtime;\r\n      const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n      const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n\r\n      this.onChangeHandler(value);\r\n    }\r\n  }\r\n\r\n  onKeyDownHandler = (e) => {\r\n    const { config, runtime } = this.props;\r\n    const { pageIncrement, minValue, maxValue } = config;\r\n\r\n    const variableName = config.text.dynamic.variable;\r\n    const { taskManager, variableManager } = runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const value = variableManager.getVariable(currentTaskId, variableName, false);\r\n    let newValue = value;\r\n\r\n    // PageUp keyCode\r\n    if (e.keyCode === 33) {\r\n      newValue = value + pageIncrement;\r\n      newValue = newValue > maxValue ? maxValue : newValue;\r\n    }\r\n    // PageDown keyCode\r\n    if (e.keyCode === 34) {\r\n      newValue = value - pageIncrement;\r\n      newValue = newValue < minValue ? minValue : newValue;\r\n    }\r\n    // ArrowUp keyCode\r\n    if (e.keyCode === 38) {\r\n      newValue = value + 1;\r\n      newValue = newValue > maxValue ? maxValue : newValue;\r\n    }\r\n    // ArrowDown keyCode\r\n    if (e.keyCode === 40) {\r\n      newValue = value - 1;\r\n      newValue = newValue < minValue ? minValue : newValue;\r\n    }\r\n\r\n    // For all special KeyCodes above, trigger manually the onChangeHandler and prevent the default onChange delayed code\r\n    if ((e.keyCode === 33) || (e.keyCode === 34) || (e.keyCode === 38) || (e.keyCode === 40)) {\r\n      this.onChangeHandler(newValue);\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  onInputHandler = (e) => {\r\n    const inputValue = e.target.value;\r\n    const regex = /(-)?[0-9]*\\.?[0-9]*/g;\r\n\r\n    if (regex.test(inputValue)) {\r\n      this.onChangeHandlerDebounced(inputValue);\r\n    }\r\n  }\r\n\r\n  validateValue = (value, minValue, maxValue) => {\r\n    let numberValue = parseInt(value, 10);\r\n    numberValue = numberValue < minValue ? minValue : numberValue;\r\n    numberValue = numberValue > maxValue ? maxValue : numberValue;\r\n    return numberValue;\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { minValue, maxValue, stepIncrement } = config;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n    let value = CommonConfigHelper.buildDisplayText(config, pathState, runtime);\r\n    value = this.validateValue(value, minValue, maxValue);\r\n    const childStyle = {\r\n      wrap: {\r\n        position: 'unset',\r\n        display: 'unset'\r\n      },\r\n      input: {\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: 'inherit',\r\n        fontFamily: 'inherit',\r\n        fontSize: 'inherit',\r\n        fontWeight: 'inherit',\r\n        fontStyle: 'inherit',\r\n        color: 'inherit'\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n        onKeyDown={this.onKeyDownHandler}\r\n        onClickCapture={this.onClickHandler}\r\n        className={CommonConfigHelper.getCssClassNamesValue(config)}\r\n      >\r\n        <NumericInput\r\n          style={childStyle}\r\n          disabled={pathState.disabled}\r\n          min={minValue}\r\n          max={maxValue}\r\n          value={value}\r\n          step={stepIncrement}\r\n          onChange={this.onChangeHandlerDebounced}\r\n          onInvalid={this.onInvalidHandler}\r\n          tabIndex={config.tabIndex}\r\n          onInput={this.onInputHandler}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCbaSpinnerValueInput.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape().isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CbaSpinnerValueInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\n\r\nimport './CbaTimer.css';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess';\r\n\r\nconst ROW = \"row\";\r\nconst COLUMN_REVERSE = \"column-reverse\";\r\n\r\nconst requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame\r\n  || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\r\n\r\nconst cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;\r\n\r\nexport default class CbaTimer extends Component {\r\n\r\n  state = {\r\n    value: '0%'\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n    this.setTimerType();\r\n    this.timer = requestAnimationFrame(this.timerAnimation);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    cancelAnimationFrame(this.timer);\r\n    this.timer = null;\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  timerAnimation = () => {\r\n    const { runtime, config } = this.props;\r\n    const { timerEvent, runForward } = config;\r\n    const timerData = runtime.statemachinesManager.getTimerData(timerEvent);\r\n\r\n    if (this.timer) {\r\n      const percentage = this.computeTimerPercentage(timerData, runForward);\r\n\r\n      this.setState({\r\n        value: `${percentage}%`\r\n      });\r\n\r\n      requestAnimationFrame(this.timerAnimation);\r\n    }\r\n  }\r\n\r\n  setTimerType = () => {\r\n    const { config } = this.props;\r\n    const { verticalOrientation, runForward } = config;\r\n    this.timerType = this.computeTimerType(verticalOrientation, runForward);\r\n  }\r\n\r\n  computeTimerType = (verticalOrientation) => {\r\n    if (verticalOrientation) return COLUMN_REVERSE;\r\n    if (!verticalOrientation) return ROW;\r\n\r\n    console.error(\"Timer Flags not ok\", verticalOrientation);\r\n    return null;\r\n  }\r\n\r\n  computeTimerValue = time => ({\r\n    seconds: time ? Math.ceil(time / 1000) : 0,\r\n    miliseconds: time ? (time % 1000) : null\r\n  });\r\n\r\n  computeTimerPercentage = (timerData, runForward) => {\r\n    const { totalTime, remainingTime, isRunning } = timerData;\r\n    let percentage;\r\n\r\n    if (!isRunning && !remainingTime) {\r\n      percentage = 0;\r\n    } else {\r\n      percentage = ((remainingTime * 100) / totalTime);\r\n    }\r\n\r\n    if (runForward) {\r\n      percentage = 100 - percentage;\r\n    }\r\n\r\n    return percentage.toFixed(2);\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config, path, orientation } = this.props;\r\n    const { value } = this.state;\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    const pressedState = StateAttributeAccess.extractSelected(pathState);\r\n    const style = CommonConfigHelper.buildStyleByIndexPath(path, config, pressedState, orientation, runtime);\r\n    const { timerEvent, showSecondsLabel } = config;\r\n\r\n    const timerStyleDirection = (this.timerType === ROW) ? \"width\" : \"height\";\r\n    const animationStyle = {\r\n      [timerStyleDirection]: value\r\n    }\r\n\r\n    const timerData = runtime.statemachinesManager.getTimerData(timerEvent);\r\n    const timerParsedValue = this.computeTimerValue(timerData.remainingTime);\r\n\r\n    return (\r\n      <div\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, `cba-timer-wrap ${this.timerType}`)}\r\n        style={style}\r\n        data-cba-id={config.pageEditId}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n      >\r\n        <div className=\"cba-timer-animation\" style={animationStyle} />\r\n        {showSecondsLabel ? <span className=\"cba-timer-secondsLabel\">{timerParsedValue.seconds}</span> : null}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nCbaTimer.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(PropTypesHelper.getStandardConfigPropTypes(false)).isRequired,\r\n  orientation: PropTypes.string.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CbaList.css'\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\n\r\n\r\nfunction ListItem(props) {\r\n  const { config, selectedIds, index, itemHeight, onClickHandler, parentTabIndex } = props;\r\n  const selectedBackgroundColor = \"-webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(88, 130, 181)), to(rgb(65, 102, 147))), rgb(0, 88, 159)\";\r\n  const additionalCssClass = selectedIds.includes(index) ? \"listItemNoHover\" : \"listItem\";\r\n  // accesibility event for tab navigation\r\n  function onKeyDown(event) {\r\n    if (event.keyCode === 32) {\r\n      // space key\r\n      onClickHandler(event, index);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={CommonConfigHelper.getCssClassNamesValue(config, additionalCssClass)}\r\n      style={{\r\n        height: itemHeight,\r\n        background: selectedIds.includes(index) ? selectedBackgroundColor : config.background\r\n      }}\r\n      onClick={event => onClickHandler(event, index)}\r\n      onKeyDown={event => onKeyDown(event)}\r\n      tabIndex={parentTabIndex}\r\n    >\r\n      <div className=\"listItemChild\">\r\n        {config.text}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nListItem.propTypes = {\r\n  config: PropTypes.object.isRequired,\r\n  selectedIds: PropTypes.array.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  itemHeight: PropTypes.number.isRequired,\r\n  onClickHandler: PropTypes.func.isRequired,\r\n  parentTabIndex: PropTypes.number.isRequired\r\n};\r\n\r\nexport default ListItem;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PropTypesHelper from '../PropTypesHelper';\r\nimport IndexPathHelper from '../../state/IndexPathHelper';\r\nimport CommonConfigHelper from '../../config/CommonConfigHelper';\r\nimport ComponentStateHelper from '../../state/ComponentStateHelper';\r\nimport StateManagerHelper from '../../state/StateManagerHelper';\r\nimport RenderingHelper from '../RenderingHelper';\r\nimport StateAttributeAccess from '../../state/StateAttributeAccess'\r\nimport CommonActionsHelper from '../CommonActionsHelper';\r\nimport './CbaList.css'\r\nimport ListItem from './ListItem';\r\n\r\n/**\r\n * A display component that displays a list.\r\n * \r\n * This component manages the items in the list as children of its own \r\n * in the display component instances tree.\r\n */\r\nexport default class CbaList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.comboRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    RenderingHelper.onMount(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    RenderingHelper.onUnmount(this);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    RenderingHelper.onReceiveProps(this, nextProps);\r\n  }\r\n\r\n  // basic state management --------------------------------------------------------------\r\n\r\n  static getItemType() {\r\n    return 'ListItem';\r\n  }\r\n\r\n  /**\r\n   * Build an array of 'standard' configuration structures for the items in the items list.\r\n   * The page configurations manager expects a structure with the attributes 'type' and 'config'. \r\n   * When accessing this structure the state manager expects a config.state object as a minimum. \r\n   */\r\n  static buildListItemsArray(itemsInConfig) {\r\n    return itemsInConfig.map((itemInConfig, index, all) => {\r\n      const configOnPathSegment = StateManagerHelper.deepCopy(itemInConfig);\r\n      const additionalState = {}\r\n      StateAttributeAccess.setSelected(additionalState, false);\r\n      StateAttributeAccess.setDisabled(additionalState, false);\r\n      StateAttributeAccess.setHidden(additionalState, false);\r\n      configOnPathSegment.state = additionalState;\r\n      return {\r\n        type: CbaList.getItemType(),\r\n        config: configOnPathSegment\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the disabled status stored in state\r\n   */\r\n  getDisabledFromState = () => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    return StateAttributeAccess.extractDisabled(pathState);\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns the array of selected ids stored in state\r\n   */\r\n  getSelectedIdsFromState = () => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    return StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the selected settings for all list items to reflect\r\n   * the currently selected items. \r\n   */\r\n  setSelectedIdInState = (newSelectedId, isCtrlKeyEvent) => {\r\n    const pathState = ComponentStateHelper.getState(this);\r\n    let selectedIds = StateAttributeAccess.extractSelectedIds(pathState) || [];\r\n    const selectGroupControllerState = StateAttributeAccess.extractSelectGroupControllerState(pathState);\r\n    if (!isCtrlKeyEvent) {\r\n      // clear the previous selections\r\n      selectedIds = [];\r\n    }\r\n\r\n    if (selectGroupControllerState !== undefined\r\n      && (selectGroupControllerState.singleSelectActive\r\n      || !isCtrlKeyEvent)) {\r\n      selectedIds[0] = newSelectedId;\r\n    } else if (selectedIds.includes(newSelectedId)) {\r\n      selectedIds = selectedIds.filter(value => value !== newSelectedId)\r\n    } else {\r\n      selectedIds.push(newSelectedId);\r\n    }\r\n    StateAttributeAccess.setSelectedIds(pathState, selectedIds);\r\n    ComponentStateHelper.registerState(this, pathState);\r\n  }\r\n\r\n  // handle user triggered events ----------------------------------------------------------------\r\n\r\n  onClickHandler = (event, index) => {\r\n    const { runtime, config, path } = this.props;\r\n    const disabled = this.getDisabledFromState();\r\n    if (disabled === false) {\r\n      const selectedIds = this.getSelectedIdsFromState();\r\n      const oldSelectedId = selectedIds[selectedIds.length - 1];\r\n      const newSelectedId = parseInt(index, 10);\r\n      const oldSelectedItem = config.items[oldSelectedId];\r\n      const newSelectedItem = config.items[newSelectedId];\r\n\r\n      runtime.replayStepMonitor.incrementReplayStep();\r\n      this.updateStateAndTriggerRendering(newSelectedId, event);\r\n\r\n      CommonActionsHelper.traceUserInteractionPerConfig(config, path, CbaList.buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId), event, runtime);\r\n      CommonActionsHelper.sendStandardEvent(newSelectedItem, runtime);\r\n      const defaultLinkReceiver = CommonActionsHelper.getDefaultLinkReceiver(this);\r\n      CommonActionsHelper.doPageSwitch(newSelectedItem.link, runtime, defaultLinkReceiver, path);\r\n    }\r\n    event.stopPropagation();\r\n  }\r\n\r\n  onContextMenuHandler = (event) => {\r\n    CommonActionsHelper.doContextMenuOpen(this, event);\r\n  }\r\n\r\n  static buildTraceDetailsAddOn(oldSelectedItem, oldSelectedId, newSelectedItem, newSelectedId) {\r\n    // the first selection will not have an old selected id\r\n    return {\r\n      oldSelected: oldSelectedId,\r\n      oldSelectedUserDefId: oldSelectedItem !== undefined ? oldSelectedItem.userDefinedId : undefined,\r\n      newSelected: newSelectedId,\r\n      newSelectedUserDefId: newSelectedItem.userDefinedId\r\n    };\r\n  }\r\n\r\n  updateStateAndTriggerRendering = (newSelectedId, event) => {\r\n    const { runtime, path } = this.props;\r\n    this.setSelectedIdInState(newSelectedId, event.ctrlKey);\r\n    RenderingHelper.triggerRenderingViaPath(path, runtime);\r\n  }\r\n\r\n\r\n  // rendering ---------------------------------------------------------------------------------------\r\n\r\n  checkForInvalidItems = () => {\r\n    const { config } = this.props;\r\n    const { items } = config;\r\n    return !Array.isArray(items) || (Array.isArray(items) && items.length === 0);\r\n  }\r\n\r\n  generateOptions = (itemsConfig, selectedIds, itemHeight, listPath, tabIndex) => itemsConfig.map((itemConfig, mapIndex) => {\r\n    const itemPath = IndexPathHelper.appendIndexToPageSegment(listPath, mapIndex)\r\n    return (\r\n      <ListItem\r\n        key={itemPath}\r\n        config={itemConfig}\r\n        selectedIds={selectedIds}\r\n        itemHeight={itemHeight}\r\n        onClickHandler={this.onClickHandler}\r\n        index={mapIndex}\r\n        parentTabIndex={tabIndex}\r\n      />\r\n    )\r\n  })\r\n\r\n  render() {\r\n    if (this.checkForInvalidItems()) {\r\n      return React.createElement(\r\n        'div',\r\n        null,\r\n        `Invalid item configuration for list.`\r\n      );\r\n    }\r\n\r\n\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const wrapperStyle = CommonConfigHelper.buildStyleByIndexPath(path, config, false, orientation, runtime);\r\n\r\n    const selectedIds = this.getSelectedIdsFromState() || [];\r\n    const options = this.generateOptions(config.items, selectedIds, config.font.size * 1.9, path, config.tabIndex);\r\n\r\n    return (\r\n      <div\r\n        className={CommonConfigHelper.getCssClassNamesValue(config, \"list-container\")}\r\n        style={wrapperStyle}\r\n        data-cba-id={config.pageEditId}\r\n        title={CommonConfigHelper.buildTitle(config)}\r\n      >\r\n        <div className=\"list\">\r\n          {options}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nCbaList.propTypes = {\r\n  runtime: PropTypes.shape(PropTypesHelper.getStandardRuntimePropTypes()).isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape(\r\n    PropTypesHelper.addPropTypes(\r\n      PropTypesHelper.addSelectGroupControllerConfigPropTypes(PropTypesHelper.getStandardConfigPropTypes(false)),\r\n      {\r\n        items: PropTypes.array.isRequired\r\n      }\r\n    )\r\n  ).isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CbaContainer from './CbaContainer';\r\nimport CbaRectangle from './CbaRectangle';\r\nimport CbaSingleLineInputField from './CbaSingleLineInputField';\r\nimport CbaSimpleTextField from './CbaSimpleTextField';\r\nimport CbaButton from './CbaButton';\r\nimport CbaRadioButton from './CbaRadioButton';\r\nimport CbaCheckbox from './CbaCheckbox';\r\nimport CbaLink from './CbaLink';\r\nimport CbaPageArea from './CbaPageArea';\r\nimport CbaRegionMap from './CbaRegionMap';\r\nimport CbaInnerHtml from './CbaInnerHtml';\r\nimport CbaRichTextField from './CbaRichTextField/CbaRichTextField';\r\nimport CbaComboBox from './CbaComboBox';\r\nimport CbaMedia from './media/CbaMedia';\r\nimport CbaExternalPageFrame from './CbaExternalPageFrame';\r\nimport CbaTree from './CbaTree/CbaTree';\r\nimport CbaTreeChildArea from './CbaTree/CbaTreeChildArea';\r\nimport CbaTreeView from './CbaTree/CbaTreeView';\r\nimport CbaTable from './table/CbaTable';\r\nimport CbaTableCell from './table/CbaTableCell';\r\nimport CbaTableCellEditor from './table/CbaTableCellEditor';\r\nimport CbaCalculatorHistory from './calculator/CbaCalculatorHistory';\r\nimport CbaCalculatorInput from './calculator/CbaCalculatorInput';\r\nimport CbaInputField from './CbaInputField';\r\nimport CbaStopWatch from './CbaTimer/CbaStopWatch';\r\nimport CbaScaleValueInput from './variable/CbaScaleValueInput';\r\nimport CbaSpinnerValueInput from './variable/CbaSpinnerValueInput';\r\nimport CbaTimer from './CbaTimer/CbaTimer';\r\nimport CbaList from './list/CbaList';\r\n\r\nexport default class CbaInterpreter extends Component {\r\n\r\n\r\n  static getComponentClass(componentTypeName) {\r\n    switch (componentTypeName) {\r\n      case 'CbaContainer':\r\n        return CbaContainer;\r\n      case 'CbaRectangle':\r\n        return CbaRectangle;\r\n      case 'CbaSingleLineInputField':\r\n        return CbaSingleLineInputField;\r\n      case 'CbaSimpleTextField':\r\n        return CbaSimpleTextField;\r\n      case 'CbaButton':\r\n        return CbaButton;\r\n      case 'CbaRadioButton':\r\n        return CbaRadioButton;\r\n      case 'CbaCheckbox':\r\n        return CbaCheckbox;\r\n      case 'CbaLink':\r\n        return CbaLink;\r\n      case 'CbaPageArea':\r\n        return CbaPageArea;\r\n      case 'CbaRegionMap':\r\n        return CbaRegionMap;\r\n      case 'CbaInnerHtml':\r\n        return CbaInnerHtml;\r\n      case 'CbaRichTextField':\r\n        return CbaRichTextField;\r\n      case 'CbaComboBox':\r\n        return CbaComboBox;\r\n      case 'CbaExternalPageFrame':\r\n        return CbaExternalPageFrame;\r\n      case 'CbaMedia':\r\n        return CbaMedia;\r\n      case 'CbaTree':\r\n        return CbaTree;\r\n      case 'CbaTreeChildArea':\r\n        return CbaTreeChildArea;\r\n      case 'CbaTreeView':\r\n        return CbaTreeView;\r\n      case 'CbaTable':\r\n        return CbaTable;\r\n      case 'CbaTableCell':\r\n        return CbaTableCell;\r\n      case 'CbaTableCellEditor':\r\n        return CbaTableCellEditor;\r\n      case 'CbaCalculatorInput':\r\n        return CbaCalculatorInput;\r\n      case 'CbaCalculatorHistory':\r\n        return CbaCalculatorHistory;\r\n      case 'CbaInputField':\r\n        return CbaInputField;\r\n      case 'CbaStopWatch':\r\n        return CbaStopWatch;\r\n      case 'CbaTimer':\r\n        return CbaTimer;\r\n      case 'CbaScaleValueInput':\r\n        return CbaScaleValueInput\r\n      case 'CbaSpinnerValueInput':\r\n        return CbaSpinnerValueInput;\r\n      case 'CbaList':\r\n        return CbaList;\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { config, path, runtime, orientation } = this.props;\r\n    const { type, content } = config;\r\n\r\n    // Take care: This variable has to be capitalized for <Delegate .../> to work!\r\n    const Delegate = CbaInterpreter.getComponentClass(type);\r\n\r\n    if (Delegate === undefined) {\r\n      switch (type) {\r\n        case 'PlainText':\r\n          return React.createElement(\r\n            'div',\r\n            null,\r\n            content\r\n          );\r\n        default:\r\n          console.error(`Interpreter does not know component type ${type}`);\r\n          return React.createElement(\r\n            'div',\r\n            null,\r\n            `Interpreter does not know component type: ${type}`\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <Delegate\r\n          config={config.config}\r\n          path={path}\r\n          runtime={runtime}\r\n          orientation={orientation}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n\r\nCbaInterpreter.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  config: PropTypes.shape({\r\n    type: PropTypes.string.isRequired,\r\n    config: PropTypes.object,\r\n    content: PropTypes.string\r\n  }).isRequired,\r\n  orientation: PropTypes.string.isRequired,\r\n}\r\n","import React, { Component } from 'react';\nimport SplitPane from 'react-split-pane';\nimport PropTypes from 'prop-types';\nimport { HotKeys } from 'react-hotkeys';\nimport IndexPathHelper from '../state/IndexPathHelper';\nimport CbaInterpreter from './CbaInterpreter';\nimport { SCORING, TRACING, STATE_MACHINE, ModalDialog } from \"../dialog/ModalManager\";\nimport Utils from \"../utils/Utils\";\nimport DialogPresenter from \"../dialog/DialogPresenter\"\nimport CommonActionsHelper from './CommonActionsHelper';\nimport CommonConfigHelper from '../config/CommonConfigHelper';\n\nexport default class CbaTestPresenter extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isDialogOpen: false,\n      currentModal: '',\n      currentModalTitle: '',\n      currentModalContent: {},\n      isPaused: false\n    };\n\n    // TODO: Drop this reference in the runtime once we have merged the static modal dialogs into the DialogPresenter:\n    //       The SpecialClickActionsHelper would use the DialogPresenter instead of the CbaTestPresenter then and the DialogPresenter is in the runtime already. \n    props.runtime.testPresenter = this;\n\n  }\n\n  openDialog = (modalType, windowTitle, currentModalContent) => {\n    this.setState({\n      isDialogOpen: true,\n      currentModal: modalType,\n      currentModalTitle: windowTitle,\n      currentModalContent\n    });\n  }\n\n  handleClose = () => this.setState({\n    isDialogOpen: false\n  });\n\n  pause = () => this.setState({\n    isPaused: true\n  })\n\n  resume = () => this.setState({\n    isPaused: false\n  })\n\n  generateTaskStyles = cssStyles => (\n    /**\n     * Handles insertion of CSS defined by an item author #5327\n     */\n    // eslint-disable-next-line react/no-danger\n    <style dangerouslySetInnerHTML={\n      {\n        __html: cssStyles\n      }\n    }\n    />\n  );\n\n  static findPageForPageName(pageName, runtime) {\n    if (pageName === undefined) {\n      return undefined;\n    }\n\n    const page = runtime.pageConfigurationsManager.findPage(pageName);\n    if (page === undefined) {\n      console.error(`Could not find page with name ${pageName}`);\n    }\n    return page;\n  }\n\n  static buildPathForPage(pageName, pageAreaName, runtime) {\n    if (pageName === undefined) {\n      return undefined;\n    }\n\n    return IndexPathHelper.appendPageSegmentToPathRoot(\n      runtime.taskManager.getCurrentStatePathRoot(),\n      'main',\n      pageAreaName,\n      IndexPathHelper.buildPageSegment(pageName)\n    );\n  }\n\n  static isRightToLeftPage(page) {\n    if (page === undefined) return undefined;\n    return page.isRightToLeft;\n\n  }\n\n  static getPagePosition(page) {\n    if (page === undefined) return undefined;\n    if (page.content === undefined) return undefined;\n    if (page.content.config === undefined) return undefined;\n    return page.content.config.position;\n\n  }\n\n  static getPageWidth(page, defaultWidth) {\n    const position = CbaTestPresenter.getPagePosition(page);\n    return (position === undefined) ? defaultWidth : (position.width + position.x);\n  }\n\n  static getPageHeight(page, defaultHeight) {\n    const position = CbaTestPresenter.getPagePosition(page);\n    return (position === undefined) ? defaultHeight : (position.height + position.y);\n  }\n\n  static getDividerConfig(itemLayout) {\n    if (itemLayout === undefined) return undefined;\n    return itemLayout.divider;\n  }\n\n  static getDividerWidth(itemLayout) {\n    const divider = CbaTestPresenter.getDividerConfig(itemLayout);\n    if (divider === undefined) return 0;\n    return divider.width === undefined ? 0 : divider.width;\n  }\n\n  static getDividerColor(itemLayout) {\n    const divider = CbaTestPresenter.getDividerConfig(itemLayout);\n    if (divider === undefined) return 'rgb(0,0,0,1)';\n    return divider.color === undefined ? 'rgb(0,0,0,1)' : divider.color;\n  }\n\n  static getXAreaSize(itemLayout) {\n    if (itemLayout === undefined) return 0;\n    return itemLayout.xSize === undefined ? 0 : itemLayout.xSize;\n  }\n\n\n  static getXPlacement(itemLayout) {\n    if (itemLayout === undefined) return \"left\";\n    return itemLayout.xPlacement === undefined ? \"left\" : itemLayout.xPlacement;\n  }\n\n  static isHorizontalDivider(itemLayout) {\n    const xPlacement = CbaTestPresenter.getXPlacement(itemLayout);\n    return xPlacement === \"top\" || xPlacement === \"bottom\";\n  }\n\n  static isDividerMovable(itemLayout) {\n    if (itemLayout === undefined) return false;\n    return itemLayout.divider.moveable; // TYPO in JSON ?\n  }\n\n  static isXPageFirst(itemLayout) {\n    const xPlacement = CbaTestPresenter.getXPlacement(itemLayout);\n    return xPlacement === \"top\" || xPlacement === \"left\";\n  }\n\n  static getRtlOrientation(page) {\n    return CbaTestPresenter.isRightToLeftPage(page) ? \"right\" : \"left\";\n  }\n\n  static getRtlDir(page, xPage, isXPageFirst) {\n    if (isXPageFirst) {\n      return {\n        firstAreaDir: CbaTestPresenter.isRightToLeftPage(xPage) ? \"rtl\" : \"ltr\",\n        secondAreaDir: CbaTestPresenter.isRightToLeftPage(page) ? \"rtl\" : \"ltr\",\n      }\n    } else {\n      return {\n        firstAreaDir: CbaTestPresenter.isRightToLeftPage(page) ? \"rtl\" : \"ltr\",\n        secondAreaDir: CbaTestPresenter.isRightToLeftPage(xPage) ? \"rtl\" : \"ltr\",\n      }\n    }\n  }\n\n  static calculateDividerOffset(isXPageFirst, isHorizontalDivider, xAreaSize, totalHeight, totalWidth) {\n    if (isXPageFirst) return xAreaSize;\n    if (isHorizontalDivider) return totalHeight - xAreaSize;\n    return totalWidth - xAreaSize;\n  }\n\n  render() {\n    const { runtime, taskId, settings } = this.props;\n\n    const topLevelConfiguration = runtime.presenterStateManager.getTaskState(taskId);\n\n    const taskCssStyles = topLevelConfiguration.cssStyles;\n\n    const totalWidth = topLevelConfiguration !== undefined && topLevelConfiguration.itemWidth !== undefined ? topLevelConfiguration.itemWidth : 600;\n    const totalHeight = topLevelConfiguration !== undefined && topLevelConfiguration.itemHeight !== undefined ? topLevelConfiguration.itemHeight : 600;\n\n    const foundPage = CbaTestPresenter.findPageForPageName(topLevelConfiguration.standardPage, runtime);\n\n    // Declare a dummy page if we cannot find the specified top level page due to a misconfigured item: we cannot make the generator foolproof.\n    if (foundPage === undefined) {\n      console.error(`Cannot find top level page ${topLevelConfiguration.standardPage} for taskId ${taskId}, showing error page now!`, topLevelConfiguration);\n    }\n    const standardPage = foundPage === undefined\n      ? {\n        content: {\n          type: 'PlainText',\n          content: `Cannot find page ${topLevelConfiguration.standardPage}`\n        },\n        isRighToLeft: false,\n      }\n      : foundPage\n\n\n    const xPage = CbaTestPresenter.findPageForPageName(topLevelConfiguration.xPage, runtime);\n\n    const standardPath = CbaTestPresenter.buildPathForPage(topLevelConfiguration.standardPage, 'standard', runtime);\n    const xPath = CbaTestPresenter.buildPathForPage(topLevelConfiguration.xPage, 'xPage', runtime);\n\n    const { withEditContextMenu, itemLayout } = topLevelConfiguration;\n\n    const isHorizontalDivider = CbaTestPresenter.isHorizontalDivider(itemLayout);\n    const isXPageFirst = CbaTestPresenter.isXPageFirst(itemLayout);\n\n    const xAreaSize = CbaTestPresenter.getXAreaSize(itemLayout);\n    const dividerOffset = CbaTestPresenter.calculateDividerOffset(isXPageFirst, isHorizontalDivider, xAreaSize, totalHeight, totalWidth);\n    const dividerThickness = CbaTestPresenter.getDividerWidth(itemLayout);\n    const dividerGrabArea = 10;\n    const isDividerMovable = CbaTestPresenter.isDividerMovable(itemLayout);\n    const isDividerHidden = dividerThickness === 0 && !isDividerMovable;\n\n    const standardPageOrientation = CbaTestPresenter.getRtlOrientation(standardPage);\n    const xPageOrientation = CbaTestPresenter.getRtlOrientation(xPage);\n\n    const pagesAreaDir = CbaTestPresenter.getRtlDir(standardPage, xPage, isXPageFirst);\n    const standardPageDir = standardPageOrientation === \"right\" ? \"rtl\" : \"ltr\";\n\n    const itemBackgroundColor = 'rgb(192, 192, 192)';\n\n    const noDividerStyle = {\n      position: 'absolute',\n      [standardPageOrientation]: 0,\n      top: 0,\n      width: totalWidth,\n      height: totalHeight,\n      overflow: \"auto\",\n      background: itemBackgroundColor\n    }\n\n    const wrapStyle = {\n      width: totalWidth,\n      height: totalHeight,\n      position: \"absolute\",\n      [standardPageOrientation]: 0\n    };\n\n    const dividerStyle = {\n      width: isHorizontalDivider ? \"100%\" : dividerThickness + dividerGrabArea,\n      height: isHorizontalDivider ? dividerThickness + dividerGrabArea : \"100%\",\n      background: CbaTestPresenter.getDividerColor(topLevelConfiguration.itemLayout),\n      display: isDividerHidden ? \"none\" : \"block\",\n      MozBoxSizing: \"border-box\",\n      WebkitBoxSizing: \"border-box\",\n      boxSizing: \"border-box\",\n      MozBackgroundClip: \"padding\",\n      WebkitBackgroundClip: \"padding\",\n      backgroundClip: \"padding-box\",\n      transition: \"none\"\n    };\n\n    const areaWrapStyle = {\n      overflow: 'auto',\n      background: itemBackgroundColor\n    };\n\n    const areaStyle = {\n      position: 'absolute',\n      [isXPageFirst ? xPageOrientation : standardPageOrientation]: 0,\n      top: 0,\n      background: itemBackgroundColor\n    };\n\n    // define fixed hot keys as key map and keyHandlers map:\n    const keyMap = {\n      openConfigParams: ['alt+v'],\n      cut: ['ctrl+x'],\n      copy: ['ctrl+c'],\n      paste: ['ctrl+v'],\n      print: ['ctrl+p', 'ctrl+shift+p']\n    };\n\n    const keyHandlers = {\n      openConfigParams: (event) => {\n        Utils.printCbaVersion();\n      },\n      cut: (withEditContextMenu\n        ? (event) => { runtime.clipboardManager.cut('keyboard', undefined, runtime); }\n        : (event) => { }\n      ),\n      copy: (withEditContextMenu\n        ? (event) => { runtime.clipboardManager.copy('keyboard', undefined, runtime); }\n        : (event) => { }\n      ),\n      paste: (withEditContextMenu\n        ? (event) => { runtime.clipboardManager.paste('keyboard', undefined, runtime); }\n        : (event) => { }\n      ),\n      print: (event) => {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    };\n\n    // add dynamically configured debugging hot keys:\n    const { debugScoreHotKey, debugTraceHotKey, debugStatemachineHotKey } = settings;\n    if (debugTraceHotKey !== undefined && debugTraceHotKey.length > 0) {\n      keyMap.openTrace = [debugTraceHotKey];\n      keyHandlers.openTrace = (event) => {\n        event.preventDefault();\n        const currentModalContent = runtime.traceLogBuffer;\n        this.openDialog(TRACING, 'Tracing Debug Window', currentModalContent);\n      }\n    }\n    if (debugScoreHotKey !== undefined && debugScoreHotKey.length > 0) {\n      keyMap.openScoring = [debugScoreHotKey];\n      keyHandlers.openScoring = (event) => {\n        event.preventDefault();\n        const currentModalContent = runtime.taskManager.getScoring();\n        this.openDialog(SCORING, 'Scoring Debug Window', currentModalContent);\n      }\n    }\n    if (debugStatemachineHotKey !== undefined && debugStatemachineHotKey.length > 0) {\n      keyMap.openStateMachine = [debugStatemachineHotKey];\n      keyHandlers.openStateMachine = (event) => {\n        event.preventDefault();\n        const { statemachinesManager, variableManager } = runtime;\n        const currentStatemachineData = statemachinesManager.getCurrentStateMachineLeafStates();\n        const currentVariableData = variableManager.buildVariablesInfoArrayForTask(taskId);\n\n        const nullSafeStatemachineData = {\n          variables: currentVariableData === undefined ? [] : currentVariableData,\n          states: currentStatemachineData === undefined ? [] : currentStatemachineData,\n          visitedStates: statemachinesManager.getVisitedStates(),\n          raisedEvents: statemachinesManager.getRaisedEvents()\n        }\n        this.openDialog(STATE_MACHINE, 'State Machine Debug Window', nullSafeStatemachineData);\n      }\n    }\n\n    const { isDialogOpen, currentModal, currentModalTitle, currentModalContent, isPaused } = this.state;\n\n    const itemName = runtime.taskManager.getCurrentTestTaskItemNames().item;\n    const customFontsCss = CommonConfigHelper.buildCustomFontsCss(runtime.taskManager.getCustomFontMappings(itemName), runtime);\n\n    return (\n      <HotKeys className=\"appContainer\" style={{ width: totalWidth, height: totalHeight }} keyMap={keyMap} handlers={keyHandlers} tabIndex={1} >\n        {customFontsCss ? this.generateTaskStyles(customFontsCss) : null}\n        {taskCssStyles ? this.generateTaskStyles(taskCssStyles) : null}\n        {\n          (xPage === undefined\n            ? (\n              <div style={noDividerStyle} dir={CbaTestPresenter.isRightToLeftPage(standardPage) ? \"rtl\" : \"\"} onScroll={CommonActionsHelper.traceUserScroll(standardPath, runtime)}>\n                <CbaInterpreter config={standardPage.content} path={standardPath} runtime={runtime} orientation={standardPageOrientation} />\n              </div>\n            )\n            : (\n              <div key={IndexPathHelper.getRootFromPath(standardPath)} style={wrapStyle} dir={standardPageDir} onScroll={CommonActionsHelper.traceUserScroll(standardPath, runtime, xPath, isXPageFirst)}>\n                <SplitPane\n                  split={isHorizontalDivider ? \"horizontal\" : \"vertical\"}\n                  pane1Style={areaWrapStyle}\n                  pane2Style={areaWrapStyle}\n                  resizerStyle={dividerStyle}\n                  minSize={0}\n                  maxSize={dividerThickness === 0 ? -1 : -dividerThickness}\n                  defaultSize={dividerOffset}\n                  allowResize={isDividerMovable}\n                >\n                  <div style={areaStyle} dir={pagesAreaDir.firstAreaDir}>\n                    <CbaInterpreter config={isXPageFirst ? xPage.content : standardPage.content} path={isXPageFirst ? xPath : standardPath} runtime={runtime} orientation={isXPageFirst ? xPageOrientation : standardPageOrientation} />\n                  </div>\n\n                  <div style={areaStyle} dir={pagesAreaDir.secondAreaDir}>\n                    <CbaInterpreter config={isXPageFirst ? standardPage.content : xPage.content} path={isXPageFirst ? standardPath : xPath} runtime={runtime} orientation={isXPageFirst ? standardPageOrientation : xPageOrientation} />\n                  </div>\n                </SplitPane>\n              </div>\n            )\n          )\n        }\n\n        <ModalDialog isOpen={isDialogOpen} closeDialog={this.handleClose} currentModal={currentModal} currentModalTitle={currentModalTitle} currentModalContent={currentModalContent} runtime={runtime} />\n        <DialogPresenter runtime={runtime} findPageForPageName={CbaTestPresenter.findPageForPageName} />\n\n        <div className={`pause-backdrop ${!isPaused ? 'display-none' : ''}`}>\n          <div className=\"pause-button\"> </div>\n        </div>\n      </HotKeys >\n    );\n  }\n\n}\n\nCbaTestPresenter.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  taskId: PropTypes.string.isRequired,\n  settings: PropTypes.object.isRequired\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport CommonActionsHelper from './CommonActionsHelper';\r\nimport Utils from '../utils/Utils';\r\n\r\nexport default class HeaderButtons extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // temporary rerender on click\r\n    this.state = {\r\n      // eslint rule malfunction, state used in on click handler\r\n      // eslint-disable-next-line react/no-unused-state\r\n      renderHelper: 0\r\n    }\r\n  }\r\n\r\n  handleClick = (event, button, index) => {\r\n    const { runtime } = this.props;\r\n\r\n    // trace event in log\r\n    const traceDetails = {\r\n      index\r\n    };\r\n    CommonActionsHelper.addMouseEventDetails(event, traceDetails);\r\n    runtime.traceLogBuffer.reportEvent('HeaderButton', new Date(), traceDetails);\r\n\r\n    // send state machine event\r\n    CommonActionsHelper.sendEvent(button.event, runtime);\r\n\r\n\r\n    // temporary rerender on click\r\n    this.setState(oldState => ({\r\n      renderHelper: oldState.renderHelper + 1\r\n    }\r\n    ));\r\n  }\r\n\r\n  getLargestHeightFromButtons = (buttons) => {\r\n    let largestHeight = 0;\r\n    buttons.forEach((button) => {\r\n      largestHeight = largestHeight < button.height ? button.height : largestHeight;\r\n    });\r\n\r\n    return largestHeight;\r\n    // or return this buttons.map((button) => button.height).reduce((accumulator, currentValue) => (accumulator < currentValue ? currentValue : accumulator));\r\n  }\r\n\r\n  isButtonInvalid = (buttonConfig) => {\r\n    let invalid = false;\r\n\r\n    // check width and set default if none\r\n    if (!buttonConfig.width || buttonConfig.width <= 0) {\r\n      buttonConfig.width = 110;\r\n    }\r\n    // check height and set default if none\r\n    if (!buttonConfig.height || buttonConfig.height <= 0) {\r\n      buttonConfig.height = 26;\r\n    }\r\n\r\n    // check image and text\r\n    if (!buttonConfig.image && !buttonConfig.text) {\r\n      console.log(\"Button Config for \", buttonConfig, \"  has no image or no text\");\r\n      invalid = true;\r\n    }\r\n\r\n    // check event\r\n    if (!buttonConfig.event || !(typeof buttonConfig.event === 'string')) {\r\n      console.log(\"Button Config for \", buttonConfig, \" has invalid event\");\r\n      invalid = true;\r\n    }\r\n\r\n    return invalid;\r\n  }\r\n\r\n  buildButtons = (config, barWidth) => {\r\n    const largestHeight = this.getLargestHeightFromButtons(config);\r\n    let buttonTotalWidth = 0;\r\n    const { runtime } = this.props;\r\n\r\n    return config.map((button, index) => {\r\n      if (this.isButtonInvalid(button)) return null;\r\n\r\n      const buttonPadding = 5;\r\n\r\n      const buttonStyle = {\r\n        height: largestHeight || 32,\r\n        width: button.width || \"auto\",\r\n        overflow: \"hidden\",\r\n        cursor: \"pointer\"\r\n      };\r\n\r\n      const buttonWrapStyle = {\r\n        padding: buttonPadding,\r\n        display: \"inline-block\",\r\n        float: \"right\"\r\n      };\r\n\r\n      // handle image case\r\n      if (button.image) {\r\n        buttonStyle.backgroundImage = `url(${CommonConfigHelper.getProperResourcePath(button.image, runtime)})`;\r\n        buttonStyle.backgroundSize = \"contain\";\r\n        buttonStyle.backgroundPosition = \"center\";\r\n        buttonStyle.backgroundRepeat = \"no-repeat\";\r\n      }\r\n\r\n      // handle drop buttons case\r\n      buttonTotalWidth += button.width + buttonPadding * 2;\r\n      if (buttonTotalWidth > barWidth) {\r\n        return null;\r\n      }\r\n\r\n      return (\r\n        // disabled because we don't have a unique id to use as key and also the array does not change.\r\n        // eslint-disable-next-line react/no-array-index-key\r\n        <span style={buttonWrapStyle} key={index}>\r\n          <button type=\"button\" onClick={(event) => { this.handleClick(event, button, index) }} style={buttonStyle}>{button.image ? false : button.text}</button>\r\n        </span>\r\n      )\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { runtime, config } = this.props;\r\n    if (!config || !Utils.isNonEmptyArray(config)) {\r\n      return null;\r\n    }\r\n\r\n    const { taskManager } = runtime;\r\n    const { itemWidth } = taskManager.getTopLevelConfiguration();\r\n    const wrapStyle = {\r\n      width: itemWidth\r\n    };\r\n\r\n    const buttons = this.buildButtons(config, itemWidth);\r\n\r\n\r\n    return <div style={wrapStyle} className=\"headerButtonsToolbar\">{buttons}</div>\r\n  }\r\n\r\n}\r\n\r\nHeaderButtons.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n  config: PropTypes.array.isRequired\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext } from 'pure-react-carousel';\r\nimport 'pure-react-carousel/dist/react-carousel.es.css';\r\nimport './TopButtonToolbar.css';\r\n\r\nexport default class TopButtonToolbar extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.currentSlide = 0;\r\n  }\r\n\r\n  static getButtonPadding() {\r\n    return 5;\r\n  }\r\n\r\n  static getCarouselMarginBottom() {\r\n    return 5;\r\n  }\r\n\r\n  /*\r\n  * external function that can be used to compute carousel current height\r\n  */\r\n  static getCarouselHeight = (buttonHeight) => {\r\n    const padding = TopButtonToolbar.getButtonPadding() * 2;\r\n    const marginBottom = TopButtonToolbar.getCarouselMarginBottom();\r\n\r\n    return buttonHeight + padding + marginBottom;\r\n  }\r\n\r\n  /*\r\n  * function used to build array of slides that server the carousel\r\n  */\r\n  buildSlides = buttonArray => (\r\n    buttonArray.map((item, index) => (\r\n      <Slide key={item.key} index={index}>\r\n        <span className=\"button-container\">\r\n          {item}\r\n        </span>\r\n      </Slide>\r\n    ))\r\n  )\r\n\r\n\r\n  /*\r\n  * build the config needed for the carousel\r\n  */\r\n  buildCarouselConfig = (buttonHeight, widthRatio) => {\r\n    const { itemWidth } = this.props;\r\n\r\n    const navButtonsWidth = 25;\r\n    const buttonPadding = TopButtonToolbar.getButtonPadding();\r\n    const buttonWidth = buttonHeight * widthRatio;\r\n\r\n    const carouselWidth = itemWidth - navButtonsWidth * 2 - buttonPadding * 2;\r\n    const carouselHeight = buttonHeight + buttonPadding * 2;\r\n\r\n    const slideWidth = buttonWidth + buttonPadding * 2;\r\n    const slideHeight = carouselHeight;\r\n\r\n    const leftArrow = String.fromCharCode(\"0x2039\");\r\n    const rightArrow = String.fromCharCode(\"0x203A\");\r\n\r\n    const carouselWrapStyle = {\r\n      width: itemWidth,\r\n      marginBottom: TopButtonToolbar.getCarouselMarginBottom()\r\n    }\r\n\r\n    const carouselStyle = {\r\n      width: carouselWidth,\r\n      height: carouselHeight,\r\n      margin: \"0 auto\",\r\n    }\r\n\r\n    const buttonStyle = {\r\n      height: carouselHeight\r\n    }\r\n\r\n    return {\r\n      button: {\r\n        height: buttonHeight,\r\n        width: buttonWidth,\r\n        padding: buttonPadding\r\n      },\r\n\r\n      slides: {\r\n        width: slideWidth,\r\n        height: slideHeight,\r\n        visibleSlides: Math.floor(carouselWidth / slideWidth),\r\n      },\r\n\r\n      carouselWidth, // padding for next and prev\r\n      carouselHeight, // button paddings\r\n\r\n      arrows: {\r\n        left: leftArrow,\r\n        right: rightArrow\r\n      },\r\n\r\n      styles: {\r\n        carouselStyle,\r\n        buttonStyle,\r\n        carouselWrapStyle,\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n  * computes the offset needed for the carousel to set the active button in the middle\r\n  */\r\n  computeCurrentSlideCenter = (visibleSlides, buttons) => {\r\n    let offset = 0\r\n    // only valid for more buttons than slides.\r\n    if (visibleSlides >= buttons.length) return offset;\r\n\r\n    const middlePoint = Math.ceil(visibleSlides / 2);\r\n    let activeSlide;\r\n    buttons.forEach((button, index) => {\r\n      if (button.props.className === \"active\") {\r\n        activeSlide = index + 1;\r\n      }\r\n    });\r\n\r\n    offset = activeSlide - middlePoint;\r\n\r\n    offset = offset < 0 ? 0 : offset;\r\n    offset = offset > buttons.length - visibleSlides ? buttons.length - visibleSlides : offset;\r\n\r\n    return offset;\r\n\r\n  }\r\n\r\n  computeCurrentSlideNotCenter = () => (\r\n    this.carousel ? this.carousel.carouselStore.getStoreState().currentSlide : 0\r\n  )\r\n\r\n  buildCurrentSlide = (carouselConfig, isCenter) => {\r\n    const { buttons } = this.props;\r\n    return (isCenter\r\n      ? this.computeCurrentSlideCenter(carouselConfig.slides.visibleSlides, buttons)\r\n      : this.computeCurrentSlideNotCenter()\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { buttonHeight, buttonRatio, activateCenterToolbarOnChange, className, buttons } = this.props;\r\n    const carouselConfig = this.buildCarouselConfig(buttonHeight, buttonRatio);\r\n    this.currentSlide = this.buildCurrentSlide(carouselConfig, activateCenterToolbarOnChange);\r\n\r\n    return (\r\n      <div className={`carousel-wrap ${className}`} style={carouselConfig.styles.carouselWrapStyle}>\r\n        <CarouselProvider\r\n          ref={(c) => { this.carousel = c; }}\r\n          style={carouselConfig.styles.carouselStyle}\r\n          className={className}\r\n          naturalSlideWidth={carouselConfig.slides.width}\r\n          naturalSlideHeight={carouselConfig.slides.height}\r\n          totalSlides={buttons.length}\r\n          visibleSlides={carouselConfig.slides.visibleSlides}\r\n          currentSlide={this.currentSlide}\r\n        >\r\n          <Slider style={carouselConfig.styles.carouselStyle}>\r\n            {this.buildSlides(buttons)}\r\n          </Slider>\r\n\r\n          <ButtonBack className=\"nav-buttons back\" style={carouselConfig.styles.buttonStyle}>{carouselConfig.arrows.left}</ButtonBack>\r\n          <ButtonNext className=\"nav-buttons next\" style={carouselConfig.styles.buttonStyle}>{carouselConfig.arrows.right}</ButtonNext>\r\n        </CarouselProvider>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nTopButtonToolbar.propTypes = {\r\n  className: PropTypes.string.isRequired,\r\n  buttons: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  buttonHeight: PropTypes.number.isRequired,\r\n  buttonRatio: PropTypes.number,\r\n  activateCenterToolbarOnChange: PropTypes.bool,\r\n  itemWidth: PropTypes.number\r\n}\r\n\r\nTopButtonToolbar.defaultProps = {\r\n  itemWidth: 800,\r\n  buttonRatio: 3,\r\n  activateCenterToolbarOnChange: false\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TopButtonToolBar from './TopButtonToolbar'\nimport RecommendationsManager from '../state/RecommendationsManager';\nimport CommonActionsHelper from \"./CommonActionsHelper\";\nimport './TaskNavigator.css';\n\n/**\n * Component that manages the test/task menu bars in the header area.\n */\nexport default class TaskNavigator extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recommendations: []\n    }\n\n  }\n\n  // public API -----------------------------------------------------------------------------\n\n  /**\n   * Set the currently recommended test/task combination.\n   * \n   * The method expects an array of objects. Each object must specify a testName and a taskName.\n   */\n  highlightRecommendations = (recommendations) => {\n    if (recommendations === undefined) {\n      console.error(\"Invalid recommendations in highlight call ignored!\");\n    }\n    const verifiedRecommendations = recommendations === undefined ? [] : recommendations;\n    this.setState(previousState => ({\n      recommendations: verifiedRecommendations\n    }));\n  }\n\n\n  // private stuff -----------------------------------------------------------------------------\n\n  /**\n   * Build the CCS style for all buttons that we display in our menu bars.\n   * \n   * We support two decorations: \n   *  - active marks the currently active test/task.\n   *  - recommended marks the tests currently recommended by the some adaptation logic. \n   */\n  static buildButtonStyle(buttonHeight, isActive, isRecommended) {\n    const style = {\n      height: buttonHeight\n    };\n\n    if (isActive) {\n      // compute growth of button based on the padding value\n      const growth = 1 + ((TopButtonToolBar.getButtonPadding() * 2) / buttonHeight) // padding/height\n      style.transform = `scale(${growth})`;\n    }\n    if (isRecommended) {\n      // TODO: move this to CSS class? \n      style.backgroundColor = RecommendationsManager.getRecommendationColor();\n    }\n    return style;\n  }\n\n  static buildButtonClassName(isActive, isRecommended) {\n    let className = \"\";\n    if (isActive) {\n      className += \"active\";\n    }\n\n    if (isRecommended) {\n      className += \" recommended\";\n    }\n\n    return className\n  }\n\n  /**\n   * Find the index for the test specified by the test name. \n   */\n  static findTestIndexForName(tests, testName) {\n    const testIndexForName = tests.findIndex((value, index, theArray) => value.name === testName);\n    if (testIndexForName === undefined) {\n      console.error(`Test navigator could not find test with name ${testName}`);\n      return undefined;\n    }\n    return testIndexForName;\n  }\n\n\n  /**\n   * Find the test configuration for the test specified by the test name. \n   */\n  static findTestForName(tests, testName) {\n    const testForName = tests.find((value, index, theArray) => value.name === testName);\n    if (testForName === undefined) {\n      console.error(`Test navigator could not find test with name ${testName}`);\n      return undefined;\n    }\n    return testForName;\n  }\n\n  /**\n   * Find the the first task in the given test. \n   * \n   * The method returns an object describing the task with two attributes:\n   *  - task\n   *  - item\n   */\n  static findFirstTaskInTest(test) {\n    if (test === undefined || test.taskCourse[0] === undefined) {\n      return undefined;\n    }\n    return test.taskCourse[0];\n  }\n\n  /**\n   * Find the 'default' task in the test specified by the test name.\n   *\n   * The method returns an object describing the task with two attributes:\n   *  - task\n   *  - item\n   */\n  static findDefaultTaskForTest(tests, testName) {\n    const test = TaskNavigator.findTestForName(tests, testName);\n    return TaskNavigator.findFirstTaskInTest(test)\n  }\n\n  /**\n   * Find the first task with matching task name in the test specified by the test name.\n   *\n   * The method returns an object describing the task with two attributes:\n   *  - task\n   *  - item\n   */\n  static findFirstTaskWithNameForTest(tests, testName, taskName) {\n    const targetTest = TaskNavigator.findTestForName(tests, testName);\n    if (targetTest === undefined) {\n      return undefined;\n    }\n    return targetTest.taskCourse.find((taskEntry, index, theArray) => taskEntry.task === taskName);\n  }\n\n\n  /**\n   * Render a single button in the test menu bar.\n   */\n  buildTestButton = (testName) => {\n    const { recommendations } = this.state;\n    const matchingRecommendation = RecommendationsManager.findFirstRecommendationForTest(recommendations, testName);\n    const targetTaskInfo = this.selectDefaultTaskForTest(testName, matchingRecommendation);\n    const { runtime, testButtonHeight, currentTest } = this.props;\n\n    // Do nothing on button click if the test does not exist or has no tasks assigned:\n    const buttonClickHandler = (targetTaskInfo === undefined\n      ? (event) => {\n        console.info(`Ignored navigation request to test named ${testName} since the test has no tasks assigned.`)\n      }\n      : (event) => {\n        TaskNavigator.traceNavigation(true, testName, event, runtime);\n        TaskNavigator.navigateToTest(testName, targetTaskInfo.item, targetTaskInfo.task, runtime);\n      });\n\n    return (\n      <button\n        type=\"button\"\n        key={testName}\n        onClick={buttonClickHandler}\n        title={testName}\n        style={TaskNavigator.buildButtonStyle(testButtonHeight, testName === currentTest, matchingRecommendation !== undefined)}\n        className={TaskNavigator.buildButtonClassName(testName === currentTest, matchingRecommendation !== undefined)}\n      >\n        {testName}\n      </button>\n    );\n  }\n\n  selectDefaultTaskForTest = (testName, matchingRecommendation) => {\n    const { runtime, tests } = this.props;\n    if (matchingRecommendation !== undefined && matchingRecommendation.taskName !== undefined) {\n      const taskEntry = TaskNavigator.findFirstTaskWithNameForTest(tests, testName, matchingRecommendation.taskName);\n      if (taskEntry !== undefined) {\n        return {\n          item: taskEntry.item,\n          task: taskEntry.task\n        };\n      }\n    }\n\n    const testState = runtime.taskNavigatorStateManager.getTestState(testName);\n    if (testState !== undefined) {\n      return {\n        item: testState.itemName,\n        task: testState.taskName\n      };\n    }\n\n    const defaultTask = TaskNavigator.findDefaultTaskForTest(tests, testName);\n    if (defaultTask !== undefined) {\n      return {\n        item: defaultTask.item,\n        task: defaultTask.task\n      };\n    }\n\n    return undefined;\n  }\n\n  static navigateToTest(testName, itemName, taskName, runtime) {\n    runtime.taskManager.switchTaskInterTest(testName, itemName, taskName);\n  }\n\n\n  /**\n   * Render the test menu bar.\n   */\n  buildTestNavigation = () => {\n    const { courses } = this.props;\n    return courses.map(testName => this.buildTestButton(testName));\n  }\n\n  /**\n   * Render a single button in the task menu bar.\n   */\n  buildTaskButton = (testName, itemName, taskName) => {\n\n    const { recommendations } = this.state;\n    const { runtime, taskButtonHeight, currentItem, currentTask } = this.props;\n    const matchingRecommendation = RecommendationsManager.findFirstRecommendationForTask(recommendations, testName, taskName);\n\n    // Do nothing on button click if task entry is invalid:\n    const buttonClickHandler = (taskName === undefined\n      ? (event) => { }\n      : (event) => {\n        TaskNavigator.traceNavigation(false, taskName, event, runtime);\n        TaskNavigator.navigateToTask(taskName, itemName, runtime);\n        runtime.recommendationsManager.processTaskSelected(testName, itemName, taskName);\n      });\n\n    return (\n      <button\n        type=\"button\"\n        key={`${testName}.${itemName}.${taskName}`}\n        onClick={buttonClickHandler}\n        title={taskName}\n        style={TaskNavigator.buildButtonStyle(taskButtonHeight,\n          taskName === currentTask && itemName === currentItem, matchingRecommendation !== undefined)}\n        className={TaskNavigator.buildButtonClassName(taskName === currentTask && itemName === currentItem, matchingRecommendation !== undefined)}\n      >\n        {taskName}\n      </button>\n    );\n\n  }\n\n  buildTopLayerStyle = () => {\n    const { runtime } = this.props;\n\n    return {\n      width: runtime.taskManager.getTopLevelConfiguration().itemWidth\n    }\n  }\n\n  assignRatioToButton = buttonRatio => ((button) => {\n    const width = buttonRatio * button.props.style.height;\n\n    button.props.style.width = width;\n    button.props.style.minWidth = width;\n\n    return button;\n  });\n\n  /**\n   * Trace the navigation action in the log.\n   * \n   * @param {*} isTest Is this a test navigation? If false we assume a task navigation.\n   * @param {*} navigationTarget The test/task we navigate to.\n   * @param {*} browserEvent The event that triggered the button's action.\n   * @param {*} runtime The common runtime structure.\n   */\n  static traceNavigation(isTest, navigationTarget, browserEvent, runtime) {\n    const traceDetails = {\n      navigationType: (isTest ? 'test' : 'task'),\n      navigationTarget\n    };\n    CommonActionsHelper.addMouseEventDetails(browserEvent, traceDetails);\n\n    runtime.traceLogBuffer.reportEvent('NavigationButton', new Date(), traceDetails);\n  }\n\n  /**\n   * Render the task menu bar.\n   */\n  buildTaskNavigation = () => {\n    const { tests, currentTest } = this.props;\n    const activeTest = TaskNavigator.findTestForName(tests, currentTest);\n    if (activeTest === undefined || activeTest.taskCourse === undefined) {\n      return <div>--- Test invalid, no tasks found ---</div>\n    }\n\n    return activeTest.taskCourse.map(taskEntry => this.buildTaskButton(currentTest, taskEntry.item, taskEntry.task));\n  }\n\n  static navigateToTask(taskName, itemName, runtime) {\n    runtime.taskManager.switchTaskIntraTest(itemName, taskName);\n  }\n\n  /*\n  * computes the total height of the task navigator\n  */\n  static getTaskNavigatorHeight = (testButtonHeight, taskButtonHeight) => {\n    const testNavHeight = TopButtonToolBar.getCarouselHeight(testButtonHeight);\n    const taskNavHeight = TopButtonToolBar.getCarouselHeight(taskButtonHeight);\n    const negateMargin = TopButtonToolBar.getCarouselMarginBottom();\n\n    return testNavHeight + taskNavHeight - negateMargin;\n  }\n\n  render() {\n    const { runtime, testButtonHeight } = this.props;\n    const { itemWidth } = runtime.taskManager.getTopLevelConfiguration();\n    const buttonRatio = 2;\n\n    return (\n      <div className=\"task-navigator\" style={this.buildTopLayerStyle()}>\n        <TopButtonToolBar\n          className=\"test-navigation\"\n          buttons={this.buildTestNavigation()}\n          itemWidth={itemWidth}\n          buttonHeight={testButtonHeight}\n          buttonRatio={buttonRatio}\n          activateCenterToolbarOnChange={false}\n        >\n          {/* activateCenterToolbarOnChange flag when set to false works only with fixed width items */}\n        </TopButtonToolBar>\n\n        <div className=\"task-navigation\">\n          {this.buildTaskNavigation().map(this.assignRatioToButton(buttonRatio))}\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\nTaskNavigator.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  courses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  tests: PropTypes.arrayOf((propValue, key, componentName, location, propFullName) => {\n    const testPropTypes = {\n      name: PropTypes.string.isRequired,\n      taskCourse: PropTypes.arrayOf((propValue2, key2, componentName2, location2, propFullName2) => {\n        const taskEntryPropTypes = {\n          item: PropTypes.string.isRequired,\n          task: PropTypes.string.isRequired,\n        };\n        return PropTypes.checkPropTypes(taskEntryPropTypes, propValue2[key2], propFullName2, componentName2)\n      }).isRequired\n    };\n    return PropTypes.checkPropTypes(testPropTypes, propValue[key], propFullName, componentName)\n  }).isRequired,\n  currentTest: PropTypes.string.isRequired,\n  currentItem: PropTypes.string.isRequired,\n  currentTask: PropTypes.string.isRequired,\n  testButtonHeight: PropTypes.number.isRequired,\n  taskButtonHeight: PropTypes.number.isRequired,\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Notifications from 'react-notify-toast';\nimport CbaTestPresenter from './CbaTestPresenter';\nimport HeaderButtons from './HeaderButtons';\nimport TaskNavigator from './TaskNavigator';\nimport RenderingHelper from \"./RenderingHelper\";\nimport MenuItemTree from './MenuItemTree';\n\n/**\n * Display a running task. \n */\nexport default class LoggedInView extends Component {\n\n  constructor(props) {\n    super(props);\n    this.testPresenter = React.createRef();\n    this.contextMenu = React.createRef();\n\n    const { runtime } = this.props;\n    runtime.taskManager.setTopLevelPageChangeHandler(this.handleTopLevelPageChange);\n  }\n\n  componentDidMount() {\n    // activate the automtaic send trace log mechanism while mounted\n    const { runtime } = this.props;\n    runtime.traceLogUploader.startAutomaticTransmissions();\n    runtime.contextMenu = this.contextMenu.current;\n\n    // The reactClientLoaded method exists in the Chromium environment of the ItemBuilder only. \n    //  -> Just ignore if it is missing.\n    if (window.reactClientLoaded) {\n      try {\n        window.reactClientLoaded();\n      } catch (err) {\n        console.log(err.message)\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    // stop automatic trace log transmissions (and run a final transmission immediately)\n    const { runtime } = this.props;\n    runtime.traceLogUploader.stopAutomaticTransmissions();\n  }\n\n\n  handleTopLevelPageChange = () => {\n    if (this.testPresenter.current) {\n      RenderingHelper.triggerRendering(this.testPresenter.current);\n    }\n  }\n\n  setTaskNavigator = (navigator) => {\n    const { runtime } = this.props;\n    runtime.recommendationsManager.setTaskNavigator(navigator);\n  }\n\n  buildTaskNavigator = (testButtonHeight, taskButtonHeight) => {\n    if (!this.shouldBuildNavigator()) {\n      return undefined;\n    }\n\n    const { courses, tests, runtime } = this.props;\n    const taskInfo = runtime.taskManager.getCurrentTestTaskItemNames();\n    const { test, item, task } = taskInfo;\n    return (\n      <TaskNavigator\n        courses={courses}\n        tests={tests}\n        currentTest={test}\n        currentItem={item}\n        currentTask={task}\n        testButtonHeight={testButtonHeight}\n        taskButtonHeight={taskButtonHeight}\n        ref={this.setTaskNavigator}\n        runtime={runtime}\n      />\n    );\n  }\n\n  shouldBuildNavigator = () => {\n    const { settings } = this.props;\n    return !!settings && settings.ShowTaskNavigationBars;\n  }\n\n\n  render() {\n    // TODO: if buttons are not given by settings and are static for test and task. I would remove them from the App level.\n    const testButtonHeight = 70;\n    const taskButtonHeight = 50;\n\n    const { runtime, settings, headerButtons, scaleValue } = this.props;\n    const taskId = runtime.taskManager.getCurrentStatePathRoot();\n    const style = {\n      transform: `scale(${scaleValue})`\n    }\n\n    return (\n      <div className=\"appDiv\" style={style}>\n        <div className=\"topToolBarContainer\">\n          <HeaderButtons runtime={runtime} config={headerButtons} />\n          {this.buildTaskNavigator(testButtonHeight, taskButtonHeight)}\n        </div>\n        <Notifications />\n        <CbaTestPresenter taskId={taskId} ref={this.testPresenter} runtime={runtime} settings={settings} />\n        <MenuItemTree ref={this.contextMenu} runtime={runtime} />\n      </div>\n    );\n  }\n\n}\n\n\nLoggedInView.propTypes = {\n  courses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  tests: PropTypes.arrayOf((propValue, key, componentName, location, propFullName) => {\n    const testPropTypes = {\n      name: PropTypes.string.isRequired,\n      taskCourse: PropTypes.arrayOf((propValue2, key2, componentName2, location2, propFullName2) => {\n        const taskEntryPropTypes = {\n          item: PropTypes.string.isRequired,\n          task: PropTypes.string.isRequired,\n        };\n        return PropTypes.checkPropTypes(taskEntryPropTypes, propValue2[key2], propFullName2, componentName2)\n      }).isRequired\n    };\n    return PropTypes.checkPropTypes(testPropTypes, propValue[key], propFullName, componentName)\n  }).isRequired,\n  settings: PropTypes.object.isRequired,\n  headerButtons: PropTypes.array.isRequired,\n  runtime: PropTypes.object.isRequired,\n  scaleValue: PropTypes.number.isRequired\n}\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Login extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.inputRef = React.createRef();\r\n\r\n    this.state = {\r\n      loggedUserName: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputRef.current.focus();\r\n  }\r\n\r\n  switchToLoginState = () => {\r\n    const { handleLogin } = this.props;\r\n    const { loggedUserName } = this.state;\r\n    handleLogin(loggedUserName);\r\n  }\r\n\r\n  handleLoginClick = (evt) => {\r\n    this.switchToLoginState();\r\n  }\r\n\r\n  updateInputLoginValue = (evt) => {\r\n    this.setState({\r\n      loggedUserName: evt.target.value\r\n    });\r\n  }\r\n\r\n  handleKeyPress = (evt) => {\r\n    if (evt.key === 'Enter') {\r\n      this.switchToLoginState();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { loggedUserName } = this.state;\r\n    const { titleLabel, fieldLabel, buttonLabel, disabled } = this.props;\r\n\r\n    const usernameInputName = 'usernameInputName';\r\n    return (\r\n      <div className=\"appDiv\">\r\n        <div className=\"login-container\">\r\n          <div className=\"login-head\">\r\n            <h3>{titleLabel}</h3>\r\n          </div>\r\n          <div className=\"login-body\">\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor={usernameInputName}>\r\n                <b>{fieldLabel}</b>\r\n                <input\r\n                  ref={this.inputRef}\r\n                  type=\"text\"\r\n                  placeholder=\"\"\r\n                  name={usernameInputName}\r\n                  value={loggedUserName}\r\n                  onChange={evt => this.updateInputLoginValue(evt)}\r\n                  onKeyPress={this.handleKeyPress}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"btn-container\">\r\n              <button className=\"btn blue-button\" type=\"button\" onClick={this.handleLoginClick} disabled={disabled}>{`${disabled ? '...' : buttonLabel}`}</button>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nLogin.propTypes = {\r\n  titleLabel: PropTypes.string.isRequired,\r\n  fieldLabel: PropTypes.string.isRequired,\r\n  buttonLabel: PropTypes.string.isRequired,\r\n  handleLogin: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool.isRequired\r\n}\r\n","import moment from 'moment';\r\nimport ifvisible from 'ifvisible';\r\n\r\nconst TYPES = {\r\n  pageBlur: 'PAGE_HIDDEN',\r\n  pageFocus: 'PAGE_SHOWN',\r\n  enterFullscreen: 'ENTER_FULLSCREEN',\r\n  exitFullscreen: 'EXIT_FULLSCREEN'\r\n};\r\n\r\n/**\r\n * Observe events related to item visibility.\r\n * \r\n * We tried to detect full screen switches via the resize events initially \r\n * and might follow this path again in the future. Therefore this class also handles \r\n * creation of full screen switch trace log entries. \r\n */\r\nexport default class PageEventsObserver {\r\n\r\n  /**\r\n   * constructor initialises the lastVisibleTime and lastFullScreenTime variables to the current time.\r\n   * \r\n   * @param {*} runtime Runtime needed to extract the reportEvent Function from the traceLogBuffer\r\n   */\r\n  constructor(runtime) {\r\n    this.lastVisibilityTime = moment();\r\n    this.lastFullScreenTime = moment();\r\n    this.reportEvent = runtime.traceLogBuffer.reportEvent;\r\n  }\r\n\r\n  // private\r\n  lastVisibilityTime = null;\r\n\r\n  lastFullScreenTime = null;\r\n\r\n  isFullScreen = null;\r\n\r\n  handleVisibility = type => () => {\r\n    const newVisibilitytime = this.getMoment();\r\n    const timeSpent = this.computeTimeDifference(newVisibilitytime, this.lastVisibilityTime);\r\n\r\n    this.traceAction(type, timeSpent);\r\n    this.lastVisibilityTime = newVisibilitytime;\r\n  }\r\n\r\n\r\n  traceAction = (type, duration) => {\r\n    switch (type) {\r\n      case TYPES.pageBlur: this.reportEvent(\"ApplicationVisibility\", new Date(), this.buildTraceDetails('pageHidden', duration)); break;\r\n      case TYPES.pageFocus: this.reportEvent(\"ApplicationVisibility\", new Date(), this.buildTraceDetails('pageShown', duration)); break;\r\n      case TYPES.enterFullscreen: this.reportEvent(\"ApplicationFullScreen\", new Date(), this.buildTraceDetails('enterFullscreen', duration)); break;\r\n      case TYPES.exitFullscreen: this.reportEvent(\"ApplicationFullScreen\", new Date(), this.buildTraceDetails('exitFullscreen', duration)); break;\r\n      default: console.warn(\"Wrong type provided in PageEventsObserverssss\");\r\n    }\r\n  }\r\n\r\n  computeTimeDifference = (time1, time2) => {\r\n    const duration = moment.duration(time1.diff(time2));\r\n    return duration.asSeconds();\r\n  }\r\n\r\n  buildTraceDetails = (type, duration) => ({\r\n    type,\r\n    alternateStateDuration: duration\r\n  })\r\n\r\n  // public API\r\n\r\n  /**\r\n   * Function initialises the visibility observers\r\n   */\r\n  initObserver() {\r\n    ifvisible.on('blur', this.handleVisibility(TYPES.pageBlur));\r\n    ifvisible.on('focus', this.handleVisibility(TYPES.pageFocus));\r\n  }\r\n\r\n  /**\r\n   * Create a full screen switch trace log entry if necessary.\r\n   * \r\n   * The method manages the 'duration' attribute in the trace log entry.\r\n   */\r\n  handleFullScreen = (isFullscreenNow) => {\r\n    const newFullScreenTime = this.getMoment();\r\n    const timeSpent = this.computeTimeDifference(newFullScreenTime, this.lastFullScreenTime);\r\n\r\n    if (this.isFullScreen !== isFullscreenNow) {\r\n      const type = isFullscreenNow ? TYPES.enterFullscreen : TYPES.exitFullscreen;\r\n\r\n      this.traceAction(type, timeSpent)\r\n\r\n      this.isFullScreen = isFullscreenNow;\r\n      this.lastFullScreenTime = newFullScreenTime;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * hook in method for testing purposes\r\n   */\r\n  getMoment = () => moment();\r\n\r\n}\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\nimport LoggedInView from '../components/LoggedInView';\nimport Login from './Login';\nimport PageEventsObserver from '../components/PageEventsObserver';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Make ourselves available via the runtime context:\n    const { runtime, waitingMessageTexts } = this.props;\n    this.runtime = runtime;\n    runtime.app = this;\n\n    this.waitingMessageTexts = waitingMessageTexts;\n    this.scalingConfig = {\n      alignmentHorizontal: \"left\",\n      alignmentVertical: \"top\",\n      scalingMode: \"no-scaling\"\n    };\n\n    // Possible display modes are: 'waiting', 'showLogin', 'showTask'.\n    this.state = {\n      displayMode: 'waiting',\n      scaleValue: 1\n    }\n\n    // init observer that traces page visibility state\n    runtime.pageEventsObserver = new PageEventsObserver(runtime);\n    runtime.pageEventsObserver.initObserver();\n\n  }\n\n  /**\n   * Recalculate our scaling factor and trigger a rendering\n   * by putting it into the component state.\n   * \n   * The method does nothing if we don't have a task running currently.\n   */\n  resize = () => {\n    const { displayMode } = this.state;\n    if (displayMode === 'showTask') {\n      const scaleValue = this.computeScalingValue()\n      this.setState(() => (Object.assign({}, {\n        scaleValue\n      })))\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', debounce(this.resize, 200))\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', debounce(this.resize, 200))\n  }\n\n  /**\n   * Set new waiting messages texts.\n   * \n   * @param {*} newValues The new waiting messages 'primary' and 'secondary'.\n   */\n  setWaitingMessageTexts(newValues) {\n    this.waitingMessageTexts = newValues;\n    const { displayMode } = this.state;\n    if (displayMode === 'waiting') {\n      this.showWaiting();\n    }\n  }\n\n  /**\n   * Show the waiting page.\n   * \n   * The method implicitly stops a currently running task in the task manager.\n   */\n  showWaiting = () => {\n    this.runtime.taskManager.stopTask();\n    this.setState(prevState => ({\n      displayMode: 'waiting',\n    }));\n  }\n\n  /**\n   * Show the login dialog.\n   * \n   * @param {String} titleLabel The label to use as title of the login dialog.\n   * @param {String} fieldLabel The label to use for the input field label in the login dialog.\n   * @param {String} buttonLabel The label to use for the button label in the login dialog.\n   * @param {function} loginDialogClosedHandler A callback that accepts the field value obtained by the login dialog.\n   */\n  showLogin = (titleLabel, fieldLabel, buttonLabel, loginDialogClosedHandler) => {\n    this.setState(prevState => ({\n      displayMode: 'showLogin',\n      loginTitleLabel: titleLabel,\n      loginFieldLabel: fieldLabel,\n      loginButtonLabel: buttonLabel,\n      loginDialogClosedHandler,\n      loginDialogDisabled: false\n    }));\n  }\n\n  /**\n   * Show a running task.\n   */\n  showTask = (testName, itemName, taskName, settings, headerButtons, courseForNavigator, testsForNavigator) => {\n    const taskId = this.runtime.taskManager.switchTask(testName, itemName, taskName, false);\n    if (taskId === undefined) {\n      console.info(`Could not switch to task ${testName}/${itemName}/${taskName}.`);\n      return;\n    }\n    const scaleValue = this.computeScalingValue(this.scalingConfig.scalingMode);\n\n    App.dumpTasksViewConfigurationToTraceLog(courseForNavigator, testsForNavigator, settings, headerButtons, this.runtime.traceLogBuffer);\n    this.setState(prevState => ({\n      displayMode: 'showTask',\n      settings,\n      headerButtons,\n      courseForNavigator,\n      testsForNavigator,\n      scaleValue\n    }));\n  }\n\n  /**\n   * Show a replay of a task.\n   */\n  showReplay = (testName, itemName, taskName, settings, headerButtons, courseForNavigator, testsForNavigator) => {\n    const taskId = this.runtime.taskManager.switchTask(testName, itemName, taskName, true);\n    if (taskId === undefined) {\n      console.info(`Could not switch replay to task ${testName}/${itemName}/${taskName}.`);\n      return;\n    }\n    const scaleValue = this.computeScalingValue(this.scalingConfig.scalingMode);\n\n    App.dumpTasksViewConfigurationToTraceLog(courseForNavigator, testsForNavigator, settings, headerButtons, this.runtime.traceLogBuffer);\n    this.setState(prevState => ({\n      displayMode: 'showTask',\n      settings,\n      headerButtons,\n      courseForNavigator,\n      testsForNavigator,\n      scaleValue\n    }));\n  }\n\n  /**\n   * Set the scaling configuration that we will use to scale the display in task display mode.\n   * \n   * The setting is not active for the other display modes.\n   * The setting is not applied immediately to an already running task display mode. Call the resize method to trigger \n   * the scaling update on a running task.\n   */\n  setScalingConfig = (scalingConfig) => {\n    this.scalingConfig = scalingConfig;\n  }\n\n  /**\n   * Calculate the current scaling factor. \n   * \n   * The scaling factor depends \n   *  - on the current scaling configuration and \n   *  - the currently available display size and\n   *  - the required display size of the currently running item. \n   * \n   * Since this method needs an item in place, you should not call it without a task running currently\n   * in the task manager.\n   */\n  computeScalingValue = () => {\n    const { runtime } = this.props;\n    let value;\n\n    const horizontalScale = window.innerWidth / runtime.taskManager.getTopLevelConfiguration().itemWidth;\n    const verticalScale = window.innerHeight / runtime.taskManager.getTopLevelConfiguration().itemHeight;\n\n    switch (this.scalingConfig.scalingMode) {\n      case \"no-scaling\": value = 1; break;\n      case \"scale-up\":\n        if (horizontalScale > 1 && verticalScale > 1) {\n          value = horizontalScale < verticalScale ? horizontalScale : verticalScale\n        } else {\n          value = 1;\n        }\n        break;\n      case \"scale-down\":\n        if (horizontalScale < 1 || verticalScale < 1) {\n          value = horizontalScale < verticalScale ? horizontalScale : verticalScale;\n        } else {\n          value = 1;\n        }\n        break;\n      case \"scale-up-down\":\n        value = horizontalScale < verticalScale ? horizontalScale : verticalScale;\n        break;\n      default: value = 1;\n    }\n\n    return value;\n  }\n\n  getScalingAlignmentCssClass = () => {\n    const { alignmentHorizontal, alignmentVertical } = this.scalingConfig;\n\n    let cssClass = \"\";\n\n    switch (alignmentHorizontal) {\n      case \"left\": cssClass += \"left\"; break;\n      case \"center\": cssClass += \"horizontal-center\"; break;\n      case \"right\": cssClass += \"right\"; break;\n      default: cssClass += \"left\";\n    }\n\n    cssClass += \" \";\n\n    switch (alignmentVertical) {\n      case \"top\": cssClass += \"top\"; break;\n      case \"center\": cssClass += \"vertical-center\"; break;\n      case \"bottom\": cssClass += \"bottom\"; break;\n      default: cssClass += \"top\";\n    }\n\n    return cssClass;\n  }\n\n\n  /** \n   * The login screen is filled in -> Disable login screen and run callback with obtained field value.\n   */\n  handleLoginClick = (fieldValue) => {\n    const { loginDialogClosedHandler } = this.state;\n    this.setState(prevState => ({\n      loginDialogDisabled: true\n    }))\n    loginDialogClosedHandler(fieldValue);\n  }\n\n  /**\n   * Dump the configuration of the tasks view to the trace log.\n   * \n   * @param {*} courseForNavigator The list of tests in the navigator menu.\n   * @param {*} testsForNavigator The test configurations used by the navigator menu.\n   * @param {*} settings The general settings used.\n   * @param {*} headerButtons The configurable header buttons used.\n   * @param {*} traceLogBuffer The trace log buffer to dump to.\n   */\n  static dumpTasksViewConfigurationToTraceLog(courseForNavigator, testsForNavigator, settings, headerButtons, traceLogBuffer) {\n    traceLogBuffer.reportEvent('TasksViewVisible', new Date(), {\n      settings,\n      headerButtons,\n      upperHeaderMenu: courseForNavigator,\n      lowerHeaderMenu: testsForNavigator,\n    })\n  }\n\n  renderWaiting = () => {\n    // configNok -> wait for the configuration setting event to arrive:\n    const primary = this.waitingMessageTexts === undefined ? \"\" : this.waitingMessageTexts.primary\n    const secondary = this.waitingMessageTexts === undefined ? \"\" : this.waitingMessageTexts.secondary\n\n    return (\n      <div className=\"appDivContainer top left\">\n        <div className=\"appDiv\">\n          {primary}\n          <br />\n          <br />\n          {secondary}\n        </div>\n      </div>\n    )\n  };\n\n  renderLogin = () => {\n    const { loginTitleLabel, loginFieldLabel, loginButtonLabel, loginDialogDisabled } = this.state;\n    return (\n      <div className=\"appDivContainer horizontal-center vertical-center\">\n        <Login\n          handleLogin={this.handleLoginClick}\n          titleLabel={loginTitleLabel}\n          fieldLabel={loginFieldLabel}\n          buttonLabel={loginButtonLabel}\n          disabled={loginDialogDisabled}\n        />\n      </div>\n    )\n  };\n\n  renderTask = () => {\n    const { runtime } = this.props;\n\n    const { settings, headerButtons, courseForNavigator, testsForNavigator, scaleValue } = this.state;\n\n    return (\n      <div className={`appDivContainer ${this.getScalingAlignmentCssClass()} ${scaleValue === 1 ? 'overflow-auto' : ''}`}>\n        <LoggedInView\n          courses={courseForNavigator}\n          tests={testsForNavigator}\n          settings={settings}\n          headerButtons={headerButtons}\n          runtime={runtime}\n          scaleValue={scaleValue}\n        />\n      </div>\n    );\n  };\n\n  render() {\n    const { displayMode } = this.state;\n\n    switch (displayMode) {\n      case 'waiting':\n        return this.renderWaiting();\n      case 'showLogin':\n        return this.renderLogin();\n      case 'showTask':\n        return this.renderTask();\n      default:\n        return this.renderWaiting();\n    }\n  }\n\n}\n\nApp.propTypes = {\n  runtime: PropTypes.object.isRequired,\n  waitingMessageTexts: PropTypes.object.isRequired\n}\n","import IndexPathHelper from \"./IndexPathHelper\";\r\nimport StateAttributeAccess from \"./StateAttributeAccess\";\r\nimport CommonConfigHelper from '../config/CommonConfigHelper';\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\nimport PathTranslationHelper from \"./PathTranslationHelper\";\r\nimport SelectGroupHelper from '../components/SelectGroupHelper';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\nimport CbaRichTextField from '../components/CbaRichTextField/CbaRichTextField';\r\nimport CbaMedia from '../components/media/CbaMedia';\r\nimport CbaTable from '../components/table/CbaTable';\r\nimport InputComponent from \"../components/InputComponent\";\r\nimport CbaTree from \"../components/CbaTree/CbaTree\";\r\nimport CbaExternalPageFrame from \"../components/CbaExternalPageFrame\";\r\nimport CbaSimpleTextField from \"../components/CbaSimpleTextField\";\r\nimport PropagationHelper from \"../eval/PropagationHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\n/**\r\n * Manage all component instance specific state that is relevant for rendering and scoring evaluation.\r\n * \r\n * The manager uses the component instance's index path ID as key to store and retrieve a component's state.\r\n * It provides convenience methods to store and retrieve state by the user defined ID path of a component instance.\r\n * \r\n * The manager implicitly creates an initial state if asked for a key without an already registered state.\r\n * It fills the state with a standard set of attributes (based on the configuration info for the component\r\n * in the page definition). For some component types it also asks the component class to add component specific\r\n * attributes. \r\n * \r\n * Usually a component's state is cloneable by JSON.parse/stringify and the component state manager \r\n * stores such a clone of the given state. \r\n * For some components their state cannot be cloned this way (e.g. due to structures of external libraries). \r\n * Such state is marked by the flag \"deep copy\" set to \"false\" and the component state manager \r\n * stores a reference to the component instance's state structure instead of building a clone.\r\n * \r\n * Some features require a serializable representation of the component instance state (e.g. preloading the \r\n * runtime with a snapshot of another assessment run or doing a replay based on a trace of state changes). \r\n * We call such a serializable representation a \"state snapshot\". \r\n * For clonable state the manager uses the clone itself as serializable representation. For non-cloneable state \r\n * the manager calls component specific methods \"toSnapshot\"/\"fromSnapshot\" to \r\n * switch between the internally stored state and the serializable state representation.\r\n * \r\n * A component instance's state might be marked as \"volatile\". Before creating the snapshot representation \r\n * for such a state the manager calls the component instance's method \"updateStateInComponentStateManager\"\r\n * (if the instance is currently mounted).\r\n * \r\n */\r\nexport default class ComponentStateManager {\r\n\r\n  constructor() {\r\n    this.stateMap = {};\r\n  }\r\n\r\n  /**\r\n   * Clear all content in the state manager.\r\n   */\r\n  clear = () => {\r\n    this.stateMap = {};\r\n  }\r\n\r\n  /**\r\n   * Get a snapshot representation of the full state. \r\n   * \r\n   * The result differs from our internal state representation: \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse \r\n   * we use a specific serializable representation.\r\n   * To obtain the specific serializable representation we ask the display component in charge.\r\n   * \r\n   * @param {ComponentDirectory} componentDirectory The directory of all currently visible component instances.\r\n   */\r\n  getStateSnapshot = componentDirectory => this.getSnapshot(entry => true, componentDirectory);\r\n\r\n\r\n  /**\r\n   * Get a snapshot representation of all state belonging to the specified task. \r\n   * \r\n   * The result differs from our internal state representation: \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse we use a specific serializable representation.\r\n   * To obtain the specific serializable representation we ask the display component in charge.\r\n   * \r\n   * @param {ComponentDirectory} componentDirectory The directory of all currently visible component instances.\r\n   */\r\n  getTaskSnapshot = (test, item, task, componentDirectory) => this.getSnapshot(entry => (IndexPathHelper.getRootFromPath(entry[0]) === IndexPathHelper.buildPathRoot(test, item, task)), componentDirectory);\r\n\r\n\r\n  /**\r\n   * Preload the given snapshot as our state memory. \r\n   * \r\n   * The expected snapshot structure differs from our internal state representation:  \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse we expect a specific serializable representation.\r\n   * To obtain the internal representation from the serializable representation we ask the display component in charge.\r\n   */\r\n  preloadWithStateSnapshot = (snapshot) => {\r\n    this.stateMap = ComponentStateManager.fromSnapshotRepresentation(Object.entries(snapshot));\r\n  }\r\n\r\n\r\n  /**\r\n   * Register the given state representation (coming from a snapshot) for the given pathId.\r\n   * \r\n   * The expected snapshot structure differs from our internal state representation: \r\n   * For display components that deposit state that cannot be cloned by JSON.stringify/parse we expect a specific serializable representation.\r\n   * To obtain the internal representation from the serializable representation we ask the display component in charge.\r\n   */\r\n  registerStateChangeFromSnapshot = (pathId, state) => {\r\n    this.stateMap[pathId] = ComponentStateManager.fromSnapshotRepresentationForSingleEntry(pathId, state);\r\n  }\r\n\r\n  /**\r\n   * Register the given state for the given pathId.\r\n   * \r\n   * The method stores a 'deep copy' of the state depending on the deepCopy flag in the state. \r\n   */\r\n  registerStateByPathId = (pathId, state, runtime) => {\r\n    this.stateMap[pathId] = ComponentStateManager.doDeepCopyIfRequired(state);\r\n    TraceLogHelper.dumpStateChangeToTrace('ComponentState', {\r\n      pathId, state: ComponentStateManager.toSnapshotRepresentationForSingleEntry(pathId, this.stateMap[pathId])\r\n    }, runtime.traceLogBuffer)\r\n  }\r\n\r\n  /**\r\n   * Find the state for the given path id. \r\n   * The method implicitly tries to create an initial state if there is no\r\n   * state registered yet.\r\n   * This will fail if the task loaded in the task/page manager in the runtime \r\n   * does not match the task of the given path id. \r\n   */\r\n  findOrBuildStateForPathId = (pathId, runtime) => this.findOrBuildStateForPathIdInternal(pathId, runtime);\r\n\r\n\r\n  /**\r\n   * Register the given state with a pathId corresponding to the given userDefPath. \r\n   * The method will build the pathId using the path root currently loaded in the given runtime.\r\n   */\r\n  registerStateByUserDefPath = (userDefPath, state, runtime) => {\r\n    this.registerStateByPathId(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime), state, runtime);\r\n  }\r\n\r\n\r\n  /**\r\n   * Find the state for the given userDefPath. \r\n   * The method implicitly tries to create an initial state if there is no\r\n   * state registered yet. The method will implicitly register the created \r\n   * initial state with a pathId using the path root currently loaded\r\n   * in the given runtime.\r\n   */\r\n  findOrBuildStateByUserDefPath = (userDefPath, runtime) => this.findOrBuildStateForPathId(PathTranslationHelper.getIndexPathForUserDefPath(userDefPath, runtime), runtime);\r\n\r\n\r\n  /**\r\n   * Return all already existing index paths that pass the given filter.\r\n   */\r\n  filterExistingPathIds = filterMethod => Object.keys(this.stateMap).filter(key => filterMethod(key));\r\n\r\n\r\n  // private stuff ------------------------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Find the state for the given path id. \r\n   * The method implicitly tries to create an initial state if there is no\r\n   * state registered yet.\r\n   * \r\n   * The method manages the cloning of the state (if cloning is possible).\r\n   * \r\n   * Creation of a new, initial state will fail if the task loaded in the task/page manager in the runtime \r\n   * does not match the task of the given path id. \r\n   * We build the new initial state for a component instance based on the configuration data for \r\n   * the component in the page definition. \r\n   */\r\n  findOrBuildStateForPathIdInternal = (pathId, runtime) => {\r\n    const registered = ComponentStateManager.doDeepCopyIfRequired(this.stateMap[pathId]);\r\n    if (registered !== undefined) return registered;\r\n\r\n    const rootFromPath = IndexPathHelper.getRootFromPath(pathId);\r\n    const rootInRuntime = runtime.taskManager.getCurrentStatePathRoot();\r\n    if (!rootFromPath === rootInRuntime) {\r\n      console.warn(`Cannot create state for ${pathId} since runtime is loaded for ${rootInRuntime}`);\r\n      return undefined;\r\n    }\r\n\r\n    const initialState = ComponentStateManager.buildStateFromConfig(pathId, runtime);\r\n    this.registerStateByPathId(pathId, initialState, runtime);\r\n\r\n    return initialState;\r\n  }\r\n\r\n  // Methods for building new initial state ...............................\r\n\r\n  /**\r\n   * Build a new, initial state for a component instance based on the configuration data for \r\n   * the component in the page definition. \r\n   * \r\n   * We put a standard set of attributes into the new state. \r\n   * For some component types we call the component's class to add specific attributes.\r\n   */\r\n  static buildStateFromConfig(pathId, runtime) {\r\n    const pageSegment = IndexPathHelper.getLastPageSegmentFromPath(pathId);\r\n    if (pageSegment === undefined) {\r\n      console.warn(`Empty page segment chopped off from path id ${pathId}`);\r\n    }\r\n    const { pageConfigurationsManager } = runtime;\r\n    const componentConfiguration = pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (componentConfiguration === undefined) {\r\n      console.error(`Cannot find configuration for path ${pageSegment}`);\r\n      return undefined;\r\n    }\r\n    const { config, type } = componentConfiguration;\r\n    const result = {};\r\n\r\n    // store and return deep copies of state per default (components may change this in their addAttributesToInitialState methods):\r\n    StateAttributeAccess.setDeepCopy(result, true);\r\n    // mark state as 'not volatile' per default (components may change this in their addAttributesToInitialState methods):\r\n    StateAttributeAccess.setVolatile(result, false);\r\n\r\n    StateAttributeAccess.setDisabled(result, CommonConfigHelper.getDisabled(config));\r\n    StateAttributeAccess.setHidden(result, CommonConfigHelper.getHidden(config));\r\n    StateAttributeAccess.setVisited(result, false);\r\n    StateAttributeAccess.setSelected(result, CommonConfigHelper.getSelected(config));\r\n    const positionInConfig = CommonConfigHelper.getPosition(config);\r\n    if (positionInConfig !== undefined) {\r\n      StateAttributeAccess.setPosition(result, {\r\n        x: positionInConfig.x,\r\n        y: positionInConfig.y\r\n      });\r\n    }\r\n    StateAttributeAccess.setDefaultLinkReceiver(result, ComponentStateManager.calculateDefaultLinkReceiver(pathId, pageConfigurationsManager));\r\n    if (config.text !== undefined && config.text.label !== undefined) {\r\n      StateAttributeAccess.setTextValue(result, config.text.label)\r\n    }\r\n    const dragAndDropInConfig = CommonConfigHelper.getDragAndDrop(config);\r\n    StateAttributeAccess.setDragAndDrop(result, {\r\n      isSender: (dragAndDropInConfig !== undefined && dragAndDropInConfig.sender !== undefined),\r\n      isReceiver: (dragAndDropInConfig !== undefined && dragAndDropInConfig.receiver !== undefined)\r\n    });\r\n    PropagationHelper.addPropagationGroupControllerState(result, config);\r\n    SelectGroupHelper.addSelectGroupControllerState(result, type, pathId, config);\r\n    SelectGroupHelper.addSelectGroupMemberInfo(result, type, pathId, runtime);\r\n    switch (type) {\r\n      case \"CbaSingleLineInputField\":\r\n        InputComponent.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaSimpleTextField\":\r\n        CbaSimpleTextField.addAttributesToInitialState(result, config, runtime);\r\n        break;\r\n      case \"CbaPageArea\":\r\n        CbaPageArea.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaRichTextField\":\r\n        CbaRichTextField.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaMedia\":\r\n        CbaMedia.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaTable\":\r\n        CbaTable.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaInputField\":\r\n        InputComponent.addAttributesToInitialState(result, config);\r\n        break;\r\n      case \"CbaTree\":\r\n        CbaTree.addAttributesToInitialState(result, config, pathId, runtime);\r\n        break;\r\n      case \"CbaExternalPageFrame\":\r\n        CbaExternalPageFrame.addAttributesToInitialState(result, config);\r\n        break;\r\n      default:\r\n      // do nothing here\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate the default link receiver for page links that don't explicitly specify \r\n   * a receiver.\r\n   * \r\n   * The method calculates the default receiver as follows:\r\n   * - Starting from the given display component instance we climb up the\r\n   *   tree of embedding CbaPageAreas (i.e. the page segments in the index path).\r\n   * - The first CbaPageArea with its 'catchLinks' configuration option set to true \r\n   *   becomes the default receiver. \r\n   * - If there is not such CbaPageArea, the default receiver is 'undefined'. \r\n   * \r\n   * The method returns 'undefined' if an error occurs. \r\n   * \r\n   * @param {*} path The index path of the display component instance.\r\n   * @param {*} pageConfigurationManager The page configuration manager providing static display component configurations.\r\n   */\r\n  static calculateDefaultLinkReceiver(path, pageConfigurationsManager) {\r\n    // We ignore the last display component instance which can be any type of component, \r\n    // i.e. it might not even have a catch links configuration setting.\r\n    let remainingPath = IndexPathHelper.dropPageSegmentFromPath(path);\r\n\r\n    if (remainingPath !== undefined) {\r\n      let pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n      while (pageSegment !== undefined) {\r\n        const isLinkCatcher = ComponentStateManager.isLinkCatcher(pageSegment, pageConfigurationsManager, path);\r\n        if (isLinkCatcher === undefined) {\r\n          return undefined;\r\n        }\r\n        if (isLinkCatcher) {\r\n          return IndexPathHelper.trimRootAndPageAreaFromPath(remainingPath);\r\n        }\r\n        remainingPath = IndexPathHelper.dropPageSegmentFromPath(remainingPath);\r\n        pageSegment = IndexPathHelper.getLastPageSegmentFromPath(remainingPath);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Does the display component specified by the given index pageSegment catch links? \r\n   * \r\n   * The method returns undefined if the specified component does not have a catch link setting in its static configuration. \r\n   * \r\n   * @param {*} pageSegment The page segment specifying the display component.\r\n   * @param {*} pageConfigurationManager The page configuration manager providing static display component configurations.\r\n   * @param {*} path The full path (used for log messages only).\r\n   */\r\n  static isLinkCatcher(pageSegment, pageConfigurationsManager, path) {\r\n    // The last display component of a page segment that is followed by another page segment\r\n    // has to be a CbaPageArea component (or more specifically: it has to have a 'catchLink' property at least).\r\n    const linkCatcherConfiguration = pageConfigurationsManager.findConfigurationForPageSegment(pageSegment);\r\n    if (linkCatcherConfiguration === undefined) {\r\n      console.error(`Missing page embedding component at end of inner page segment: ${pageSegment} in path ${path}`);\r\n      return undefined;\r\n    }\r\n    const catchLinkSetting = linkCatcherConfiguration.config.catchLinks;\r\n    if (catchLinkSetting === undefined) {\r\n      console.error(`Missing catch link configuration for page embedding component at end of inner page segment: ${pageSegment} in path ${path}`);\r\n      return undefined;\r\n    }\r\n    return catchLinkSetting === true;\r\n  }\r\n\r\n\r\n  // Methods for cloning and serializable representations ...............................\r\n\r\n  /**\r\n   * Return a clone of the given state if the state is marked as cloneable by JSON.stringify/parse.\r\n   * Otherwise return the given state itself.\r\n   */\r\n  static doDeepCopyIfRequired(state) {\r\n    if (state === undefined) return undefined;\r\n\r\n    // set deepCopy per default:\r\n    if (StateAttributeAccess.extractDeepCopy(state) === undefined) {\r\n      StateAttributeAccess.setDeepCopy(state, true);\r\n    }\r\n\r\n    return StateAttributeAccess.extractDeepCopy(state) === false ? state : StateManagerHelper.deepCopy(state);\r\n  }\r\n\r\n  /**\r\n   * Apply updateVolatiles and toSnapshotRepresentation on those entries in our state map that match the given filter.\r\n   */\r\n  getSnapshot(entryFilter, componentDirectory) {\r\n    ComponentStateManager.updateVolatiles(Object.entries(this.stateMap).filter(entryFilter), componentDirectory);\r\n    return ComponentStateManager.toSnapshotRepresentation(Object.entries(this.stateMap).filter(entryFilter));\r\n  }\r\n\r\n  /**\r\n   * Update all state entries marked as 'volatile' by calling the update method on their component instances.\r\n   * \r\n   * The method skips component instances that are not visible currently. \r\n   * \r\n   * @param {*} entries The entries to be updated.\r\n   * @param {ComponentDirectory} componentDirectory The directory of all currently visible component instances.\r\n   */\r\n  static updateVolatiles(entries, componentDirectory) {\r\n    entries.forEach((entry) => {\r\n      const [path, state] = entry;\r\n      if (StateAttributeAccess.extractVolatile(state)) {\r\n        const componentInstance = componentDirectory.findComponent(path);\r\n        if (componentInstance !== undefined) {\r\n          // Components that set the 'volatile' flag to true must implement a 'updateStateInComponentStateManager method:\r\n          componentInstance.updateStateInComponentStateManager();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a snapshot representation for the given list of state entries.\r\n   * \r\n   * The snapshot representation is cloneable.\r\n   * \r\n   * @param {*} entries The entries to be transformed\r\n   */\r\n  static toSnapshotRepresentation(entries) {\r\n    const result = {};\r\n    entries.forEach((entry) => {\r\n      const [path, state] = entry;\r\n      result[path] = this.toSnapshotRepresentationForSingleEntry(path, state);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create a snapshot state representation for the given internal component state representation\r\n   * for the given path.\r\n   * \r\n   * @param {*} state The component state to be transformed.\r\n   */\r\n  static toSnapshotRepresentationForSingleEntry(path, state) {\r\n    if (StateAttributeAccess.extractDeepCopy(state)) {\r\n      return StateManagerHelper.deepCopy(state);\r\n    } else {\r\n      return ComponentStateManager.toSnapshotRepresentationByComponent(path, state);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a proper component state representation for the given list of snapshot entries.\r\n   * \r\n   * @param {*} entries The snapshot entries to be transformed.\r\n   */\r\n  static fromSnapshotRepresentation(entries) {\r\n    const result = {};\r\n    entries.forEach((entry) => {\r\n      const [path, state] = entry;\r\n      result[path] = this.fromSnapshotRepresentationForSingleEntry(path, state);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create a proper component state representation for the given snapshot state representation\r\n   * for the given path.\r\n   * \r\n   * @param {*} state The snapshot state to be transformed.\r\n   */\r\n  static fromSnapshotRepresentationForSingleEntry(path, state) {\r\n    if (StateAttributeAccess.extractDeepCopy(state)) {\r\n      return StateManagerHelper.deepCopy(state);\r\n    } else {\r\n      return ComponentStateManager.fromSnapshotRepresentationByComponent(path, state);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a proper component state representation for the given snapshot state\r\n   * representation, which is not cloneable and therefore needs a component specific\r\n   * transformation.  \r\n   * \r\n   * @param {*} state The snapshot state to be transformed.\r\n   */\r\n  static toSnapshotRepresentationByComponent(path, state) {\r\n    const componentClassName = StateAttributeAccess.extractComponentClassName(state);\r\n    if (componentClassName === undefined) {\r\n      console.error(`Cannot create snapshot for component state in path ${path}`, state);\r\n      return undefined;\r\n    } else {\r\n      switch (componentClassName) {\r\n        case \"CbaRichTextField\":\r\n          return CbaRichTextField.toSnapshot(path, state);\r\n        case \"CbaTable\": // this is probably unreachable: there is not CbaTable.toSnapshot and CbaTable does not set deepCopy flag -> verify in debugger\r\n          return CbaTable.toSnapshot(path, state);\r\n        default:\r\n          console.error(`Unexpected component class ${componentClassName} for snapshot in path ${path}`, state);\r\n          return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a snapshot representation for the given internal component state\r\n   * representation, which is not cloneable and therefore needs a component specific\r\n   * transformation.  \r\n   * \r\n   * @param {*} state The component state to be transformed.\r\n   */\r\n  static fromSnapshotRepresentationByComponent(path, state) {\r\n    const componentClassName = StateAttributeAccess.extractComponentClassName(state);\r\n    if (componentClassName === undefined) {\r\n      console.error(`Cannot extract component state from snapshot for path ${path}`, state);\r\n      return undefined;\r\n    } else {\r\n      switch (componentClassName) {\r\n        case \"CbaRichTextField\":\r\n          return CbaRichTextField.fromSnapshot(path, state);\r\n        case \"CbaTable\":\r\n          return CbaTable.fromSnapshot(path, state);\r\n        default:\r\n          console.error(`Unexpected component class ${componentClassName} in snapshot in path ${path}`, state);\r\n          return undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * A catalog of components. \r\n * \r\n * Components are identified by their index path. \r\n * \r\n * While the different instances of this catalog could be used \r\n * we currently have a single instance of it only that \r\n * keeps a catalog of all currently rendering components.\r\n */\r\nexport default class ComponentDirectory {\r\n\r\n  constructor() {\r\n    this.componentList = {};\r\n\r\n    this.clear = this.clear.bind(this);\r\n    this.registerComponent = this.registerComponent.bind(this);\r\n    this.deregisterComponent = this.deregisterComponent.bind(this);\r\n    this.findComponent = this.findComponent.bind(this);\r\n  }\r\n\r\n  clear() {\r\n    this.componentList = {};\r\n  }\r\n\r\n  registerComponent(path, component) {\r\n    this.componentList[path] = component;\r\n  }\r\n\r\n  deregisterComponent(path) {\r\n    this.componentList[path] = undefined;\r\n  }\r\n\r\n  findComponent(path) {\r\n    return this.componentList[path];\r\n  }\r\n\r\n  findByComponentType(componentType) {\r\n    return Object.values(this.componentList).filter(c => c instanceof componentType);\r\n  }\r\n\r\n  /**\r\n   * don't use this method in constructor, because page isn't loaded yet, hence an empty array will be return\r\n   * @param {*} pageName \r\n   */\r\n  findComponentsByPageName(pageName) {\r\n    return Object.keys(this.componentList).map((path) => {\r\n      if (path.indexOf(`page=${pageName}`) !== -1) {\r\n        return this.componentList[path];\r\n      }\r\n      return undefined;\r\n    }).filter(x => !!x);\r\n  }\r\n\r\n  findSubTreeComponentsWithinAPage(pageName, treeInstnancesUserDefinedIds) {\r\n    const pageComponents = this.findComponentsByPageName(pageName);\r\n    const treeComnOnPage = [];\r\n    for (let i = 0, len = treeInstnancesUserDefinedIds.length; i < len; i += 1) {\r\n      for (let j = 0, lenComp = pageComponents.length; j < lenComp; j += 1) {\r\n        if (pageComponents[j].props.config.userDefinedId === treeInstnancesUserDefinedIds[i]) {\r\n          treeComnOnPage.push(pageComponents[j]);\r\n        }\r\n      }\r\n    }\r\n    return treeComnOnPage;\r\n  }\r\n\r\n\r\n  findTreeViewComponentsWithinAPage(pageName, treeInstnancesUserDefinedIds, treeChildAreaIdToIgnore) {\r\n    const cbaTrees = this.findSubTreeComponentsWithinAPage(pageName, treeInstnancesUserDefinedIds);\r\n    const subTreeIds = cbaTrees[0].props.config.treeInstnancesUserDefinedIds;\r\n    const subTreeViewIds = subTreeIds.filter(comp => comp !== treeChildAreaIdToIgnore);\r\n    const pageComponents = this.findComponentsByPageName(pageName);\r\n\r\n    const treeViewComnOnPage = [];\r\n    for (let i = 0, len = subTreeViewIds.length; i < len; i += 1) {\r\n      for (let j = 0, lenComp = pageComponents.length; j < lenComp; j += 1) {\r\n        if (pageComponents[j].props.config.userDefinedId === subTreeViewIds[i]) {\r\n          treeViewComnOnPage.push(pageComponents[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return treeViewComnOnPage;\r\n  }\r\n\r\n\r\n}\r\n","import StateManagerHelper from './StateManagerHelper';\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\nexport default class IncidentsAccumulator {\r\n\r\n  constructor() {\r\n    this.taskValuesList = {};\r\n    this.currentTaskPath = undefined;\r\n    this.startTimeOfCurrentTask = undefined;\r\n    this.startOfCurrentPause = undefined;\r\n    this.timeSpentPausedInCurrentTask = undefined;\r\n    this.firstReactionSeen = undefined;\r\n    this.lastContinuingInteractionKey = undefined;\r\n  }\r\n\r\n  // update values ------------------------------------------------------------------\r\n\r\n  enterTask = (taskPath, atTime, runtime) => {\r\n    this.leaveTask(atTime, runtime);\r\n\r\n    this.currentTaskPath = taskPath;\r\n    this.startTimeOfCurrentTask = atTime;\r\n    this.startTimeOfCurrentPause = undefined;\r\n    this.timeSpentPausedInCurrentTask = 0;\r\n    this.firstReactionSeen = false;\r\n    this.lastContinuingInteractionKey = undefined;\r\n    const values = this.getOrInitializeValuesForTask(taskPath);\r\n    values.nbUserInteractions = 0;\r\n    values.firstReactionTime = undefined;\r\n    values.taskExecutionTime = 0;\r\n    IncidentsAccumulator.dumpStateChangeToTrace(this.currentTaskPath, values, runtime);\r\n  }\r\n\r\n  /**\r\n   * Count a single user interaction. \r\n   * \r\n   * If a continuingInteractionKey is given \r\n   * the method will ignore all but the first call of a consecutive sequence of calls \r\n   * that use the same continuingInteractionKey.  \r\n   * \r\n   * @param {*} atTime The timestamp of the interaction, used for first reaction timing.\r\n   * @param {{type: String, value: String}} continuingInteractionKey The key used to identify a user interaction that might trigger \r\n   *  several consecutive calls to this method but should be counted once only. \r\n   */\r\n  userInteraction = (atTime, continuingInteractionKey, runtime) => {\r\n    if (this.lastContinuingInteractionKey\r\n      && continuingInteractionKey\r\n      && this.lastContinuingInteractionKey.type === continuingInteractionKey.type\r\n      && this.lastContinuingInteractionKey.value === continuingInteractionKey.value) {\r\n      return;\r\n    }\r\n    this.lastContinuingInteractionKey = continuingInteractionKey;\r\n    if (this.currentTaskPath !== undefined) {\r\n      const values = this.getOrInitializeValuesForTask(this.currentTaskPath);\r\n      values.nbUserInteractions += 1;\r\n      values.nbUserInteractionsTotal += 1;\r\n\r\n      if (!this.firstReactionSeen) {\r\n        values.firstReactionTime = IncidentsAccumulator.getNonPausedTimeSpentInCurrentTask(atTime, this.startTimeOfCurrentTask, this.timeSpentPausedInCurrentTask, this.startTimeOfCurrentPause);\r\n        values.firstReactionTimeTotal += values.firstReactionTime;\r\n        this.firstReactionSeen = true;\r\n      }\r\n      IncidentsAccumulator.dumpStateChangeToTrace(this.currentTaskPath, values, runtime);\r\n    }\r\n  }\r\n\r\n  leaveTask = (atTime, runtime) => {\r\n    if (this.currentTaskPath !== undefined) {\r\n      const values = this.getOrInitializeValuesForTask(this.currentTaskPath);\r\n      values.taskExecutionTime = IncidentsAccumulator.getNonPausedTimeSpentInCurrentTask(atTime, this.startTimeOfCurrentTask, this.timeSpentPausedInCurrentTask, this.startTimeOfCurrentPause);\r\n      values.taskExecutionTimeTotal += values.taskExecutionTime;\r\n      IncidentsAccumulator.dumpStateChangeToTrace(this.currentTaskPath, values, runtime);\r\n    }\r\n    this.currentTaskPath = undefined;\r\n    this.startTimeOfCurrentTask = undefined;\r\n    this.startTimeOfCurrentPause = undefined;\r\n    this.timeSpentPausedInCurrentTask = undefined;\r\n    this.firstReactionSeen = undefined;\r\n    this.lastContinuingInteractionKey = undefined;\r\n  }\r\n\r\n  pauseTask = (atTime) => {\r\n    if (this.startTimeOfCurrentPause === undefined) {\r\n      this.startTimeOfCurrentPause = atTime;\r\n    }\r\n  }\r\n\r\n  resumeTask = (atTime) => {\r\n    if (this.startTimeOfCurrentPause !== undefined) {\r\n      // tolerate resume calls without any active task:\r\n      if (this.timeSpentPausedInCurrentTask !== undefined) {\r\n        this.timeSpentPausedInCurrentTask += atTime - this.startTimeOfCurrentPause;\r\n      }\r\n      this.startTimeOfCurrentPause = undefined;\r\n    }\r\n  }\r\n\r\n\r\n  // get values --------------------------------------------------------------------\r\n  nbUserInteractions = taskPath => this.getValuesForTask(taskPath).nbUserInteractions\r\n\r\n  nbUserInteractionsTotal = taskPath => this.getValuesForTask(taskPath).nbUserInteractionsTotal\r\n\r\n  firstReactionTime = taskPath => this.getValuesForTask(taskPath).firstReactionTime\r\n\r\n  firstReactionTimeTotal = taskPath => this.getValuesForTask(taskPath).firstReactionTimeTotal\r\n\r\n  taskExecutionTime = (taskPath, atTime) => {\r\n    if (taskPath === this.currentTaskPath) {\r\n      return IncidentsAccumulator.getNonPausedTimeSpentInCurrentTask(atTime, this.startTimeOfCurrentTask, this.timeSpentPausedInCurrentTask, this.startTimeOfCurrentPause);\r\n    } else {\r\n      return this.getValuesForTask(taskPath).taskExecutionTime;\r\n    }\r\n  }\r\n\r\n  taskExecutionTimeTotal = taskPath => this.getValuesForTask(taskPath).taskExecutionTimeTotal\r\n\r\n  /**\r\n   * Get a structure containing all values for the given task (for use in trace log e.g.).\r\n   */\r\n  getAllValuesForTask = (taskPath, atTime) => {\r\n    // The taskExecutionTime in the values array is not updated until we leave a task.\r\n    // -> Get the the current value for our result:\r\n    const result = StateManagerHelper.deepCopy(this.getValuesForTask(taskPath));\r\n    result.taskExecutionTime = this.taskExecutionTime(taskPath, atTime);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the historical state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.taskValuesList);\r\n\r\n  /**\r\n   * Drop history for all tasks.\r\n   */\r\n  clearTasksState = () => { this.taskValuesList = {}; };\r\n\r\n  /**\r\n   * Preload the historical tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.taskValuesList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change for a task triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, state) => {\r\n    this.taskValuesList[taskPath] = state;\r\n  }\r\n\r\n\r\n  // private stuff --------------------------------------------------------------------\r\n  static getTimeSpentInPausedState(atTime, timeSpentInEarlierPauses, startTimeOfCurrentPause) {\r\n    return timeSpentInEarlierPauses + (startTimeOfCurrentPause === undefined ? 0 : atTime - startTimeOfCurrentPause);\r\n  }\r\n\r\n  static getNonPausedTimeSpentInCurrentTask(atTime, startTimeOfCurrentTask, timeSpentPausedInCurrentTask, startTimeOfCurrentPause) {\r\n    return atTime - startTimeOfCurrentTask - IncidentsAccumulator.getTimeSpentInPausedState(atTime, timeSpentPausedInCurrentTask, startTimeOfCurrentPause);\r\n  }\r\n\r\n  getValuesForTask = (taskPath) => {\r\n    if (this.taskValuesList[taskPath] === undefined) {\r\n      return IncidentsAccumulator.buildInitialValues();\r\n    }\r\n    return this.taskValuesList[taskPath];\r\n  }\r\n\r\n  getOrInitializeValuesForTask = (taskPath) => {\r\n    if (this.taskValuesList[taskPath] === undefined) {\r\n      this.taskValuesList[taskPath] = IncidentsAccumulator.buildInitialValues();\r\n    }\r\n    return this.taskValuesList[taskPath];\r\n  }\r\n\r\n  static buildInitialValues() {\r\n    return {\r\n      nbUserInteractions: 0,\r\n      nbUserInteractionsTotal: 0,\r\n      firstReactionTime: undefined,\r\n      firstReactionTimeTotal: 0,\r\n      taskExecutionTime: 0,\r\n      taskExecutionTimeTotal: 0\r\n    }\r\n  }\r\n\r\n  static dumpStateChangeToTrace(taskPath, state, runtime) {\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'IncidentsAccumulatorState',\r\n      {\r\n        taskPath,\r\n        state\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","import TermEvaluator from './TermEvaluator';\r\n\r\nexport default class ConditionalLinkHelper {\r\n\r\n  static evaluateConditionalLink(conditionalLink, runtime) {\r\n    if (conditionalLink === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    // find the first branch that fulfills its condition:\r\n    const { branches } = conditionalLink;\r\n    if (branches === undefined) {\r\n      ConditionalLinkHelper.logUndefinedMessage('branches array');\r\n      ConditionalLinkHelper.logCalculation('undefined (branches undefined)');\r\n      return undefined;\r\n    }\r\n\r\n    const chosenBranch = branches.find((branch, index) => {\r\n      if (branch.condition === undefined) {\r\n        ConditionalLinkHelper.logUndefinedMessage('condition in branch');\r\n        return false;\r\n      }\r\n      return TermEvaluator.evaluateTerm(branch.condition, runtime, [], `guard[${index}]`) === true\r\n    });\r\n    if (chosenBranch === undefined) {\r\n      ConditionalLinkHelper.logCalculation('undefined (no branch chosen)');\r\n      return undefined;\r\n    }\r\n\r\n    // execute the actions of the fulfilling branch:\r\n    if (chosenBranch.actions === undefined) {\r\n      ConditionalLinkHelper.logUndefinedMessage('actions in chosen branch');\r\n    } else {\r\n      chosenBranch.actions.forEach((action, index) => {\r\n        if (action === undefined) {\r\n          ConditionalLinkHelper.logUndefinedMessage('action in action array of chosen branch');\r\n        } else {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `action[${index}]`);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (chosenBranch.page === undefined) {\r\n      ConditionalLinkHelper.logUndefinedMessage('page in selected branch');\r\n      ConditionalLinkHelper.logCalculation('undefined (no page in chosen branch)');\r\n      return undefined;\r\n    }\r\n\r\n    const result = chosenBranch.page;\r\n    ConditionalLinkHelper.logCalculation(result);\r\n    return result;\r\n  }\r\n\r\n\r\n  static logUndefinedMessage(propertyName) {\r\n    console.log(`Conditional link definition contains undefined ${propertyName}`);\r\n  }\r\n\r\n  static logCalculation(result) {\r\n    console.log(`Conditional link evaluates to `, result);\r\n  }\r\n\r\n}\r\n","import CommonConfigHelper from \"./CommonConfigHelper\";\r\nimport IndexPathHelper from '../state/IndexPathHelper';\r\nimport CbaComboBox from '../components/CbaComboBox';\r\nimport CbaRichTextField from '../components/CbaRichTextField/CbaRichTextField';\r\nimport CbaCalculatorInput from \"../components/calculator/CbaCalculatorInput\";\r\nimport CbaTableCell from \"../components/table/CbaTableCell\";\r\nimport CbaList from \"../components/list/CbaList\";\r\n\r\n/**\r\n * Provide access to the configuration of the currently active item.\r\n */\r\nexport default class PageConfigurationsManager {\r\n\r\n  /**\r\n   * Create a configuration manager to provide access to the configuration of the given item.\r\n   * \r\n   * @param {*} item The configuration of the item. \r\n   */\r\n  constructor(item) {\r\n    this.pagesList = item.pages;\r\n    this.buildMappings(item.pages);\r\n\r\n    this.findPage = this.findPage.bind(this);\r\n    this.findPageSegmentForUserDefId = this.findPageSegmentForUserDefId.bind(this);\r\n    this.findConfigurationForPageSegment = this.findConfigurationForPageSegment.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Get the configuration object for the specified page.\r\n   */\r\n  findPage(pageName) {\r\n    return this.pagesList.find((value, index, theArray) => value.name === pageName);\r\n  }\r\n\r\n  /**\r\n   * Get page segment (for use in index paths) of the display component specified by the given UserDefinedId.\r\n   * \r\n   * The page segment starts with the name of the parent page followed by an index \r\n   * into the children array for each CbaContainer from the page root to the display component identified\r\n   * by the UserDefinedId, e.g. \r\n   *   /page=pageA/index=3/index=1\r\n   */\r\n  findPageSegmentForUserDefId(userDefinedId) {\r\n    const result = this.userDefinedIdCatalog[userDefinedId];\r\n    if (result === undefined) {\r\n      console.warn(`Cannot find page segment for user defined id ${userDefinedId}`)\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get page segment (for use in index paths) of the text block specified by the given text block name.\r\n   * \r\n   * The page segment starts with the name the parent page followed by an index \r\n   * into the children array for each CbaContainer from the page root to the rich text component \r\n   * owning the text block, e.g. \r\n   *   /page=pageA/index=3/index=1\r\n   */\r\n  findPageSegmentForTextBlockOwner(blockName) {\r\n    // The method is called to test whether an ID is a block name, therefore not finding any hit is no error.\r\n    return this.textBlockNameCatalog[blockName];\r\n  }\r\n\r\n  /**\r\n   * Get the configuration object for the display component specified by the given page segment. \r\n   * \r\n   * You may obtain the page segment for a display component by calling findPageSegmentForUserDefId(...).\r\n   */\r\n  findConfigurationForPageSegment(pageSegment, supressWarning) {\r\n    const result = this.pageSegmentCatalog[pageSegment];\r\n    if (!supressWarning && result === undefined) {\r\n      console.warn(`Cannot find configuration for page segment ${pageSegment}`)\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  // private stuff --------------------------------------------------------------------------\r\n  buildMappings(pages) {\r\n\r\n    // map (userDefinedId) -> (page segment for component to be used in index path)\r\n    this.userDefinedIdCatalog = {};\r\n\r\n    // map (text block name) -> (page segment for CbaRichText component containing the text block to be used in index path)\r\n    this.textBlockNameCatalog = {}\r\n\r\n    // map (page segment from index path) -> (description structure for component as given in item description JSON)\r\n    this.pageSegmentCatalog = {};\r\n\r\n    pages.forEach((page, index, all) => {\r\n      this.addMappingsForPage(page);\r\n    })\r\n  }\r\n\r\n  addMappingsForPage(page) {\r\n    const pageName = page.name;\r\n    this.addMappingsForComponent(IndexPathHelper.buildPageSegment(pageName), page.content);\r\n  }\r\n\r\n\r\n  addMappingsForComponent(pageSegment, component) {\r\n    if (component === undefined || component.config === undefined) {\r\n      console.warn(`Found invalid component configuration at page segment ${pageSegment}`);\r\n    }\r\n\r\n    this.addMappings(pageSegment, component);\r\n\r\n    const { type, config } = component;\r\n    switch (type) {\r\n      case 'CbaContainer':\r\n        this.addMappingsForComponentList(pageSegment, component.config.cbaChildren);\r\n        break;\r\n      case 'CbaRegionMap':\r\n        this.addMappingsForComponentList(pageSegment, component.config.regions);\r\n        break;\r\n      case 'CbaComboBox':\r\n        this.addMappingsForComponentList(pageSegment, CbaComboBox.buildComboBoxItemsArray(component.config.items));\r\n        break;\r\n      case 'CbaList':\r\n        this.addMappingsForComponentList(pageSegment, CbaList.buildListItemsArray(component.config.items));\r\n        break;\r\n      case 'CbaRichTextField':\r\n        this.addMappingsForComponentList(CbaRichTextField.addLinkIndex(pageSegment), CbaRichTextField.buildLinkConfigurationsArray(component.config));\r\n        if (config.contentModifiers !== undefined) {\r\n          this.addMappingsForComponentList(CbaRichTextField.addContentModifierIndex(pageSegment), component.config.contentModifiers);\r\n        }\r\n        if (config.textBlocks !== undefined) {\r\n          component.config.textBlocks.forEach((textBlock, index, all) => {\r\n            this.textBlockNameCatalog[textBlock.name] = pageSegment;\r\n          });\r\n        }\r\n        break;\r\n      case 'CbaTable':\r\n        this.addMappingsForComponentList(pageSegment, config.cbaChildren);\r\n        break;\r\n      case 'CbaTableCell':\r\n        if (config.isSpreadsheet === true) {\r\n          if (config.items !== undefined) {\r\n            const comboboxCopy = CbaTableCell.createCellCopy(component, pageSegment, \"CbaComboBox\");\r\n            this.addMappings(comboboxCopy.path, comboboxCopy);\r\n            this.addMappingsForComponentList(comboboxCopy.path, CbaComboBox.buildComboBoxItemsArray(config.items));\r\n          } else {\r\n            const inputCopy = CbaTableCell.createCellCopy(component, pageSegment, \"CbaSingleLineInputField\");\r\n            this.addMappings(inputCopy.path, inputCopy);\r\n          }\r\n        }\r\n        this.addMappingsForComponentList(pageSegment, config.cbaChildren);\r\n        break;\r\n      case 'CbaCalculatorInput':\r\n      {\r\n        const { delegatePath, delegateComponent } = CbaCalculatorInput.createDelegateComponent(component, pageSegment, 'CbaSimpleTextField')\r\n        this.addMappings(delegatePath, delegateComponent);\r\n        break;\r\n      }\r\n      case 'CbaCalculatorHistory':\r\n      {\r\n        const { delegatePath, delegateComponent } = CbaCalculatorInput.createDelegateComponent(component, pageSegment, 'CbaSimpleTextField')\r\n        this.addMappings(delegatePath, delegateComponent);\r\n        break;\r\n      }\r\n      case 'CbaMedia':\r\n        this.addMappingsForComponentList(pageSegment, config.cbaChildren);\r\n        break;\r\n      default:\r\n        // nothing to do for other component types.\r\n    }\r\n  }\r\n\r\n  addMappings(pageSegment, component) {\r\n    this.pageSegmentCatalog[pageSegment] = component;\r\n    const userDefinedId = CommonConfigHelper.getUserDefinedId(component.config);\r\n    if (userDefinedId !== undefined) {\r\n      this.userDefinedIdCatalog[userDefinedId] = pageSegment;\r\n    }\r\n  }\r\n\r\n  addMappingsForComponentList(rootPath, components) {\r\n    if (components !== undefined) {\r\n      components.forEach((component, index, all) => {\r\n        const path = IndexPathHelper.appendIndexToPageSegment(rootPath, index);\r\n        this.addMappingsForComponent(path, component);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","export default class CalculationsConfigurationManager {\r\n\r\n  constructor(item) {\r\n    this.tasksList = item.tasks;\r\n\r\n  }\r\n\r\n  /**\r\n   * Find the calculation with the given name configured for the given task.\r\n   * \r\n   * The method returns 'undefined' if no matching calculation exists.\r\n   * \r\n   */\r\n  findCalculationByTaskName = (taskName, calculationName) => {\r\n    const calculationEntry = this.findAllCalculationsByTaskName(taskName).find((value, index, all) => value.name === calculationName);\r\n    return calculationEntry === undefined ? undefined : calculationEntry.calculation;\r\n  }\r\n\r\n  /**\r\n   * Find all named calculations configured for the given task.\r\n   * \r\n   * The method returns a list of calculation configurations.\r\n   * \r\n   */\r\n  findAllCalculationsByTaskName = (taskName) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n    return task.namedCalculations;\r\n  }\r\n\r\n  /**\r\n   * Find the score result list with the given name for the given task.\r\n   */\r\n  findScoreResultListByTaskName = (taskName, listName) => {\r\n    const allResultLists = this.findAllScoreResultListsByTaskName(taskName);\r\n    const list = allResultLists.find((value, index, theArray) => value.name === listName);\r\n    if (list === undefined) {\r\n      console.log(`Cannot find score result list configuration for task name ${taskName} and list name ${listName}`);\r\n      return [];\r\n    }\r\n    return list.elements;\r\n  }\r\n\r\n\r\n  /**\r\n   * Find all result lists that are part of the score result for a given task.\r\n   * \r\n   */\r\n  findAllScoreResultListsByTaskName = (taskName) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n    return task.scoreResult.lists;\r\n  }\r\n\r\n  /**\r\n   * Find the attributes structure of the score result for a given task.\r\n   */\r\n  findScoreResultAttributesByTaskName = (taskName) => {\r\n    const task = this.tasksList.find((value, index, theArray) => value.name === taskName);\r\n    if (task === undefined) {\r\n      console.error(`Cannot find task configuration for task name ${taskName}`);\r\n      return [];\r\n    }\r\n    return task.scoreResult.attributes;\r\n  }\r\n\r\n\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\n/**\r\n * Keep the state of all tasks. \r\n * \r\n * The task state contains:\r\n * - The names of the currently loaded pages in the standard and xPage areas.\r\n * - The list of dialog windows and the name of the page loaded in each.\r\n * - The size (width and height) of the item defining the task.\r\n * - The layout configuration (space used for xPage area, size and color of divider etc.) of the task.\r\n * - The highlight color of the item defining the task.\r\n */\r\nexport default class PresenterStateManager {\r\n\r\n  constructor() {\r\n    this.taskEntriesList = {};\r\n  }\r\n\r\n\r\n  /**\r\n   * Save the given task state for the task identified by the task path.\r\n   */\r\n  saveTaskState = (taskPath, state, runtime) => {\r\n    const newState = StateManagerHelper.deepCopy(state);\r\n    this.taskEntriesList[taskPath] = newState;\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'PresenterStateManagerState',\r\n      {\r\n        taskPath,\r\n        state: newState\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * Get the task state for the task identified by the task path.\r\n   */\r\n  getTaskState = taskPath => StateManagerHelper.deepCopy(this.taskEntriesList[taskPath]);\r\n\r\n  /**\r\n  * Remove a dialog or a modal dialog from task state.\r\n  *\r\n  * The method does nothing if no dialog with the given name and type exists.\r\n  * \r\n  * @param {string} pageAreaName The name of the dialog to be removed\r\n  * @param {string} pageAreaType The type of dialog being removed\r\n  * @param {string} taskPath The task from which is being removed\r\n  * \r\n  */\r\n  removeDialog = (pageAreaName, pageAreaType, taskPath, runtime) => {\r\n    const taskState = this.taskEntriesList[taskPath];\r\n\r\n    taskState.dialogs = taskState.dialogs.filter(dialog => dialog.pageAreaName !== pageAreaName || dialog.type !== pageAreaType);\r\n\r\n    this.saveTaskState(taskPath, taskState, runtime);\r\n  }\r\n\r\n  /**\r\n  * Mark a dialog or a modal dialog as not visible from task state.\r\n  *\r\n  * The method does nothing if no dialog with the given name and type exists.\r\n  * \r\n  * @param {string} pageAreaName The name of the dialog to be removed\r\n  * @param {string} pageAreaType The type of dialog being removed\r\n  * @param {string} taskPath The task from which is being removed\r\n  * \r\n  */\r\n  hideDialog = (pageAreaName, pageAreaType, taskPath, runtime) => {\r\n    const taskState = this.taskEntriesList[taskPath];\r\n\r\n    const removableDialog = taskState.dialogs.find(dialog => dialog.pageAreaName === pageAreaName && dialog.type === pageAreaType);\r\n    if (removableDialog) {\r\n      removableDialog.visible = false;\r\n    } else {\r\n      console.warn(\"Dialog not found - \", pageAreaType, pageAreaName);\r\n    }\r\n\r\n    this.saveTaskState(taskPath, taskState, runtime);\r\n  }\r\n\r\n  /**\r\n  * Update the position of a dialog or a modal dialog in task state.\r\n  * \r\n  * The method implicitly sets the focus flag to true for the given dialog \r\n  * and false for all other dialogs.\r\n  *\r\n  * The method does not complain if no dialog with the given name and type exists.\r\n  * \r\n  * @param {string} pageAreaName The name of the dialog to be modified\r\n  * @param {string} pageAreaType The type of the dialog to be modified\r\n  * @param {string} taskPath The task from which is being removed\r\n  * @param {x:int, y:int} newPosition The new position to set for the dialog\r\n  * \r\n  */\r\n  updatePositionAndFocusDialog = (pageAreaName, pageAreaType, taskPath, newPosition, runtime) => {\r\n    const currentTaskState = this.taskEntriesList[taskPath];\r\n\r\n    currentTaskState.dialogs.forEach((dialog, index) => {\r\n      if (dialog.pageAreaName === pageAreaName && dialog.type === pageAreaType) {\r\n        dialog.position = newPosition;\r\n        dialog.focused = true;\r\n      } else {\r\n        dialog.focused = false;\r\n      }\r\n    });\r\n\r\n    this.saveTaskState(taskPath, currentTaskState, runtime);\r\n  }\r\n\r\n  /**\r\n   * Build an initial task state object. \r\n   * \r\n   * @param {string} standardPage The name of the page loaded in the standard area.\r\n   * @param {string} xPage The name of the page loaded in the XPage area.\r\n   * @param {number} itemWidth The width of the item defining the task.\r\n   * @param {number} itemHeight The height of the item defining the task.\r\n   * @param {boolean} withEditContextMenu Should we include the edit context menu (and the keyboard shortcuts for cut/copy/paste)?\r\n   * @param {*} itemLayout The layout of the task (i.e. standard vs. xPage division).\r\n   * @param {string} itemHighlightColor The highlight color of the item defining the task.\r\n   * @param {string} cssStyles The string containing task CSS styles\r\n   */\r\n  static buildInitialTaskStateObject(standardPage, xPage, itemWidth, itemHeight, itemLayout, withEditContextMenu, itemHighlightColor, highlightColors, cssStyles) {\r\n    return {\r\n      standardPage,\r\n      xPage,\r\n      itemWidth,\r\n      itemHeight,\r\n      itemLayout,\r\n      withEditContextMenu,\r\n      dialogs: [],\r\n      itemHighlightColor,\r\n      highlightColors,\r\n      cssStyles\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Modify the page name and position for the given page area in the given task state.\r\n   * \r\n   * @param {string} pageName The new page name to set.\r\n   * @param {{ x: integer, y: integer}} position The new position of the page area to set. Not used for main page areas.\r\n   * @param {string} pageAreaType The type of the page area to modify.\r\n   * @param {string} pageAreaName The name of the page area to modify.\r\n   * @param {*} taskState The task state object containing the page area configurations to be changed.\r\n   */\r\n  static setPageForPageAreaInTaskState(pageName, position, pageAreaType, pageAreaName, taskState) {\r\n    switch (pageAreaType) {\r\n      case 'main':\r\n        PresenterStateManager.setMainAreaPage(pageName, pageAreaName, taskState);\r\n        break;\r\n      case 'dialog':\r\n        PresenterStateManager.changeOrCreatePageArea(pageName, position, pageAreaName, \"dialog\", taskState.dialogs);\r\n        break;\r\n      case 'modal':\r\n        PresenterStateManager.changeOrCreatePageArea(pageName, position, pageAreaName, \"modal\", taskState.dialogs);\r\n        break;\r\n      default:\r\n        console.error(`Unknown page area type: ${pageAreaType}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the page name for the standard or xPage area.\r\n   * \r\n   * @param {string} pageName The new page name to set.\r\n   * @param {string} pageAreaName The name of the page area: 'standard' or 'xPage'.\r\n   * @param {string} taskState \r\n   * @param {*} taskState The task state object containing the page area configurations to be changed.\r\n   */\r\n  static setMainAreaPage(pageName, pageAreaName, taskState) {\r\n    switch (pageAreaName) {\r\n      case 'standard':\r\n        taskState.standardPage = pageName;\r\n        break;\r\n      case 'xPage':\r\n        taskState.xPage = pageName;\r\n        break;\r\n      default:\r\n        console.error(`Unknown page area name for 'main' page area type: ${pageAreaName}`);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Set the page name and position for a page area identified by the given area name and area type residing in the given page area list.\r\n   * \r\n   * The method implicitly creates an entry for the page area if there is no such entry yet.\r\n   * \r\n   * @param {string} pageName The new page name to set.\r\n   * @param {{ x: integer, y: integer}} position The new position of the page area to set.\r\n   * @param {string} pageAreaName The name of the page area.\r\n   * @param {string} pageAreaType The type of the page area.\r\n   * @param {[]} pageAreaList The list of page areas to modify.\r\n   */\r\n  static changeOrCreatePageArea(pageName, position, pageAreaName, pageAreaType, pageAreaList) {\r\n    const pageAreaEntry = pageAreaList.find(value => value.pageAreaName === pageAreaName && value.type === pageAreaType);\r\n    if (pageAreaEntry === undefined) {\r\n      pageAreaList.push({\r\n        pageAreaName,\r\n        type: pageAreaType,\r\n        pageName,\r\n        position,\r\n        visible: true\r\n      });\r\n    } else {\r\n      pageAreaEntry.pageName = pageName;\r\n      pageAreaEntry.position = position;\r\n      pageAreaEntry.visible = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.taskEntriesList);\r\n\r\n  /**\r\n   * Drop all tasks.\r\n   */\r\n  clearTasksState = () => { this.taskEntriesList = {}; };\r\n\r\n  /**\r\n   * Preload the tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.taskEntriesList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change for a task triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, state) => {\r\n    this.taskEntriesList[taskPath] = state;\r\n  }\r\n\r\n}\r\n","import TermEvaluator from \"./TermEvaluator\";\r\n\r\n/**\r\n * Service to map values to strings using value maps configured in the item configuration.\r\n */\r\nexport default class ValueMapper {\r\n\r\n  // ---------- public API ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build a value mapper service. \r\n   */\r\n  constructor(item, runtime) {\r\n    this.valueMaps = item.valueMaps;\r\n    this.runtime = runtime;\r\n  }\r\n\r\n  /**\r\n   * Map a value using the specified map.\r\n   * \r\n   * The method returns undefined if the specified value map does not exist \r\n   * or the given value cannot not find an accepting guard.\r\n   */\r\n  getMappedValue = (valueMapName, valueToMap) => {\r\n    const valueMapToUse = this.valueMaps.find(valueMap => valueMap.name === valueMapName);\r\n    if (valueMapToUse === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const acceptingGuard = valueMapToUse.guards.find(\r\n      (guard, index) => TermEvaluator.evaluateTerm(guard.guardTerm, this.runtime, [valueToMap], `guard[${index}]_${valueMapName}`) === true\r\n    );\r\n    if (acceptingGuard === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    return acceptingGuard.value;\r\n  }\r\n\r\n}\r\n","import IndexPathHelper from './IndexPathHelper';\r\nimport ConditionalLinkHelper from '../eval/ConditionalLinkHelper';\r\nimport PageConfigurationsManager from '../config/PageConfigurationsManager';\r\nimport CalculationsConfigurationManager from '../config/CalculationsConfigurationManager';\r\nimport PresenterStateManager from './PresenterStateManager';\r\nimport TraceLogHelper from './TraceLogHelper';\r\nimport CbaPageArea from '../components/CbaPageArea';\r\nimport CommonActionsHelper from '../components/CommonActionsHelper';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport TermEvaluator from '../eval/TermEvaluator';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport ValueMapper from '../eval/ValueMapper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\nimport Utils from '../utils/Utils';\r\n\r\nexport default class TaskManager {\r\n\r\n  /**\r\n   * @param {*} runtime Access to the global services. \r\n   */\r\n  constructor(runtime) {\r\n\r\n    this.itemInfoEntries = [];\r\n    this.handleTopLevelPageChange = undefined;\r\n    this.switchCallback = undefined;\r\n    this.availabilityCallback = undefined;\r\n    this.runtime = runtime;\r\n\r\n    this.activeTestName = undefined;\r\n    this.activeItemName = undefined;\r\n    this.activeTaskName = undefined;\r\n\r\n    this.activeResourcePath = undefined;\r\n    this.activeExternalResourcePath = undefined;\r\n  }\r\n\r\n\r\n  // -------- public API -------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Set the callback that we will call each time a top level page changes.\r\n   */\r\n  setTopLevelPageChangeHandler = (topLevelPageChangeHandler) => {\r\n    this.handleTopLevelPageChange = topLevelPageChangeHandler;\r\n  }\r\n\r\n  /**\r\n   * Add an item to our item configurations array.\r\n   */\r\n  addItem = (itemConfiguration, resourcePath, externalResourcePath) => {\r\n    this.itemInfoEntries.push({\r\n      itemConfiguration, resourcePath, externalResourcePath\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Clear all items in our item configurations array.\r\n   */\r\n  clearItems = () => {\r\n    this.itemInfoEntries = [];\r\n  }\r\n\r\n  /**\r\n   * Set the callback that we will use to trigger task switches.\r\n   */\r\n  setSwitchCallback = (switchCallback) => {\r\n    this.switchCallback = switchCallback;\r\n  }\r\n\r\n  /**\r\n   * Set the callback that we will ask about availability of task switches.\r\n   */\r\n  setAvailabilityCallback = (availabilityCallback) => {\r\n    this.availabilityCallback = availabilityCallback;\r\n  }\r\n\r\n\r\n  /**\r\n   * Trigger a switch to the first task with the given name inside a specific test (i.e. we ignore the source item).\r\n   */\r\n  switchFirstMatchingTaskInterTest = (newTestName, newTaskName) => {\r\n    this.triggerGoToTask(newTestName, undefined, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to the first task with a matching name in the current test (i.e. we ignore the source item). \r\n   */\r\n  switchFirstMatchingTaskIntraTest = (newTaskName) => {\r\n    this.switchFirstMatchingTaskInterTest(this.activeTestName, newTaskName);\r\n  };\r\n\r\n  /**\r\n   * Trigger a switch to the specified task in the specified test. \r\n   */\r\n  switchTaskInterTest = (newTestName, newItemName, newTaskName) => {\r\n    this.triggerGoToTask(newTestName, newItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to the specified task in the current test. \r\n   */\r\n  switchTaskIntraTest = (newItemName, newTaskName) => {\r\n    this.triggerGoToTask(this.activeTestName, newItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to another task inside the active item.\r\n   */\r\n  switchTaskIntraItem = (newTaskName) => {\r\n    this.triggerGoToTask(this.activeTestName, this.activeItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a switch to the next task in our test course. \r\n   */\r\n  switchTaskNext = () => {\r\n    this.triggerTaskSwitch('nextTask', undefined, undefined, undefined);\r\n  }\r\n\r\n  /**\r\n   * Could we currently perform a switch to the next task?\r\n   */\r\n  nextTaskAvailable = () => this.checkAvailableTask('nextTask', undefined, undefined, undefined);\r\n\r\n  /**\r\n   * Trigger a switch to the previous task in our test course.\r\n   */\r\n  switchTaskPrevious = () => {\r\n    this.triggerTaskSwitch('previousTask', undefined, undefined, undefined);\r\n  }\r\n\r\n  /**\r\n   * Could we currently perform a switch to the previous task?\r\n   */\r\n  previousTaskAvailable = () => this.checkAvailableTask('previousTask', undefined, undefined, undefined);\r\n\r\n  /**\r\n   * Trigger to cancel the currently running task.\r\n   */\r\n  cancelTask = () => {\r\n    this.triggerTaskSwitch('cancelTask', undefined, undefined, undefined);\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to another page inside the same item (no task switch).\r\n   * \r\n   * This is a method combining all page switching types implied by the config.link configuration variants. \r\n   * // TODO: Simplify the link configuration structure and the TermEvaluator.switchPage operator parameters.\r\n   * \r\n   * @param {String} newPageName The name of a default page to load into the page area if no conditional link is given or it does not return a page.\r\n   * @param {Object} conditionalLink A conditional link configuration to be evaluated and to obtain a page to be loaded.\r\n   * @param {String} pageUrl The URL to use for the new page.\r\n   * @param {String} pageAreaType The type of the page area in the test presenter resp. containing the receiver.\r\n   * @param {String} pageAreaName The name of the page area in the test presenter resp. containing the receiver.\r\n   * @param {String} receiver The index path (without path root and page area type/name) of the CbaPageArea that should be modified.\r\n   * @param {{name: String, image: String}} receiverTab The tab in the CbaPageArea to load the page into (optional). \r\n   * @param {String} historyMove The kind of 'move' in the page history: 'forward', 'back' or 'home'\r\n   * @param {{x: integer, y: integer}} position The position where we should open the dialog window (not used for pageAreaType='main'). \r\n   * If not specified we will use the postion of the top level frame. \r\n   * If not specified the dialog will open at its previous position or centered if it was not opened before.\r\n   * \r\n   */\r\n  switchPage = (newPageName, conditionalLink, pageUrl, pageAreaType, pageAreaName, receiver, receiverTab, historyMove, position) => {\r\n    if (receiver === undefined) {\r\n      const evaluationResult = ConditionalLinkHelper.evaluateConditionalLink(conditionalLink, this.runtime);\r\n      if (evaluationResult === undefined) {\r\n        if (newPageName === undefined) {\r\n          console.error(`No page chosen by link specification: default page: ${newPageName} conditionalLink: ${conditionalLink}`);\r\n        } else {\r\n          const combinedPosition = (position === undefined)\r\n            ? CommonActionsHelper.getTopComponentPosition(newPageName, this.runtime.pageConfigurationsManager)\r\n            : position;\r\n          this.switchTopLevelPage(pageAreaType, pageAreaName, newPageName, combinedPosition);\r\n        }\r\n      } else {\r\n        this.switchTopLevelPage(\r\n          evaluationResult.pageAreaType,\r\n          evaluationResult.pageAreaName,\r\n          evaluationResult.pageName,\r\n          evaluationResult.position\r\n        );\r\n      }\r\n    } else {\r\n      const fullReceiverPath = IndexPathHelper.appendPageSegmentToPathRoot(this.getCurrentStatePathRoot(), pageAreaType, pageAreaName, receiver);\r\n      if (historyMove === undefined) {\r\n        const evaluationResult = ConditionalLinkHelper.evaluateConditionalLink(conditionalLink, this.runtime);\r\n        if (evaluationResult === undefined) {\r\n          if (newPageName === undefined) {\r\n            console.error(`No page chosen by link specification: default page: ${newPageName} conditionalLink: ${conditionalLink}`);\r\n          } else {\r\n            this.switchEmbeddedPage(fullReceiverPath, newPageName, pageUrl, receiverTab);\r\n          }\r\n        } else {\r\n          const { pageAreaType: evaluatedPageAreaType } = evaluationResult;\r\n          if (evaluatedPageAreaType === 'main') {\r\n            this.switchEmbeddedPage(fullReceiverPath, evaluationResult.pageName, evaluationResult.pageUrl, evaluationResult.receiverTab);\r\n          } else {\r\n            this.switchTopLevelPage(\r\n              evaluatedPageAreaType,\r\n              evaluationResult.pageAreaName,\r\n              evaluationResult.pageName,\r\n              evaluationResult.position\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        this.doHistoryMove(fullReceiverPath, historyMove);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch the top level page of a page area in the test presenter.\r\n   * \r\n   * @param {String} pageAreaType The type of the page area in the test presenter.\r\n   * @param {String} pageAreaName The name of the page area in the test presenter.\r\n   * @param {String} newPageName The name of the page to load into the page area.\r\n   * @param {{x: integer, y: interger}} position The position of the the page area (for 'dialog' page areas only).\r\n   */\r\n  switchTopLevelPage = (pageAreaType, pageAreaName, newPageName, position) => {\r\n    this.runtime.traceLogBuffer.reportEvent('PageSwitchTopLevel', new Date(),\r\n      {\r\n        pageAreaType,\r\n        pageAreaName,\r\n        newPageName,\r\n        position\r\n      });\r\n\r\n    TaskManager.preparePageSwitchInPresenterState(\r\n      this.activeTestName, this.activeItemName, this.activeTaskName,\r\n      pageAreaType, pageAreaName, newPageName, position,\r\n      this.runtime\r\n    );\r\n    if (this.handleTopLevelPageChange !== undefined) {\r\n      this.handleTopLevelPageChange();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch the currently embedded page in a CbaPageArea display component instance to an explicitly given page.\r\n   * \r\n   * @param {String} fullReceiverPath The full index path of the CbaPageArea display component instance to modify.\r\n   * @param {String} newPageName The name of the page to load into the page area.\r\n   * @param {String} pageUrl The URL to use for the new page.\r\n   * @param {{name: String, image: String}} receiverTab The tab in the CbaPageArea to load the page into (optional). \r\n   */\r\n  switchEmbeddedPage = (fullReceiverPath, newPageName, pageUrl, receiverTab) => {\r\n    const userDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(fullReceiverPath, this.runtime);\r\n    this.runtime.traceLogBuffer.reportEvent('PageSwitchEmbedded', new Date(),\r\n      {\r\n        indexPath: fullReceiverPath,\r\n        userDefIdPath,\r\n        userDefId: UserDefPathHelper.getLastUserDefIdFromPath(userDefIdPath),\r\n        tab: receiverTab === undefined ? undefined : receiverTab.name,\r\n        newPageName\r\n      });\r\n    CbaPageArea.setPageName(fullReceiverPath, receiverTab, newPageName, pageUrl, this.runtime);\r\n    RenderingHelper.triggerRenderingViaPath(fullReceiverPath, this.runtime);\r\n  }\r\n\r\n  /**\r\n   * Switch the currently embedded page in a CbaPageArea to the next or previous page in the page history.\r\n   * \r\n   * @param {String} fullReceiverPath The full index path of the CbaPageArea display component instance to modify.\r\n   * @param {String} historyMove The kind of 'move' in the page history: 'forward', 'back' or 'home'\r\n   */\r\n  doHistoryMove = (fullReceiverPath, historyMove) => {\r\n    CbaPageArea.doHistoryMove(fullReceiverPath, historyMove, this.runtime);\r\n    RenderingHelper.triggerRenderingViaPath(fullReceiverPath, this.runtime);\r\n  }\r\n\r\n  /**\r\n   * Get the path root for the current task (which is the same as the task ID returned by the methods above).\r\n   */\r\n  getCurrentStatePathRoot = () => IndexPathHelper.buildPathRoot(this.activeTestName, this.activeItemName, this.activeTaskName);\r\n\r\n  /**\r\n   * Get the path root for the given task (taking the current test and item for the other path components).\r\n   */\r\n  getStatePathRootForTask = taskName => IndexPathHelper.buildPathRoot(this.activeTestName, this.activeItemName, taskName);\r\n\r\n  /**\r\n   * The the names of the currently active test/item/task.\r\n   */\r\n  getCurrentTestTaskItemNames = () => ({\r\n    test: this.activeTestName,\r\n    item: this.activeItemName,\r\n    task: this.activeTaskName\r\n  });\r\n\r\n\r\n  /**\r\n   * Get the names of the pages currently displayed in the standard page area and the Xpage area.\r\n   */\r\n  getCurrentPageNames = () => {\r\n    const taskId = IndexPathHelper.buildPathRoot(this.activeTestName, this.activeItemName, this.activeTaskName);\r\n    const taskEntry = this.runtime.presenterStateManager.getTaskState(taskId);\r\n    return {\r\n      standardPage: taskEntry === undefined ? undefined : taskEntry.standardPage,\r\n      xPage: taskEntry === undefined ? undefined : taskEntry.xPage\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Calculate the results for all named calculations of the current task and save them in the task results manager. \r\n   */\r\n  saveCurrentTaskResults = () => {\r\n    const calculations = this.runtime.calculationsConfigurationManager.findAllCalculationsByTaskName(this.activeTaskName);\r\n    this.runtime.taskResultsManager.saveTaskResults(this.getCurrentStatePathRoot(), calculations, this.runtime);\r\n  }\r\n\r\n  /**\r\n   * Calculate the results for all named calculations of the current task, save them in the task results manager\r\n   * and return them as an object.\r\n   * The result object has one attribute per named calculation:\r\n   * The attribute name is the calculation name, the attribute's value is the calculation result. \r\n   */\r\n  getCurrentTaskResults = () => {\r\n    this.saveCurrentTaskResults();\r\n    return this.runtime.taskResultsManager.getResultsListForTask(this.getCurrentStatePathRoot());\r\n  }\r\n\r\n  /**\r\n   * Get the results for all named calculations of the given task from the task results manager\r\n   * and return them as an object.\r\n   * The result object has one attribute per named calculation:\r\n   * The attribute name is the calculation name, the attribute's value is the calculation result. \r\n   * \r\n   * The method does not recalculate anything. You should probably not use it for the currently running task!\r\n   * Use getCurrentTaskResults() to get up-to-date results for the currently running task. \r\n   */\r\n  getOldTaskResults = (task, item, test) => this.runtime.taskResultsManager.getResultsListForTask(IndexPathHelper.buildPathRoot(test, item, task));\r\n\r\n\r\n  /**\r\n   * Calculate the scoring results as specified in the scoring results configuration.\r\n   */\r\n  getScoring = () => {\r\n\r\n    const evaluationResult = {\r\n      hitRows: this.buildScoringHitMissListEvaluationResult('hitList'),\r\n      missRows: this.buildScoringHitMissListEvaluationResult('missList'),\r\n      hitClassRows: this.buildScoringClassListEvaluationResult('hitClassList'),\r\n      missClassRows: this.buildScoringClassListEvaluationResult('missClassList')\r\n    }\r\n\r\n    this.addScoringAttributesEvaluationResult(evaluationResult);\r\n\r\n    return evaluationResult;\r\n  }\r\n\r\n\r\n  /*\r\n  * Gets the top level configuration of the current item\r\n  */\r\n  getTopLevelConfiguration = () => this.runtime.presenterStateManager.getTaskState(this.getCurrentStatePathRoot());\r\n\r\n\r\n  /**\r\n   * Get the resource path for the currently active item.\r\n   */\r\n  getResourcePath = () => this.activeResourcePath;\r\n\r\n  /**\r\n   * Get the external resource path for the currently active item.\r\n   */\r\n  getExternalResourcePath = () => this.activeExternalResourcePath;\r\n\r\n  /**\r\n   * Stop the currently running task.\r\n   * \r\n   * When calling this method you should make sure that the App does not show the LoggedInView\r\n   * since there will be no current task available after the call.\r\n   */\r\n  stopTask = () => {\r\n    // nothing to do if there is no task currently running\r\n    if (this.activeTaskName === undefined) {\r\n      return;\r\n    }\r\n\r\n    const { runtime } = this;\r\n    this.saveCurrentTaskResults();\r\n    TraceLogHelper.dumpSnapshotToTrace(runtime);\r\n\r\n    // Trace task switch\r\n    runtime.traceLogBuffer.reportEvent('TaskSwitch', new Date(),\r\n      {\r\n        oldTask: this.activeTaskName,\r\n        oldItem: this.activeItemName,\r\n        oldTest: this.activeTestName,\r\n        newTask: undefined,\r\n        newItem: undefined,\r\n        newTest: undefined,\r\n        taskResult: runtime.taskResultsManager.getResultsListForTask(this.getCurrentStatePathRoot()),\r\n      });\r\n\r\n    runtime.incidentsAccumulator.leaveTask(new Date().getTime(), runtime);\r\n    runtime.statemachinesManager.stopCurrentStatemachine();\r\n    this.activeTaskName = undefined;\r\n    runtime.traceLogBuffer.setTestItemTaskNames(this.activeTestName, this.activeItemName, this.activeTaskName);\r\n  }\r\n\r\n\r\n  /**\r\n   * Switch to a new test/task setting.\r\n   * \r\n   * The method returns the task ID or undefined if it could not do the switch.\r\n   * \r\n   * In replay mode the method does not run a state machine and does not configure\r\n   * the managers dealing the state that may change while running a task. \r\n   * (It switches the purely item configuration related managers to the new item \r\n   * in both modes.) \r\n   */\r\n  switchTask = (newTestName, newItemName, newTaskName, replayMode) => {\r\n    const { runtime } = this;\r\n    if (!(this.activeTaskName === undefined)) {\r\n      this.saveCurrentTaskResults();\r\n      TraceLogHelper.dumpSnapshotToTrace(runtime);\r\n    }\r\n\r\n    // Make sure we know the new item and task:\r\n    const itemInfo = TaskManager.getItemInfoForName(this.itemInfoEntries, newItemName);\r\n    if (itemInfo === undefined) {\r\n      return undefined;\r\n    }\r\n    const { itemConfiguration } = itemInfo;\r\n\r\n    const newTask = TaskManager.getTaskForName(itemConfiguration, newTaskName);\r\n    if (newTask === undefined) {\r\n      return undefined;\r\n    }\r\n    const newTaskId = IndexPathHelper.buildPathRoot(newTestName, newItemName, newTaskName);\r\n\r\n    // Do the switch: We cannot bail out now anymore...\r\n\r\n\r\n    // Trace task switch\r\n    runtime.traceLogBuffer.reportEvent('TaskSwitch', new Date(),\r\n      {\r\n        oldTask: this.activeTaskName,\r\n        oldItem: this.activeItemName,\r\n        oldTest: this.activeTestName,\r\n        newTask: newTaskName,\r\n        newItem: newItemName,\r\n        newTest: newTestName,\r\n        taskResult: runtime.taskResultsManager.getResultsListForTask(this.getCurrentStatePathRoot()),\r\n      });\r\n    runtime.traceLogBuffer.setTestItemTaskNames(newTestName, newItemName, newTaskName);\r\n\r\n\r\n    // Switch configurations managers to new item if necessary:\r\n    if (newItemName !== this.activeItemName) {\r\n      runtime.pageConfigurationsManager = new PageConfigurationsManager(itemConfiguration);\r\n      runtime.calculationsConfigurationManager = new CalculationsConfigurationManager(itemConfiguration);\r\n      runtime.valueMapper = new ValueMapper(itemConfiguration, runtime);\r\n      runtime.traceLogBuffer.reportEvent('ItemSwitch', new Date(), {\r\n        item: itemConfiguration,\r\n      })\r\n      this.activeResourcePath = itemInfo.resourcePath;\r\n      this.activeExternalResourcePath = itemInfo.externalResourcePath;\r\n    }\r\n\r\n    this.activeTestName = newTestName;\r\n    this.activeItemName = newItemName;\r\n    this.activeTaskName = newTaskName;\r\n\r\n    if (replayMode) {\r\n      runtime.statemachinesManager.stopCurrentStatemachine();\r\n      runtime.calculatorsManager.setOrInitializeCurrentCalculator(newTaskId, runtime);\r\n      runtime.statemachinesManager.switchCurrentStatemachineWithoutStarting(newTaskId);\r\n    } else {\r\n      runtime.incidentsAccumulator.enterTask(newTaskId, new Date().getTime(), runtime);\r\n\r\n      runtime.statemachinesManager.stopCurrentStatemachine();\r\n      runtime.variableManager.initializeVariablesForTask(\r\n        newTaskId, itemConfiguration.variables, TaskManager.getTaskForName(itemConfiguration, newTaskName).traceVariableValues, runtime\r\n      );\r\n      TaskManager.prepareTaskSwitchInPresenterAndNavigatorState(newTestName, newItemName, newTaskName, newTaskId, newTask, runtime);\r\n      runtime.calculatorsManager.setOrInitializeCurrentCalculator(newTaskId, runtime);\r\n      runtime.statemachinesManager.startOrInitializeCurrentStatemachine(newTaskId, itemConfiguration.statemachine, runtime);\r\n      TraceLogHelper.dumpFullStateToTrace(runtime);\r\n    }\r\n\r\n\r\n    return newTaskId;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => {\r\n    const {\r\n      componentStateManager,\r\n      componentDirectory,\r\n      variableManager,\r\n      statemachinesManager,\r\n      incidentsAccumulator,\r\n      presenterStateManager,\r\n      taskNavigatorStateManager,\r\n      taskResultsManager,\r\n      clipboardManager,\r\n      calculatorsManager\r\n    } = this.runtime;\r\n\r\n    return {\r\n      componentsState: componentStateManager.getStateSnapshot(componentDirectory),\r\n      statemachines: statemachinesManager.getStatemachinesPreloadData(),\r\n      variables: variableManager.getAllTasksState(),\r\n      incidents: incidentsAccumulator.getAllTasksState(),\r\n      presenterState: presenterStateManager.getAllTasksState(),\r\n      taskNavigatorState: taskNavigatorStateManager.getAllTasksState(),\r\n      taskResults: taskResultsManager.getAllTasksState(),\r\n      clipboard: clipboardManager.getAllTasksState(),\r\n      calculators: calculatorsManager.getAllTasksState()\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clear the current state of all state managers.\r\n   */\r\n  clearTasksState = () => {\r\n    const {\r\n      componentStateManager,\r\n      variableManager,\r\n      statemachinesManager,\r\n      incidentsAccumulator,\r\n      presenterStateManager,\r\n      taskNavigatorStateManager,\r\n      taskResultsManager,\r\n      clipboardManager,\r\n      calculatorsManager\r\n    } = this.runtime;\r\n    componentStateManager.clear();\r\n    variableManager.clearTasksState();\r\n    statemachinesManager.clearStatemachines(this.runtime);\r\n    incidentsAccumulator.clearTasksState();\r\n    presenterStateManager.clearTasksState();\r\n    taskNavigatorStateManager.clearTasksState();\r\n    taskResultsManager.clearTasksState();\r\n    clipboardManager.clearTasksState();\r\n    calculatorsManager.clearTasksState();\r\n  }\r\n\r\n  /**\r\n   * Preload the state managers with the state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    const {\r\n      componentStateManager,\r\n      variableManager,\r\n      statemachinesManager,\r\n      incidentsAccumulator,\r\n      presenterStateManager,\r\n      taskNavigatorStateManager,\r\n      taskResultsManager,\r\n      clipboardManager,\r\n      calculatorsManager\r\n    } = this.runtime;\r\n    componentStateManager.preloadWithStateSnapshot(allTasksState.componentsState);\r\n    variableManager.preloadTasksState(allTasksState.variables);\r\n    statemachinesManager.preloadStatemachinesData(allTasksState.statemachines, this.runtime);\r\n    incidentsAccumulator.preloadTasksState(allTasksState.incidents);\r\n    presenterStateManager.preloadTasksState(allTasksState.presenterState);\r\n    taskNavigatorStateManager.preloadTasksState(allTasksState.taskNavigatorState);\r\n    taskResultsManager.preloadTasksState(allTasksState.taskResults);\r\n    clipboardManager.preloadTasksState(allTasksState.clipboard);\r\n    calculatorsManager.preloadTasksState(allTasksState.calculators);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} itemName Name of the item.\r\n   * \r\n   * @returns {Array} Item resources\r\n   */\r\n  getItemResources = (itemName) => {\r\n    const itemInfo = this.getItemInfo(itemName);\r\n\r\n    if (!itemInfo) {\r\n      console.error(\"Could not find item\", itemName);\r\n      return null;\r\n    }\r\n    const { itemConfiguration, externalResourcePath, resourcePath } = itemInfo;\r\n    const { usedResources } = itemConfiguration;\r\n\r\n    const externalResources = Utils.mapResourcePath(usedResources.externalResources, externalResourcePath, true);\r\n    const internalResources = Utils.mapResourcePath(usedResources.resources, resourcePath, false);\r\n    const resources = externalResources.concat(internalResources);\r\n\r\n    return resources;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} itemName Name of the item.\r\n   * \r\n   * @returns {Array} Font file/font family name Objects\r\n   */\r\n  getCustomFontMappings = (itemName) => {\r\n    const itemInfo = this.getItemInfo(itemName);\r\n\r\n    if (!itemInfo) {\r\n      console.error(\"Could not find item\", itemName);\r\n      return null;\r\n    }\r\n    const { itemConfiguration } = itemInfo;\r\n    const { usedResources } = itemConfiguration;\r\n\r\n    return usedResources.fontMappings;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} itemName Name of the item.\r\n   * \r\n   * @returns {*} Item configuration object.\r\n   */\r\n  getItemInfo = itemName => this.itemInfoEntries.find(itemInfoEntry => itemInfoEntry.itemConfiguration.name === itemName);\r\n\r\n  // --- private stuff -------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Check the availability of a task switch using the availabilty callback.\r\n   */\r\n  checkAvailableTask = (requestType, newTestName, newItemName, newTaskName) => {\r\n    const callback = this.availabilityCallback;\r\n    return (callback !== undefined\r\n      ? callback(requestType, newTestName, newItemName, newTaskName)\r\n      : false);\r\n  }\r\n\r\n  /**\r\n   * Trigger a task switch to the specified task using the swich callback.\r\n   */\r\n  triggerGoToTask = (newTestName, newItemName, newTaskName) => {\r\n    this.triggerTaskSwitch('goToTask', newTestName, newItemName, newTaskName);\r\n  }\r\n\r\n  /**\r\n   * Trigger a task switch using the swich callback.\r\n   */\r\n  triggerTaskSwitch = (requestType, newTestName, newItemName, newTaskName) => {\r\n    const callback = this.switchCallback;\r\n    if (callback !== undefined) {\r\n      callback(requestType, newTestName, newItemName, newTaskName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Evaluate the given conditional link and return the calculated target page name. \r\n   * \r\n   * The method returns the given default page name if there is no conditional link \r\n   * or none of the guard conditions evaluate to true.\r\n   */\r\n  static evaluateConditionalLink(defaultPageName, conditionalLink, runtime) {\r\n    if (conditionalLink === undefined) return defaultPageName;\r\n\r\n    const conditionalLinkResult = ConditionalLinkHelper.evaluateConditionalLink(conditionalLink, runtime);\r\n    return conditionalLinkResult === undefined ? defaultPageName : conditionalLinkResult;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the item info object for the specified item.\r\n   * \r\n   * The method returns the item info object, i.e. an object with attributes \r\n   *  - itemConfiguration (which has attributes name, pages, statemachine, tasks)\r\n   *  - resourcePath\r\n   *  - externalResourcePath\r\n   */\r\n  static getItemInfoForName(items, itemName) {\r\n    const result = items.find((value, index, theArray) => value.itemConfiguration.name === itemName);\r\n    if (result === undefined) {\r\n      console.error(`Could not find info for item ${itemName}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the task configuration object for the specified task defined by the specified \r\n   * item configuration object.\r\n   * \r\n   * The method returns the task configuration object, i.e. an object with attributes \r\n   *  - name\r\n   *  - initialPage\r\n   *  - itemWidth\r\n   *  - ...\r\n   */\r\n  static getTaskForName(item, taskName) {\r\n    const result = item.tasks.find((value, index, theArray) => value.name === taskName);\r\n    if (result === undefined) {\r\n      console.error(`Could not find task ${taskName} in item ${item.name}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the state of the given test and task in the TaskNavigatorStateManager and the PresenterStateManager\r\n   * according to the current task switch.\r\n   * \r\n   * The method will always set the new item/task name in the test state.\r\n   * The method will not change an already existing task state but will create an initial task state if there is none yet.\r\n   * To build the initial task state it will evaluate the task initialization rule.\r\n   */\r\n  static prepareTaskSwitchInPresenterAndNavigatorState(\r\n    testName, itemName, taskName,\r\n    taskId, task, runtime\r\n  ) {\r\n    const { taskNavigatorStateManager, presenterStateManager } = runtime;\r\n    taskNavigatorStateManager.saveTestState(\r\n      testName,\r\n      {\r\n        itemName,\r\n        taskName,\r\n      },\r\n      runtime\r\n    );\r\n\r\n    const oldTaskEntry = presenterStateManager.getTaskState(taskId);\r\n    if (oldTaskEntry === undefined) {\r\n      const initialTaskEntry = PresenterStateManager.buildInitialTaskStateObject(\r\n        task.initialPage, task.initialXPage,\r\n        task.itemWidth, task.itemHeight, task.itemLayout,\r\n        task.withEditContextMenu,\r\n        task.itemHighlightColor, task.highlightColors,\r\n        task.cssStyles\r\n      );\r\n      presenterStateManager.saveTaskState(taskId, initialTaskEntry, runtime);\r\n\r\n      const conditionResult = ConditionalLinkHelper.evaluateConditionalLink(task.initRule, runtime);\r\n      if (conditionResult !== undefined) {\r\n        const afterConditionEvaluationTaskEntry = presenterStateManager.getTaskState(taskId);\r\n        PresenterStateManager.setPageForPageAreaInTaskState(\r\n          conditionResult.pageName,\r\n          conditionResult.position,\r\n          conditionResult.pageAreaType,\r\n          conditionResult.pageAreaName,\r\n          afterConditionEvaluationTaskEntry\r\n        );\r\n        presenterStateManager.saveTaskState(taskId, afterConditionEvaluationTaskEntry, runtime);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Change the state of the current task in the PresenterStateManager\r\n   * according to the current page switch.\r\n   * \r\n   * The method will set the new page (and for dialogs the new position) in the task state.\r\n   */\r\n  static preparePageSwitchInPresenterState(testName, itemName, taskName, pageAreaType, pageAreaName, newPage, position, runtime) {\r\n    const taskId = IndexPathHelper.buildPathRoot(testName, itemName, taskName);\r\n    const taskEntry = runtime.presenterStateManager.getTaskState(taskId);\r\n    if (taskEntry === undefined) {\r\n      console.error(`Switch to page ${newPage} for not existing task: ${taskId}`);\r\n    } else {\r\n      PresenterStateManager.setPageForPageAreaInTaskState(newPage, position, pageAreaType, pageAreaName, taskEntry);\r\n      runtime.presenterStateManager.saveTaskState(taskId, taskEntry, runtime);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Helper method that calculates the attributes of a scoring result configuration.\r\n   */\r\n  addScoringAttributesEvaluationResult = (evaluationResult) => {\r\n    const attributes = this.runtime.calculationsConfigurationManager.findScoreResultAttributesByTaskName(this.activeTaskName);\r\n    Object.keys(attributes).forEach((key) => {\r\n      evaluationResult[key] = TermEvaluator.evaluateTerm(attributes[key], this.runtime, [], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the elements of a hit/miss scoring results list.\r\n   */\r\n  buildScoringHitMissListEvaluationResult = (scoringListName) => {\r\n    const scoringList = this.runtime.calculationsConfigurationManager.findScoreResultListByTaskName(this.activeTaskName, scoringListName);\r\n\r\n    const resultRows = [];\r\n    scoringList.forEach((calculation) => {\r\n      if (TermEvaluator.evaluateTerm(calculation.result, this.runtime, [], calculation.name)) {\r\n        const resultText = TermEvaluator.evaluateTerm(calculation.resultText, this.runtime, [], `${calculation.name}_text`);\r\n        resultRows.push({\r\n          name: calculation.name,\r\n          weight: calculation.weight,\r\n          class: calculation.class,\r\n          resultText\r\n        });\r\n      }\r\n    });\r\n    return resultRows;\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the elements of a class scoring results list.\r\n   */\r\n  buildScoringClassListEvaluationResult = (scoringListName) => {\r\n    const scoringList = this.runtime.calculationsConfigurationManager.findScoreResultListByTaskName(this.activeTaskName, scoringListName);\r\n\r\n    return scoringList.map(calculation => ({\r\n      name: calculation.name,\r\n      comment: calculation.comment,\r\n      value: TermEvaluator.evaluateTerm(calculation.value, this.runtime, [], calculation.name),\r\n      result: calculation.result === undefined ? undefined : TermEvaluator.evaluateTerm(calculation.result, this.runtime, [], `${calculation.name}_result`)\r\n    }));\r\n  }\r\n\r\n}\r\n","import TermEvaluator from '../eval/TermEvaluator';\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\nexport default class TaskResultsManager {\r\n\r\n  constructor() {\r\n    this.taskEntriesList = {};\r\n  }\r\n\r\n  // set values ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Calculate the results of all given named calculations for the given task and\r\n   * store them in the task results catalog.\r\n   * \r\n   * Note: Be aware that some operators in the TermEvaluator use the currently active task implicitly. \r\n   * So you cannot freely use a taskPath here if those operators are involved (and they are involved usually).\r\n   * You have to use the current task path then.\r\n   */\r\n  saveTaskResults = (taskPath, calculations, runtime) => {\r\n    // We start with a cleared task result, i.e. we calculate everything from sratch:\r\n    this.taskEntriesList[taskPath] = {};\r\n    const resultsForTask = this.taskEntriesList[taskPath];\r\n\r\n    calculations.forEach((value, index, all) => {\r\n      // Performance improvement:\r\n      // Since we calculate everything from scratch we can assume that already calculated values are up-to-date\r\n      // -> activate reuse of existing calculation results in the evaluateNamedCalculation operator:\r\n      resultsForTask[value.name] = TermEvaluator.evaluateTerm(value.calculation, runtime, [{\r\n        useExistingCalculationResults: true, taskPath\r\n      }], value.name);\r\n    });\r\n  }\r\n\r\n\r\n  // get values --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get a stored result for a given named calculation in the given task.\r\n   */\r\n  getResult = (taskPath, calculationName) => this.getResultsListForTask(taskPath)[calculationName];\r\n\r\n\r\n  /**\r\n   * Get all stored calculation results for the given task.\r\n   */\r\n  getResultsListForTask = (taskPath) => {\r\n    if (this.taskEntriesList[taskPath] === undefined) {\r\n      return {};\r\n    }\r\n    return this.taskEntriesList[taskPath];\r\n  }\r\n\r\n  /**\r\n   * Get the stored calculation results for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.taskEntriesList);\r\n\r\n  /**\r\n   * Drop stored calculation results for all tasks.\r\n   */\r\n  clearTasksState = () => { this.taskEntriesList = {}; };\r\n\r\n  /**\r\n   * Preload the stored calculation results for all tasks returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.taskEntriesList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n}\r\n","\r\n/**\r\n * A catalog of all timed events of a single statemachine.\r\n * \r\n * A timed event in our catalog always keeps these attributes:\r\n *  - name\r\n *  - trigger interval\r\n *  - accepting states list\r\n * While a timed event is 'running' it also keeps these attributes\r\n *  - handle of the 'timeout' scheduled on the global 'window'\r\n *  - planned point in time for the 'timeout' to trigger\r\n * While a timed event is 'paused' it also keeps these attributes:\r\n *  - remaining milli seconds when 'pause' state was entered\r\n * \r\n * The lifecycle states of an event entry are:\r\n *  - stopped: The timed event is declared but was stopped or was never started at all.\r\n *  - running: The timed event was started and now waits for the timeout interval to run out.\r\n *  - paused: A previously started event was paused, i.e. it has interrupted the run down of the timeout interval.\r\n * \r\n * The lifecycle state changes are:\r\n * - An event is created in the 'stopped' state: name, trigger interval and accepting states list are given explicitly.\r\n * - Starting an event establishes a timeout on the global window and stores the planned trigger time (planned time is 'now' + 'trigger interval').\r\n * - Pausing an event clears the timeout on the global window and stores the remaining interval (by comparing the current time with the planned trigger time).\r\n * - Resuming an event establishes a timeout on the global window with a new planned trigger time (planned time is 'now' + 'remaining millis').\r\n * - Stopping an event clears the timeout on the global window (if 'running') and clears the remaining millis (if 'paused').\r\n * - A triggering timeout sets the event back to 'stopped' state before triggering the statemachine action. \r\n * \r\n * An event in state 'running' or 'paused' is filtered as 'scheduled', an event in 'stopped' state is 'unscheduled'.\r\n */\r\nexport default class TimedEventsCatalog {\r\n\r\n  constructor() {\r\n    this.timedEventsList = [];\r\n  }\r\n\r\n  // ------------- public API -------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Put a timed event entry into our catalog.\r\n   * \r\n   * The method will update the entry if an entry for the given name exists already.\r\n   * \r\n   * @param {String} name The name of the timed event.\r\n   * @param {Number} triggerInterval The interval (in milliseconds) that will elapse between starting the timer and triggering the event.\r\n   * @param {[String]} acceptingStatesList The list of state machine states accepting the timed event.\r\n   */\r\n  putEntry = (name, triggerInterval, acceptingStatesList) => {\r\n    const oldEntry = this.getEntry(name);\r\n    if (oldEntry !== undefined) {\r\n      console.warn(`Updating already existing timed event with name ${name}`);\r\n      oldEntry.triggerInterval = triggerInterval;\r\n      oldEntry.acceptingStatesList = acceptingStatesList;\r\n    } else {\r\n      this.timedEventsList.push(TimedEventsCatalog.buildTimedEventEntry(name, triggerInterval, acceptingStatesList, undefined, undefined, undefined));\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Find a timed event entry in our catalog by event name.\r\n   * \r\n   * @param {String} name The name of the timed event.\r\n   */\r\n  getEntry = name => this.timedEventsList.find(entry => entry.name === name);\r\n\r\n  /**\r\n   * Get an excerpt of the event entry for logging purposes.\r\n   * \r\n   * @param {*} eventEntry The event entry to get the excerpt from.\r\n   * @param {*} now The current point in time as base for remaining time calculation.\r\n   */\r\n  static getEventData(eventEntry, now) {\r\n    const isRunning = eventEntry.scheduledTimeoutHandle !== undefined;\r\n    const remainingInterval = isRunning ? eventEntry.scheduledTriggerTime.getTime() - now.getTime() : eventEntry.remainingInterval;\r\n    return {\r\n      totalTime: eventEntry.triggerInterval,\r\n      isRunning,\r\n      remainingTime: remainingInterval\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is the given event paused currently?\r\n   * \r\n   * @param {*} eventEntry \r\n   */\r\n  static isPaused(eventEntry) {\r\n    return eventEntry.remainingInterval !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Find the entries of the timed events that the given state accepts and that are not scheduled currently.\r\n   * \r\n   * @param {String} stateName The name of the state that must accept the matching events.\r\n   */\r\n  findUnscheduledEventsByState(stateName) {\r\n    return this.timedEventsList.filter(\r\n      eventEntry => eventEntry.acceptingStatesList.includes(stateName)\r\n      && eventEntry.scheduledTimeoutHandle === undefined\r\n      && eventEntry.scheduledTriggerTime === undefined\r\n      && eventEntry.remainingInterval === undefined\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Find the entries of the timed events that the given state accepts and that are scheduled currently.\r\n   * \r\n   * @param {String} stateName The name of the state that must accept the matching events.\r\n   */\r\n  findScheduledEventsByState(stateName) {\r\n    return this.timedEventsList.filter(\r\n      eventEntry => eventEntry.acceptingStatesList.includes(stateName)\r\n      && (\r\n        eventEntry.scheduledTimeoutHandle !== undefined\r\n        || eventEntry.scheduledTriggerTime !== undefined\r\n        || eventEntry.remainingInterval !== undefined)\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * Find the entries of all timed events that are scheduled currently.\r\n   */\r\n  findScheduledEvents() {\r\n    return this.timedEventsList.filter(\r\n      eventEntry => eventEntry.scheduledTimeoutHandle !== undefined\r\n      || eventEntry.scheduledTriggerTime !== undefined\r\n      || eventEntry.remainingInterval !== undefined\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a map eventName -> interval of the current event interval settings.\r\n   */\r\n  getTimerIntervals = () => {\r\n    const result = {};\r\n    this.timedEventsList.forEach((entry) => {\r\n      result[entry.name] = entry.triggerInterval;\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * (Re)start the timed event. \r\n   * \r\n   * The method will schedule the event with a full trigger interval.\r\n   * \r\n   * @param {*} timedEventEntry \r\n   * @param {*} statemachine \r\n   */\r\n  startTimedEvent(timedEventEntry, statemachine) {\r\n    this.scheduleTimedEvent(timedEventEntry, timedEventEntry.triggerInterval, statemachine);\r\n  }\r\n\r\n  /**\r\n   * Resume the timed event. \r\n   * \r\n   * The method will schedule the event with the remaining interval\r\n   * as calculated when the event was paused.\r\n   * \r\n   * @param {*} timedEventEntry \r\n   * @param {*} statemachine \r\n   */\r\n  resumeTimedEvent(timedEventEntry, statemachine) {\r\n    // Don't try to resume an event that is not paused (should not happen):\r\n    if (timedEventEntry.remainingInterval !== undefined) {\r\n      this.scheduleTimedEvent(timedEventEntry, timedEventEntry.remainingInterval, statemachine);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the running timer for the given timer info structure.\r\n   * \r\n   * @param {*} timedEventEntry \r\n   */\r\n  stopTimedEvent(timedEventEntry) {\r\n    // The event might be 'paused': handle is undefined but remainingInterval is set.\r\n    // -> Reset to fully stopped state.\r\n    if (timedEventEntry.scheduledTimeoutHandle !== undefined) {\r\n      this.clearTimeoutHook(timedEventEntry.scheduledTimeoutHandle);\r\n    }\r\n    TimedEventsCatalog.setScheduledDataInTimedEventEntry(undefined, undefined, undefined, timedEventEntry);\r\n  }\r\n\r\n  /**\r\n   * Pause the running timer for the given timer info structure.\r\n   * \r\n   * @param {*} timedEventEntry The timed event entry to modify.\r\n   * @param {Date} now The current time (as base to calculate the remaining time).\r\n   */\r\n  pauseTimedEvent(timedEventEntry, now) {\r\n    // There is nothing to do if the event is paused already or is not scheduled at all:\r\n    if (timedEventEntry.scheduledTimeoutHandle !== undefined) {\r\n      this.clearTimeoutHook(timedEventEntry.scheduledTimeoutHandle);\r\n      const remainingInterval = timedEventEntry.scheduledTriggerTime.getTime() - now.getTime();\r\n      TimedEventsCatalog.setScheduledDataInTimedEventEntry(undefined, undefined, remainingInterval, timedEventEntry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change the trigger interval in a timed event entry.\r\n   * \r\n   * @param {Number} triggerInterval The new value for the trigger interval.\r\n   * @param {*} entryToModify The timer entry that the method will modify.\r\n   */\r\n  static setTriggerIntervalInEventEntry(triggerInterval, entryToModify) {\r\n    entryToModify.triggerInterval = triggerInterval;\r\n  }\r\n\r\n\r\n  // ------------ private stuff ----------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Schedule the given event to trigger at the given interval from now. \r\n   * \r\n   * Due to the startInterval parameter we can use this method to restart \r\n   * an event completely or to just resume the event after a pause.\r\n   * \r\n   * @param {*} timedEventEntry The event to schedule.\r\n   * @param {*} startInterval The interval (in milliseconds) from now to the triggering point in time.\r\n   * @param {*} statemachine The statemachine providing the 'now' time and the callback to be triggered.\r\n   */\r\n  scheduleTimedEvent(timedEventEntry, startInterval, statemachine) {\r\n\r\n    // Determine point in time to trigger event action:\r\n    const now = statemachine.getNow();\r\n    const targetTime = new Date(now.getTime() + startInterval);\r\n    if (targetTime === undefined) {\r\n      console.error(`Invalid target time to schedule event: ${timedEventEntry.name} with start interval ${startInterval}`);\r\n      return;\r\n    }\r\n\r\n    // Check and normalize event scheduling status: \r\n    if (timedEventEntry.scheduledTimeoutHandle !== undefined) {\r\n      console.warn(`Rescheduling scheduled event: ${timedEventEntry.name} from ${timedEventEntry.scheduledTriggerTime} to ${targetTime}`);\r\n      this.clearTimeoutHook(timedEventEntry.scheduledTimeoutHandle);\r\n    }\r\n\r\n    // Schedule event in global event loop:\r\n    const timeoutId = this.setTimeoutHook((eventEntry) => {\r\n      // Drop schedule handler in event entry in timed events catalog as soon as scheduled event is triggered.\r\n      // Do this before triggering the event on the state machine since this might restart the timeout!\r\n      TimedEventsCatalog.setScheduledDataInTimedEventEntry(undefined, undefined, undefined, eventEntry);\r\n      // Actually trigger the event. \r\n      statemachine.triggerEvent(eventEntry.name);\r\n    },\r\n    startInterval,\r\n    timedEventEntry);\r\n\r\n    // Set scheduling data in event entry:\r\n    TimedEventsCatalog.setScheduledDataInTimedEventEntry(timeoutId, targetTime, undefined, timedEventEntry);\r\n  }\r\n\r\n  /**\r\n   * Update the scheduling related data in a timed event entry.\r\n   * \r\n   * @param {*} scheduledTimeoutHandle The handle to the object keeping track of the scheduled action that will trigger the event.\r\n   * @param {Date} scheduledTriggerTime The point in time when the timer will trigger the event the next time.\r\n   * @param {Number} remainingInterval The new value for the remaining interval.\r\n   * @param {*} entryToModify The timer entry that the method will modify.\r\n   */\r\n  static setScheduledDataInTimedEventEntry(scheduledTimeoutHandle, scheduledTriggerTime, remainingInterval, entryToModify) {\r\n    entryToModify.scheduledTimeoutHandle = scheduledTimeoutHandle;\r\n    entryToModify.scheduledTriggerTime = scheduledTriggerTime;\r\n    entryToModify.remainingInterval = remainingInterval;\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a timed event entry to be kept in our catalog.\r\n   * \r\n   * @param {String} name The name of the timed event.\r\n   * @param {Number} triggerInterval The interval (in milliseconds) that will elapse between starting the timer and triggering the event.\r\n   * @param {[String]} acceptingStatesList The list of state machine states accepting the timed event.\r\n   * @param {*} scheduledTimeoutHandle The handle to the object keeping track of the scheduled action that will trigger the event.\r\n   * @param {Date} scheduledTriggerTime The point in time when the timer will trigger the event the next time.\r\n   * @param {Number} remainingInterval The rest of the triggerInterval (in milliseconds) remaining once the state machine resumes operation after a pause. \r\n   * This is undefined while the state machine is not paused.\r\n   */\r\n  static buildTimedEventEntry(name, triggerInterval, acceptingStatesList, scheduledTimeoutHandle, scheduledTriggerTime, remainingInterval) {\r\n    const statesList = acceptingStatesList === undefined ? [] : acceptingStatesList.map(value => value);\r\n    return {\r\n      name,\r\n      triggerInterval,\r\n      acceptingStatesList: statesList,\r\n      scheduledTimeoutHandle,\r\n      scheduledTriggerTime,\r\n      remainingInterval\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Test helper: Mock hook for window.clearTimeout calls.\r\n   */\r\n  clearTimeoutHook = (handle) => {\r\n    window.clearTimeout(handle);\r\n  }\r\n\r\n  /**\r\n   * Test helper: Mock hook for window.setTimeout calls.\r\n   */\r\n  setTimeoutHook = (callback, interval, argument) => window.setTimeout(callback, interval, argument);\r\n\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\n\r\n/**\r\n * A history of triggered events for a single state machine.\r\n */\r\nexport default class StatemachineEventHistory {\r\n\r\n  constructor(snapshot) {\r\n    // all events that were given to the interpreter.gen() method (in triggerEvent)\r\n    const initialValues = (snapshot !== undefined) ? StateManagerHelper.deepCopy(snapshot) : {\r\n      raisedEvents: [],\r\n      raisedEventsPerState: [],\r\n      totalNbOfRaisedEvents: 0,\r\n      visitedStates: [],\r\n      valuesPerVariable: [],\r\n      valuesPerVariableAfterLastArtificialEvent: []\r\n    }\r\n\r\n    this.raisedEvents = initialValues.raisedEvents;\r\n\r\n    // all events that were raised in a given state, each entry is: {state, [events]}\r\n    this.raisedEventsPerState = initialValues.raisedEventsPerState;\r\n\r\n    // the total number of events raised\r\n    this.totalNbOfRaisedEvents = initialValues.totalNbOfRaisedEvents;\r\n\r\n    // all states that were visited\r\n    this.visitedStates = initialValues.visitedStates;\r\n\r\n    // all values that were assigned to a given variable, each entry is: {variable, [values]}\r\n    this.valuesPerVariable = initialValues.valuesPerVariable;\r\n\r\n    // the values of all variables that were assigned after the last artificial event (i.e. event name starts with dot: '.init' etc.)\r\n    this.valuesPerVariableAfterLastArtificialEvent = initialValues.valuesPerVariableAfterLastArtificialEvent;\r\n\r\n  }\r\n\r\n  // ------------- public API -------------------------------------------------------------------------\r\n\r\n  getHistoryDataForSnapshot = () => (\r\n    StateManagerHelper.deepCopy(\r\n      {\r\n        raisedEvents: this.raisedEvents,\r\n        raisedEventsPerState: this.raisedEventsPerState,\r\n        totalNbOfRaisedEvents: this.totalNbOfRaisedEvents,\r\n        visitedStates: this.visitedStates,\r\n        valuesPerVariable: this.valuesPerVariable,\r\n        valuesPerVariableAfterLastArtificialEvent: this.valuesPerVariableAfterLastArtificialEvent\r\n      }\r\n    )\r\n  )\r\n\r\n\r\n  /**\r\n   * Report the status before processing an event.\r\n   * \r\n   * @param {String} eventName The name of the event that was processed.\r\n   * @param {[String]} activeStates The list of states that were active when the event occured.\r\n   * @param {[{variable, value}]} variableValues The list of statemachine variables with their values when the event occured.\r\n   */\r\n  reportBeforeEvent = (eventName, activeStates, variableValues) => {\r\n    this.addVisitedStates(activeStates);\r\n\r\n    if (!StatemachineEventHistory.isArtificialEvent(eventName)) {\r\n      this.addRaisedEvent(eventName);\r\n      this.addRaisedEventPerStates(activeStates, eventName);\r\n\r\n      // Insert the variable values from the end of the last preceeding event now:\r\n      if (this.valuesPerVariableAfterLastArtificialEvent.length !== 0) {\r\n        this.addVariableValues(this.valuesPerVariableAfterLastArtificialEvent);\r\n        this.valuesPerVariableAfterLastArtificialEvent = [];\r\n      }\r\n      this.addVariableValues(variableValues);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report the status after processing an event.\r\n   * \r\n   * @param {String} eventName The name of the event that was processed.\r\n   * @param {[String]} activeStates The list of states that were active when the event processing finished.\r\n   * @param {[{variable, value}]} variableValues The list of statemachine variables with their values when the event processing finished.\r\n   */\r\n  reportAfterEvent = (eventName, activeStates, variableValues) => {\r\n    this.addVisitedStates(activeStates);\r\n\r\n    // If that is the last event before the next real event\r\n    // we should put the variable values to the history. \r\n    // --> Remember values now and put them into history if the next event is not artificial.\r\n    // Copy memorized entries to detach from statemachine's variable table:\r\n    this.valuesPerVariableAfterLastArtificialEvent = variableValues.map(entry => ({\r\n      name: entry.name,\r\n      value: entry.value\r\n    }));\r\n  }\r\n\r\n\r\n  /**\r\n   * Get an array of all events that were raised. \r\n   */\r\n  getRaisedEvents = () => this.raisedEvents.slice();\r\n\r\n  /**\r\n   * Get an array of all events that were raised while the given state was active.\r\n   */\r\n  getRaisedEventsInState = (state) => {\r\n    const match = this.raisedEventsPerState.find(entry => entry.state === state);\r\n    return match === undefined ? [] : match.events.slice();\r\n  };\r\n\r\n  /**\r\n   * Get the total number of events that were raised. \r\n   */\r\n  getTotalNbOfRaisedEvents = () => this.totalNbOfRaisedEvents;\r\n\r\n  /**\r\n   * Get an array of all states that were visited.\r\n   */\r\n  getVisitedStates = () => this.visitedStates.slice();\r\n\r\n  /**\r\n   * Get an array of all values that a variable had before or after triggering an event.\r\n   */\r\n  getValuesOfVariable = (variable) => {\r\n    const matchInHistory = this.valuesPerVariable.find(entry => entry.name === variable);\r\n    const matchInPendingMemory = this.valuesPerVariableAfterLastArtificialEvent.find(entry => entry.name === variable);\r\n    if (matchInHistory === undefined && matchInPendingMemory === undefined) {\r\n      return [];\r\n    }\r\n    if (matchInHistory === undefined) {\r\n      return [matchInPendingMemory.value];\r\n    }\r\n    // Copy result to detach from our history:\r\n    const result = matchInHistory.values.slice();\r\n    if (matchInPendingMemory !== undefined && !result.includes(matchInPendingMemory.value)) {\r\n      result.push(matchInPendingMemory.value);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // ------------ private stuff ----------------------------------------------------------------------------\r\n  static isArtificialEvent(eventName) {\r\n    return eventName.startsWith('.');\r\n  }\r\n\r\n  static isArtificialVariable(variableName) {\r\n    return variableName.indexOf('.') !== -1;\r\n  }\r\n\r\n  addRaisedEvent = (event) => {\r\n    this.totalNbOfRaisedEvents += 1;\r\n    if (!this.raisedEvents.includes(event)) {\r\n      this.raisedEvents.push(event);\r\n    }\r\n  }\r\n\r\n  addRaisedEventPerState = (state, event) => {\r\n    const oldEntry = this.raisedEventsPerState.find(entry => entry.state === state);\r\n    if (oldEntry === undefined) {\r\n      this.raisedEventsPerState.push({\r\n        state,\r\n        events: [event]\r\n      })\r\n    } else if (!oldEntry.events.includes(event)) {\r\n      oldEntry.events.push(event);\r\n    }\r\n  }\r\n\r\n  addRaisedEventPerStates = (states, event) => {\r\n    states.forEach((state) => {\r\n      this.addRaisedEventPerState(state, event)\r\n    });\r\n  }\r\n\r\n  addVisitedState = (state) => {\r\n    if (!this.visitedStates.includes(state)) {\r\n      this.visitedStates.push(state);\r\n    }\r\n  }\r\n\r\n  addVisitedStates = (states) => {\r\n    states.forEach((stateToAdd) => {\r\n      this.addVisitedState(stateToAdd)\r\n    });\r\n  }\r\n\r\n  addValuePerVariable = (variable, value) => {\r\n    if (!StatemachineEventHistory.isArtificialVariable(variable)) {\r\n      const oldEntry = this.valuesPerVariable.find(entry => entry.name === variable);\r\n      if (oldEntry === undefined) {\r\n        this.valuesPerVariable.push({\r\n          name: variable,\r\n          values: [value]\r\n        })\r\n      } else if (!oldEntry.values.includes(value)) {\r\n        oldEntry.values.push(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  addVariableValues = (variableInfos) => {\r\n    variableInfos.forEach((variableInfo) => { this.addValuePerVariable(variableInfo.name, variableInfo.value); });\r\n  }\r\n\r\n}\r\n","import 'babel-polyfill';\r\nimport scxml from '../../node_modules/scxml/dist/scxml';\r\nimport TermEvaluator from '../eval/TermEvaluator';\r\nimport TimedEventsCatalog from './TimedEventsCatalog';\r\nimport StatemachineEventHistory from './StatemachineEventHistory';\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\n/**\r\n * A state machine for a single task.\r\n * \r\n * Our implementation is a wrapper around the SCXML state machine \r\n * provided by the SCXML library.\r\n * \r\n * This wrapper transforms our state machine model configuration\r\n * to the configuration exepected by the SCXML implementation \r\n * and provides additional functionality: \r\n *  - state machine variables\r\n *  - timed events\r\n */\r\nexport default class Statemachine {\r\n\r\n  /**\r\n   * @param {*} model The statemachine model as provided by the item config structure.\r\n   * @param {*} timedEventDefaults A map eventName -> interval of changes for event intervals that should override the intervals given in the model.\r\n   * @param {*} statePageMapDefaults A map stateName -> {pageName, areaType, areaName} that defines an (optional) page switch assigned to each state.\r\n   * @param {*} snapshot An (optional) snapshot to continue the state machine where we left off the last time. Use the result of a getSnapshot() call.\r\n   * @param {*} historySnapshot An (optional) snapshot to restore the history where we left off the last time. Use the result of a getHistoryData() call.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  constructor(model, timedEventDefaults, statePageMapDefaults, snapshot, historySnapshot, runtime) {\r\n    this.interpreter = undefined;\r\n    this.pendingEventQueue = [];\r\n    this.pendingTaskSwitch = undefined;\r\n    this.timedEvents = new TimedEventsCatalog();\r\n    this.statePageMap = Statemachine.buildStatePageMap(model.statePageAssignments, statePageMapDefaults);\r\n    this.history = new StatemachineEventHistory(historySnapshot);\r\n    this.running = false;\r\n    this.paused = false;\r\n    this.eventProcessingRuns = false;\r\n    this.runtime = runtime;\r\n\r\n    this.buildStateMachine(model, timedEventDefaults, runtime, snapshot);\r\n    if (snapshot === undefined || snapshot === null) {\r\n      this.interpreter.start();\r\n    }\r\n  }\r\n\r\n\r\n  // public API ---------------------------------------------------------------------------------------------------\r\n  /**\r\n   * Start the state machine for the first time. \r\n   * \r\n   * The method triggers the special .init. event.\r\n   */\r\n  start = () => {\r\n    this.running = true;\r\n    this.triggerEvent(\".init.\");\r\n  }\r\n\r\n  /**\r\n   * Stop the state machine. \r\n   * \r\n   * The method stops all timed events.\r\n   */\r\n  stop = () => {\r\n    this.stopTimedEvents();\r\n    this.running = false;\r\n  }\r\n\r\n  /**\r\n   * Continue state machine (after having stopped it).\r\n   * \r\n   * The method will start the timed events again.\r\n   * The method will quit a 'paused' state implicitly.\r\n   * \r\n   */\r\n  continue = () => {\r\n    this.running = true;\r\n    this.paused = false;\r\n    this.getCurrentStates().forEach((state) => {\r\n      this.startTimedEvents(state)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Pause the state machine: Pause all timed events.\r\n   * \r\n   * Use the resume method to restart the state machine execution.\r\n   */\r\n  pause = () => {\r\n    this.paused = true;\r\n    this.pauseTimedEvents();\r\n  }\r\n\r\n  /**\r\n   * Resume the state machine after a pause.\r\n   * \r\n   * Call this after a call to pause to resume the state machine execution.\r\n   */\r\n  resume = () => {\r\n    this.resumeTimedEvents();\r\n    this.paused = false;\r\n  }\r\n\r\n  /**\r\n   * Trigger the event with the given event name.\r\n   * \r\n   * The method triggers the given event and all events\r\n   * created by executing the given event:\r\n   * Execution of the initial event might put one or more \r\n   * new events on the pending events queue. \r\n   * We will execute these new events one by one which might\r\n   * put more events on the queue. \r\n   * \r\n   * Event execution is blocked while the statemachine\r\n   * is stopped or 'paused'.\r\n   * \r\n   * @param {String} event Name of event to be triggered.\r\n   */\r\n  triggerEvent = (event) => {\r\n    if (this.running === true && this.paused === false) {\r\n      if (this.eventProcessingRuns) {\r\n        this.enqueueEventLastOut(event);\r\n      } else {\r\n\r\n        this.eventProcessingRuns = true;\r\n        this.runSingleEventWithHistoryReports(event);\r\n        this.eventProcessingRuns = false;\r\n\r\n        const pendingEventFromQueue = this.pendingEventQueue.pop();\r\n        if (pendingEventFromQueue !== undefined) {\r\n          this.triggerEvent(pendingEventFromQueue);\r\n        } else if (this.pendingTaskSwitch !== undefined) {\r\n          const switchToExecute = this.pendingTaskSwitch;\r\n          this.pendingTaskSwitch = undefined;\r\n          Statemachine.executePendingTaskSwitch(switchToExecute, this.runtime);\r\n\r\n        }\r\n      }\r\n    } else {\r\n      console.warn(`Event ${event} ignored since statmachine is not running currently.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a task switch call to be executed as soon as the last event in the pending events queue is finished.\r\n   * \r\n   * The method will not trigger any event or the pending event queue processing. \r\n   */\r\n  setPostponedTaskSwitch = (switchCall) => {\r\n    this.pendingTaskSwitch = switchCall;\r\n  }\r\n\r\n  /**\r\n   * Get the timer data for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n   */\r\n  getTimerData = (eventName) => {\r\n    const eventEntry = this.timedEvents.getEntry(eventName);\r\n    if (eventEntry === undefined) {\r\n      return undefined;\r\n    }\r\n    return TimedEventsCatalog.getEventData(eventEntry, this.getNow());\r\n  }\r\n\r\n  /**\r\n   * Set the trigger interval for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n  */\r\n  setTimedEventInterval = (eventName, interval) => {\r\n    const eventEntry = this.timedEvents.getEntry(eventName);\r\n    if (eventEntry !== undefined) {\r\n      TimedEventsCatalog.setTriggerIntervalInEventEntry(\r\n        interval,\r\n        eventEntry\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a map of the current timed event interval settings. \r\n   * \r\n   * You may use the returned structure as timed event defaults parameter\r\n   * in our constructor to restore the timed event intervals to \r\n   * the point in time of this call. \r\n   */\r\n  getCurrentTimerIntervals = () => this.timedEvents.getTimerIntervals();\r\n\r\n  /**\r\n   * Get the full map of state page assignments. \r\n   * \r\n   * You may use the returned structure as statePageMap defaults parameter\r\n   * in our constructor to restore the state page assignments to \r\n   * the point in time of this call. \r\n   */\r\n  getStatePageAssignments = () => StateManagerHelper.deepCopy(this.statePageMap);\r\n\r\n  /**\r\n   * Set the page assignment for a state.\r\n   * \r\n   * @param {String} state The name of the state to assign the page to.\r\n   * @param {String} pageName The page to assign to the state.\r\n   * @param {String} areaType The type of the page area that will get the new page at the state switch.\r\n   * @param {String} areaName The name of the page area that will get the new page at the state switch.\r\n   */\r\n  setStatePageAssignment = (state, pageName, areaType, areaName) => {\r\n    const oldEntryIndex = this.statePageMap.findIndex(entry => entry.state === state);\r\n    if (oldEntryIndex === -1) {\r\n      this.statePageMap.push({\r\n        state, pageName, areaType, areaName\r\n      });\r\n    } else {\r\n      this.statePageMap[oldEntryIndex] = {\r\n        state, pageName, areaType, areaName\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a map of all variables with their current values. \r\n   * \r\n   * You may use the returned structure as variable default values parameter\r\n   * in our constructor to restore the variable values to \r\n   * the point in time of this call. \r\n   */\r\n  getCurrentVariableValues = () => {\r\n    const { taskManager, variableManager } = this.runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    const currentVariableValues = variableManager.getVariableValuesMapForTask(currentTaskId);\r\n\r\n    return StateManagerHelper.deepCopy(currentVariableValues);\r\n  }\r\n\r\n  /**\r\n   * Get the history data like raised events, variable values and visited states.\r\n   * \r\n   * You may use the returned structure as parameter \r\n   * in our constructor to restore the statemachine history to \r\n   * the point in time of this call. \r\n   */\r\n  getHistoryData = () => this.history.getHistoryDataForSnapshot()\r\n\r\n  /**\r\n   * Get the currently active leaf states.\r\n   */\r\n  getCurrentLeafStates = () => this.interpreter.getConfiguration();\r\n\r\n  /**\r\n   * Get the currently active states including non-leaf states.\r\n   */\r\n  getCurrentStates = () => this.interpreter.getFullConfiguration().filter(state => !state.startsWith('$generated-state-'));\r\n\r\n  /**\r\n   * Get the currently active states including non-leaf states.\r\n   * \r\n   * States returned contain also some generated by the library : \"$generated-state-0\", \"$generated-state-1\"\r\n   */\r\n  getAllCurrentStates = () => this.interpreter.getFullConfiguration();\r\n\r\n  /**\r\n   * Get an array of all events that were raised. \r\n   */\r\n  getRaisedEvents = () => this.history.getRaisedEvents();\r\n\r\n  /**\r\n   * Get an array of all events that were raised while the given state was active.\r\n   */\r\n  getRaisedEventsInState = state => this.history.getRaisedEventsInState(state);\r\n\r\n  /**\r\n   * Get the total number of events that were raised. \r\n   */\r\n  getTotalNbOfRaisedEvents = () => this.history.getTotalNbOfRaisedEvents();\r\n\r\n  /**\r\n   * Get an array of all states that were visited.\r\n   */\r\n  getVisitedStates = () => this.history.getVisitedStates();\r\n\r\n  /**\r\n   * Get an array of all values that a variable had before or after triggering an event.\r\n   */\r\n  getValuesOfVariable = variable => this.history.getValuesOfVariable(variable);\r\n\r\n\r\n  /**\r\n   * Get a 'snapshot' of the state machine. \r\n   * \r\n   * You may use the returned snapshot as parameter \r\n   * in our constructor to restore the statemachine to \r\n   * the point in time of the snapshot. (Make sure you use the same model value as before!)\r\n   */\r\n  getSnapshot = () => StateManagerHelper.deepCopy(this.interpreter.getSnapshot());\r\n\r\n\r\n  // private stuff -------------------------------------------------------------------------------------------------\r\n  static buildStatePageMap(modelPageAssignments, dynamicPageAssignments) {\r\n    const result = [];\r\n    modelPageAssignments.forEach((value) => {\r\n      result.push({\r\n        state: value.state,\r\n        pageName: value.pageName,\r\n        areaType: value.areaType,\r\n        areaName: value.areaName\r\n      })\r\n    })\r\n    if (dynamicPageAssignments !== undefined) {\r\n      dynamicPageAssignments.forEach((dynamicAssignment) => {\r\n        const oldAssignmentIndex = result.findIndex(existingAssignment => existingAssignment.state === dynamicAssignment.state);\r\n        if (oldAssignmentIndex === -1) {\r\n          result.push({\r\n            state: dynamicAssignment.state,\r\n            pageName: dynamicAssignment.pageName,\r\n            areaType: dynamicAssignment.areaType,\r\n            areaName: dynamicAssignment.areaName\r\n          });\r\n        } else {\r\n          result[oldAssignmentIndex] = {\r\n            state: dynamicAssignment.state,\r\n            pageName: dynamicAssignment.pageName,\r\n            areaType: dynamicAssignment.areaType,\r\n            areaName: dynamicAssignment.areaName\r\n          };\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  buildStateMachine = (machineModel, timedEventDefaults, runtime, snapshot) => {\r\n    this.timedEvents = Statemachine.buildTimedEventsCatalog(machineModel.timedEvents, machineModel.states);\r\n    Object.keys(timedEventDefaults).forEach((event) => { this.setTimedEventInterval(event, timedEventDefaults[event]); });\r\n\r\n    this.interpreter = new scxml.scion.Statechart(this.transformMachineModel(machineModel.states, runtime), {\r\n      snapshot\r\n    });\r\n\r\n    this.interpreter.on(\"onError\", (errorInfo) => {\r\n      console.error(`Caught statemachine error on ${errorInfo.tagname} in line/col ${errorInfo.line}/${errorInfo.column} : ${errorInfo.reason}`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Build our interval catalog of timed events.\r\n   * \r\n   * @param {[{String, Number}]} timedEventsList The list of timed events as given in the item config structure.\r\n   * @param {[*]} statesList The list of statemachine states as given in the item config structure.\r\n   */\r\n  static buildTimedEventsCatalog(timedEventsList, statesList) {\r\n    const catalog = new TimedEventsCatalog();\r\n    timedEventsList.forEach((event) => {\r\n      const acceptingStatesList = Statemachine.findAcceptingStates(event.name, statesList);\r\n      catalog.putEntry(event.name, event.interval, acceptingStatesList);\r\n    });\r\n    return catalog;\r\n  }\r\n\r\n  /**\r\n   * Find a list of states (as list of state names) that accept the given event.\r\n   * \r\n   * @param {String} eventName The name of the event to find accepting states for.\r\n   * @param {[*]} statesList The list of statemachine states as given in the item config structure.\r\n   */\r\n  static findAcceptingStates(eventName, statesList) {\r\n    const result = [];\r\n    statesList.forEach((state) => {\r\n      if (state.transitions !== undefined && state.transitions.some(transition => transition.event === eventName)) {\r\n        result.push(state.id);\r\n      }\r\n      if (state.states !== undefined) {\r\n        const recursionResult = this.findAcceptingStates(eventName, state.states);\r\n        recursionResult.forEach((recursionResultState) => {\r\n          result.push(recursionResultState);\r\n        })\r\n      }\r\n    })\r\n    return result;\r\n  }\r\n\r\n  transformMachineModel = (originalStates, runtime) => {\r\n    // Transform configuration machine model to SCION machine model:\r\n    //   Copy all arrays and attributes 1:1\r\n    //   After that change all \r\n    //   - cond attributes in all transition objects\r\n    //   - action array attributes in all transition objects\r\n    //   For these inject function definitions calling the TermEvaluator with the terms given in the original model.\r\n    //   Add a state entry action for each state that triggers a page switch according to our state->page map. \r\n    const statesCopy = Statemachine.modelCopy(originalStates);\r\n    this.transformStates(statesCopy, \"\", runtime);\r\n    return {\r\n      states: statesCopy\r\n    };\r\n  }\r\n\r\n\r\n  transformStates = (stateArray, parentStatePath, runtime) => {\r\n    stateArray.forEach((state) => {\r\n      const hasSubstates = state.states !== undefined && state.states.length > 0;\r\n      const statePath = Statemachine.buildStatePath(parentStatePath, state.id);\r\n      this.transformEntryExitActions(state, hasSubstates ? Statemachine.buildInitEventName(statePath) : undefined, runtime);\r\n      state.transitions.forEach((transition) => {\r\n        Statemachine.transformTransition(state, transition, parentStatePath, runtime);\r\n      });\r\n      // recursive call for substates\r\n      if (hasSubstates) {\r\n        this.transformStates(state.states, statePath, runtime);\r\n      }\r\n    });\r\n  }\r\n\r\n  static buildStatePath(parentPath, stateId) {\r\n    return `${parentPath}.${stateId}`;\r\n  }\r\n\r\n  static buildInitEventName(parentStatePath) {\r\n    return `.init${parentStatePath}`;\r\n  }\r\n\r\n  transformEntryExitActions = (state, initEventName, runtime) => {\r\n    state.onEntry = this.buildOnEntryFunction(state, state.onEntry, initEventName, runtime);\r\n    if (state.onExit !== undefined) {\r\n      state.onExit = Statemachine.buildOnExitFunction(state, state.onExit, runtime);\r\n    }\r\n  }\r\n\r\n  static transformTransition(state, transition, parentStatePath, runtime) {\r\n    if (transition.event === undefined) {\r\n      transition.event = Statemachine.buildInitEventName(parentStatePath);\r\n    }\r\n    if (transition.cond !== undefined) {\r\n      transition.cond = Statemachine.buildConditionFunction(transition.cond, runtime);\r\n    }\r\n    transition.onTransition = Statemachine.buildOnTransitionFunction(state, transition.target, transition.actions, runtime);\r\n    delete transition.actions;\r\n  }\r\n\r\n\r\n  buildOnEntryFunction = (state, actions, initEventName, runtime) => {\r\n    const putEventOnQueue = this.enqueueEventFirstOut;\r\n    const startMyTimedEvents = this.startTimedEvents;\r\n    const stateToPageMap = this.statePageMap;\r\n    const result = (event) => {\r\n      if (actions !== undefined) {\r\n        actions.forEach((action, index, all) => {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `in-action:${event.name}[${index}]`);\r\n        })\r\n      }\r\n      const assignedPageSwitch = stateToPageMap\r\n        .filter(value => value.state === state.id)\r\n        .map(value => ({\r\n          pageName: value.pageName, areaType: value.areaType, areaName: value.areaName\r\n        }))\r\n        .find(value => true);\r\n      if (assignedPageSwitch !== undefined) {\r\n        runtime.taskManager.switchPage(\r\n          assignedPageSwitch.pageName,\r\n          undefined, undefined,\r\n          assignedPageSwitch.areaType,\r\n          assignedPageSwitch.areaName,\r\n          undefined, undefined, undefined, undefined\r\n        );\r\n      }\r\n      if (initEventName !== undefined) {\r\n        putEventOnQueue(initEventName);\r\n      }\r\n      startMyTimedEvents(state.id);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static buildOnExitFunction(state, actions, runtime) {\r\n    const result = (event) => {\r\n      if (actions !== undefined) {\r\n        actions.forEach((action, index, all) => {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `ex-action:${event.name}[${index}]`);\r\n        })\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  static buildOnTransitionFunction(sourceState, targetState, actions, runtime) {\r\n    const result = (event) => {\r\n      if (actions !== undefined) {\r\n        actions.forEach((action, index, all) => {\r\n          TermEvaluator.evaluateTerm(action, runtime, [], `tr-action:${event.name}[${index}]`);\r\n        })\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static buildConditionFunction(term, runtime) {\r\n    const result = event => TermEvaluator.evaluateTerm(term, runtime, [], `event:${event.name}`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * (Re-)start all timed events that the given state can accept.\r\n   * \r\n   * The method schedules execution of the triggerEvent method\r\n   * using window.setTimeout(...) and registers the schedule handlers in the event catalog.\r\n   * \r\n   * The method overrides the 'paused' state of the affected events.\r\n   * \r\n   * @param {*} timedEventsArray \r\n   */\r\n  startTimedEvents = (stateName) => {\r\n\r\n    // stop all accepted timed events that are already running:\r\n    this.timedEvents.findScheduledEventsByState(stateName).forEach((timedEventEntry) => {\r\n      this.timedEvents.stopTimedEvent(timedEventEntry);\r\n    });\r\n\r\n    // start all accepted timed events:\r\n    this.timedEvents.findUnscheduledEventsByState(stateName).forEach((timedEventEntry) => {\r\n      this.timedEvents.startTimedEvent(timedEventEntry, this);\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n   * Stop all currently scheduled timed events. \r\n   * \r\n   * The method uses the timed events catalog to find all schedule handles to be cleared. \r\n   * The method overrides the 'paused' state of the events.\r\n   */\r\n  stopTimedEvents = () => {\r\n    this.timedEvents.findScheduledEvents().forEach((timedEventEntry) => {\r\n      this.timedEvents.stopTimedEvent(timedEventEntry);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Pause all currently scheduled timed events. \r\n   * \r\n   * The method uses the timed events catalog to find all schedule handles to be paused. \r\n   */\r\n  pauseTimedEvents = () => {\r\n    const now = this.getNow();\r\n    this.timedEvents.findScheduledEvents().forEach((timedEventEntry) => {\r\n      this.timedEvents.pauseTimedEvent(timedEventEntry, now);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Resume all currently scheduled timed events. \r\n   * \r\n   * The method uses the timed events catalog to find all schedule handles to be resumed. \r\n   */\r\n  resumeTimedEvents = () => {\r\n    this.timedEvents.findScheduledEvents().forEach((timedEventEntry) => {\r\n      if (TimedEventsCatalog.isPaused(timedEventEntry)) {\r\n        this.timedEvents.resumeTimedEvent(timedEventEntry, this);\r\n      }\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n   * Run a single event on the statemachine interpreter and report \r\n   * the before and after states/variables to our history.\r\n   */\r\n  runSingleEventWithHistoryReports = (event) => {\r\n    this.history.reportBeforeEvent(\r\n      event,\r\n      this.getCurrentStates(),\r\n      this.buildVariablesInfoArray()\r\n    )\r\n\r\n    this.interpreter.gen({\r\n      name: event,\r\n      data: undefined\r\n    });\r\n\r\n    this.history.reportAfterEvent(\r\n      event,\r\n      this.getCurrentStates(),\r\n      this.buildVariablesInfoArray()\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Put an event on the 'last out' positon of our pending events queue.\r\n   * \r\n   * @param {*} event Name of the event to be put on the queue. \r\n   */\r\n  enqueueEventLastOut = (event) => {\r\n    this.pendingEventQueue.unshift(event);\r\n  }\r\n\r\n  /**\r\n   * Put an event on the 'first out' position of our event queue.\r\n   * \r\n   * @param {String} event Name of the event to put on the queue.\r\n   */\r\n  enqueueEventFirstOut = (event) => {\r\n    this.pendingEventQueue.push(event);\r\n  }\r\n\r\n  /**\r\n   * Build an array of variable/value pairs describing our variables.\r\n   */\r\n  buildVariablesInfoArray = () => {\r\n    const { taskManager, variableManager } = this.runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    return variableManager.buildVariablesInfoArrayForTask(currentTaskId);\r\n  }\r\n\r\n\r\n  static executePendingTaskSwitch(switchToExecute, runtime) {\r\n    TermEvaluator.evaluateTerm(switchToExecute, runtime, [], 'postp-task');\r\n  }\r\n\r\n  /**\r\n   * Build a deep copy of the given model structure.\r\n   */\r\n  static modelCopy(model) {\r\n    if (model === undefined) return undefined;\r\n    return JSON.parse(JSON.stringify(model));\r\n  }\r\n\r\n  /**\r\n   * Test hook: get Date representing 'now'.\r\n   */\r\n  getNow = () => new Date();\r\n\r\n}\r\n","import Statemachine from \"./Statemachine\";\r\nimport StateManagerHelper from './StateManagerHelper';\r\n\r\n/**\r\n * Manager for all state machines.\r\n * \r\n * We keep one state machine per task. \r\n * Our operations targeting a single state machine operate on the state machine \r\n * assigned to the currently running task. We call this state machine the 'currently active' \r\n * state machine. \r\n * We need to be informed about the currently running task to switch our 'currently active' \r\n * state machine accordingly.\r\n */\r\nexport default class StatemachinesManager {\r\n\r\n  constructor() {\r\n    this.statemachinesList = {};\r\n    this.statemachineModelsList = {};\r\n    this.currentMachine = undefined;\r\n    this.timedEventDefaults = {};\r\n    this.statePageMapDefaults = [];\r\n    this.preInitTriggeredEvents = [];\r\n  }\r\n\r\n  /**\r\n   * Stop the currently running state machine. \r\n   */\r\n  stopCurrentStatemachine = () => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.stop();\r\n      this.currentMachine = undefined;\r\n    }\r\n    this.timedEventDefaults = {};\r\n    this.statePageMapDefaults = [];\r\n    this.preInitTriggeredEvents = [];\r\n  }\r\n\r\n  /**\r\n   * Start a state machine as currently active state machine.\r\n   * \r\n   * The method will: \r\n   *  - Create and start a new state machine for the given task if no such state machine exists yet.\r\n   *  - Continue the state machine for the given task if it does exist already.\r\n   * \r\n   * @param taskPath The path of the new task to switch to.\r\n   * @param model The state machine model to create a new state machine with. We will use this only if there is no state machine for the given task yet.\r\n   * @param runtime The common runtime context structure. \r\n   */\r\n  startOrInitializeCurrentStatemachine = (taskPath, model, runtime) => {\r\n    if (this.currentMachine !== undefined) {\r\n      console.error('Cannot run two state machines in parallel.', taskPath);\r\n      this.stopCurrentStatemachine();\r\n    }\r\n    const existingMachine = this.statemachinesList[taskPath];\r\n    if (existingMachine === undefined) {\r\n      this.statemachineModelsList[taskPath] = model;\r\n      const newMachine = model === undefined ? undefined : new Statemachine(model, this.timedEventDefaults, this.statePageMapDefaults, undefined, undefined, runtime);\r\n      this.statemachinesList[taskPath] = newMachine;\r\n      this.currentMachine = newMachine;\r\n      // The new state machine must be the 'current' state machine before we start it (Term evaluation!)\r\n      if (this.currentMachine !== undefined) {\r\n        this.currentMachine.start();\r\n        this.preInitTriggeredEvents.forEach((event) => { this.currentMachine.triggerEvent(event); });\r\n      }\r\n    } else {\r\n      this.currentMachine = existingMachine;\r\n      this.currentMachine.continue();\r\n    }\r\n    this.timedEventDefaults = {};\r\n    this.statePageMapDefaults = [];\r\n    this.preInitTriggeredEvents = [];\r\n\r\n    // rerender each variable observer. DNI: could be unnecessary\r\n    runtime.variableManager.triggerRerenderForAllChangeObservers(runtime);\r\n  }\r\n\r\n  /**\r\n   * Switch the current state machine without starting it. \r\n   * \r\n   * @param {*} taskPath \r\n   */\r\n  switchCurrentStatemachineWithoutStarting = (taskPath) => {\r\n    this.currentMachine = this.statemachinesList[taskPath];\r\n  }\r\n\r\n  /**\r\n   * Pause the currently running state machine. \r\n   * \r\n   * Pausing the state machines pauses all timed events and blocks event execution. \r\n   * Use resumeCurrentStatemachine() to finish the pause. This will continue the \r\n   * paused timed events where they left off. (A stop-continue sequence will \r\n   * restart all interrupted timed events from the start instead.)\r\n   */\r\n  pauseCurrentStatemachine = () => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.pause();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resume the currently running but 'paused' state machine. \r\n   * \r\n   * This will continue the paused timed events where they left off. \r\n   * (A stop-continue sequence will restart all interrupted timed events from their start instead.)\r\n   * In a sequence pause-continue the 'continue' call will switch the state machine to a non-paused, \r\n   * running state and restart all paused timed events from their start.\r\n   */\r\n  resumeCurrentStatemachine = () => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.resume();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Trigger an event on the currently running state machine.\r\n   * \r\n   * The method implicitly triggers all events on the queue of pending events of the currently running state machine.\r\n   * \r\n   * If there is no state machine running yet the method keeps the event in a buffer to be exectued as soon as\r\n   * a state machine is created.\r\n   */\r\n  triggerEvent = (event) => {\r\n    if (this.currentMachine === undefined) {\r\n      this.preInitTriggeredEvents.push(event);\r\n    } else {\r\n      this.currentMachine.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Postpone a task switch on the currently running state machine.\r\n   * \r\n   * The method sets the postponed task switch member of the current state machine.\r\n   * \r\n   * If there is no state machine running yet the method ignores the call.\r\n   */\r\n  setPostponedTaskSwitch = (taskSwitchCall) => {\r\n    if (this.currentMachine !== undefined) {\r\n      this.currentMachine.setPostponedTaskSwitch(taskSwitchCall);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the timer data for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n   */\r\n  getTimerData = (eventName) => {\r\n    if (this.currentMachine === undefined) {\r\n      // Note: We cannot return our buffered value here since the state machine will return more details than we have.\r\n      return undefined;\r\n    } else {\r\n      return this.currentMachine.getTimerData(eventName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the trigger interval for a timed event.\r\n   * \r\n   * @param {String} eventName The name of the timed event.\r\n  */\r\n  setTimedEventInterval = (eventName, interval) => {\r\n    if (this.currentMachine === undefined) {\r\n      this.timedEventDefaults[eventName] = interval;\r\n    } else {\r\n      this.currentMachine.setTimedEventInterval(eventName, interval);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign a page to a state. \r\n   * \r\n   * @param {*} state The name of the state to assign the page to.\r\n   * @param {*} pageName The name of the page to assign to the state.\r\n   * @param {*} areaType The type of the area that will get the page assigned at the state switch.\r\n   * @param {*} areaName The name of the area that will get the page assigned at the state switch. \r\n   */\r\n  setStatePageAssignment = (state, pageName, areaType, areaName) => {\r\n    if (this.currentMachine === undefined) {\r\n      const existingEntryIndex = this.statePageMapDefaults.findIndex(value => value.state === state);\r\n      if (existingEntryIndex === -1) {\r\n        this.statePageMapDefaults.push({\r\n          state, pageName, areaType, areaName\r\n        });\r\n      } else {\r\n        this.statePageMapDefault[existingEntryIndex] = {\r\n          state, pageName, areaType, areaName\r\n        };\r\n      }\r\n    } else {\r\n      this.currentMachine.setStatePageAssignment(state, pageName, areaType, areaName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The states array contains the currently active leaf-states.\r\n   */\r\n  getCurrentStateMachineLeafStates = () => ((this.currentMachine === undefined) ? [] : this.currentMachine.getCurrentLeafStates());\r\n\r\n  /**\r\n   * Get the history data accumulated by the current state machine.\r\n   */\r\n  getHistoryStatemachineData = () => ((this.currentMachine === undefined) ? {} : this.currentMachine.getHistoryData());\r\n\r\n  /**\r\n   * Get an array of all events that were raised in the current statemachine. \r\n   */\r\n  getRaisedEvents = () => ((this.currentMachine === undefined) ? [] : this.currentMachine.getRaisedEvents());\r\n\r\n  /**\r\n   * Get an array of all events that were raised while the given state was active in the current statemachine.\r\n   */\r\n  getRaisedEventsInState = state => ((this.currentMachine === undefined) ? [] : this.currentMachine.getRaisedEventsInState(state));\r\n\r\n  /**\r\n   * Get the total number of events that were raised in the current statemachine. \r\n   */\r\n  getTotalNbOfRaisedEvents = () => ((this.currentMachine === undefined) ? 0 : this.currentMachine.getTotalNbOfRaisedEvents());\r\n\r\n  /**\r\n   * Get an array of all states that were visited in the current statemachine.\r\n   */\r\n  getVisitedStates = () => ((this.currentMachine === undefined) ? [] : this.currentMachine.getVisitedStates());\r\n\r\n  /**\r\n   * Get an array of all values that a variable had before or after triggering an event in the current statemachine.\r\n   */\r\n  getValuesOfVariable = variable => ((this.currentMachine === undefined) ? [] : this.currentMachine.getValuesOfVariable(variable));\r\n\r\n  /**\r\n   * Get a snapshot of our statemachines that is compatible \r\n   * as parameter for the preloadStatemachinesData method.\r\n   */\r\n  getStatemachinesPreloadData = () => {\r\n    const result = {};\r\n    Object.keys(this.statemachinesList).forEach((taskPath) => {\r\n      const machine = this.statemachinesList[taskPath];\r\n      if (machine !== undefined) {\r\n        result[taskPath] = {\r\n          timerIntervals: machine.getCurrentTimerIntervals(),\r\n          statePageMap: machine.getStatePageAssignments(),\r\n          snapshot: machine.getSnapshot(),\r\n          historyData: machine.getHistoryData(),\r\n          model: StateManagerHelper.deepCopy(this.statemachineModelsList[taskPath]),\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Drop all exisiting state machines.\r\n   */\r\n  clearStatemachines = (runtime) => {\r\n    this.stopCurrentStatemachine();\r\n    this.statemachinesList = {};\r\n    this.statemachineModelsList = {};\r\n  }\r\n\r\n  /**\r\n   * Preload statemachines.\r\n   * \r\n   * The method implicitly drops all existing state machines before creating new machines according \r\n   * to the preload data.\r\n   * \r\n   * @param preloadData: Preload data obtained by calling getStatemachinesPreloadData on another instance.\r\n   */\r\n  preloadStatemachinesData = (preloadData, runtime) => {\r\n    this.clearStatemachines(runtime);\r\n\r\n    Object.keys(preloadData).forEach((taskPath) => {\r\n      const machineData = preloadData[taskPath];\r\n      this.statemachinesList[taskPath] = new Statemachine(\r\n        machineData.model,\r\n        machineData.timerIntervals,\r\n        machineData.statePageMap,\r\n        machineData.snapshot,\r\n        machineData.historyData,\r\n        runtime\r\n      );\r\n      this.statemachineModelsList[taskPath] = machineData.model;\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\nexport default class TaskNavigatorStateManager {\r\n\r\n  constructor() {\r\n    this.testEntriesList = {};\r\n  }\r\n\r\n  saveTestState = (testName, state, runtime) => {\r\n    this.testEntriesList[testName] = StateManagerHelper.deepCopy(state);\r\n\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'TaskNavigatorStateManagerState',\r\n      {\r\n        name: testName,\r\n        value: this.testEntriesList[testName]\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n\r\n  }\r\n\r\n  getTestState = testName => StateManagerHelper.deepCopy(this.testEntriesList[testName])\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n   getAllTasksState = () => StateManagerHelper.deepCopy(this.testEntriesList);\r\n\r\n   /**\r\n    * Drop all state.\r\n    */\r\n   clearTasksState = () => {\r\n     this.testEntriesList = {};\r\n   };\r\n\r\n   /**\r\n    * Preload the state returned by a call to getAllTasksState.\r\n    */\r\n   preloadTasksState = (allTasksState) => {\r\n     this.testEntriesList = StateManagerHelper.deepCopy(allTasksState);\r\n   }\r\n\r\n  /**\r\n   * Inject a change for a test entry triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (testName, state) => {\r\n    this.testEntriesList[testName] = StateManagerHelper.deepCopy(state)\r\n  }\r\n\r\n}\r\n","import StateManagerHelper from \"./StateManagerHelper\";\r\n\r\nexport default class TraceLogBuffer {\r\n\r\n  constructor() {\r\n    this.logEntriesList = [];\r\n    this.entryCounter = 0;\r\n    this.newEntryListener = undefined;\r\n    this.withReplaySupport = false;\r\n    this.withExtendedMetaData = false;\r\n    this.withoutItemConfiguration = false;\r\n    this.withoutSnapshot = false;\r\n    this.withoutScoring = false;\r\n    this.item = undefined;\r\n    this.task = undefined;\r\n    this.scope = undefined;\r\n    this.traceContextId = undefined;\r\n  }\r\n\r\n  // public API for components ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Report an event that is relevant for the trace log.\r\n   * \r\n   * The method expects these parameters:\r\n   * - entryType: A String representing the type of the event.\r\n   * - timestamp: A Date representing the timestamp to log for the event.\r\n   * - entryContent: All further attributes of the event to be logged.\r\n   * \r\n   * The method will implicitly assign a unique log entry counter to the logged event.\r\n   * The method will create a deep copy of the given entryContent to decouple the log\r\n   * from further modifications on the entryContent.\r\n   * \r\n   * The method filters entries according to their entry type if a filter configuration\r\n   * is active (like \"filter out all replay support entries\").\r\n   * \r\n   */\r\n  reportEvent = (entryType, timestamp, entryContent) => {\r\n    if (!this.withReplaySupport && TraceLogBuffer.isReplaySupportType(entryType)) {\r\n      return;\r\n    }\r\n    if (this.withoutSnapshot && entryType === 'Snapshot') {\r\n      return;\r\n    }\r\n\r\n    const newEntry = {\r\n      entryId: this.getNextCount().toString(),\r\n      timestamp: TraceLogBuffer.buildTimeString(timestamp),\r\n      type: entryType,\r\n      details: StateManagerHelper.deepCopy(entryContent)\r\n    }\r\n\r\n    if (this.withExtendedMetaData) {\r\n      newEntry.item = this.item;\r\n      newEntry.task = this.task;\r\n      newEntry.scope = this.scope;\r\n      newEntry.sessionId = this.traceContextId;\r\n    }\r\n    if (this.withoutItemConfiguration && entryType === 'ItemSwitch') {\r\n      newEntry.details.item = undefined;\r\n    }\r\n    if (this.withoutScoring && entryType === 'TaskSwitch') {\r\n      newEntry.details.taskResult = undefined;\r\n    }\r\n\r\n    this.logEntriesList.push(newEntry);\r\n    if (this.newEntryListener !== undefined) {\r\n      this.newEntryListener();\r\n    }\r\n  }\r\n\r\n\r\n  // public API for log consumers --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the next bunch of log entries for delivery to the server and drop them from our queue.\r\n   * \r\n   * Note: This method must be called from the GUI thread to avoid multithreading issues!\r\n   * \r\n   * The method returns a list of log entry objects. I returns an empty list of no log entries are pending.\r\n   */\r\n  popEntries = () => {\r\n    const deliveredEntries = this.logEntriesList;\r\n    this.logEntriesList = [];\r\n    return deliveredEntries;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the list of current log entries (without dropping them).\r\n   * \r\n   * The method returns a list of log entry objects. I returns an empty list of no log entries are pending.\r\n   */\r\n  peekEntries = () => StateManagerHelper.deepCopy(this.logEntriesList);\r\n\r\n  /**\r\n   * Set a function to call each time we receive a new entry.\r\n   * \r\n   * We support a single entry listener only. The entry listener is called after the new log entry is put into our buffer.\r\n   * \r\n   * @param callback The function to call each time a new entry is put into our buffer.\r\n   */\r\n  setNewEntryListener = (callback) => {\r\n    this.newEntryListener = callback;\r\n  }\r\n\r\n  // public API for task player  ------------------------------------------------------------------\r\n  /**\r\n   * (De)Activate additional trace log entries required for replay functionality.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithReplaySupport = (value) => {\r\n    this.withReplaySupport = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate the additional header fields in each trace log entry.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithExtendedMetaData = (value) => {\r\n    this.withExtendedMetaData = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate dropping the item configuration attribute from ItemSwitch log entries.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithoutItemConfiguration = (value) => {\r\n    this.withoutItemConfiguration = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate dropping the Snapshot log entries.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithoutSnapshot = (value) => {\r\n    this.withoutSnapshot = value;\r\n  }\r\n\r\n  /**\r\n   * (De)Activate dropping the task result attribute (i.e. scoring) from TaskSwitch log entries.\r\n   * \r\n   * @param {boolean} value \r\n   */\r\n  setWithoutScoring = (value) => {\r\n    this.withoutScoring = value;\r\n  }\r\n\r\n  /**\r\n   * Set the current trace context id (=sessionId) to be included in each trace log entry header.\r\n   * @param {*} value \r\n   */\r\n  setTraceContextId = (value) => {\r\n    this.traceContextId = value;\r\n  }\r\n\r\n  // public API for task manager  ------------------------------------------------------------------\r\n  /**\r\n   * Set the currently running test/task/item to be included in each trace log entry header.\r\n   */\r\n  setTestItemTaskNames = (test, item, task) => {\r\n    this.scope = test;\r\n    this.item = item;\r\n    this.task = task;\r\n  }\r\n\r\n  // private stuff --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Is the given type one of the entry types used exclusively the replay support feature?\r\n   */\r\n  static isReplaySupportType =\r\n    entryType => entryType === 'FullState'\r\n              || entryType === 'StateChange'\r\n              || entryType === 'RenderTriggered'\r\n              || entryType === 'ContextMenu'\r\n              || entryType === 'ScrollTriggered';\r\n\r\n\r\n  /**\r\n   * Get a string representation of the given time which is helpful in the trace log:\r\n   */\r\n  static buildTimeString(date) {\r\n    // Hint: We could use the momentjs library here:\r\n    // DNI: example: return moment(date).format(\"YYYY-MM-DD THH:mm:ss.SSS Z\");\r\n    return `${\r\n      TraceLogBuffer.padLeadingZeroes(date.getFullYear(), 4)}-${\r\n      TraceLogBuffer.padLeadingZeroes((date.getMonth() + 1), 2)}-${\r\n      TraceLogBuffer.padLeadingZeroes(date.getDate(), 2)}T${\r\n      TraceLogBuffer.padLeadingZeroes(date.getHours(), 2)}:${\r\n      TraceLogBuffer.padLeadingZeroes(date.getMinutes(), 2)}:${\r\n      TraceLogBuffer.padLeadingZeroes(date.getSeconds(), 2)}.${\r\n      TraceLogBuffer.padLeadingZeroes(date.getMilliseconds(), 3)}${\r\n      TraceLogBuffer.buildTimeZoneOffsetString(date.getTimezoneOffset())}`;\r\n  }\r\n\r\n  static buildTimeZoneOffsetString(offsetInMinutes) {\r\n    const absoluteOffsetInMinutes = Math.abs(offsetInMinutes);\r\n    const minutesOffset = absoluteOffsetInMinutes % 60;\r\n    const hoursOffset = (absoluteOffsetInMinutes - minutesOffset) / 60;\r\n    return (offsetInMinutes > 0 ? '-' : '+') + TraceLogBuffer.padLeadingZeroes(hoursOffset.toString(), 2) + TraceLogBuffer.padLeadingZeroes(minutesOffset.toString(), 2);\r\n  }\r\n\r\n  static padLeadingZeroes(number, size) {\r\n    let result = `${number}`;\r\n    while (result.length < size) {\r\n      result = `0${result}`;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the next entry count value and increase the counter.\r\n   */\r\n  getNextCount = () => {\r\n    this.entryCounter += 1;\r\n    return this.entryCounter;\r\n  }\r\n\r\n}\r\n","import StateManagerHelper from './StateManagerHelper';\r\nimport PathTranslationHelper from './PathTranslationHelper';\r\nimport UserDefPathHelper from './UserDefPathHelper';\r\nimport TraceLogHelper from './TraceLogHelper';\r\n\r\n/**\r\n * Manage a global clipboard. \r\n */\r\nexport default class ClipboardManager {\r\n\r\n  constructor(traceLogBuffer) {\r\n    this.traceLog = traceLogBuffer;\r\n    this.clipboardContent = undefined;\r\n    this.currentSelectionHolder = undefined;\r\n    this.currentInsertPosition = undefined;\r\n  }\r\n\r\n  // public API ------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Do the cut operation: Grab the current selection from the current selection holder and put\r\n   * it into our clipboard buffer. Tell the current selection holder to drop the selected text.\r\n   * \r\n   * If no selection is registered currently or the selection is read-only \r\n   * the method will write just a trace log and skip the operation.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  cut = (triggeringType, indexPath, runtime) => {\r\n    // keep a reference to the selection holder: the getSelectionCallback might deregister the selection holder!\r\n    const selectionHolderEntry = this.currentSelectionHolder;\r\n    if (selectionHolderEntry !== undefined && selectionHolderEntry.isReadOnlyCallback() === false) {\r\n      this.setClipboardContent(selectionHolderEntry.getSelectionCallback(true));\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'cut',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        true,\r\n        runtime\r\n      );\r\n      this.currentSelectionHolder = undefined;\r\n      this.currentInsertPosition = undefined;\r\n    } else {\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'cut',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        false,\r\n        runtime\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Could we perform a cut operation currently? \r\n   */\r\n  cutEnabled = () => this.currentSelectionHolder !== undefined && this.currentSelectionHolder.isReadOnlyCallback() === false\r\n\r\n  /**\r\n   * Do the copy operation: Grab the current selection from the current selection holder and put\r\n   * it into our clipboard buffer.\r\n   * \r\n   * If no selection is registered currently the method will write just a trace log and skip the operation.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  copy = (triggeringType, indexPath, runtime) => {\r\n    // keep a reference to the selection holder: the getSelectionCallback might deregister the selection holder!\r\n    const selectionHolderEntry = this.currentSelectionHolder;\r\n    if (selectionHolderEntry !== undefined) {\r\n      this.setClipboardContent(selectionHolderEntry.getSelectionCallback(false));\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'copy',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        true,\r\n        runtime\r\n      );\r\n      this.currentSelectionHolder = undefined;\r\n      this.currentInsertPosition = undefined;\r\n    } else {\r\n      this.traceCutCopy(\r\n        triggeringType,\r\n        'copy',\r\n        indexPath,\r\n        selectionHolderEntry,\r\n        false,\r\n        runtime\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Could we perform a copy operation currently? \r\n   */\r\n  copyEnabled = () => this.currentSelectionHolder !== undefined\r\n\r\n\r\n  /**\r\n   * Do the paste operation: Tell the current insert position holder to put in the text in our clipboard buffer.\r\n   * \r\n   * If no insert position is registered currently or we do not have any content in the clipboard buffer yet\r\n   * the method will just write a trace log entry and skip the operation.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} indexPath The index path of the calling display component instance.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  paste = (triggeringType, indexPath, runtime) => {\r\n    // keep a reference to the input position: the insertCallback might deregister the input position!\r\n    const insertPositionEntry = this.currentInsertPosition;\r\n    if (this.currentInsertPosition !== undefined && this.clipboardContent !== undefined) {\r\n      this.currentInsertPosition.insertCallback(this.clipboardContent);\r\n      this.tracePaste(\r\n        triggeringType,\r\n        indexPath,\r\n        insertPositionEntry,\r\n        true,\r\n        runtime\r\n      );\r\n      this.currentSelectionHolder = undefined;\r\n      this.currentInsertPosition = undefined;\r\n    } else {\r\n      this.tracePaste(\r\n        triggeringType,\r\n        indexPath,\r\n        insertPositionEntry,\r\n        false,\r\n        runtime\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Could we perform a paste operation currently? \r\n   */\r\n  pasteEnabled = () => this.currentInsertPosition !== undefined && this.clipboardContent !== undefined\r\n\r\n  /**\r\n   * Register the currently active selection.\r\n   * \r\n   * @param {String} indexPath The index path of the display component instance carrying the currently active selection.\r\n   * @param {*} getSelectionCallback A method to obtain the currently selected text. \r\n   *    The method supports a boolean flag to drop the selected content in the source component. \r\n   * @param {*} isReadOnlyCallback A method to obtain the current read only status of the component instance. \r\n   */\r\n  registerSelection = (indexPath, getSelectionCallback, isReadOnlyCallback) => {\r\n    this.currentSelectionHolder = {\r\n      indexPath,\r\n      getSelectionCallback,\r\n      isReadOnlyCallback\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deregister a previously registered selection.\r\n   * \r\n   * @param indexPath The index path of the display component instance deregistering the selection.\r\n   */\r\n  deregisterSelection = (indexPath) => {\r\n    if (this.currentSelectionHolder !== undefined && this.currentSelectionHolder.indexPath === indexPath) {\r\n      this.currentSelectionHolder = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register the current paste insert position.\r\n   * \r\n   * The registering component should not be read-only, i.e. it should be possible to really insert content\r\n   * at the insert position.\r\n   * \r\n   * @param indexPath The index path of the display component instance carrying the current insert position.\r\n   * @param insertCallback A method to insert text at the insert position.\r\n   */\r\n  registerInsertPosition = (indexPath, insertCallback) => {\r\n    this.currentInsertPosition = {\r\n      indexPath,\r\n      insertCallback\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deregister a previously registered insert position.\r\n   * \r\n   * @param indexPath The index path of the display component instance deregistering the insert position.\r\n   */\r\n  deregisterInsertPosition = (indexPath) => {\r\n    if (this.currentInsertPosition !== undefined && this.currentInsertPosition.indexPath === indexPath) {\r\n      this.currentInsertPosition = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register that a component recieved the input focus. \r\n   * \r\n   * We will deregister any other component as selection or insert position provider.\r\n   */\r\n  registerFocus = (indexPath) => {\r\n    if (this.currentInsertPosition !== undefined && this.currentInsertPosition.indexPath !== indexPath) {\r\n      this.currentInsertPosition = undefined;\r\n    }\r\n    if (this.currentSelectionHolder !== undefined && this.currentSelectionHolder.indexPath !== indexPath) {\r\n      this.currentSelectionHolder = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a representation of our internal state that can be written to the trace log.\r\n   */\r\n  getStateForTracing = () => (\r\n    StateManagerHelper.deepCopy({\r\n      clipboardContent: this.clipboardContent,\r\n      selectionHolder: this.currentSelectionHolder === undefined ? undefined : {\r\n        indexPath: this.currentSelectionHolder.indexPath\r\n      },\r\n      insertPosition: this.currentInsertPosition === undefined ? undefined : {\r\n        indexPath: this.currentInsertPosition.indexPath\r\n      }\r\n    })\r\n  )\r\n\r\n  /**\r\n   * Get the full state. (Our state is not task specific.)\r\n   * \r\n   * The current selections for cut/copy and paste operations don't survive a state preload. \r\n   * The user will have to restart an interrupted cut/copy or paste command. \r\n   * But she may reuse the content put into the clipboard by a cut/copy operation before the interruption\r\n   * for a paste operation after the interruption.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.clipboardContent);\r\n\r\n  /**\r\n    * Drop all state (our state is not task specific).\r\n   */\r\n  clearTasksState = () => {\r\n    this.clipboardContent = undefined;\r\n    this.currentSelectionHolder = undefined;\r\n    this.currentInsertPosition = undefined;\r\n  };\r\n\r\n  /**\r\n    * Preload the tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.clipboardContent = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (state) => {\r\n    this.clipboardContent = state;\r\n  }\r\n\r\n  // private stuff ------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Change our clipboard content and trace a state change log entry.\r\n   */\r\n  setClipboardContent = (newContent) => {\r\n    this.clipboardContent = newContent;\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'ClipboardState',\r\n      {\r\n        state: newContent\r\n      },\r\n      this.traceLog\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a trace log entry for a cut or copy operation\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} operationType The operation type to trace: CUT, COPY\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance.\r\n   * @param {*} selectionHolderEntry The selection holder entry that was used to perform the operation. \r\n   * @param {boolean} wasPerformed A flag indicating whether the requested action was performed or denied.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  traceCutCopy = (triggeringType, operation, indexPath, selectionHolderEntry, wasPerformed, runtime) => {\r\n    this.trace(\r\n      triggeringType,\r\n      operation,\r\n      indexPath,\r\n      selectionHolderEntry === undefined ? undefined : selectionHolderEntry.indexPath,\r\n      wasPerformed ? this.clipboardContent : undefined,\r\n      wasPerformed,\r\n      runtime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a trace log entry for a cut or copy operation\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance.\r\n   * @param {*} insertPositionEntry The insert position entry that was used to perform the operation. \r\n   * @param {boolean} wasPerformed A flag indicating whether the requested action was performed or denied.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  tracePaste = (triggeringType, indexPath, insertPositionEntry, wasPerformed, runtime) => {\r\n    this.trace(\r\n      triggeringType,\r\n      'paste',\r\n      indexPath,\r\n      insertPositionEntry === undefined ? undefined : insertPositionEntry.indexPath,\r\n      wasPerformed ? this.clipboardContent : undefined,\r\n      wasPerformed,\r\n      runtime\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * Create a trace log entry.\r\n   * \r\n   * @param {String} triggeringType The type of the caller triggering the operation:: 'button', 'contextMenu', 'keyboard'\r\n   * @param {String} operationType The operation type to trace: 'cut', 'copy', 'paste'\r\n   * @param {String} triggeringIndexPath The index path of the triggering display component instance. Might be undefined (keyboard triggers).\r\n   * @param {String} contentDealerIndexPath The index path of the display component instance providing resp. accepting content.\r\n   * @param {String} content The content that was transferred\r\n   * @param {boolean} wasPerformed A flag indicating whether the requested action was performed or denied.\r\n   * @param {*} runtime The common runtime context structure.\r\n   */\r\n  trace = (triggeringType, operationType, triggeringIndexPath, contentDealerIndexPath, content, wasPerformed, runtime) => {\r\n    const triggerUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(triggeringIndexPath, runtime);\r\n    const contentUserDefIdPath = PathTranslationHelper.getUserDefPathForIndexPath(contentDealerIndexPath, runtime);\r\n    this.traceLog.reportEvent(\r\n      'CutCopyPaste',\r\n      new Date(),\r\n      {\r\n        triggerType: triggeringType,\r\n        triggerIndexPath: triggeringIndexPath,\r\n        triggerUserDefIdPath,\r\n        triggerUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(triggerUserDefIdPath),\r\n        operation: operationType,\r\n        contentIndexPath: contentDealerIndexPath,\r\n        contentUserDefIdPath,\r\n        contentUserDefId: UserDefPathHelper.getLastUserDefIdFromPath(contentUserDefIdPath),\r\n        content,\r\n        isPerformed: wasPerformed\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * Basic helper methods for string usage.\r\n */\r\nexport default class StringUtils {\r\n\r\n  /**\r\n   * This is a helper function that can be used to capitalize the first letter of the received argument. \r\n   * @param {*} word \r\n   */\r\n  static toFirstUpper(word) {\r\n    if (typeof word !== 'string') return ''\r\n    return word.charAt(0).toUpperCase() + word.slice(1)\r\n  }\r\n\r\n}\r\n","import axios from 'axios';\r\nimport moment from 'moment';\r\nimport { notify } from 'react-notify-toast';\r\nimport StringUtils from '../utils/StringUtils';\r\n\r\n/**\r\n * Manage the transfer of user session related result data (trace log, media recordings) to the server. \r\n * \r\n * This is a base implementation used by the two specific uploaders that we currently have: TraceLogUploader and RecordingUploader.\r\n * \r\n * We support transmission of user result data entries \r\n *  - via HTTP PUT calls or\r\n *  - window.postMessage events sent to the given target domain origin or\r\n *  - writing the user result data to the console.\r\n */\r\nexport default class UserDataUploader {\r\n\r\n  constructor(userDataBuffer, buildUserDataPostContentCallback, dataType) {\r\n    this.dataType = dataType;\r\n    this.userDataBuffer = userDataBuffer;\r\n    this.buildUserDataPostContentCallback = buildUserDataPostContentCallback;\r\n\r\n    this.userDataEntriesList = [];\r\n    this.lastSentFailCount = 0;\r\n    this.isMaxFailCountError = false;\r\n    this.notificationToaster = notify;\r\n\r\n    this.transmitterPromise = undefined;\r\n    this.transmitterPromiseIsResolved = false;\r\n\r\n    this.sessionContext = {};\r\n\r\n    this.transmissionChannel = 'console';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = undefined;\r\n\r\n    this.transmitInterval = undefined;\r\n    this.currentTimer = undefined;\r\n\r\n  }\r\n\r\n  // ------- public API -----------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Set the session context that we will use in the meta data of our transmissions to the server.\r\n   * \r\n   * The session context consists of \r\n   * - the session id\r\n   * - the user name\r\n   * - the timestamp of the user login\r\n   */\r\n  setSessionContext = (sessionId, username, loginTimestamp) => {\r\n    this.sessionContext = {\r\n      sessionId,\r\n      username,\r\n      loginTimestamp\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the session context that we use in the meta data of our transmissions to the server.\r\n   */\r\n  getSessionContext = () => this.sessionContext;\r\n\r\n  /**\r\n   * Start the scheduled automatic transmissions. \r\n   */\r\n  startAutomaticTransmissions = () => {\r\n    if (this.transmitInterval > 0) {\r\n      this.setNewTimer();\r\n    } else {\r\n      this.setImmediateCallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop the scheduled automatic transmissions.\r\n   * \r\n   * We will run a final transmission after cancelling the scheduled one.\r\n   */\r\n  stopAutomaticTransmissions = () => {\r\n    this.stopOldTimer();\r\n    this.dropImmediateCallback();\r\n  }\r\n\r\n  /**\r\n   * Grab all userData entries from user data buffer and put them onto our internal list of entries to transmit.\r\n   * Start transmission of all entries on our internal list. \r\n   * \r\n   * The method will not start another transmission attempt if the maximum failures threshold is reached. \r\n   * The method triggers an asynchronous transmission: It returns immediately after initiating the transmission\r\n   * and will not wait for the transmission to be completed.\r\n   * \r\n   */\r\n  collectEntriesAndTriggerTransmission = () => {\r\n    if (this.transmitterPromise === undefined || this.transmitterPromiseIsResolved === true) {\r\n      this.transmitterPromiseIsResolved = false;\r\n      this.transmitterPromise = this.collectEntriesAndBuildTransmitPromise().then(() => { this.transmitterPromiseIsResolved = true; });\r\n    } else {\r\n      this.transmitterPromise = this.transmitterPromise.then(() => {\r\n        this.transmitterPromiseIsResolved = false;\r\n        return this.collectEntriesAndBuildTransmitPromise().then(() => { this.transmitterPromiseIsResolved = true; });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Grab all user data entries from user data buffer and put them onto our internal list of entries to transmit.\r\n   * Return a promise that transmits all entries on our internal list and clips the internal list accordingly. \r\n   * \r\n   * The method will return a resolved promise if the maximum failures threshold is reached or no user data entries are to be transmitted. \r\n   * \r\n   */\r\n  collectEntriesAndBuildTransmitPromise = () => {\r\n    const { notificationToaster } = this;\r\n\r\n    // Grab all user data entries from user data buffer and add them to our internal list of user data entries to be sent to the server.\r\n    this.addUserDataEntries(this.userDataBuffer.popEntries());\r\n\r\n    if (this.getUserDataEntriesList().length === 0) {\r\n      // No user data entries pending -> do nothing this time.\r\n      return Promise.resolve();\r\n    }\r\n\r\n    if (!this.shouldTryAgainToSend()) {\r\n      // Maximum number of failed transmission attempts reached -> Display error message if we did not do so already.\r\n\r\n      if (!this.isMaxFailCountErrorDisplayed()) {\r\n        const notifyErrorMsg = `Max tries of error send occurred on the ${this.getFailCount()}th time and will not try again.`;\r\n        console.log('postTrace: ', notifyErrorMsg);\r\n        this.setMaxFailCountErrorDisplayed();\r\n\r\n        // to not be overridden with earlier toasts, just delay for 3 seconds the output of the toast\r\n        setTimeout(() => {\r\n          try {\r\n            notificationToaster.show(notifyErrorMsg, 'error')\r\n          } catch (ex) {\r\n            console.warn(`Did not inform user about max transmission failures. This might happen when an error occurs before we have a task running.`)\r\n          }\r\n        }, 3000);\r\n      }\r\n      return Promise.resolve();\r\n    }\r\n\r\n    // Build message to transmit.\r\n    const userDataRequestBody = this.buildUserDataPostContentCallback(moment().format(), this.getSessionContext(), this.getUserDataEntriesList());\r\n    // Return a promise that transmits the messages and clips our pending entries list:\r\n    return this.getTransmittingPromise(userDataRequestBody).then((response) => {\r\n      this.updateUserDataEntriesListAfterSuccessfulSend(response.noOfEntriesTransmitted);\r\n    }, (error) => {\r\n      console.log(error)\r\n      this.increaseNextSentFailCount();\r\n      try {\r\n        notificationToaster.show(`Error sending ${this.dataType}s! Fail count:${this.getFailCount()}`, 'warning');\r\n      } catch (ex) {\r\n        console.warn(`Did not inform user about the previous transmission failure. This might happen when an error occurs before we have a task running.`)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set our transmission channel to 'postMessage'. \r\n   * \r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window)\r\n   * @param {String} domainUri The domain URI we should use as target origin to post messages to.\r\n   */\r\n  setPostMessageTransmissionChannel = (targetWindowType, domainUri, interval) => {\r\n    this.transmissionChannel = 'postMessage';\r\n    this.targetWindowType = targetWindowType;\r\n    this.domainUri = domainUri;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = undefined;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n  /**\r\n   * Set our transmission channel to 'callback'.\r\n   */\r\n  setCallbackTransmissionChannel = (transmitCallback, interval) => {\r\n    this.transmissionChannel = 'callback';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = transmitCallback;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n\r\n  /**\r\n   * Set our transmission channel to 'console'.\r\n   */\r\n  setConsoleTransmissionChannel = (interval) => {\r\n    this.transmissionChannel = 'console';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n    this.axiosInstance = undefined;\r\n    this.transmitCallback = undefined;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n  /**\r\n   * Set our transmission channel to 'http'. \r\n   * \r\n   * @param {*} transmitUrl The target URL to put user data entries to.\r\n   */\r\n  setHttpTransmissionChannel = (transmitUrl, interval, httpTimeout) => {\r\n    this.transmissionChannel = 'http';\r\n    this.targetWindowType = undefined;\r\n    this.domainUri = undefined;\r\n\r\n    this.axiosInstance = axios.create({\r\n      baseURL: transmitUrl,\r\n      timeout: httpTimeout === undefined ? 30000 : httpTimeout,\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n\r\n    this.transmitCallback = undefined;\r\n    this.setTransmitInterval(interval);\r\n    this.resetMaxFailCount();\r\n  }\r\n\r\n\r\n  /**\r\n   * Set a non-standard notification toaster mechanism. \r\n   * \r\n   * This is useful for testing without a GUI where the standard notify toaster is not available. \r\n   * The given toaster must provide a method show(messageString, levelString)\r\n   * \r\n   * @param {*} toaster A callback that we use to send notifications to the user. \r\n   */\r\n  setNotificationToaster = (toaster) => {\r\n    this.notificationToaster = toaster;\r\n  }\r\n\r\n  // ------- private stuff --------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Reset our maximum failure count to 0. \r\n   * \r\n   * This is used when a new transmission configuration is established since \r\n   * the new configuration might solve the underlying problem.\r\n   */\r\n  resetMaxFailCount = () => {\r\n    this.isMaxFailCountError = false;\r\n    this.lastSentFailCount = 0;\r\n  }\r\n\r\n  /**\r\n   * Set our transmit interval. \r\n   * \r\n   * If necessary we stop and restart our automatic transmissions to take a new transmit interval into account.\r\n   */\r\n  setTransmitInterval = (newTransmitInterval) => {\r\n    if (newTransmitInterval !== this.transmitInterval) {\r\n      this.stopOldTimer();\r\n      this.dropImmediateCallback();\r\n      this.transmitInterval = newTransmitInterval;\r\n      if (this.transmitInterval > 0) {\r\n        this.setNewTimer();\r\n      } else {\r\n        this.setImmediateCallback();\r\n      }\r\n    }\r\n  }\r\n\r\n  setImmediateCallback = () => {\r\n    this.userDataBuffer.setNewEntryListener(this.collectEntriesAndTriggerTransmission);\r\n  }\r\n\r\n  dropImmediateCallback = () => {\r\n    if (this.traceLogBuffer !== undefined) {\r\n      this.traceLogBuffer.setNewEntryListener(undefined);\r\n    }\r\n  }\r\n\r\n  stopOldTimer = () => {\r\n    if (this.currentTimer !== undefined) {\r\n      clearInterval(this.currentTimer);\r\n      this.currentTimer = undefined;\r\n      this.collectEntriesAndTriggerTransmission();\r\n    }\r\n  }\r\n\r\n  setNewTimer = () => {\r\n    this.stopOldTimer();\r\n    this.currentTimer = setInterval(() => this.collectEntriesAndTriggerTransmission(), this.transmitInterval);\r\n  }\r\n\r\n  /**\r\n   *  Increase the transmission failures counter.\r\n   */\r\n  increaseNextSentFailCount = () => {\r\n    this.lastSentFailCount += 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of failed transmission attempts.\r\n   */\r\n  getFailCount = () => this.lastSentFailCount;\r\n\r\n\r\n  isMaxFailCountErrorDisplayed = () => this.isMaxFailCountError;\r\n\r\n\r\n  setMaxFailCountErrorDisplayed = () => {\r\n    this.isMaxFailCountError = true;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the number of failed transmission attempts has not yet reached our threshold.\r\n   */\r\n  shouldTryAgainToSend = () => this.getFailCount() < 10;\r\n\r\n  /**\r\n   * Retuns our internal list of user data entries to be sent to the server.\r\n   */\r\n  getUserDataEntriesList = () => this.userDataEntriesList;\r\n\r\n  /**\r\n   * Add the given user data entries to our internal list of entries to be sent to the server.\r\n   */\r\n  addUserDataEntries = (newUserDataEntries) => {\r\n    if (newUserDataEntries.length > 0) {\r\n      this.userDataEntriesList = this.userDataEntriesList.concat(newUserDataEntries);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update our internal structures after a successful transmission of data to the server:\r\n   * \r\n   * Remove the transmitted user data entries from our internal entries list.\r\n   * Reset the last failure count to zero.\r\n   * \r\n   * @param noOfTransmittedEntries The number of entries that were transmitted by the successful transmission.\r\n   */\r\n  updateUserDataEntriesListAfterSuccessfulSend = (noOfTransmittedEntries) => {\r\n    this.userDataEntriesList = this.userDataEntriesList.filter((data, index) => index > noOfTransmittedEntries);\r\n    this.lastSentFailCount = 0;\r\n  }\r\n\r\n  /**\r\n   * Get the appropriate Promise to transmit our user data data.\r\n   */\r\n  getTransmittingPromise = (dataToTransmit) => {\r\n    switch (this.transmissionChannel) {\r\n      case 'postMessage':\r\n        return UserDataUploader.transmitViaPostMessage(dataToTransmit, this.targetWindowType, this.domainUri, this);\r\n      case 'callback':\r\n        return UserDataUploader.transmitViaCallback(dataToTransmit, this.transmitCallback, this);\r\n      case 'console':\r\n        return UserDataUploader.transmitViaConsole(dataToTransmit, this);\r\n      case 'http':\r\n        return UserDataUploader.transmitViaHttp(dataToTransmit, this.axiosInstance, this)\r\n      default:\r\n        return UserDataUploader.transmitViaConsole(dataToTransmit, this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket via a postMessage event.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToTransmit The bucket of user data entries with wrapping meta data ready to be sent to the server.\r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window, useful for testing only)\r\n   * @param {String} targetOriginUri The domain URI we should use as target origin to post messages to.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaPostMessage(dataToTransmit, targetWindowType, targetOriginUri, uploaderInstance) {\r\n    return new Promise((resolve, reject) => {\r\n      const messageToSend = {\r\n        eventType: `${uploaderInstance.dataType}Transmission`,\r\n        [`${uploaderInstance.dataType}Data`]: dataToTransmit\r\n      }\r\n      const targetWindow = UserDataUploader.getTargetWindow(targetWindowType)\r\n      if (targetWindow === undefined) {\r\n        console.error(`Cannot find target window for target window type ${targetWindowType}`);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s via post message.`);\r\n      }\r\n      try {\r\n        targetWindow.postMessage(JSON.stringify(messageToSend), targetOriginUri);\r\n        resolve({\r\n          noOfEntriesTransmitted: dataToTransmit[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`].length\r\n        });\r\n      } catch (e) {\r\n        console.error(`Cannot deliver ${uploaderInstance.dataType}s via postMessage`, e);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s via post message.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the target window specified by the given target window type.\r\n   * \r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window, useful for testing only)\r\n   */\r\n  static getTargetWindow(targetWindowType) {\r\n    switch (targetWindowType) {\r\n      case 'parent':\r\n        return window.parent;\r\n      case 'opener':\r\n        return window.opener;\r\n      case 'self':\r\n        return window;\r\n      default:\r\n        console.error('Unknown target window type!')\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket via the externally given transmission callback.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToTransmit The bucket of user data entries with wrapping meta data ready to be sent to the callback.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaCallback(dataToTransmit, transmitCallback, uploaderInstance) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        transmitCallback(dataToTransmit);\r\n      } catch (e) {\r\n        console.error(`Cannot deliver ${uploaderInstance.dataType}s via callback`, e);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s via callback`);\r\n      }\r\n      resolve({\r\n        noOfEntriesTransmitted: dataToTransmit[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`].length\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n  static getDataType = dataType => (dataType === \"recording\" ? dataType : \"log\")\r\n\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket via a HTTP POST request.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToTransmit The bucket of user data entries with wrapping meta data ready to be sent to the server.\r\n   * @param {*} axiosInstance The instance of the axios transmission library to put the user data entries to.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaHttp(dataToTransmit, axiosInstance, uploaderInstance) {\r\n    const nbOfEntriesInTransmission = dataToTransmit[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`].length;\r\n    return axiosInstance.post('', dataToTransmit)\r\n      .then(response => (\r\n        {\r\n          noOfEntriesTransmitted: nbOfEntriesInTransmission\r\n        }\r\n      ))\r\n      .catch((error) => {\r\n        if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          // that falls out of the range of 2xx\r\n          console.error(error.response.status, `Error: Cannot deliver ${uploaderInstance.dataType}s to URL ${error.response.config.url}`);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n          // http.ClientRequest in node.js\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          console.log('Error', error.message);\r\n        }\r\n        console.log(error.config);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s to server.`);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Initiate transmission of the given user data entries bucket to the console.\r\n   * \r\n   * The method returns a Promise that will return a result status object once the transmission is complete or has failed. \r\n   * If the transmission was successful the result status object contains the number of entries included in the \r\n   * user data entries bucket that was transferred.\r\n   * \r\n   * @param {*} dataToLog The bucket of user data entries with wrapping meta data ready to be user dataged to the console.\r\n   * @returns A Promise that will return a result object once the transmission is complete or has failed.\r\n   */\r\n  static transmitViaConsole(dataToLog, uploaderInstance) {\r\n    const entriesList = dataToLog[`${UserDataUploader.getDataType(uploaderInstance.dataType)}EntriesList`]\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const capitalizedDataType = StringUtils.toFirstUpper(uploaderInstance.dataType);\r\n        // force the browser to not show a 'live' view of the data in the console -> JSON.parse(JSON.stringify(...))\r\n        // (see https://developer.mozilla.org/en-US/docs/Web/API/console/log, chapter 'Logging objects')\r\n        console.log(`${capitalizedDataType} message sent to console: `, JSON.parse(JSON.stringify(dataToLog)));\r\n      } catch (e) {\r\n        console.error(`Cannot deliver ${uploaderInstance.dataType}s to console`, e);\r\n        throw new Error(`Cannot deliver ${uploaderInstance.dataType}s to console`);\r\n      }\r\n      resolve({\r\n        noOfEntriesTransmitted: entriesList.length\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","import Utils from '../utils/Utils';\r\nimport UserDataUploader from './UserDataUploader';\r\n\r\n/**\r\n * Manage the transfer of the trace log to the server. \r\n * \r\n * We support transmission of the trace log entries \r\n *  - via HTTP PUT calls or\r\n *  - window.postMessage events sent to the given target domain origin or\r\n *  - writing the trace logs to the console.\r\n */\r\nexport default class TraceLogUploader extends UserDataUploader {\r\n\r\n  constructor(traceLogBuffer) {\r\n    super(traceLogBuffer, TraceLogUploader.buildTracePostContent, \"traceLog\")\r\n    this.transmitInterval = 20000;\r\n  }\r\n\r\n  // ------- public API -----------------------------------------------------------------------------\r\n\r\n  // See the base class UserDataUploader for our public API.\r\n\r\n  // ------- private stuff --------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build the content of a trace transmission to the server. \r\n   * \r\n   * This consists of a meta data structure and the list of log entries to transmit.\r\n   * We take the list of log entries from our internal log entries list but\r\n   * we do not drop the entries from this list yet.\r\n   * \r\n   * @param {String} sendTimestamp The time of send operation.\r\n   * @param {*} runtime \r\n   */\r\n  static buildTracePostContent = (sendTimestamp, sessionContext, logEntriesList) => {\r\n    const { sessionId, username, loginTimestamp } = sessionContext;\r\n    if (sessionId === undefined) {\r\n      console.warn(\"Sending trace log with dummy session id!\");\r\n    }\r\n    const metaData = {\r\n      userId: username,\r\n      sessionId: sessionId === undefined ? 'dummySessionId' : sessionId,\r\n      loginTimestamp,\r\n      sendTimestamp,\r\n      cbaVers: Utils.getCbaVersion()\r\n    };\r\n\r\n    const tracePostContent = {\r\n      metaData,\r\n      logEntriesList\r\n    };\r\n\r\n    return tracePostContent;\r\n  }\r\n\r\n}\r\n","import UrlLib from 'url';\r\nimport Utils from '../utils/Utils';\r\nimport UserDefPathHelper from '../state/UserDefPathHelper';\r\n\r\n\r\n/**\r\n * Receive Windows.postMessage() events.\r\n */\r\nexport default class PostMessageReceiver {\r\n\r\n  constructor() {\r\n    this.acceptedExternalPageFrameUrlsList = [];\r\n    this.defaultAcceptedUrl = undefined;\r\n\r\n    this.availableTaskSwitches = [];\r\n\r\n    // Access point for test code to intercept the response event sending:\r\n    this.responder = (eventToSend, triggeringEventOrigin, triggeringEventSourceWindow) => {\r\n      try {\r\n        const messageString = JSON.stringify(eventToSend);\r\n        const eventOrigin = (triggeringEventOrigin === undefined || triggeringEventOrigin == null || triggeringEventOrigin.length === 0 || triggeringEventOrigin === 'null') ? '*' : triggeringEventOrigin;\r\n        triggeringEventSourceWindow.postMessage(messageString, eventOrigin);\r\n      } catch (error) {\r\n        console.error('Sending a response message failed.', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // ---------- public API ---------------------------------------\r\n\r\n\r\n  /**\r\n   * Register a URL as source of events from external JavaScript code involved via an external page frame component.\r\n   * \r\n   * We don't accept runtime control events (i.e. events that are part of the task player API) from these registered URLs.\r\n   */\r\n  registerAcceptableUrlForExternalPageFrameEvent = (url) => {\r\n\r\n    // trim to the http(s)://<host>:<port> part:\r\n    const parsedUrl = PostMessageReceiver.tryToParseURL(url);\r\n    if (parsedUrl === undefined) {\r\n      console.log(`We don't accept invalid URLs as source URLs for post message events.  Ignored URL is: ${url}`);\r\n      return;\r\n    }\r\n    const { origin } = parsedUrl;\r\n\r\n    if (origin === undefined || origin.length < 1) {\r\n      console.log(`We only accept http(s) protocols as source URLs for post message events.  Ignored URL is: ${url}`);\r\n      return;\r\n    }\r\n\r\n    if (!this.acceptedExternalPageFrameUrlsList.includes(origin)) {\r\n      this.acceptedExternalPageFrameUrlsList.push(origin);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Start to receive events.\r\n   * \r\n   * @param runtime The global runtime context structure.\r\n   */\r\n  startReceiving = (runtime, taskPlayer) => {\r\n    if (runtime === undefined) {\r\n      console.error('Cannot start receiving events without a runtime context.')\r\n      return;\r\n    }\r\n    if (taskPlayer === undefined) {\r\n      console.error('Cannot start receiving events without a task player reference.')\r\n      return;\r\n    }\r\n    this.runtime = runtime;\r\n    this.taskPlayer = taskPlayer;\r\n    const href = Utils.getCallingUrlWithoutPath();\r\n    this.defaultAcceptedUrl = (href === 'file:' || href === 'atom:') ? 'null' : href;\r\n    this.acceptedExternalPageFrameUrlsList.push(this.defaultAcceptedUrl);\r\n    window.addEventListener('message', this.receiveEvent, false);\r\n  }\r\n\r\n  /**\r\n   * Send the 'task player is ready' message to the given window using the given target origin URI.\r\n   */\r\n  sendTaskPlayerReadyEvent = (domainUri, windowType) => {\r\n    PostMessageReceiver.sendResponseEvent(\r\n      {\r\n        eventType: 'taskPlayerReady'\r\n      },\r\n      domainUri,\r\n      this.getTargetWindow(windowType),\r\n      this.responder\r\n    );\r\n  }\r\n\r\n  // ---------- private stuff ---------------------------------------\r\n\r\n  static tryToParseURL(url) {\r\n    try {\r\n      const parsedUrl = new URL(url);\r\n      return parsedUrl;\r\n    } catch (ex) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Process an icoming event.\r\n   */\r\n  receiveEvent = (event) => {\r\n    const { origin, source, data: dataInEvent } = event;\r\n\r\n    // check event origin\r\n    if (this.defaultAcceptedUrl !== origin && !this.acceptedExternalPageFrameUrlsList.includes(origin)) {\r\n      console.log(`PostMessageReceiver ignored event from origin ${origin}, our default accepted url is ${this.defaultAcceptedUrl}, additional accepted URLs:`, this.acceptedExternalPageFrameUrlsList);\r\n      return;\r\n    }\r\n\r\n    const data = PostMessageReceiver.tryJsonParse(dataInEvent);\r\n    if (data === undefined) {\r\n      console.log(`PostMessageReceiver ignored event with non-JSON data: ${dataInEvent}`);\r\n      return;\r\n    }\r\n\r\n    const eventTime = new Date();\r\n\r\n    // chain of event processors starts here: \r\n    let eventProcessed = false;\r\n    if (!eventProcessed) {\r\n      eventProcessed = this.processRuntimeControlEvent(origin, source, data);\r\n    }\r\n    if (!eventProcessed) {\r\n      eventProcessed = this.processIfExternalPageFrameEvent(eventTime, origin, source, data);\r\n    }\r\n    if (!eventProcessed) {\r\n      console.log(`PostMessageReceiver ignored unknown event with data: ${dataInEvent}`);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Try to parse the given string as JSON object. \r\n   * \r\n   * The method silently returns undefined if parsing fails.\r\n   * @param {String} data \r\n   */\r\n  static tryJsonParse(data) {\r\n    try {\r\n      return JSON.parse(data);\r\n    } catch (e) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Try to process the event as event coming from code in an external page frame. \r\n   * \r\n   * The method silently ignores the event if it does \r\n   * neither contain trace log data nor state machine event nor variable get/set data.\r\n   * \r\n   * @param {Date} eventTime The time the event is processed.\r\n   * @param {String} origin The event origin.\r\n   * @param {*} source The window the event came from.\r\n   * @param {*} data The data contained in the event.\r\n   * @return True if the event was processed, false otherwise.\r\n   */\r\n  processIfExternalPageFrameEvent = (eventTime, origin, source, data) => {\r\n\r\n    // check event origin\r\n    if (!this.acceptedExternalPageFrameUrlsList.includes(origin)) {\r\n      return false;\r\n    }\r\n\r\n    const { traceMessage, traceType, microfinEvent, microfinVariable, setVariable, getVariable, indexPath, userDefIdPath } = data;\r\n    const { taskManager, variableManager } = this.runtime;\r\n    const currentTaskId = taskManager.getCurrentStatePathRoot();\r\n\r\n    if (PostMessageReceiver.isEmptyOrNoValue(traceMessage)\r\n      && PostMessageReceiver.isEmptyOrNoValue(microfinEvent)\r\n      && PostMessageReceiver.isEmptyOrNoValue(microfinVariable)\r\n      && PostMessageReceiver.isNoValue(setVariable)\r\n      && PostMessageReceiver.isEmptyOrNoValue(getVariable)) {\r\n      return false;\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(traceMessage)) {\r\n      const safeIndexPath = PostMessageReceiver.isEmptyOrNoValue(indexPath) ? undefined : indexPath;\r\n      const safeUserDefIdPath = PostMessageReceiver.isEmptyOrNoValue(userDefIdPath) ? undefined : userDefIdPath;\r\n      // create an entry in the trace log\r\n      this.runtime.traceLogBuffer.reportEvent('JavaScriptInjected', eventTime, {\r\n        indexPath: safeIndexPath,\r\n        userDefIdPath: safeUserDefIdPath,\r\n        userDefId: safeUserDefIdPath === undefined ? undefined : UserDefPathHelper.getLastUserDefIdFromPath(safeUserDefIdPath),\r\n        origin,\r\n        message: traceMessage,\r\n        type: traceType\r\n      })\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(microfinVariable)) {\r\n      const { variableName, newValue } = microfinVariable;\r\n      if (!PostMessageReceiver.isEmptyOrNoValue(variableName) && !PostMessageReceiver.isEmptyOrNoValue(newValue)) {\r\n        variableManager.setVariable(currentTaskId, variableName, newValue, undefined, this.runtime);\r\n      }\r\n    }\r\n\r\n    if (!PostMessageReceiver.isNoValue(setVariable)) {\r\n      const { variableName, newValue, newType } = setVariable;\r\n      if (!PostMessageReceiver.isEmptyOrNoValue(variableName) && !PostMessageReceiver.isNoValue(newValue)) {\r\n        variableManager.setVariable(currentTaskId, variableName, newValue, newType, this.runtime);\r\n      }\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(microfinEvent)) {\r\n      this.runtime.statemachinesManager.triggerEvent(microfinEvent);\r\n    }\r\n\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(getVariable)) {\r\n      const { variableName, callId } = getVariable;\r\n      if (!PostMessageReceiver.isEmptyOrNoValue(variableName) && !PostMessageReceiver.isEmptyOrNoValue(callId)) {\r\n\r\n        // obtain variable value\r\n        const result = variableManager.getVariable(currentTaskId, variableName, true);\r\n\r\n        const messagePayload = {\r\n          result,\r\n          callId\r\n        }\r\n\r\n        // send back result via acceptor method\r\n        if (source !== undefined) {\r\n          try {\r\n            source.postMessage(JSON.stringify(messagePayload), origin)\r\n          } catch (e) {\r\n            console.error(`Cannot send variable value result,`, e);\r\n            throw new Error(`Cannot send variable value result.`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // signal user interactions\r\n    for (let index = 0; index < PostMessageReceiver.getUserInteractionCount(data); index += 1) {\r\n      this.runtime.incidentsAccumulator.userInteraction(eventTime, undefined, this.runtime);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Check whether a parameter coming in from external JavaScript code\r\n   * does not contain a 'substantial' value, i.e. \r\n   *  - it is undefined or\r\n   *  - it is null or\r\n   *  - it is empty\r\n   * @param {*} value \r\n   */\r\n  static isEmptyOrNoValue(value) {\r\n    return value === undefined || value === null || value === '';\r\n  }\r\n\r\n  /**\r\n   * Check whether a parameter coming in from external JavaScript code\r\n   * does not contain any value, i.e. \r\n   *  - it is undefined or\r\n   *  - it is null \r\n   * @param {*} value \r\n   */\r\n  static isNoValue(value) {\r\n    return value === undefined || value === null;\r\n  }\r\n\r\n  /**\r\n   * Process an arriving message setting the \r\n   * availability of a task switch. \r\n   * \r\n   * @param {*} data The data contained in the availability setting event.\r\n   */\r\n  processAvailabilityMessage = (data) => {\r\n    const oldEntry = this.availableTaskSwitches.find(entry => (\r\n      entry.request === data.request\r\n      && entry.scope === data.scope\r\n      && entry.item === data.item\r\n      && entry.task === data.task));\r\n    if (oldEntry === undefined) {\r\n      this.availableTaskSwitches.push({\r\n        request: data.request,\r\n        scope: data.scope,\r\n        item: data.item,\r\n        task: data.task,\r\n        value: data.value\r\n      })\r\n    } else {\r\n      oldEntry.value = data.value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is the requested task switch available currently?\r\n   * \r\n   * We do a lookup in our availability map. If there is \r\n   * not entry for the given request we return false as default.\r\n   */\r\n  isTaskSwitchAvailable = (request, scope, item, task) => {\r\n    const existingEntry = this.availableTaskSwitches.find(entry => (\r\n      entry.request === request\r\n      && entry.scope === scope\r\n      && entry.item === item\r\n      && entry.task === task));\r\n    return existingEntry === undefined ? false : existingEntry.value;\r\n  }\r\n\r\n  /**\r\n   * Try to process the event as event coming from some runtime controller. \r\n   * \r\n   * The method silently ignores the event if \r\n   *  - the data does not contain the eventType field.\r\n   *  - the event origin is not our defaultAcceptedUrl.\r\n   * \r\n   * @param {String} origin The event origin.\r\n   * @param {*} sourceWindow The source window where the event came from.\r\n   * @param {*} data The data contained in the event.\r\n   * @return True if the event was processed, false otherwise.\r\n   */\r\n  processRuntimeControlEvent = (origin, sourceWindow, data) => {\r\n    const { runtime } = this;\r\n\r\n    // check event origin\r\n    if (this.defaultAcceptedUrl !== origin) {\r\n      return false;\r\n    }\r\n\r\n    if (data.eventType === undefined) {\r\n      return false;\r\n    }\r\n\r\n    switch (data.eventType) {\r\n      // ---- Initialization ---------------------------------------------\r\n      case 'taskPlayerReady':\r\n        // ignore my own initialization done event (happens when running together with controller in one window)\r\n        console.info('Task player ready (outgoing event) ignored.');\r\n        break;\r\n      // ---- Configuration Control ---------------------------------------------\r\n      case 'setWaitMessages':\r\n        this.taskPlayer.setWaitMessages(data.primary, data.secondary);\r\n        break;\r\n      case 'addItem':\r\n        this.taskPlayer.addItem(data.itemConfig, data.resourcePath, data.externalResourcePath, data.libraryPathsMap);\r\n        break;\r\n      case 'clearItems':\r\n        this.taskPlayer.clearItems();\r\n        break;\r\n      case 'setScalingConfiguration':\r\n        this.taskPlayer.setScalingConfiguration({\r\n          scalingMode: data.scalingMode, alignmentHorizontal: data.alignmentHorizontal, alignmentVertical: data.alignmentVertical\r\n        });\r\n        break;\r\n      case 'setPreload':\r\n        {\r\n          const preloadPromise = this.taskPlayer.setPreload(data.itemName);\r\n          if (preloadPromise !== undefined) {\r\n            preloadPromise.then((resources) => {\r\n              PostMessageReceiver.sendResponseEvent(\r\n                {\r\n                  eventType: 'setPreloadReturn',\r\n                  requestId: data.requestId,\r\n                  isSuccess: true,\r\n                  message: {\r\n                    images: resources[0],\r\n                    videos: resources[1],\r\n                    audios: resources[2]\r\n                  }\r\n                },\r\n                origin,\r\n                sourceWindow,\r\n                this.responder\r\n              );\r\n            }, (error) => {\r\n              PostMessageReceiver.sendResponseEvent(\r\n                {\r\n                  eventType: 'setPreloadReturn',\r\n                  requestId: data.requestId,\r\n                  isSuccess: false,\r\n                  message: error\r\n                },\r\n                origin,\r\n                sourceWindow,\r\n                this.responder\r\n              );\r\n            });\r\n          }\r\n        }\r\n        break;\r\n      case 'setPreloadReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for setPreload request (outgoing event) ignored.');\r\n        break;\r\n      // ---- Trace Control ---------------------------------------------\r\n      case 'insertMessageInTrace':\r\n        this.taskPlayer.insertMessageInTrace(data.message);\r\n        break;\r\n      case 'logStateToTrace':\r\n        this.taskPlayer.logStateToTrace();\r\n        break;\r\n      case 'flushTrace':\r\n        this.taskPlayer.flushTrace();\r\n        break;\r\n      case 'setTraceLogTransmissionChannel':\r\n        if (data.channel === 'http') {\r\n          runtime.traceLogUploader.setHttpTransmissionChannel(data.transmitUrl, data.interval, data.httpTimeout);\r\n        } else if (data.channel === 'postMessage') {\r\n          if (PostMessageReceiver.isValidTargetOrigin(data.targetOrigin)) {\r\n            runtime.traceLogUploader.setPostMessageTransmissionChannel(data.targetWindowType, data.targetOrigin, data.interval);\r\n          } else {\r\n            console.warn(`Trace log channel configuration with invalid target origin setting ignored: ${data.targetOrigin}`);\r\n          }\r\n        } else if (data.channel === 'console') {\r\n          runtime.traceLogUploader.setConsoleTransmissionChannel(data.interval);\r\n        } else {\r\n          console.error(`Invalid trace log channel setting ignored: ${data.channel}`);\r\n        }\r\n        break;\r\n      case 'traceLogTransmission':\r\n        // this is a trace log event not meant for us -> ignore.\r\n        console.info('Trace log event echo (outgoing event) ignored.');\r\n        break;\r\n      case 'setTraceContextId':\r\n        this.taskPlayer.setTraceContextId(data.contextId);\r\n        break;\r\n      case 'setTraceContentFilter':\r\n        this.taskPlayer.setTraceContentFilter(data.replaySupport, data.withExtendedMetaData, data.withoutItemConfiguration, data.withoutSnapshot, data.withoutScoring);\r\n        break;\r\n        // ---- Recordings Control -------------------------------------\r\n      case 'setRecordingTransmissionChannel':\r\n        if (data.channel === 'http') {\r\n          runtime.recordingUploader.setHttpTransmissionChannel(data.transmitUrl, undefined, data.httpTimeout);\r\n        } else if (data.channel === 'postMessage') {\r\n          if (PostMessageReceiver.isValidTargetOrigin(data.targetOrigin)) {\r\n            runtime.recordingUploader.setPostMessageTransmissionChannel(data.targetWindowType, data.targetOrigin, undefined);\r\n          } else {\r\n            console.warn(`Recording channel configuration with invalid target origin setting ignored: ${data.targetOrigin}`);\r\n          }\r\n        } else if (data.channel === 'console') {\r\n          runtime.recordingUploader.setConsoleTransmissionChannel(undefined);\r\n        } else {\r\n          console.error(`Invalid trace log channel setting ignored: ${data.channel}`);\r\n        }\r\n        break;\r\n      case 'recordingTransmission':\r\n        // this is a recording transmission event not meant for us -> ignore.\r\n        console.info('Recording transmission event echo (outgoing event) ignored.');\r\n        break;\r\n      case 'setRecordingContextId':\r\n        this.taskPlayer.setRecordingContextId(data.contextId);\r\n        break;\r\n      // ---- User Control ---------------------------------------------\r\n      case 'setUserId':\r\n        this.taskPlayer.setUserId(data.id);\r\n        break;\r\n      case 'logout':\r\n        this.taskPlayer.logout();\r\n        break;\r\n      case 'getUserId':\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getUserIdReturn',\r\n            requestId: data.requestId,\r\n            id: this.taskPlayer.getUserId()\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      case 'getUserIdReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getUserId request (outgoing event) ignored.');\r\n        break;\r\n      case 'showLogin':\r\n        this.taskPlayer.showLogin(\r\n          data.titleLabel,\r\n          data.fieldLabel,\r\n          data.buttonLabel,\r\n          (fieldValue) => {\r\n            PostMessageReceiver.sendResponseEvent(\r\n              {\r\n                eventType: 'loginDialogClosed',\r\n                requestId: data.requestId,\r\n                fieldValue\r\n              },\r\n              origin,\r\n              sourceWindow,\r\n              this.responder\r\n            )\r\n          }\r\n        );\r\n        break;\r\n      case 'loginDialogClosed':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for showLogin request (outgoing event) ignored.');\r\n        break;\r\n        // ---- Task Control ---------------------------------------------\r\n      case 'startTask':\r\n        this.taskPlayer.startTask(data.scope, data.item, data.task);\r\n        break;\r\n      case 'stopTask':\r\n        this.taskPlayer.stopTask();\r\n        break;\r\n      case 'pauseTask':\r\n        this.taskPlayer.pauseTask();\r\n        break;\r\n      case 'resumeTask':\r\n        this.taskPlayer.resumeTask();\r\n        break;\r\n      case 'getTask': {\r\n        const taskInfo = this.taskPlayer.getTask();\r\n        const { scope, item, task } = (taskInfo === undefined ? {} : taskInfo);\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getTaskReturn',\r\n            requestId: data.requestId,\r\n            scope,\r\n            item,\r\n            task\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      }\r\n      case 'getTaskReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getTask request (outgoing event) ignored.');\r\n        break;\r\n      case 'setTaskSequencer': {\r\n        const responderFunction = this.responder;\r\n        const targetWindow = this.getTargetWindow(data.targetWindowType);\r\n        if (!PostMessageReceiver.isValidTargetOrigin(data.targetOrigin)) {\r\n          console.warn(`Task sequencer configuration with invalid target origin ignored: ${data.targetOrigin}`);\r\n        } else {\r\n          this.taskPlayer.setTaskSequencer(\r\n            (request, scope, item, task) => {\r\n              PostMessageReceiver.sendResponseEvent(\r\n                {\r\n                  eventType: 'taskSwitchRequest',\r\n                  request,\r\n                  scope,\r\n                  item,\r\n                  task\r\n                },\r\n                data.targetOrigin,\r\n                targetWindow,\r\n                responderFunction\r\n              );\r\n            },\r\n            (request, scope, item, task) => this.isTaskSwitchAvailable(request, scope, item, task)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case 'taskSwitchRequest':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Task switch request (outgoing event) ignored.');\r\n        break;\r\n      case 'setSwitchAvailability':\r\n        this.processAvailabilityMessage(data);\r\n        break;\r\n      // ---- Task State Control ---------------------------------------------\r\n      case 'getTasksState':\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getTasksStateReturn',\r\n            requestId: data.requestId,\r\n            userId: this.taskPlayer.getUserId(),\r\n            state: this.taskPlayer.getTasksState()\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      case 'getTasksStateReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getTasksState request (outgoing event) ignored.');\r\n        break;\r\n      case 'clearTasksState':\r\n        this.taskPlayer.clearTasksState();\r\n        break;\r\n      case 'preloadTasksState':\r\n        this.taskPlayer.preloadTasksState(data.state);\r\n        break;\r\n      case 'replay':\r\n        this.taskPlayer.replay(data.story);\r\n        break;\r\n        // ---- Scoring Control -------------------------------------------------\r\n      case 'getScoringResult': {\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getScoringResultReturn',\r\n            requestId: data.requestId,\r\n            result: this.taskPlayer.getScoringResult(),\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      }\r\n      case 'getScoringResultReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getScoringResult request (outgoing event) ignored.');\r\n        break;\r\n      case 'getOldScoringResult': {\r\n        PostMessageReceiver.sendResponseEvent(\r\n          {\r\n            eventType: 'getOldScoringResultReturn',\r\n            requestId: data.requestId,\r\n            result: this.taskPlayer.getOldScoringResult(data.scope, data.item, data.task),\r\n          },\r\n          origin,\r\n          sourceWindow,\r\n          this.responder\r\n        );\r\n        break;\r\n      }\r\n      case 'getOldScoringResultReturn':\r\n        // ignore my own response (happens when running together with controller in one window)\r\n        console.info('Return event for getOldScoringResult request (outgoing event) ignored.');\r\n        break;\r\n      // ---- Statemachine Control ---------------------------------------------\r\n      case 'sendStatemachineEvent':\r\n        this.taskPlayer.sendStatemachineEvent(data.event);\r\n        break;\r\n      // ---- Header Control ---------------------------------------------\r\n      case 'setHeaderButtons':\r\n        this.taskPlayer.setHeaderButtons(data.headerButtons);\r\n        break;\r\n      case 'setMenuCarousels':\r\n        this.taskPlayer.setMenuCarousels(data.course, data.scopes);\r\n        break;\r\n      // ---- Developer Mode Control ---------------------------------------------\r\n      case 'activateDebuggingWindows':\r\n        this.taskPlayer.activateDebuggingWindows(data.scoreHotKey, data.traceHotKey, data.statemachineHotKey);\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  static sendResponseEvent(eventToSend, triggeringEventOrigin, triggeringEventSourceWindow, responder) {\r\n    responder(eventToSend, triggeringEventOrigin, triggeringEventSourceWindow);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the posting window specified by the given target window type.\r\n   * \r\n   * @param {String} targetWindowType The type of reference to the window to post messages to: 'parent' (for IFRAME parent), 'opener' (for the window that spawned our window), 'self' (our own window, useful for testing only)\r\n   */\r\n  getTargetWindow = (targetWindowType) => {\r\n    switch (targetWindowType) {\r\n      case 'parent':\r\n        return window.parent;\r\n      case 'opener':\r\n        return window.opener;\r\n      case 'self':\r\n        return window;\r\n      default:\r\n        console.error(`Unknown target window type ${targetWindowType}`)\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the number of user interactions to signal for this event. \r\n   * \r\n   * The method return 0 if it cannot detect a valid trace count in the event data.\r\n   * \r\n   * @param {*} data The data contained in the event.\r\n   */\r\n  static getUserInteractionCount(data) {\r\n    if (!PostMessageReceiver.isEmptyOrNoValue(data.traceCount) && data.traceCount >= 0) {\r\n      return data.traceCount;\r\n    }\r\n    console.warn(`Invalid traceCount in external page frame event ignored: ${data.traceCount}`);\r\n    return 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * Check whether the given string is a valid target origin for postMessage calls.\r\n   */\r\n  static isValidTargetOrigin(originAsString) {\r\n\r\n    if (originAsString === '*') return true;\r\n\r\n    try {\r\n      const parsedUrl = UrlLib.parse(originAsString);\r\n      return originAsString === `${parsedUrl.protocol}//${parsedUrl.host}`;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n}\r\n","export default class EvaluatorHelper {\n\n  static ANGLE_DEGREE = \"Degree\";\n\n  static ANGLE_RADIAN = \"Radian\";\n\n  static fak = (n) => {\n    if (n < 0 || n > 170) {\n      return NaN;\n    } else if (!EvaluatorHelper.isInt(n)) {\n      return NaN;\n    } else if (n <= 1) {\n      return 1;\n    } else {\n      return n * EvaluatorHelper.fak(n - 1);\n    }\n  }\n\n  static nthroot = (x, n) => {\n    const negate = n % 2 === 1 && x < 0;\n    if (negate) x = -x;\n    const possible = x ** (1 / n);\n    const check = possible ** n;\n    if (Math.abs(x - check) < 1 && ((x > 0) === (check > 0))) {\n      return negate ? -possible : possible;\n    }\n    return NaN;\n  }\n\n  static isInt = n => n % 1 === 0;\n\n  static isBigger = displayWidth => displayWidth > 10;\n\n\n  static isMultipleOfPi(value, frequency, offset, deg) {\n    const unit = deg ? 180 : Math.PI;\n    return ((value - offset*unit) / frequency / unit) % 1 === 0;\n  }\n\n}\n","import StateManagerHelper from '../../state/StateManagerHelper';\nimport EvaluatorHelper from \"./EvaluatorHelper\"\n\n/**\n * Mechanism to evaluate formulas built with binary operators\n * taking operator precedence (ranking) into account.\n * \n * Formulas are built by sending pairs of a value and a (value terminating) operator \n * via calls of calc(operator, value). \n * \n * Supported operators are (with ascending precedence):\n *  '=', \n *  '+', '-' (with alternate symbol '–' (long dash)),  \n *  '*' (with alternate symbol '×'), '/' (with alternate symbol '÷')\n *  'yx' (calculating x^y), 'x√y', 'log' and 'EE'\n *\n * The calc(operator, value) call will evaluate the formula given up till now\n * as far as possible taking operator precedence into account.\n * \n * Sending the '=' operator will calculate the final result and erase the formula.\n * \n * The mechanism supports a special feature for repeated '=' calls:\n * If multiple '=' calls follow each other without any other operators between,\n * the calc method will return the following calculation result:\n *  <operand of current '=' call> <operator before first '=' call> <operand of first '=' call>\n * Example call sequence:\n *  - call('+', 420) returns 420 (nothing to caculate yet)\n *  - call('-', 30)  returns 450 (same precedence, can calculate 420 + 30 already)\n *  - call('=', 70)  returns 380 (formula complete, total result is 420 + 30 - 70)\n *  - call('=', 200) returns 130 (applies - 70 to new given value 200, i.e. 200 - 70)\n *  - call('=', 100) returns  30 (applies - 70 to new given value 100, i.e. 100 - 70)\n */ \nexport default class ExpressionEvaluator {\n\n  static RANK = {\n    '=': 0,\n    '+': 1,\n    '-': 1,\n    '/': 2,\n    '*': 2,\n    yx: 3,\n    'x√y': 3,\n    log: 3,\n    EE: 3\n  };\n\n  constructor() {\n    this.reset();\n  }\n\n  // ------------------ public API --------------------------------------------------\n\n  /**\n   * Get our full state for the task state backup/restore mechanism.\n   */\n  getFullState = () => ({\n    stack: StateManagerHelper.deepCopy(this.stack),\n    num: this.num,\n    repeatingRunStatus: StateManagerHelper.deepCopy(this.repeatingRunStatus)\n  });\n\n  /**\n   * Set our internal full state (obtained by getFullState()) to be used by the task state backup/restore mechanism.\n   */\n  restoreState = (state) => {\n    this.stack = StateManagerHelper.deepCopy(state.stack);\n    this.num = state.num;\n    this.repeatingRunStatus = StateManagerHelper.deepCopy(state.repeatingRunStatus);\n  }\n\n  /**\n   * Extend the current formula with the given value followed by the given operator\n   * and return the result of the formula evaluation (as far as evaluation is possible already\n   * due to operator precedences).\n   */\n  calc = (val, operator) => {\n\n    const key = this.translateKey(operator);\n\n    this.updateRepeatingRunStatus(key, val);\n\n    if (this.isStackEmpty()) {\n\n      if (key === '=') {\n        // New operand with '=' operator received.\n        if (this.repeatingRunIsActive()) {\n          // Operator and second operand for the repeating runs are there already.\n          // -> Do a repeating '=' calculation with the new first operand and return that as result.\n          //    (The stack remains empty.)\n          return `${this.calcValue(val, this.getRepeatingRunKey(), this.getRepeatingRunValue())}`;\n        } else {\n          // pressing '=' without anything in stack\n          // -> Return given value as result.\n          //    (The stack remains empty.)\n          return `${val}`;\n        }\n      } else {\n        // First operand with first binary operator received (maybe after stack reset by the last '=' operator).\n        // -> Create first stack entry waiting for second operand and return the given value as result.\n        this.pushStackEntry(val, key);\n        return `${val}`;\n      }\n\n    } else {\n\n      let returnValue = 0;\n\n      // the rank of the new key\n      const newRank = this.getRankForKey(key);\n\n      // the previous key and its rank\n      const previousKey = this.peekStackKey();\n      const previousValue = this.peekStackValue();\n\n      if (newRank > this.getRankForKey(previousKey)) {\n        // The new operation has higher precendence than the previous one (e.g. +, *)\n        // -> An operator with even higher precedence might follow. Therefore the given value might belong to that one\n        //    and we have to postpone the evaluation.\n        // -> Add a new pending entry to the stack.\n        this.pushStackEntry(val, key);\n        returnValue = val;\n      } else {\n        // The new operation has same or lower precendence than the previous one (e.g. *, + or *, *)\n        // -> Evaluate previous operator with its first operand and the current value as second operand\n        //    and pop the pending operation\n        const result = this.calcValue(previousValue, previousKey, val);\n        this.popStackEntry();\n\n        // We might be able to go even further down the stack:\n        if (!this.isStackEmpty() && newRank <= this.getRankForKey(this.peekStackKey())) {\n          // The new operation has lower precendence than 2 steps ago -> (e.g.  +, *, = or *, yx, +)\n          // -> Recursive call with the calculated value and our current operator.\n          returnValue = this.calc(result, key);\n        } else {\n          // The new operation has a higher precedence the the one 2 steps ago (or there is nothing left in the stack). \n          // -> We have to wait for further input.\n          // -> Push the result as first operand together with the new operator on the stack. \n          this.pushStackEntry(result, key);\n          returnValue = result;\n        }\n      }\n\n      // erase the stack if we got a '='\n      if (key === '=') {\n        this.resetStack();\n      }\n\n      return `${returnValue}`;\n\n    }\n\n\n  }\n\n  /**\n   * Erase the formula given so far and drop the repeating run status.\n   */\n  reset = () => {\n    this.resetStack();\n    this.resetRepeatingRun();\n  }\n\n  // ----------------- calculate complete operator expression -----------------------\n\n  // operands are strings!\n  calcValue = (o1, operator, o2) => {\n    let result;\n    switch (operator) {\n      case 'log':\n        result = Math.log(o1) / Math.log(o2);\n        break;\n      case 'yx':\n        result = o1 ** o2;\n        break;\n      case 'x√y':\n        result = EvaluatorHelper.nthroot(o1, o2);\n        break;\n      case 'EE':\n        result = o1 * (10 ** o2);\n        break;\n      case '+':\n        result = (+o1) + (+o2);\n        break;\n      case '-':\n        result = o1 - o2;\n        break;\n      case '*':\n        result = o1 * o2;\n        break;\n      case '/':\n        result = o1 / o2;\n        break;\n      default:\n        throw new Error(`NO case for operator ${operator}`);\n    }\n    return result;\n  }\n\n\n  // ------------ the repeating run status structure ------------------\n  // The repeating run status is used to process repeated inputs of an operand with a '='-key \n  // It contains the operator to evaluate and the static second operand to use for each operand that arrives with '='-key.\n  // The lifecycle is: \n  //  - Operator other than '=' arrives: Remember operator in run status, drop second operand value in run status. \n  //    The repeat feature is inactive now.\n  //  - First operator '=' arrives after any other operator: Save operand value in run status. \n  //    The repeat feature is active now.\n  //  - Another operator '=' arrives after an '=' operator: Use the accompanying value as first operand, the \n  //    operator stored in the run status as operator and the value stored in the run status as second operand\n  //    and evaluate that as result. (After an '=' operator the stack is always empty.)\n\n  resetRepeatingRun = () => {\n    this.repeatingRunStatus = {\n      key: undefined,\n      value: undefined\n    };\n  }\n\n  updateRepeatingRunStatus = (key, val) => {\n    if (key !== '=') {\n      // repeating run is broken by new operator\n      // -> erase old second operand and remember new operator for potential next run\n      this.setRepeatingRunValue(undefined);\n      this.setRepeatingRunKey(key);\n    } else if (this.getRepeatingRunValue() === undefined) {\n      // first '=' operator after another operator sets second operand for repeat calculations\n      this.setRepeatingRunValue(val);\n    }\n  }\n\n  repeatingRunIsActive = () => this.getRepeatingRunKey() !== undefined && this.getRepeatingRunValue !== undefined;\n\n  getRepeatingRunValue = () => this.repeatingRunStatus.value;\n\n  getRepeatingRunKey = () => this.repeatingRunStatus.key;\n\n  setRepeatingRunKey = (key) => {\n    this.repeatingRunStatus.key = key;\n  }\n\n  setRepeatingRunValue = (value) => {\n    this.repeatingRunStatus.value = value;\n  }\n\n\n  // ------------ the stack structure --------------------------\n  // The stack is an array of [val, key] entries. \n  // Each entry represents a calculation step with a binary operator \n  // that waits for the second operand to become available:\n  // Due to the operator ranking the value following the operator in the\n  // input stream might belong as first operand to a higher ranking operator following later.\n  // The val is the first operand and the key is the binary operator of the pending calculation.\n  // The num member is the index of the top of the stack. \n  // (We don't drop entries from the array. We just decrease the num pointer to move 'top' of the stack.)\n\n  resetStack = () => {\n    this.stack = [];\n    this.num = 0;\n  }\n\n  isStackEmpty = () => this.num <= 0;\n\n  peekStackValue = () => this.stack[this.num - 1][0];\n\n  peekStackKey = () => this.stack[this.num - 1][1];\n\n  pushStackEntry = (val, key) => {\n    this.stack[this.num] = [val, key];\n    this.num += 1;\n  }\n\n  popStackEntry = () => {\n    this.num -= 1;\n    return this.stack[this.num];\n  }\n\n  // -------------- other helper methods ------------------------\n\n  translateKey = (key) => {\n    if (key === '×') return '*';\n    if (key === '÷') return '/';\n    if (key === '–') return '-';\n    return key;\n  }\n\n  getRankForKey = key => ExpressionEvaluator.RANK[key];\n\n\n}\n","import EvaluatorHelper from './EvaluatorHelper';\nimport ExpressionEvaluator from './ExpressionEvaluator';\nimport StateManagerHelper from '../../state/StateManagerHelper';\n\n/* \n * This evaluator calculates the current value that the calculator should display\n * and then sends commands to history and input display to render the new value. \n * TODO: These commands look like a depedendency between evaluator and history/input display. \n *       In some cases the evaluator knows that sending AC will reset the history.\n *       Should we remove this dependency somehow?\n */\nexport default class Evaluator {\n\n  static getSupportedOperations = () => Object.keys(Evaluator.buildHardcodedCommandsList(undefined));\n\n  constructor(displayWidth, angle) {\n\n    // A boolean flag signalling an error that will block the calculator until AC clears everything.\n    this.isError = false;\n\n    // The memory of values that is used by M+/M-/MS/MR/MC operations.\n    this.memory = {};\n\n    // The stack of nested expressions.\n    // The top level expression has level 0, each open bracket pair adds another level. \n    this.resetExpressionsStack();\n\n    // The current result that is to be displayed.\n    // We use strings for this since we need to represent things like '-0' or '12.' while building number values.\n    this.setCurrentEvaluationResult('0');\n\n    // A buffer that contains all key inputs until '=' is hit.\n    // The buffer is reset at the first key after the '=' or at a 'AC' key.\n    // Useful for backspace implementation and getting the previous key in some cases.\n    // Entry structure is: {key, isEndOfTerm, shouldResetHistoryIfDigitOnNextKey, }\n    this.resetKeysBuffer();\n\n    // The (hard coded) list of supported actions triggered by key inputs.\n    // Each triggered function receives an object { key, operand, dispVal } and returns the new evaluated value.\n    this.operations = Evaluator.buildHardcodedCommandsList(this);\n\n    this.setConfiguration(displayWidth, angle);\n  }\n\n  // ------------------ public API -----------------------------------------------------------\n  /**\n   * Set our configuration.\n   */\n  setConfiguration = (displayWidth, angle, silentOnErrors = true) => {\n    this.angle = angle || EvaluatorHelper.ANGLE_DEGREE;\n    this.bigger = EvaluatorHelper.isBigger(displayWidth);\n    this.silentOnErrors = silentOnErrors;\n  }\n\n  /**\n   * Get our full state for the task state backup/restore mechanism.\n   */\n  getFullState = () => {\n    const state = {};\n    state.expressions = StateManagerHelper.deepCopy(this.expressions.map(expression => expression.getFullState()));\n    state.expressionNestingDepth = this.expressionNestingDepth;\n    state.isError = this.isError;\n    state.memory = StateManagerHelper.deepCopy(this.memory);\n    state.resultBuffer = this.resultBuffer;\n    state.keysBuffer = StateManagerHelper.deepCopy(this.keysBuffer);\n    state.angle = this.angle;\n    state.bigger = this.bigger;\n    return state;\n  }\n\n  /**\n   * Set our internal full state (obtained by getFullState()) to be used by the task state backup/restore mechanism.\n   */\n  restoreState = (state) => {\n\n    this.expressions = state.expressions.map((s) => {\n      const calc = new ExpressionEvaluator();\n      calc.restoreState(s);\n      return calc;\n    });\n    this.expressionNestingDepth = state.expressionNestingDepth;\n\n    this.isError = state.isError;\n    this.memory = state.memory;\n    this.resultBuffer = state.resultBuffer;\n    this.keysBuffer = state.keysBuffer;\n    this.angle = state.angle;\n    this.bigger = state.bigger;\n  }\n\n  /**\n   * Get a number value from our memory. The value is rounded to an integer. \n   */\n  getMem = (memIdx) => {\n    memIdx = memIdx || 0;\n    if (this.memory[memIdx]) {\n      return Math.round(Number(this.memory[memIdx]))\n    }\n    return 0;\n  }\n\n  /**\n   * Parse the given string as number, put it into the result buffer \n   * and return the required render commands.\n   * (naive implementation - same in library)\n   */\n  paste = (text) => {\n    this.initRenderCommands();\n\n    const newValue = Number.parseFloat(text).toString();\n    this.setCurrentEvaluationResult(newValue)\n    this.sendToRender(newValue);\n\n    return this.getRenderCommands();\n  }\n\n  /**\n   * Process the given key and operand and return the required render commands.\n   */\n  evalKey = (key, operand) => {\n    this.initRenderCommands();\n    this.evalKeyInternal(key, operand);\n    return this.getRenderCommands();\n  }\n\n  // ----------------- private stuff ---------------------------------------------- \n\n  // hardcoded commands list -------------------------------------------------\n\n  /*\n   * Create the hardcoded list of calculation commands. \n   * \n   * The methods creates two variants of the same list:\n   *  - Called with valid this pointer it returns the full list for use in the class instance doing actual calculations.\n   *  - Called without this pointer it returns a dummy list that contains the supported keys only with now calculation actions assigned. \n   */\n  static buildHardcodedCommandsList(withThis) {\n    return {\n      // trignonometry\n      sin: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsin),\n      csc: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcsc),\n      \"sin-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsin1),\n      cos: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcos),\n      sec: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsec),\n      \"cos-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcos1),\n      tan: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltan),\n      cot: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcot),\n      \"tan-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltan1),\n      sinh: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsinh),\n      \"sinh-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalsinh1),\n      cosh: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcosh),\n      \"cosh-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalcosh1),\n      tanh: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltanh),\n      \"tanh-1\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaltanh1),\n      π: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalPI),\n      // special arithmetics\n      \"1/x\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval1perx),\n      x2: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalx2),\n      x3: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalx3),\n      yx: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"2x\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval2x),\n      ex: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalex),\n      operandyx: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandyx),\n      operandex: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandex),\n      \"2√\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval2root),\n      \"3√\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.eval3root),\n      \"x√y\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"operandx√y\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandxrooty),\n      \"x!\": withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalfactorial),\n      ln: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalln),\n      log: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      log2: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evallog2),\n      log10: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evallog10),\n      operandlog: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evaloperandlog),\n      Rand: withThis === undefined ? null : Evaluator.buildUnaryOperatorCommand(withThis, withThis.evalRandom),\n      // basic arithmetics\n      \"(\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalLeftBracket),\n      \")\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalRightBracket),\n      \"×\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"÷\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"+\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"–\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalViaExpressionEvaluator),\n      \"+/–\": withThis === undefined ? null : withThis.evalPlusMinus,\n      \"=\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalEquals),\n      // number input\n      0: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      1: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      2: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      3: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      4: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      5: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      6: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      7: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      8: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      9: withThis === undefined ? null : withThis.evalOperation(withThis.evalDigitOrDecimalPoint),\n      \".\": withThis === undefined ? null : withThis.evalDecimalPoint,\n      // memory\n      mc: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMClear),\n      ms: withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMSave),\n      \"m+\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMAdd),\n      \"m-\": withThis === undefined ? null : Evaluator.buildBinaryOperatorCommand(withThis, withThis.evalMMinus),\n      mr: withThis === undefined ? null : withThis.evalOperation(withThis.evalMRead),\n      // basic input\n      AC: withThis === undefined ? null : withThis.evalOperation(withThis.evalAC),\n      C: withThis === undefined ? null : withThis.evalOperation(withThis.evalC),\n      back: withThis === undefined ? null : withThis.evalOperation(withThis.evalBackspace),\n    }\n  }\n\n  static buildUnaryOperatorCommand(withThis, calcFunction) {\n    return withThis.evalEndOfTerm(withThis.evalShouldResetHistoryIfDigitOnNextKey(withThis.evalOperation(calcFunction)));\n  }\n\n  // TODO: improve the name of this method once we fully understand the things going on here.\n  static buildBinaryOperatorCommand(withThis, calcFunction) {\n    return withThis.evalEndOfTerm(withThis.evalOperation(calcFunction));\n  }\n\n\n  // render commands management ------------------------------------\n  /**\n   * (Re-)initialize the renderCommands member.\n   */\n  initRenderCommands = () => {\n    this.renderCommands = {\n      render: [],\n      history: []\n    }\n  }\n\n  /**\n   * Get the current render commands structure\n   */\n  getRenderCommands = () => this.renderCommands;\n\n  /**\n   * Add an entry with a value to display to the render commands list in the renderCommands member. \n   */\n  sendToRender = (value) => {\n    this.renderCommands.render.push(value);\n  }\n\n  /**\n   * Add an entry with with a key, an operand and a value to the render-history commands list in the renderCommands member. \n   * \n   * The operand parameter is the operand used in immediate operations(like x3 => operand is 3).\n   * The value is the result to be displayed currently.\n   * The method pushes an AC key instead if there is an error registered currently in the isError member. \n   */\n  sendToRenderHistory = (key, operand, value) => {\n    // there was an error in evaluation\n    if (this.isError) {\n      this.renderCommands.history.push({\n        key: \"AC\"\n      });\n    } else {\n      this.renderCommands.history.push({\n        key,\n        operand,\n        value\n      });\n    }\n  }\n\n  // nested expressions stack --------------------------------------\n  // The stack is an array of entries. Each entry contains an ExpressionEvaluator instance.\n  // Each entry represents a nested level. \n  // The top level expression has level 0, each open bracket pair adds another level. \n\n  resetExpressionsStack = () => {\n    this.expressionNestingDepth = 0;\n    this.expressions = [];\n    this.expressions[0] = new ExpressionEvaluator();\n  }\n\n  pushNestedExpression = () => {\n    this.expressionNestingDepth += 1;\n    this.expressions[this.expressionNestingDepth] = new ExpressionEvaluator();\n  }\n\n  popNestedExpression = () => {\n    const result = this.expressions[this.expressionNestingDepth];\n    this.expressionNestingDepth -= 1;\n    return result;\n  }\n\n  peekNestedExpression = () => this.expressions[this.expressionNestingDepth];\n\n  /**\n   * Is there any nested expression or are we at the top level of the expressions stack?\n   */\n  hasNestedExpression = () => this.expressionNestingDepth > 0;\n\n\n  // result buffer ------------------------------------\n\n  /**\n   * Set a number value to the result buffer. \n   * \n   * If the given value is a pseudo number (NaN, Inf, Error) \n   * the method implicitly sets '0' instead and registers an error in the isError member.\n   */\n  setCurrentEvaluationResult = (value) => {\n    if (value.match(/NaN|Inf|Error/)) {\n      this.resultBuffer = '0';\n      this.isError = true;\n    } else {\n      this.resultBuffer = value;\n    }\n  }\n\n  getCurrentEvaluationResult = () => this.resultBuffer;\n\n  // keysBuffer --------------------------\n\n  resetKeysBuffer = () => {\n    this.keysBuffer = [];\n  }\n\n  /**\n   * Push the given key to the keysBuffer member.\n   * \n   * If the key is AC it will replace the whole key buffer content.\n   * If \n   *  - the last key in the buffer was '=' (i.e. the last formula was completely evaluated and dropped) and\n   *  - the new key is not '=' (i.e. we are not in repeating '=' mode but starting a new formula instead)\n   * the new key replaces the whole buffer content.\n   */\n  pushKeyToKeysBuffer = (key) => {\n\n    // add the key to buffer\n    this.keysBuffer.push({\n      key\n    });\n\n    const { key: previousKey } = this.getPreviousKey();\n    // reset keys buffer if previous key was 'equals' or current key is 'AC'\n    if ((previousKey === '=' && key !== '=') || this.isKeyAC(key)) {\n      this.keysBuffer = [{\n        key\n      }];\n    }\n  }\n\n  popKeyFromKeysBuffer = () => this.keysBuffer.pop();\n\n  getKeysBufferLength = () => this.keysBuffer.length;\n\n  /**\n   * Returns the second last entry in the keysBuffer (or {} if there is no second last entry).\n   */\n  getPreviousKey = () => this.keysBuffer[this.keysBuffer.length - 2] || {};\n\n  /**\n   * Returns last entry in the keysBuffer (or {} if there is no entry).\n   */\n  getCurrentKey = () => this.keysBuffer[this.keysBuffer.length - 1] || {};\n\n\n  // evaluation of keys ------------------------------\n\n  /**\n   * Process the given key and operand. \n   * \n   * The method implicitly puts required render commands in the renderCommands member.\n   * \n   * If we currently have an error registered in the isError we don't process any\n   * keys except AC and C. \n   * We clear the isError flag before starting the actual processing.\n   * \n   * Steps to process the key/operand are:\n   * - push the key to the keysBuffer\n   * - select the operation for the key from the operations array \n   * - call the selected operation with the given key, the given operand and the current evaluation result value.\n   * \n   */\n  evalKeyInternal = (key, operand) => {\n\n    if (this.isError && !this.isKeyAC(key) && !this.isKeyC(key)) {\n      return;\n    }\n\n    this.isError = false;\n\n    this.pushKeyToKeysBuffer(key);\n\n    this.operations[key]({\n      key,\n      operand,\n      dispVal: this.getCurrentEvaluationResult()\n    });\n\n  }\n\n\n  // ---- higher order functions wrapping basic evaluator functions to add general behaviour ------------\n  /**\n   * Puts a wrapper around the given function which does the following:\n   * - Enclose all actions in a try-catch that will return undefined if anything goes wrong.\n   * - Put the function call result in the result buffer.\n   * - Put the function call result to the render command list in the renderCommands member.\n   * - Put the key and operand given as parameters to the history-render command list in the renderCommands member.\n   * - Return the function call result as string.\n   * \n   * The wrapping function expects the same parameters as the wrapped function (dispVal, key and operand)\n   * and transfers these down to the wrapped function.\n   * \n   * The wrapped function should return the new current value of the calculator.\n   * If sending events to render/history is to be avoided the wrapped function should throw an exception.\n   */\n  evalOperation = (functionForEval) => {\n    const result = ({ dispVal, key, operand }) => {\n      try {\n        // it changes the  type of the value => maybe some function up the stream needs it originally\n        const originalResult = functionForEval({\n          key,\n          operand,\n          dispVal\n        });\n        const resultAsString = originalResult === undefined ? undefined : originalResult.toString();\n\n        this.setCurrentEvaluationResult(resultAsString);\n        this.sendToRender(resultAsString);\n        this.sendToRenderHistory(key, operand, this.getCurrentEvaluationResult());\n\n        return resultAsString;\n\n      } catch (ex) {\n        if (!this.silentOnErrors) {\n          console.warn(`---> Ignored key ${key} with operand ${operand} at current value ${dispVal}: ${ex.toString()}`)\n        }\n        return undefined;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Puts a wrapper around the given function that does the following:\n   *  - Call the wrapped function.\n   *  - Set the flag 'shouldResetHistoryIfDigitOnNextKey' in the current key in the keysBuffer. \n   *  \n   * If that flag is set and the next key is a digit we should reset the entire history.\n   * Example: 90, sin, 23 => 23 resets the history. \n   * (TODO: i think this behaviour should be in history renderer.)\n   */\n  evalShouldResetHistoryIfDigitOnNextKey = functionForEval => (\n    (dispValKeyOperand) => {\n      const value = functionForEval(dispValKeyOperand);\n      this.getCurrentKey().shouldResetHistoryIfDigitOnNextKey = true;\n      return value;\n    }\n  )\n\n  /**\n   * Puts a wrapper around the given function that does the following:\n   *  - Call the wrapped function\n   *  - Set the flag 'isEndOfTerm' in the current key in the keysBuffer. \n   * \n   * If the flag is set on a key the next digit input will start a new value. \n   * The flag is set by all operators except those that help to build up a number \n   * value: digits, +/-, backspace.\n  */\n  evalEndOfTerm = functionForEval => (\n    (dispValKeyOperand) => {\n      const value = functionForEval(dispValKeyOperand);\n      this.getCurrentKey().isEndOfTerm = true;\n      return value;\n    }\n  )\n\n\n  // --- basic evaluator functions implementing the specific keys -------------------------------------------\n\n  // trigonometry\n\n  // sinus\n  evalsin = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return 0;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0.5, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1.5, this.deg())) return -1;\n    return Math.sin(this.getRadiantValue(dispVal));\n  }\n\n  // cosecans\n  evalcsc = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return NaN;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0.5, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1.5, this.deg())) return -1;\n    return 1/Math.sin(this.getRadiantValue(dispVal));\n  }\n\n  // arcus sinus\n  evalsin1 = ({ dispVal }) => this.getDisplayValueFromRadiant(Math.asin(dispVal));\n\n  // cosinus\n  evalcos = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return 0;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1, this.deg())) return -1;\n    return Math.cos(this.getRadiantValue(dispVal));\n  }\n\n  // secans\n  evalsec = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return NaN;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 0, this.deg())) return 1;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 2, 1, this.deg())) return -1;\n    return 1/Math.cos(this.getRadiantValue(dispVal));\n  }\n\n  // arcus cosinus\n  evalcos1 = ({ dispVal }) => this.getDisplayValueFromRadiant(Math.acos(dispVal));\n\n  // tangens\n  evaltan = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return 0;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return NaN;\n    return Math.tan(this.getRadiantValue(dispVal));\n  }\n\n  // cotangens\n  evalcot = ({ dispVal }) => {\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0, this.deg())) return NaN;\n    if (EvaluatorHelper.isMultipleOfPi(dispVal, 1, 0.5, this.deg())) return 0;\n    return 1/Math.tan(this.getRadiantValue(dispVal));\n  }\n\n  // arcus tangens\n  evaltan1 = ({ dispVal }) => this.getDisplayValueFromRadiant(Math.atan(dispVal));\n\n  // sinus hyperbolicus\n  evalsinh = ({ dispVal }) => (((Math.E ** dispVal) - (Math.E ** -dispVal)) / 2);\n\n  // area sinus hyperbolicus\n  evalsinh1 = ({ dispVal }) => Math.log(+dispVal + Math.sqrt(1 + (dispVal ** 2)));\n\n  // cosinus hyperbolicus\n  evalcosh = ({ dispVal }) => (((Math.E ** dispVal) + (Math.E ** -dispVal)) / 2);\n\n  // area cosinus hyperbolicus\n  evalcosh1 = ({ dispVal }) => 2 * Math.log(Math.sqrt((+dispVal + 1) / 2) + Math.sqrt((+dispVal - 1) / 2));\n\n  // tangens hyperbolicus\n  evaltanh = ({ dispVal }) => {\n    const e1 = (Math.E ** dispVal);\n    const e2 = (Math.E ** -dispVal);\n    return (e1 - e2) / (e1 + e2);\n  }\n\n  // area tangens hyperbolicus\n  evaltanh1 = ({ dispVal }) => (Math.log(+dispVal + 1) - Math.log(1 - dispVal)) / 2;\n\n  // pi\n  evalPI = ({ dispVal }) => Math.PI;\n\n  /**\n   * Translate the given display value (given as specified by the this.deg() flag) to a radiant value.\n  */\n  getRadiantValue(displayValue) {\n    return displayValue * (this.deg() ? Math.PI/180 : 1);\n  }\n\n  /**\n   * Translate the given radiant value to a display value as specified by the this.deg() flag.\n   */\n  getDisplayValueFromRadiant(radiantValue) {\n    return radiantValue * (this.deg() ? 180/Math.PI : 1);\n  }\n\n  /**\n   * Returns true if we expect display values for cos/sin/tan to be given as angle values in degrees (like 45, 90, 360), \n   * returns false if we expect them to be radiant values (like PI, 0.5*PI, 2*PI).\n   */\n  deg = () => this.angle === EvaluatorHelper.ANGLE_DEGREE;\n\n\n  // special arithmetics\n\n  // 1/x\n  eval1perx = ({ dispVal }) => (1 / dispVal);\n\n  // x^2\n  evalx2 = ({ dispVal }) => dispVal ** 2;\n\n  // x^3\n  evalx3 = ({ dispVal }) => dispVal ** 3;\n\n  // 2^x\n  eval2x = ({ dispVal }) => (2 ** (dispVal));\n\n  // e^x \n  evalex = ({ dispVal }) => Math.exp(dispVal);\n\n  // x^operand\n  evaloperandyx = ({ dispVal, operand }) => dispVal ** operand;\n\n  // operand^x \n  evaloperandex = ({ dispVal, operand }) => operand ** dispVal;\n\n  // 2√x\n  eval2root = ({ dispVal }) => Math.sqrt(dispVal);\n\n  // 3√x\n  eval3root = ({ dispVal }) => EvaluatorHelper.nthroot(dispVal, 3);\n\n  // operand√x\n  evaloperandxrooty = ({ dispVal, operand }) => EvaluatorHelper.nthroot(dispVal, operand);\n\n  // x!\n  evalfactorial = ({ dispVal }) => EvaluatorHelper.fak(dispVal);\n\n  // ln(x)\n  evalln = ({ dispVal }) => Math.log(dispVal);\n\n  // log2(x)\n  evallog2 = ({ dispVal }) => Math.log(dispVal) / Math.log(2);\n\n  // log10(x)\n  evallog10 = ({ dispVal }) => Math.log(dispVal) / Math.log(10);\n\n  // logoperand(x)\n  evaloperandlog = ({ dispVal, operand }) => Math.log(dispVal) / Math.log(operand);\n\n  // rand()\n  evalRandom = ({ dispVal }) => Math.random();\n\n  // basic arithmetics\n\n  /**\n   * Start a new nested expression level for the bracket content.\n   */\n  evalLeftBracket = ({ dispVal }) => {\n    this.pushNestedExpression();\n    return dispVal;\n  }\n\n  /**\n   * Evaluate the expression in the brackets. Ignore the call if there is no matching opening bracket.\n   */\n  evalRightBracket = ({ dispVal }) => (this.hasNestedExpression() ? this.popNestedExpression().calc(dispVal, '=') : dispVal);\n\n  evalPlusMinus = ({ dispVal, key }) => {\n    const { isEndOfTerm } = this.getPreviousKey();\n\n    const displayValue = isEndOfTerm ? '0' : dispVal;\n\n    // change the sign (Note: we may return '-0' to prepend a minus sign to the digits that may follow.)\n    const resultValue = !(displayValue.replace(/e[+|-]/, '')).match('-')\n      ? `-${displayValue}`\n      : displayValue.replace(/^-/, '');\n\n    // Note: Since we return a string we don't want to use the generic evalOperation method to do this post processing:\n    //       The originalResult there could be a String without doing any harm. But the code in evalOperation does not look \n    //      like a String would be returned. \n    this.setCurrentEvaluationResult(resultValue);\n    this.sendToRender(resultValue);\n    this.sendToRenderHistory(key, undefined, this.getCurrentEvaluationResult());\n\n    return resultValue;\n  }\n\n  evalEquals = ({ dispVal }) => {\n    // Heal inconsistent input: evaluate all nested brackets that are left open when '=' arrives. \n    let resultValue = dispVal;\n    while (this.hasNestedExpression()) {\n      resultValue = this.popNestedExpression().calc(resultValue, '=')\n      // NOTE: This implicitly sets the error flag:\n      this.setCurrentEvaluationResult(resultValue);\n    }\n    // Evaluate the top level formula:\n    resultValue = this.peekNestedExpression().calc(resultValue, '=')\n    this.setCurrentEvaluationResult(resultValue);\n\n    return resultValue;\n  }\n\n  // number input\n\n  evalDigitOrDecimalPoint = ({ dispVal, key }) => {\n    const { shouldResetHistoryIfDigitOnNextKey, isEndOfTerm } = this.getPreviousKey();\n    // resets the current value if it is end-of-term (e.g a completed pair of brackets, a sin operation) \n    // or if there is nothing in the keysBuffer except this key (e.g. keysBuffer was reset by previous key '=')\n\n    const displayValue = (isEndOfTerm || this.getKeysBufferLength() === 1) ? '0' : dispVal;\n\n    if (this.willOverflow(displayValue, key)) {\n      // remove last key inserted in buffer\n      this.popKeyFromKeysBuffer();\n      throw Error(`cannot add key ${key} to number due to value overflow`)\n    }\n\n    if (this.isAlreadyDecimalPoint(displayValue, key)) {\n      // remove last key inserted in buffer\n      this.popKeyFromKeysBuffer();\n      throw Error(`cannot add key ${key} to number since we have a decimal point already`)\n    }\n\n    // resets the history after an immediate function\n    // e.g user does 90 , sin, 23 => 23 will reset the history\n    if (shouldResetHistoryIfDigitOnNextKey) {\n      this.sendToRenderHistory('AC');\n    }\n\n    // Append the key and drop the 0 in the initial -0 once the first real digit appears, e.g. -09 becomes -9:\n    return (displayValue + key).replace(/^(-)*?0(\\d)$/, '$1$2');\n  }\n\n  evalDecimalPoint = ({ dispVal, key }) => {\n    let value;\n    try {\n      value = this.evalDigitOrDecimalPoint({\n        dispVal,\n        key\n      });\n      this.setCurrentEvaluationResult(value);\n      this.sendToRender(value);\n      this.sendToRenderHistory(key, undefined, this.getCurrentEvaluationResult());\n    } catch (err) {\n      value = dispVal;\n    }\n\n    return value;\n  }\n\n  willOverflow = (dispVal, key) => (Math.abs(+(dispVal + key)) > (this.bigger ? 1e15 : 1e9)\n  || dispVal.replace(/^-/, '').length > 15\n  || (dispVal.replace('-', '').replace(/\\./g, '').length > (this.bigger ? 14 : 8)));\n\n  isAlreadyDecimalPoint = (dispVal, key) => dispVal.match(/\\.|e\\+/) && key === '.';\n\n  // memory\n\n  evalMClear = ({ dispVal, operand }) => {\n    delete this.memory[operand];\n    return dispVal;\n  }\n\n  evalMSave = ({ dispVal, operand }) => {\n    this.memory[operand] = dispVal;\n    return dispVal;\n  }\n\n  evalMAdd = ({ dispVal, operand }) => {\n    this.doMemoryOperation(operand, '+', dispVal);\n    return dispVal;\n  }\n\n  evalMMinus = ({ dispVal, operand }) => {\n    this.doMemoryOperation(operand, '-', dispVal);\n    return dispVal;\n  }\n\n  evalMRead = ({ operand }) => {\n    if (this.memory[operand] === undefined) {\n      throw new Error(`No value in memory for key ${operand}`);\n    }\n    const valueFromMemory = this.getMemoryValue(operand);\n    return `${valueFromMemory}`;\n  }\n\n  /** \n   * Use an ExpressionEvaluator to evaluate the given operation with the \n   * value obtained from the memory as first operand and the given operand parameter\n   * as second operand. \n   * Put the result back into the memory.\n   */\n  doMemoryOperation = (location, operation, operand) => {\n    const calculator = new ExpressionEvaluator();\n    calculator.calc(this.getMemoryValue(location), operation);\n    const res = calculator.calc(operand, '=');\n    this.memory[location] = res;\n  }\n\n  getMemoryValue = location => this.memory[location] || 0;\n\n\n  // basic input  \n\n  evalAC = ({ key }) => {\n    this.resetExpressionsStack();\n    // TODO: Should AC clear memory values too?\n    return \"0\"\n  }\n\n  evalC = ({ key }) => \"0\"\n\n  /**\n   *  Delete the last digit or decimal point or the last +/- operation from the number currently built up.\n   *  Drop the corresponding keys from the keys buffer.\n   */ \n  evalBackspace = ({ dispVal }) => {\n    // remove \"back\" key from keysbuffer\n    this.popKeyFromKeysBuffer();\n\n    const { isEndOfTerm } = this.getCurrentKey();\n    if (isEndOfTerm) {\n      throw Error(\"Cannot delete beyond last number's input.\");\n    }\n\n    let currentValue = dispVal;\n    if (this.getCurrentKey().key === '+/–') {\n      // Last operation on number was a sign toggle.\n      // -> Evaluate the sign toggle operation once more in order to invert the sign.\n      this.evalKeyInternal('+/–');\n      this.popKeyFromKeysBuffer();// removes the inverting +/- from keysBuffer\n      this.popKeyFromKeysBuffer();// removes the orginal +/- from keysBuffer\n      currentValue = this.getCurrentEvaluationResult()\n    } else if (dispVal.match(/-\\d$/)) {\n      // The current value is a negative, single digit value.\n      // -> replace the value by '-0' (i.e. retain the negative sign).\n      this.popKeyFromKeysBuffer();\n      currentValue = \"-0\";\n    } else if (dispVal.match(/^\\d$/)) {\n      // The current value is a positive, single digit value.\n      // -> replace that digit by a plain 0.\n      this.popKeyFromKeysBuffer();\n      currentValue = \"0\";\n    } else if (dispVal.length > 0) {\n      // The current value contains more than one digit.\n      // -> Just drop the last digit (or decimal point).\n      this.popKeyFromKeysBuffer();\n      currentValue = currentValue.substring(0, currentValue.length - 1);\n    } else {\n      throw Error(\"Cannot delete beyond last number's input.\");\n    }\n\n    // If after deletion there is decimal point, delete that also.\n    if (this.getCurrentKey().key === '.') {\n      this.popKeyFromKeysBuffer();\n      currentValue = currentValue.substring(0, currentValue.length - 1);\n    }\n\n    return currentValue;\n  }\n\n\n  /**\n   * Process the given input via the expression at the current nesting level.\n   */\n  evalViaExpressionEvaluator = ({ dispVal, key }) => {\n    const { key: lastKey } = this.getPreviousKey()\n    if (lastKey === '(') {\n      switch (key) {\n        case '+':\n        case '–':\n        case '×':\n        case '÷':\n        case 'yx':\n        case 'x√y':\n          dispVal = 0;\n          break;\n        case 'log':\n          dispVal = 1;\n          break;\n        default:\n          // do not change dispVal\n      }\n    }\n    // Delegate evaluation to expression evaluator for current nested expression:\n    return (this.peekNestedExpression().calc(dispVal, key));\n  }\n\n  // --------------------- further helper methods ----------------------------------------\n\n  isKeyAC = key => key === \"AC\";\n\n  isKeyC = key => key === \"C\";\n\n}\n","import Evaluator from './Evaluator';\n\nexport default class KeyboardHelper {\n\n  // TODO: there might be a problem with bindings - if the calculator does not contain ln for example  - user can still press l to get it\n  // (same problem exists in RAP -  but there only numbers and simple operators are bind - so having a calculator without those is improbable to have)\n  // 1. find a way itembuilder calculates what it supports (it is not so trivial) OR\n  // 2. implement keybindings for buttons\n  // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n  static fromKeyStrokeToCalculatorSupportedOperation = (pressedKey) => {\n    // it can be that some operations are not in the keyboards -  (e.g. mr -> is not supported without a memory index)\n    const keyboardShortcutsWithOperations = '+|+|=|=|,|.|-|–|/|÷|*|×|#|+/–|x|x!|E|EE|e|ex| |2nd|r|x√y|R|2√|^|yx|\\'|yx|\"|yx|m|mr|v|mc|b|m+|n|m-|'\n      + 's|sin|c|cos|t|tan|S|sin-1|C|cos-1|T|tan-1|l|ln|L|log|\\\\|1/x|X|2x|'\n      + 'Enter|=|Backspace|back|0|0|1|1|2|2|3|3|4|4|5|5|6|6|7|7|8|8|9|9|0|0';\n\n    // maybe to added by using maybe a alt, ctrl or shift\n    // p|π|d|Degree|°|Degree\n    // keyMatchHold = ('sin|sinh|cos|cosh|tan|tanh|m-|Rand|Deg|Rand|sin-1|sinh-1|cos-1|cosh-1|tan-1|tanh-1|' +\n    // '1|1/x|2|x2|3|x3|x√y|√|ln|log2|ex|2x').split('|');\n\n\n    let calculatorOperation = KeyboardHelper.isSupportedOperation(pressedKey) ? pressedKey : undefined;\n    if (!calculatorOperation) {\n      calculatorOperation = KeyboardHelper.lookupForOperation(pressedKey, keyboardShortcutsWithOperations);\n    }\n    return calculatorOperation;\n  }\n\n  static fromStatemachineToCalculatorSupportedOperation = (operation) => {\n    const statemachineOperations = 'clear|C|clearall|AC|equals|=|add|+|subtract|–|multiply|×|divide|÷|power|operandyx|'\n      + 'npower|yx|root|operandx√y|nroot|x√y|sin|sin|cos|cos|tan|tan|csc|csc|sec|sec|cot|cot|'\n      + 'e|ex|exp|operandex|ln|ln|log|operandlog|invmult|1/x|invpower|log|leftbr|(|rightbr|)|fact|x!|'\n      + 'mclear|mc|mread|mr|msave|ms|madd|m+|msubtract|m-';\n    const calculatorOperation = KeyboardHelper.lookupForOperation(operation, statemachineOperations);\n    return calculatorOperation;\n  }\n\n  static isSupportedOperation = calculatorOperation => Evaluator.getSupportedOperations().includes(calculatorOperation);\n\n  static isDigitKey = key => '0123456789'.indexOf(key) !== -1;\n\n  // private \n\n  static lookupForOperation(key, operationsString) {\n    let calculatorOperation;\n    const operationsArray = operationsString.split('|');\n    for (let n = 0, m = operationsArray.length; n < m; n += 2) {\n      if (key === operationsArray[n]) {\n        calculatorOperation = operationsArray[n + 1];\n        break;\n      }\n    }\n    return KeyboardHelper.isSupportedOperation(calculatorOperation) ? calculatorOperation : undefined;\n  }\n\n}\n","import * as ValueFormatter from \"./ValueFormatter\";\nimport EvaluatorHelper from \"./EvaluatorHelper\";\n\n/**\n * Render a value given as string with dot as decimal separator (and maybe a trailing decimal dot)\n * to the string representation used for display to the user.\n * \n * The transformation takes into account: \n *  - the format (specifying the characters to use as decimal separator and thousands grouping separator)\n *  - whether to include thousands grouping separators\n *  - the display width \n * \n * The renderer compresses the value (by rounding) if it would take too much space in the display. \n * (In fact we support two display width classes only: small/big. And the compressing is a bit weird, see below...)\n */\nexport default class Renderer {\n\n  static msg = {\n    errorMessage: \"Err\",\n    nroot: \"nroot\"\n  };\n\n  /**\n   * Format a value given as string with dot as decimal separator\n   * according to our format and withThousandSeparator members. \n   * \n   * We implicitly translate 'NaN, 'Inf', 'Error' to the string 'Err'.\n   * We implicitly translate very long numbers to an exponential notation that fits into our display width.\n   * We preserve a trainling dot by translating it into a trailing decimal separator character.\n   */\n  static render = (value, displayWidth, withThousandSeparator, format) => {\n    const bigger = EvaluatorHelper.isBigger(displayWidth);\n\n    if (value.match(/NaN|Inf|Error/)) {\n      return Renderer.msg.errorMessage;\n    }\n\n    const trailingDot = value.match(/\\.$/);\n    const valueWithoutTrailingDot = trailingDot ? value.substring(0, value.length - 1) : value;\n\n    if (valueWithoutTrailingDot.length === 0) {\n      return value;\n    }\n\n    const shortenedResult = Renderer.shortenValue(valueWithoutTrailingDot, bigger);\n    const unformattedResult = Renderer.limitFractionalDigits(shortenedResult, bigger);\n    const formattedResult = ValueFormatter.formatValue(unformattedResult, withThousandSeparator, trailingDot, format);\n\n    return formattedResult;\n  }\n\n  // ----------------- private stuff ------------------------------------------------\n\n  static shortenValue = (value, bigger) => {\n    const valAbs = Math.abs(+value);\n    if (!bigger && valAbs >= 1e+10) {\n      return (+value).toExponential(8).toString();\n    }\n    if (valAbs >= 1e+16) {\n      return (+value).toExponential(13).toString();\n    }\n    return value;\n  }\n\n  /**\n   * Returns a string representation of the given numerical value with a limited number of fractional digits.\n   * \n   * If bigger is true, it allows up to 15 fractional digits.\n   * If bigger is false and there is an exponent, it allows 6 fractional digits.\n   * If bigger is false and there is no exponent, it allows 8 fractional digits.\n   * \n   * The method applies proper rounding to reduce the number of fractional digits.\n   * \n   */\n  static limitFractionalDigits(value, bigger) {\n    const valueComponents = Renderer.splitValue(value);\n\n    if (valueComponents.fractionalPart === undefined) {\n      // the easy case: nothing to change:\n      return value;\n    }\n\n    const targetDigitsCount = Renderer.calculateTargetDigitCount(bigger, valueComponents.exponentPart !== undefined);\n    const { digits: reducedFractionalDigits, overflow: roundingOverflow } = Renderer.roundFractionalDigits(valueComponents.fractionalPart, targetDigitsCount);\n\n    const integralPart = +valueComponents.integralPart + (roundingOverflow ? 1 : 0); // transfer overflow from digits rounding\n    const fractionalPart = reducedFractionalDigits !== '' ? `.${reducedFractionalDigits}` : ''; // drop decimal point if no fractional digits are left\n    const exponentPart = valueComponents.exponentPart === undefined ? '' : `e${valueComponents.exponentPart}`; // rebuild the exponent part\n\n    return `${valueComponents.sign}${integralPart}${fractionalPart}${exponentPart}`;\n\n  }\n\n  static splitValue(value) {\n    if (value === undefined || value === null) return {};\n\n    const [beforeDecimalPart, postDecimalPart] = value.split('.');\n    const sign = (beforeDecimalPart[0] === '-') ? '-' : '';\n    const integralPart = beforeDecimalPart.replace(/^-/, '');\n    const [fractionalPart, exponentPart] = postDecimalPart ? postDecimalPart.split('e') : [postDecimalPart, undefined];\n    return {\n      sign,\n      integralPart,\n      fractionalPart,\n      exponentPart\n    };\n  }\n\n  static calculateTargetDigitCount(bigger, withExponent) {\n    if (bigger) return 15;\n    if (withExponent) return 6;\n    return 8;\n  }\n\n\n  /**\n   * Round the given fractional digits to the given number of digits remaining.\n   */\n  static roundFractionalDigits(digits, targetDigitsCount) {\n    if (targetDigitsCount > digits.length) {\n      // digits fit in -> nothing to change\n      return {\n        digits,\n        overflow: false\n      }\n    }\n    const numberForRounding = +(`1.${digits}`);\n    // add one digit for the integral 1:\n    const roundedValue = numberForRounding.toPrecision(targetDigitsCount + 1).toString();\n    const overflowOccured = roundedValue >= 2;\n    return {\n      digits: overflowOccured ? '' : roundedValue.substr(2).padEnd(targetDigitsCount, \"0\"), // skip integral part and pad trailing 0s.\n      overflow: overflowOccured\n    }\n  }\n\n\n}\n","import StateManagerHelper from '../../state/StateManagerHelper';\nimport Renderer from \"./Renderer\";\n\nexport default class HistoryRenderer {\n\n  constructor(displayWidth, withThousandSeparator, format) {\n    this.displayWidth = displayWidth;\n    this.withThousandSeparator = withThousandSeparator;\n    this.format = format;\n\n    this.historyEntries = [];\n  }\n\n  calcSettings = (displayWidth, withThousandSeparator, format) => {\n    this.displayWidth = displayWidth;\n    this.withThousandSeparator = withThousandSeparator;\n    this.format = format;\n  }\n\n  getFullState = () => {\n    const state = {}\n    state.historyEntries = StateManagerHelper.deepCopy(this.historyEntries);\n    state.displayWidth = this.displayWidth;\n    state.withThousandSeparator = this.withThousandSeparator;\n    state.format = StateManagerHelper.deepCopy(this.format);\n    return state;\n  }\n\n  restoreState = (state) => {\n    this.historyEntries = state.historyEntries;\n    this.displayWidth = state.displayWidth;\n    this.withThousandSeparator = state.withThousandSeparator;\n    this.format = state.format;\n  }\n\n  /** \n   * @param key - current key pressed\n   * @param value - the current value calculator is displaying. It is the value used by history when equals is pressed.\n   * @param operand - fixed operand used for functions like exponential, log, square.\n  */\n  render = (key, value, operand) => {\n    this.pushToHistory(key, value, operand);\n    return this.recalculateHistoryString();\n  }\n\n  // private \n\n  pushToHistory = (key, value, operand) => {\n    if (this.isKeyAC(key)) {\n      this.pushToHistoryAC(key, value);\n    } else if (this.isKeyC(key)) {\n      this.pushToHistoryC(key, value);\n    } else if (this.isKeyOneOperatorAfterAnotherOperator(key)) {\n      this.pushToHistoryOneOperatorAfterAnotherOperator(key, value);\n    } else if (this.isKeyBackspace(key, value)) {\n      this.pushToHistoryBackspace();\n    } else if (this.isKeyEquals(key)) {\n      this.pushKeyToHistoryEquals(key, value);\n    } else if (key.match(/2nd|Degree|Radian|m/)) {\n      // ignore it -> do not add anything to history\n    } else if (this.isKeyUsingOperand(operand)) {\n      this.pushToHistoryKey(`operand${operand}`, value);\n      this.pushToHistoryKey(key, value);\n    } else {\n      this.pushToHistoryKey(key, value);\n    }\n  }\n\n  // Do not log operators multiple times in succession / last replaces previous ones\n  pushToHistoryOneOperatorAfterAnotherOperator = (key, value) => {\n    this.historyEntries[this.historyEntries.length - 1] = key;\n  }\n\n  pushToHistoryBackspace = (key, value) => {\n    const len = this.historyEntries.length;\n    const prevKey = (len > 0) ? this.historyEntries[len - 1] : undefined;\n\n    if (prevKey !== undefined && prevKey.match(/^(\\.|\\d|\\(|\\))/)) {\n      this.historyEntries.pop();\n      if (this.historyEntries[this.historyEntries.length - 1] === '.') {\n        this.historyEntries.pop();\n      }\n    }\n  }\n\n  pushKeyToHistoryEquals = (key, value) => {\n    this.historyEntries = [`=${value}`];\n  }\n\n\n  pushToHistoryAC = (key, value) => {\n    // AC drops everything\n    this.historyEntries = [];\n  }\n\n  pushToHistoryC = (key, value) => {\n    // C drops the last number, i.e. all digits, dots and commas in a row\n    // TODO: What about a leading minus sign? We should drop that too but \n    // we cannot decide whether this is a minus sign or a minus operator.\n    let lastPopped = this.historyEntries.pop();\n    while (lastPopped !== undefined && lastPopped.match(/\\d/)) {\n      lastPopped = this.historyEntries.pop();\n    }\n    // put back the first key we should not have popped:\n    if (lastPopped !== undefined) {\n      this.historyEntries.push(lastPopped);\n    }\n  }\n\n  pushToHistoryKey = (key, value) => {\n    this.handleCaseOfEqualsFollowedByAnOperationOrByAnOperand(key);\n    this.historyEntries.push(key);\n  }\n\n  handleCaseOfEqualsFollowedByAnOperationOrByAnOperand = (key) => {\n    const previousKey = this.historyEntries[this.historyEntries.length - 1];\n    // previous key was a number starting with = (it was inserted when = was pressed)\n    if (previousKey !== undefined && previousKey.match(/^=-?\\d/)) {\n      if (Number.isNaN(Number(key))) {\n        // is it a function ?\n        this.historyEntries[this.historyEntries.length - 1] = previousKey.substring(1);\n      } else {\n        // is it an operand ?\n        this.historyEntries = [];\n      }\n    }\n  }\n\n  isKeyC = key => key === 'C';\n\n  isKeyAC = key => key === 'AC';\n\n  isKeyOneOperatorAfterAnotherOperator = (key) => {\n    const len = this.historyEntries.length;\n    const prevKey = (len > 0) ? this.historyEntries[len - 1] : undefined;\n    const isOperatorOneAfterTheOther = prevKey !== undefined && prevKey.match(/^(\\+|–|÷|×|yx|log|x√y|E)+$/) && key.match(/^(\\+|–|÷|×|yx|log|x√y|E)+$/);\n    return isOperatorOneAfterTheOther;\n  }\n\n  isKeyBackspace = key => key === \"back\";\n\n  isKeyEquals = key => key === \"=\";\n\n  isKeyUsingOperand = operand => operand !== undefined;\n\n  recalculateHistoryString = () => {\n    let historyString = \"\";\n    let brackets = 0;\n    let betweenOperatorsStack = [];\n\n    this.historyEntries.forEach((key) => {\n      key = key.replace('÷', '/').replace('-', '–');\n      if (key === '+' || key === '×' || key === '/' || key === '–') {\n        historyString += this.recalculateHistoryForStackBetweenOperators(betweenOperatorsStack);\n        historyString += key;\n        betweenOperatorsStack = [];\n      } else if (key === '(') {\n        brackets += 1;\n        betweenOperatorsStack.push(key);\n      } else if (key === ')') {\n        if (brackets > 0) {\n          brackets -= 1;\n          betweenOperatorsStack.push(key);\n        }\n      } else if (key.startsWith(\"=\")) {\n        // handleCaseOfEqualsFollowedByAnOperationOrByAnOperand + pushKeyToHistoryEquals\n        betweenOperatorsStack.push(key.substring(1));\n      } else {\n        betweenOperatorsStack.push(key);\n      }\n    });\n\n    historyString += this.recalculateHistoryForStackBetweenOperators(betweenOperatorsStack);\n\n    historyString = this.formatAllNumbers(historyString);\n    return historyString;\n  }\n\n  recalculateHistoryForStackBetweenOperators = (stack) => {\n    let ret = \"\";\n    for (let i = 0; i < stack.length; i += 1) {\n      const key = stack[i];\n      if (key === \"ex\") {\n        ret = `e^(${ret})`;\n      } else if (key === \"ln\") {\n        ret = `ln(${ret})`;\n      } else if (key === \"x3\") {\n        ret = `${ret}^3`;\n      } else if (key === \"x2\") {\n        ret = `${ret}^2`;\n      } else if (key === \"yx\") {\n        ret = `${ret}^`;\n      } else if (key === \"x√y\") {\n        ret = `${ret} ${Renderer.msg.nroot} `;\n      } else if (key === \"3√\") {\n        ret = `${ret} ${Renderer.msg.nroot} 3`;\n      } else if (key === \"2√\") {\n        ret = `${ret} ${Renderer.msg.nroot} 2`;\n      } else if (key === \"x!\") {\n        ret = `${ret}!`;\n      } else if (key === \"+/–\") {\n        // switch minus\n        ret = ret.startsWith(\"-\") ? ret.substring(1) : `-${ret}`;\n      } else if (key === \"1/x\") {\n        ret = `1/${ret}`;\n      } else if (key === \"sin\" || key === \"csc\" || key === \"cos\" || key === \"sec\" || key === \"tan\" || key === \"cot\" || key === \"sin–1\" || key === \"cos–1\" || key === \"tan–1\") {\n        ret = `${key}(${ret})`;\n      } else if (key === \"operandlog\") {\n        ret = `${ret}log${this.getOperandValue(stack, i)}`;\n      } else if (key === \"operandyx\") {\n        ret = `${ret}^${this.getOperandValue(stack, i)}`;\n      } else if (key === \"operandx√y\") {\n        ret = `${ret} ${Renderer.msg.nroot} ${this.getOperandValue(stack, i)}`;\n      } else if (key === \"operandex\") {\n        ret = `${this.getOperandValue(stack, i)}^(${ret})`;\n      } else if (key.startsWith(\"operand\")) {\n        // it is the base of a log or the power of an exponent\n        // ignore it as it is needed in operator evaluation\n      } else {\n        ret += key;\n      }\n    }\n    return ret;\n  }\n\n  getOperandValue = (stack, index) => {\n    let operand = index > 0 ? stack[index - 1] : \"\";\n    operand = operand.startsWith(\"operand\") ? operand : \"\";\n    const ret = operand.substring(\"operand\".length);\n    return ret;\n  }\n\n  /**\n   * The regular expression we use to detect numbers in the history string.\n   */\n  numberDetectorRegEx = new RegExp(`([0-9]+\\\\.?[0-9]*)`, \"g\");\n\n  /**\n   * formats all numbers in the history string\n   */\n   formatAllNumbers = historyString => historyString.replace(this.numberDetectorRegEx, (str, value) => Renderer.render(value, this.displayWidth, this.withThousandSeparator, this.format));\n\n\n}\n","\nimport CbaCalculatorHistory from \"./CbaCalculatorHistory\";\nimport CbaCalculatorInput from \"./CbaCalculatorInput\";\nimport RenderingHelper from \"../RenderingHelper\";\nimport StateManagerHelper from '../../state/StateManagerHelper';\nimport KeyboardHelper from \"./KeyboardHelper\";\nimport Renderer from \"./Renderer\";\nimport HistoryRenderer from \"./HistoryRenderer\";\nimport Evaluator from \"./Evaluator\";\nimport * as ValueFormatter from \"./ValueFormatter\";\nimport EvaluatorHelper from \"./EvaluatorHelper\";\n\n/**\n * Using the algorithm from https://github.com/DIPFtba/calculator\n */\nexport default class CbaCalculatorEngine {\n\n  constructor(taskPath, runtime) {\n    this.taskPath = taskPath;\n    this.runtime = runtime;\n\n    this.settings = {\n      angle: EvaluatorHelper.ANGLE_DEGREE,\n      // used only to calculate bigger flag which is used by algorithm toPrecision the result\n      displayWidth: 10,\n      // displays each digit in history or only the whole number when an operator is hit\n      includeOperandInHistory: true,\n      withThousandSeparator: true,\n      // not used - library does its scaling\n      scale: 0,\n      format: ValueFormatter.FORMATS.EN,\n      // don't log error messages in production\n      silentOnErrors: true,\n    };\n\n    this.evaluator = new Evaluator(this.settings.displayWidth, this.settings.angle);\n    this.historyRenderer = new HistoryRenderer(this.settings.displayWidth, this.settings.withThousandSeparator, this.settings.format);\n\n\n    this.displayingValue = '0'; // maybe evalKey 0 should be called\n    this.historyDisplayingValue = undefined;\n  }\n\n  getFullState = () => {\n    const state = {}\n    state.evaluator = StateManagerHelper.deepCopy(this.evaluator.getFullState());\n    state.historyRenderer = StateManagerHelper.deepCopy(this.historyRenderer.getFullState());\n    state.settings = StateManagerHelper.deepCopy(this.settings);\n\n    state.displayingValue = this.displayingValue;\n    state.historyDisplayingValue = this.historyDisplayingValue;\n    return state;\n  }\n\n  restoreState = (state) => {\n    this.evaluator.restoreState(state.evaluator);\n    this.historyRenderer.restoreState(state.historyRenderer);\n    this.settings = state.settings;\n\n    this.displayingValue = state.displayingValue;\n    this.historyDisplayingValue = state.historyDisplayingValue;\n  }\n\n  calcGetMem = memIdx => this.evaluator.getMem(memIdx);\n\n  calcOp = (operation, baseOrExponentOrMemIdx) => {\n    const key = KeyboardHelper.fromStatemachineToCalculatorSupportedOperation(operation);\n    if (key) {\n      this.evalKey(key, baseOrExponentOrMemIdx);\n    }\n  }\n\n  calcOpnd = (operation, digits) => {\n    switch (operation) {\n      case \"add\":\n        digits = `${digits}`;\n        for (let i = 0, iMax = digits.length; i < iMax; i += 1) {\n          this.evalKey(digits.charAt(i));\n        }\n        break;\n      case \"decimal\":\n        this.evalKey(\".\");\n        break;\n      case \"back\":\n        this.evalKey(\"back\");\n        break;\n      case \"invadd\":\n        this.evalKey(\"+/–\");\n        break;\n      default:\n        // ignore operation\n        break;\n    }\n  }\n\n  calcSettings = (calcEngineParams) => {\n    this.settings = Object.assign(this.settings, calcEngineParams);\n    this.historyRenderer.calcSettings(this.settings.displayWidth, this.settings.withThousandSeparator, this.settings.format);\n    this.evaluator.setConfiguration(this.settings.displayWidth, this.settings.angle, this.settings.silentOnErrors);\n  }\n\n  // the key pressed events (and paste events) are not going through the statemachine (RAP is doing the same thing) \n  keypress = (pressedKey) => {\n    const key = KeyboardHelper.fromKeyStrokeToCalculatorSupportedOperation(pressedKey);\n    if (key) {\n      this.evalKey(key);\n    }\n  }\n\n  paste = (text) => {\n    const renderCommands = this.evaluator.paste(text);\n    this.triggerRendering(renderCommands);\n  }\n\n  evalKey = (key, operand) => {\n    const renderCommands = this.evaluator.evalKey(key, operand);\n    this.triggerRendering(renderCommands);\n  }\n\n  triggerRendering = (renderCommands) => {\n    renderCommands.render.forEach(command => this.render(command));\n    renderCommands.history.forEach(command => this.renderHistory(command));\n  }\n\n  render = (value) => {\n    this.displayingValue = value === undefined ? undefined : Renderer.render(value, this.settings.displayWidth, this.settings.withThousandSeparator, this.settings.format);\n    const inputs = this.runtime.componentDirectory.findByComponentType(CbaCalculatorInput);\n    inputs.forEach((input) => {\n      CbaCalculatorInput.setDisplayValueInState(input, this.displayingValue);\n      RenderingHelper.triggerRendering(input);\n    });\n  }\n\n  renderHistory = ({ key, value, operand }) => {\n    this.historyDisplayingValue = this.historyRenderer.render(key, value, operand);\n    // trigger rendering when includeOperandInHistory should display the operand when typing\n    if (!KeyboardHelper.isDigitKey(key) || (KeyboardHelper.isDigitKey(key) && this.settings.includeOperandInHistory)) {\n      this.triggerHistoryRendering(this.historyDisplayingValue);\n    }\n  }\n\n  /**\n   * rerenders only calculator history components\n   */\n  triggerHistoryRendering = (value) => {\n    const histories = this.runtime.componentDirectory.findByComponentType(CbaCalculatorHistory);\n    histories.forEach((history) => {\n      CbaCalculatorHistory.setDisplayValueInState(history, value);\n      RenderingHelper.triggerRendering(history);\n    });\n  }\n\n  getTaskPath = () => this.taskPath;\n\n\n}\n","import CbaCalculatorEngine from '../components/calculator/CbaCalculatorEngine';\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\n\r\n/**\r\n * Manager for all calculators.\r\n * \r\n * We keep one calculator per task. \r\n * We need to be informed about the currently running task to switch our 'currently active' \r\n * calculator accordingly.\r\n */\r\nexport default class CalculatorsManager {\r\n\r\n  constructor() {\r\n    this.calculatorsStateList = {};\r\n    this.currentCalculator = undefined;\r\n    this.runtime = undefined;\r\n  }\r\n\r\n  /**\r\n   * Inform the manager about a task switch. \r\n   * \r\n   * @param taskPath The path of the new task to switch to.\r\n   * @param runtime The common runtime context structure. \r\n   */\r\n  setOrInitializeCurrentCalculator = (taskPath, runtime) => {\r\n    this.currentCalculator = new CbaCalculatorEngine(taskPath, runtime);\r\n    this.runtime = runtime;\r\n    this.restoreState(this.calculatorsStateList[taskPath]);\r\n  }\r\n\r\n  /** \r\n  * @returns string to be displayed by calculator history components\r\n  */\r\n  getHistoryDisplayingValue = () => this.safeCall(() => this.currentCalculator.historyDisplayingValue);\r\n\r\n  /**\r\n   * @returns string value to be display by the calculator input\r\n   */\r\n  getDisplayingValue = () => this.safeCall(() => this.currentCalculator.displayingValue);\r\n\r\n  /**\r\n   * @param memIdx - memory index from where to fetch data\r\n   */\r\n  calcGetMem = memIdx => this.safeCall(() => this.currentCalculator.calcGetMem(memIdx));\r\n\r\n  /**\r\n   * Calls an operation on the calculator engine.\r\n   * @param operation - what operation to call (e.g. clear, sin, multiply etc.)\r\n   * @param  baseOrExponentOrMemIdx - some operation need a second parameter (e.g. msave needs a memory index, log needs the base)\r\n   * \r\n   * @see CBA-TutorialReference.docx for more information.\r\n   */\r\n  calcOp = (operation, baseOrExponentOrMemIdx) => this.safeCall(() => this.currentCalculator.calcOp(operation, baseOrExponentOrMemIdx))\r\n\r\n  /**\r\n   * Modifies the current operand of the calculator engine.\r\n   * @param operation - what operation to be performed on current operand (e.g. 'add' – append Digits to the current operand)\r\n   * @param  digits - what digits to append (may be optional e.g. invadd operation just reverts the sign)\r\n   * \r\n   * @see CBA-TutorialReference.docx for more information.\r\n   */\r\n  calcOpnd = (operation, digits) => this.safeCall(() => this.currentCalculator.calcOpnd(operation, digits))\r\n\r\n  /**\r\n   * Initializes the CalculationEngine and sets parameters.  \r\n   * \r\n   * @see CBA-TutorialReference.docx for more information.\r\n   */\r\n  calcSettings = calcEngineParams => this.safeCall(() => this.currentCalculator.calcSettings(calcEngineParams))\r\n\r\n  /** \r\n   * @param pressedKey - KeyboardEvent.key representation as described here https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n  */\r\n  keypress = pressedKey => this.safeCall(() => this.currentCalculator.keypress(pressedKey))\r\n\r\n  /**\r\n   * @param text - text representation of clipboard data\r\n   */\r\n  paste = text => this.safeCall(() => this.currentCalculator.paste(text));\r\n\r\n  getStateForTask = taskPath => this.calculatorsStateList[taskPath]\r\n\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n  getAllTasksState = () => StateManagerHelper.deepCopy(this.calculatorsStateList);\r\n\r\n  /**\r\n   * Drop all state.\r\n   */\r\n  clearTasksState = () => {\r\n    this.calculatorsStateList = {};\r\n    this.currentCalculator = undefined;\r\n  };\r\n\r\n  /**\r\n   * Preload the tasks state returned by a call to getAllTasksState.\r\n   */\r\n  preloadTasksState = (allTasksState) => {\r\n    this.calculatorsStateList = StateManagerHelper.deepCopy(allTasksState);\r\n  }\r\n\r\n  /**\r\n   * Inject a state change for a calculator triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, state) => {\r\n    this.calculatorsStateList[taskPath] = state;\r\n    if (this.currentCalculator !== undefined && this.currentCalculator.getTaskPath() === taskPath) {\r\n      this.currentCalculator.restoreState(state);\r\n    }\r\n  }\r\n\r\n  // private \r\n\r\n  safeCall = (func) => {\r\n    if (this.currentCalculator !== undefined) {\r\n      const value = func();\r\n      this.saveState();\r\n      return value;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n\r\n  saveState = () => {\r\n    // cannot use ComponentStateManager\r\n    if (this.currentCalculator !== undefined) {\r\n      const calculatorTaskPath = this.currentCalculator.taskPath;\r\n      const newCalculatorState = this.currentCalculator.getFullState();\r\n      this.calculatorsStateList[calculatorTaskPath] = newCalculatorState;\r\n      TraceLogHelper.dumpStateChangeToTrace(\r\n        'CalculatorState',\r\n        {\r\n          taskPath: calculatorTaskPath,\r\n          state: newCalculatorState\r\n        },\r\n        this.runtime.traceLogBuffer\r\n      );\r\n    }\r\n  }\r\n\r\n  restoreState = (state) => {\r\n    if (this.currentCalculator !== undefined) {\r\n      if (state !== undefined) {\r\n        this.currentCalculator.restoreState(state);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * Utility class meant to store actions that need to be applied over components that were not rendered yet.\r\n * We store the wanted actions in map where the component indexPath is the key \r\n * and the list of actions to be applied once the component was render is the value.  \r\n */\r\nexport default class ActionRegister {\r\n\r\n  constructor() {\r\n    this.actionsMap = new Map();\r\n  }\r\n\r\n  registerAction = (indexPath, action) => {\r\n    let actions = [];\r\n    if (this.actionsMap.has(indexPath)) {\r\n      actions = this.actionsMap.get(indexPath);\r\n    }\r\n\r\n    actions.push(action);\r\n    this.actionsMap.set(indexPath, actions);\r\n  }\r\n\r\n  hasActionsRegisteredForPath = indexPath => this.actionsMap.has(indexPath) && this.actionsMap.get(indexPath).length !== 0;\r\n\r\n  getRegisteredActionsForPath = indexPath => this.actionsMap.get(indexPath);\r\n\r\n  clearRegisteredActionsForPath = indexPath => this.actionsMap.delete(indexPath);\r\n\r\n}\r\n","/**\r\n * Utility class meant to store focus registration per page.\r\n * We store the focus in a map where the page indexPath is the key \r\n * and the value is a boolean.  \r\n */\r\nexport default class ActionRegister {\r\n\r\n  constructor() {\r\n    this.focusMap = new Map();\r\n  }\r\n\r\n  registerFocus = (indexPath) => {\r\n    this.focusMap.set(indexPath, true);\r\n  }\r\n\r\n  hasActionsRegisteredForPath = indexPath => this.focusMap.has(indexPath) && this.focusMap.get(indexPath);\r\n\r\n}\r\n","import React from 'react'\r\nimport { useDragLayer } from 'react-dnd'\r\nimport PropTypes from 'prop-types';\r\nimport { DndItemTypes } from './DragAndDropHelper'\r\nimport Utils from '../utils/Utils';\r\n\r\n/**\r\n * A component to use as custom made drag layer for the drag&drop library.\r\n * \r\n * We use this for the touch screen scenario since the touch backend of the dnd library\r\n * does not show feedback during the drag operation out of the box (as the HTML5 backend does).\r\n */\r\n\r\nconst layerStyles = {\r\n  position: 'fixed',\r\n  pointerEvents: 'none',\r\n  zIndex: 100,\r\n  left: 0,\r\n  top: 0,\r\n  width: '100%',\r\n  height: '100%',\r\n}\r\n\r\nfunction getItemStyles(initialOffset, currentOffset) {\r\n  if (!initialOffset || !currentOffset) {\r\n    return {\r\n      display: 'none',\r\n    }\r\n  }\r\n  const { x, y } = currentOffset\r\n  const transform = `translate(${x}px, ${y}px)`\r\n  return {\r\n    transform,\r\n    WebkitTransform: transform,\r\n  }\r\n}\r\n\r\nconst CustomDragLayer = (props) => {\r\n  const { runtime } = props;\r\n  const {\r\n    itemType,\r\n    isDragging,\r\n    item,\r\n    initialOffset,\r\n    currentOffset,\r\n  } = useDragLayer(monitor => ({\r\n    item: monitor.getItem(),\r\n    itemType: monitor.getItemType(),\r\n    initialOffset: monitor.getInitialSourceClientOffset(),\r\n    currentOffset: monitor.getSourceClientOffset(),\r\n    isDragging: monitor.isDragging(),\r\n  }))\r\n  function renderItem() {\r\n    switch (itemType) {\r\n      case DndItemTypes.VALUE_DISPLAY:\r\n      {\r\n        // The drag source (a SimpleTextField in the value display case) \r\n        // fills the 'previewData' field in the item structure\r\n        // so that we can show a similar textarea as the SimpleTextField does\r\n        // during the drag operation.\r\n        // The left/top coordinates should be zero since the div used\r\n        // for all drag&drop item types follows the \r\n        // mouse pointer via the 'translate' technique already.\r\n        const scaleValue = runtime.app ? runtime.app.state.scaleValue : 1;\r\n        const clippedStyle = Utils.safeDeepCopy(item.previewData.style);\r\n        const augmentedWidth = parseFloat(item.previewData.style.width) * scaleValue;\r\n        const augmentedHeight = parseFloat(item.previewData.style.height) * scaleValue;\r\n        const augmentedFontSize = parseFloat(item.previewData.style.fontSize) * scaleValue;\r\n        const augmentedStyle = Object.assign(clippedStyle, {\r\n          width: augmentedWidth,\r\n          height: augmentedHeight,\r\n          fontSize: augmentedFontSize,\r\n          left: 0,\r\n          top: 0\r\n        })\r\n        return (\r\n          <textarea\r\n            readOnly\r\n            title={item.previewData.title}\r\n            style={augmentedStyle}\r\n            value={item.previewData.value}\r\n            className=\"hide-selection\"\r\n          />\r\n        )\r\n      }\r\n      default:\r\n        // We drag some item type that is not supported by the drag layer yet.\r\n        // (Should never happen.)\r\n        return <div>Dragging...</div>\r\n    }\r\n  }\r\n  if (!isDragging) {\r\n    return null\r\n  }\r\n  return (\r\n    <div style={layerStyles}>\r\n      <div\r\n        style={getItemStyles(initialOffset, currentOffset)}\r\n      >\r\n        {renderItem()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nCustomDragLayer.propTypes = {\r\n  runtime: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default CustomDragLayer\r\n","import axios from 'axios';\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\n\r\nexport default class RecordingBuffer {\r\n\r\n  constructor() {\r\n    this.recordingList = [];\r\n    this.newEntryListener = undefined;\r\n  }\r\n\r\n  // public API for components ------------------------------------------------------------------\r\n\r\n  /**\r\n   * Report recording.\r\n   * \r\n   * The method expects these parameters:\r\n   * - userDefId: A String representing the userDefinedId of the media component.\r\n   * - timestamp: A Date representing the timestamp for the recording ending.\r\n   * - recordingNumber: A Number representing the number of the created recording.\r\n   * - blobUrl: The recording blob URL.\r\n   * \r\n   * The method will retrieve the blob content as base64 data and store it internally.\r\n   * \r\n   */\r\n  reportRecording = (userDefId, timestamp, recordingNumber, blobUrl, taskInfo, userDefinedIDPath) => new Promise((resolve, reject) => {\r\n    axios.get(blobUrl, {\r\n      responseType: 'blob'\r\n    }).then((response) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(response.data);\r\n      reader.onloadend = () => {\r\n        const data = reader.result;\r\n        const { test, item, task } = taskInfo;\r\n        const recordingInfo = {\r\n          sourceComponent: userDefId,\r\n          userDefinedIDPath,\r\n          nbOfRecordingOnComponentInstance: recordingNumber,\r\n          recordingStartTime: timestamp,\r\n          test,\r\n          item,\r\n          task\r\n        }\r\n        const newEntry = {\r\n          recordingInfo,\r\n          data\r\n        }\r\n        this.recordingList.push(newEntry);\r\n        if (this.newEntryListener !== undefined) {\r\n          this.newEntryListener();\r\n        }\r\n        resolve();\r\n      }\r\n    })\r\n  })\r\n\r\n\r\n  // public API for recording consumers --------------------------------------------------------------------\r\n\r\n  /**\r\n   * Get the next bunch of recording entries for delivery to the server and drop them from our queue.\r\n   * \r\n   * Note: This method must be called from the GUI thread to avoid multithreading issues!\r\n   * \r\n   * The method returns a list of recording entry objects. I returns an empty list of no recording entries are pending.\r\n   */\r\n  popEntries = () => {\r\n    const deliveredEntries = this.recordingList;\r\n    this.recordingList = [];\r\n    return deliveredEntries;\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the list of current recording entries (without dropping them).\r\n   * \r\n   * The method returns a list of recording entry objects. It returns an empty list of no recording entries are pending.\r\n   */\r\n  peekEntries = () => StateManagerHelper.deepCopy(this.recordingList);\r\n\r\n  /**\r\n   * Set a function to call each time we receive a new entry.\r\n   * \r\n   * We support a single entry listener only. The entry listener is called after the new recording entry is put into our buffer.\r\n   * \r\n   * @param callback The function to call each time a new entry is put into our buffer.\r\n   */\r\n  setNewEntryListener = (callback) => {\r\n    this.newEntryListener = callback;\r\n  }\r\n\r\n}\r\n","import Utils from '../utils/Utils';\r\nimport UserDataUploader from './UserDataUploader';\r\n\r\n/**\r\n * Manage the transfer of the media stream recordings to the server. \r\n * \r\n * We support transmission of recording entries \r\n *  - via HTTP PUT calls or\r\n *  - window.postMessage events sent to the given target domain origin or\r\n *  - writing the trace logs to the console.\r\n */\r\nexport default class RecordingUploader extends UserDataUploader {\r\n\r\n  constructor(recordingBuffer) {\r\n    super(recordingBuffer, RecordingUploader.buildRecordingPostContent, \"recording\");\r\n    this.transmitInterval = undefined;\r\n    this.startAutomaticTransmissions();\r\n  }\r\n\r\n  // ------- public API -----------------------------------------------------------------------------\r\n\r\n  // See the base class UserDataUploader for our public API.\r\n\r\n  // ------- private stuff --------------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build the content of a recording transmission to the server. \r\n   * \r\n   * This consists of a meta data structure and the list of recording entries to transmit.\r\n   * We take the list of recording entries from our internal recording entries list but\r\n   * we do not drop the entries from this list yet.\r\n   * \r\n   * @param {String} sendTimestamp The time of send operation.\r\n   * @param {*} runtime \r\n   */\r\n   static buildRecordingPostContent = (sendTimestamp, sessionContext, recordingEntriesList) => {\r\n     const { sessionId, username, loginTimestamp } = sessionContext;\r\n     if (sessionId === undefined) {\r\n       console.warn(\"Sending recording with dummy session id!\");\r\n     }\r\n     const metaData = {\r\n       userId: username,\r\n       sessionId: sessionId === undefined ? 'dummySessionId' : sessionId,\r\n       loginTimestamp,\r\n       sendTimestamp,\r\n       cbaVers: Utils.getCbaVersion()\r\n     };\r\n\r\n     const recordingPostContent = {\r\n       metaData,\r\n       recordingEntriesList\r\n     };\r\n\r\n     return recordingPostContent;\r\n   }\r\n\r\n}\r\n","\r\nexport default class LibraryManager {\r\n\r\n  constructor() {\r\n    this.librariesUsedMap = {}\r\n  }\r\n\r\n  // ----- public API --------------------------------------------------------------------------\r\n\r\n  addLibrariesForItem(itemLibraries, libraryPathsMap) {\r\n    if (!itemLibraries || (itemLibraries && !itemLibraries.length > 0)) return;\r\n    if (!libraryPathsMap || (libraryPathsMap && !Object.keys(libraryPathsMap).length > 0)) return;\r\n    if (!LibraryManager.checkLibraryPaths(itemLibraries, libraryPathsMap)) return;\r\n\r\n    itemLibraries.forEach((library) => {\r\n      switch (library.name) {\r\n        case \"MathJax\": this.addMathJax(libraryPathsMap[library.name]); break;\r\n        default: console.error(\"Unexpected library provied\", library.name); break;\r\n      }\r\n    })\r\n\r\n\r\n  }\r\n\r\n  // ----- private stuff -----------------------------------------------------------------------\r\n\r\n  static checkLibraryPaths(itemLibraries, libraryPathsMap) {\r\n    const checker = itemLibraries.map(library => !!libraryPathsMap[library.name]);\r\n\r\n    return checker.every(c => c === true);\r\n  }\r\n\r\n  addMathJax(libraryPath) {\r\n    // check if MathJax is already in use\r\n    if (this.librariesUsedMap.MathJax) {\r\n      return;\r\n    }\r\n\r\n    this.librariesUsedMap.MathJax = libraryPath;\r\n\r\n    const scriptTag = document.createElement('script');\r\n    scriptTag.setAttribute('src', libraryPath);\r\n    scriptTag.setAttribute('async', true);\r\n    scriptTag.setAttribute('id', \"MathJax-script\")\r\n\r\n    document.head.appendChild(scriptTag);\r\n\r\n  }\r\n\r\n}\r\n","import RenderingHelper from \"../components/RenderingHelper\";\r\nimport Utils from \"../utils/Utils\";\r\nimport StateManagerHelper from \"./StateManagerHelper\";\r\nimport TraceLogHelper from \"./TraceLogHelper\";\r\n\r\nexport default class VariableManager {\r\n\r\n  constructor() {\r\n    this.variableMap = {};\r\n    this.variableObservers = [];\r\n    this.tracing = false;\r\n  }\r\n\r\n  /**\r\n   * Initialize all variables when starting a task\r\n   * \r\n   * @param {String} taskPath the task path for which to init variables\r\n   * @param {*} variablesConfig the configuration object\r\n   * @param {*} runtime runtime object\r\n   */\r\n  initializeVariablesForTask(taskPath, variablesConfig, withTrace, runtime) {\r\n    // do not initialize for existing taskPath or no variable config\r\n    if (variablesConfig && !this.variableMap[taskPath]) {\r\n      variablesConfig.forEach((variableConfig) => {\r\n        const { name, value, type } = variableConfig;\r\n        this.setVariable(taskPath, name, value, type, runtime)\r\n      });\r\n    }\r\n    this.tracing = withTrace;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Get the variable value from a specific task\r\n   * Flag could be provided to get all data (type, name, value)\r\n   * \r\n   * @param {String} taskPath the task path where the variable is located\r\n   * @param {String} variableName the variable name \r\n   * @param {Boolean} getFullData flag to specify whether to provide the full object or not\r\n   * @returns {Object | String | Number | Boolean} Variable object or value\r\n   */\r\n  getVariable(taskPath, variableName, getFullData) {\r\n\r\n    const taskEntry = this.variableMap[taskPath];\r\n    if (taskEntry === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const variableEntry = taskEntry[variableName];\r\n    if (variableEntry === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    return getFullData ? variableEntry : variableEntry.value;\r\n  }\r\n\r\n  /**\r\n   * Set the variable value from a specific task\r\n   * \r\n   * - check whether var exists already\r\n   * - if variable exists:\r\n   *   + type of value is compatible with type of variable\r\n   *   + if type is given it must match the existing type\r\n   * - if variable does not exist:\r\n   *   + type must be specified\r\n   *   + type of value is compatible with type of variable\r\n   * \r\n   * @param {String} taskPath the task path where the variable is located\r\n   * @param {String} name the variable name \r\n   * @param {*} value value to set\r\n   * @param {String} type variable type \r\n   * @param {*} runtime runtime object\r\n   */\r\n  setVariable(taskPath, name, value, type, runtime) {\r\n    if (!this.variableMap[taskPath]) {\r\n      this.variableMap[taskPath] = {};\r\n    }\r\n\r\n    const oldVariable = this.variableMap[taskPath][name];\r\n\r\n    if (oldVariable) {\r\n\r\n      if (!Utils.checkType(value, oldVariable.type)) {\r\n        console.error(`Provided variable value is of the wrong type. Expected ${oldVariable.type}`);\r\n        this.traceVariableChangeAttempt(name, oldVariable.type, type, oldVariable.value, value, 'valueWrongType', runtime);\r\n        return;\r\n      }\r\n\r\n      if (type && type !== oldVariable.type) {\r\n        console.error(`Provided type is wrong. Expected ${oldVariable.type}`);\r\n        this.traceVariableChangeAttempt(name, oldVariable.type, type, oldVariable.value, value, 'givenTypeNoMatch', runtime);\r\n        return;\r\n      }\r\n\r\n      // all checks passed, set variable value\r\n      const oldValue = oldVariable.value;\r\n      this.variableMap[taskPath][name].value = value;\r\n      this.traceVariableChangeAttempt(name, oldVariable.type, type, oldValue, value, 'ok', runtime);\r\n\r\n    } else {\r\n\r\n      if (!type) {\r\n        console.error('Provided variable must have a type');\r\n        this.traceVariableChangeAttempt(name, undefined, undefined, undefined, value, 'typeMissing', runtime);\r\n        return;\r\n      }\r\n\r\n      if (!Utils.checkType(value, type)) {\r\n        console.error(`Provided variable value has inconsistent type. Expected ${type}`);\r\n        this.traceVariableChangeAttempt(name, undefined, type, undefined, value, 'typeInconsistent', runtime);\r\n        return;\r\n      }\r\n\r\n      // all checks passed, set variable value\r\n      const newValue = {\r\n        name,\r\n        value,\r\n        type\r\n      }\r\n      this.variableMap[taskPath][name] = newValue;\r\n    }\r\n\r\n    TraceLogHelper.dumpStateChangeToTrace(\r\n      'VariableManagerState',\r\n      {\r\n        taskPath,\r\n        name,\r\n        value: this.variableMap[taskPath][name]\r\n      },\r\n      runtime.traceLogBuffer\r\n    );\r\n\r\n    this.variableObservers\r\n      .filter(entry => entry.variableName === name)\r\n      .forEach((entry) => {\r\n        RenderingHelper.triggerRenderingViaPath(entry.indexPath, runtime);\r\n      })\r\n  }\r\n\r\n  traceVariableChangeAttempt(variableName, variableType, newValueType, oldValue, newValue, operationStatus, runtime) {\r\n    if (this.tracing) {\r\n      runtime.traceLogBuffer.reportEvent(\r\n        'SetVariableValue',\r\n        new Date(),\r\n        {\r\n          variableName,\r\n          variableType,\r\n          newValueType,\r\n          oldValue: `${oldValue}`,\r\n          newValue: `${newValue}`,\r\n          operationStatus\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} taskPath the task path where the variables are located\r\n   * @returns {Object} a copy of the variableMap for that task VariableValuesMap\r\n   */\r\n  getVariableValuesMapForTask(taskPath, getFullData) {\r\n    const variableMap = this.variableMap[taskPath];\r\n    const variableValuesMap = {};\r\n\r\n    if (variableMap) {\r\n      Object.keys(variableMap).forEach((name) => {\r\n        variableValuesMap[name] = getFullData ? variableMap[name] : variableMap[name].value;\r\n      })\r\n    }\r\n\r\n    return Utils.safeDeepCopy(variableValuesMap);\r\n  }\r\n\r\n  /**\r\n  * Build an array of variable/value pairs describing variables for a task\r\n  * @param {String} taskPath the task path where the variable is located\r\n  */\r\n  buildVariablesInfoArrayForTask = (taskPath) => {\r\n    const variableMap = this.variableMap[taskPath];\r\n    const variablesArray = [];\r\n\r\n    if (variableMap) {\r\n      Object.keys(variableMap).forEach((variable) => {\r\n        variablesArray.push(variableMap[variable]);\r\n      });\r\n    }\r\n\r\n    return variablesArray;\r\n  }\r\n\r\n  /**\r\n   * Add a display component instance as observer on variable changes. \r\n   * \r\n   * The variable manager will trigger a rerendering on the component \r\n   * each time the given variable changes its value.\r\n   * \r\n   * @param {String} indexPath The index path of the observing component.\r\n   * @param {String} variableName The name of the variable to be observed.\r\n   */\r\n  addVariableChangeObserver = (indexPath, variableName) => {\r\n    if (this.variableObservers.find(entry => entry.indexPath === indexPath && entry.variableName === variableName) === undefined) {\r\n      this.variableObservers.push({\r\n        indexPath,\r\n        variableName\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop a display component instance from the list of observers. \r\n   * \r\n   * @param {String} indexPath The index path of the observing component.\r\n   * @param {String} variableName The name of the variable to be observed.\r\n   */\r\n  dropVariableChangeObserver = (indexPath, variableName) => {\r\n    const entryIndex = this.variableObservers.findIndex(entry => entry.indexPath === indexPath && entry.variableName === variableName);\r\n    if (entryIndex !== undefined) {\r\n      this.variableObservers.splice(entryIndex, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop all change observers from a path\r\n   * \r\n   * @param {String} indexPath The index path of the observing component.\r\n   */\r\n  dropChangeObserverForPath = (indexPath) => {\r\n    const entryList = this.variableObservers.filter(entry => entry.indexPath === indexPath);\r\n    if (entryList !== undefined && entryList.length > 0) {\r\n      entryList.forEach((entry) => {\r\n        this.dropVariableChangeObserver(indexPath, entry.variableName);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggers rerendering for all change observers\r\n   * \r\n   * @param {*} runtime our runtime object\r\n   */\r\n  triggerRerenderForAllChangeObservers = (runtime) => {\r\n    this.variableObservers\r\n      .forEach((entry) => {\r\n        RenderingHelper.triggerRenderingViaPath(entry.indexPath, runtime);\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Remove all change observers\r\n   */\r\n  clearAllChangeObservers = () => {\r\n    this.variableObservers = [];\r\n  }\r\n\r\n  /**\r\n   * Get the full state for all existing tasks.\r\n   * \r\n   * Use the result of this method as parameter to preloadTasksState to preload another instance to our current state. \r\n   */\r\n   getAllTasksState = () => StateManagerHelper.deepCopy(this.variableMap);\r\n\r\n   /**\r\n    * Drop all tasks.\r\n    */\r\n   clearTasksState = () => {\r\n     this.variableMap = {};\r\n     this.clearAllChangeObservers();\r\n   };\r\n\r\n   /**\r\n    * Preload the tasks state returned by a call to getAllTasksState.\r\n    */\r\n   preloadTasksState = (allTasksState) => {\r\n     this.variableMap = StateManagerHelper.deepCopy(allTasksState);\r\n   }\r\n\r\n  /**\r\n   * Inject a change for a variable value triggered by a StateChange step during replay.\r\n   */\r\n  injectStateChangeAtReplay = (taskPath, name, value) => {\r\n    if (!this.variableMap[taskPath]) {\r\n      this.variableMap[taskPath] = {}\r\n    }\r\n    this.variableMap[taskPath][name] = value;\r\n  }\r\n\r\n\r\n}\r\n","import MenuItemTree from '../components/MenuItemTree';\r\nimport RenderingHelper from '../components/RenderingHelper';\r\nimport Utils from '../utils/Utils';\r\n\r\n/**\r\n * Helper to run a story of trace log events as replay.\r\n */\r\nexport default class ReplayRunner {\r\n\r\n  // ---------- public API ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build a replay runner. \r\n   */\r\n  constructor() {\r\n    this.nowProvider = () => Date.now();\r\n    this.delayProcessor = (delayMillis, action) => {\r\n      console.info(`Replay step with delay: ${delayMillis}`);\r\n      setTimeout(action, delayMillis);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a non-standard \"now\" timestamp provider.\r\n   * \r\n   * Test code might wish control the value used for \"now\".\r\n   * Production code should not use this method but rely on the default standard implementation\r\n   * that we provide implicitly. \r\n   */\r\n  setNowProvider = (nowProvider) => {\r\n    this.nowProvider = nowProvider;\r\n  }\r\n\r\n  /**\r\n   * Set a non-standard delay processor.\r\n   * \r\n   * Test code might wish to shortcut delays and collect delay intervals explicitly instead.\r\n   * Production code should not use this method but rely on the default standard implementation\r\n   * that we provide implicitly. \r\n   */\r\n  setDelayProcessor = (processor) => {\r\n    this.delayProcessor = processor;\r\n  }\r\n\r\n\r\n  /**\r\n   * Run a replay of the given replay steps.\r\n   */\r\n  replay = (story, finishedAction, settings, headerButtons, courseForNavigator, testsForNavigator, runtime) => {\r\n\r\n    this.replayFromTaskStartingPoint(\r\n      story,\r\n      0,\r\n      {\r\n        settings, headerButtons, courseForNavigator, testsForNavigator\r\n      },\r\n      finishedAction,\r\n      runtime\r\n    );\r\n  }\r\n\r\n\r\n  // ---------- private stuff ---------------------------------------------------------------------\r\n\r\n\r\n  /**\r\n   * Run a replay of the given replay steps starting with the step at the given from index.\r\n   */\r\n  replayFromTaskStartingPoint = (story, fromIndex, appSettings, finishedAction, runtime) => {\r\n    // Get the initializing sequence for the next task:\r\n    const initializingTriple = ReplayRunner.grabInitializingTriple(story, fromIndex);\r\n    if (initializingTriple === undefined) {\r\n      console.info(`Could not find task start for replay -> replay command aborted.`);\r\n      return;\r\n    }\r\n\r\n    const { taskSwitchEntry, fullStateEntry, tasksViewVisibleEntry, stateChangeEntries, nextIndex } = initializingTriple;\r\n\r\n    const { taskManager, app } = runtime;\r\n\r\n    // Initialize the state before showing the initial task:\r\n    taskManager.preloadTasksState(fullStateEntry.details);\r\n    stateChangeEntries.forEach((step) => {\r\n      const { stateType, stateDelta } = step.details;\r\n      ReplayRunner.processStateChangeStep(stateType, stateDelta, runtime);\r\n    })\r\n\r\n    // Show the initial task:\r\n    const { newTest, newItem, newTask } = taskSwitchEntry.details;\r\n    // The execution environment might want to use different global settings than the original assessment.\r\n    // --> Ignore settings specified in TasksViewVisible entry and use current settings in TaskPlayer instead.\r\n    const { settings, headerButtons, courseForNavigator, testsForNavigator } = appSettings;\r\n    app.showReplay(newTest, newItem, newTask, settings, headerButtons, courseForNavigator, testsForNavigator);\r\n\r\n    // Replay the remaining steps:\r\n    const initialReplayTick = tasksViewVisibleEntry.details.replayTick === undefined ? 0 : tasksViewVisibleEntry.details.replayTick;\r\n    const initialTimestamp = this.nowProvider();\r\n\r\n    this.continueStoryExecution(\r\n      story,\r\n      nextIndex,\r\n      initialReplayTick,\r\n      initialTimestamp,\r\n      nextStepIndex => this.executeNextReplayStep(story, nextStepIndex, appSettings, finishedAction, runtime),\r\n      finishedAction\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * Continue to replay the given story of replay step entries. \r\n   * \r\n   * We run further steps in the story starting from the nextStepIndex. \r\n   *\r\n   * As long as \r\n   *  - the steps don't contain a replayTick value or \r\n   *  - their replayTick time is almost reached already\r\n   * we execute steps at once, i.e. we call the stepAction for them.\r\n   * \r\n   * At the first step that requires postponement due to its replayTick value,\r\n   * we schedule another call to ourself with an updated nextStepIndex.\r\n   * \r\n   * If we reach the end of the story we trigger the doneAction.\r\n   * \r\n   * @param {*} story The complete story of replay steps.\r\n   * @param {*} nextStepIndex The index of the next replay step to be executed.\r\n   * @param {*} initialReplayTick The replayTick of the initial TasksViewVisible step.\r\n   * @param {*} initialTimestamp The time when the replay of the complete story started.\r\n   * @param {*} appSettings The settings to use for starting the App for a task.\r\n   * @param {*} stepAction The action to perform on each replay step. This should return true if it takes over processing of all remaining steps, false otherwise.\r\n   * @param {*} doneAction The action to perform when the story ends.\r\n   */\r\n  continueStoryExecution = (story, nextStepIndex, initialReplayTick, initialTimestamp, stepAction, doneAction) => {\r\n    let currentStepIndex = nextStepIndex;\r\n    let currentStep = story[currentStepIndex];\r\n    let delayMillis = ReplayRunner.calculateDelayMillisByNow(initialReplayTick, initialTimestamp, currentStep, this.nowProvider);\r\n    while (currentStep !== undefined && delayMillis < 100) {\r\n      if (stepAction(currentStepIndex)) {\r\n        return;\r\n      }\r\n      currentStepIndex += 1;\r\n      currentStep = story[currentStepIndex]\r\n      delayMillis = ReplayRunner.calculateDelayMillisByNow(initialReplayTick, initialTimestamp, currentStep, this.nowProvider);\r\n    }\r\n\r\n    if (currentStep !== undefined) {\r\n      this.delayProcessor(delayMillis, () => {\r\n        this.continueStoryExecution(story, currentStepIndex, initialReplayTick, initialTimestamp, stepAction, doneAction);\r\n      })\r\n    } else {\r\n      doneAction();\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Execute the given replay step immediately.\r\n   * \r\n   * If it takes over all remaining steps the method returns true, otherwise false.\r\n   */\r\n  executeNextReplayStep(story, nextStepIndex, appSettings, doneAction, runtime) {\r\n    const currentStep = story[nextStepIndex];\r\n    let dummyEvent;\r\n\r\n    switch (currentStep.type) {\r\n      case 'StateChange':\r\n        {\r\n          const { stateType, stateDelta } = currentStep.details;\r\n          ReplayRunner.processStateChangeStep(stateType, stateDelta, runtime);\r\n        }\r\n        return false;\r\n      case 'FullState':\r\n        // TODO: ignore for now but we should validate this later on\r\n        return false;\r\n      case 'RenderTriggered':\r\n        {\r\n          const component = runtime.componentDirectory.findComponent(currentStep.details.indexPath);\r\n          if (component !== undefined) {\r\n            RenderingHelper.triggerRendering(component);\r\n          } else {\r\n            console.log(`Component missing for rendering -> trigger render from top`);\r\n            runtime.taskManager.handleTopLevelPageChange()\r\n          }\r\n        }\r\n        return false;\r\n      case 'TaskSwitch':\r\n        if (currentStep.details.newTask === undefined) {\r\n          // stop task entry \r\n          runtime.app.showWaiting();\r\n          return false;\r\n        } else {\r\n          // start task entry \r\n          this.replayFromTaskStartingPoint(story, nextStepIndex, appSettings, doneAction, runtime);\r\n          return true;\r\n        }\r\n      case 'ContextMenu':\r\n        if (currentStep.details.shouldOpen) {\r\n          dummyEvent = new Event(currentStep.details.event.type);\r\n          dummyEvent.clientX = currentStep.details.event.clientX;\r\n          dummyEvent.clientY = currentStep.details.event.clientY;\r\n\r\n          runtime.contextMenu.openMenuItemTree({\r\n            entries: currentStep.details.entries,\r\n            event: dummyEvent\r\n          });\r\n        } else {\r\n          MenuItemTree.closeMenuItemTree();\r\n        }\r\n\r\n        return false;\r\n      case 'ScrollTriggered': {\r\n        const component = runtime.componentDirectory.findComponent(currentStep.details.path);\r\n        const { scrollTop, scrollLeft } = currentStep.details;\r\n\r\n        if (!component && !component.containerRendererRef) {\r\n          return false;\r\n        }\r\n\r\n        let htmlElement = component.containerRendererRef.current;\r\n\r\n        while (getComputedStyle(htmlElement).overflow === 'hidden') {\r\n          htmlElement = htmlElement.parentElement;\r\n\r\n          if (htmlElement === document.body) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        Utils.doScroll(scrollTop, scrollLeft, htmlElement)\r\n        return false;\r\n      }\r\n      default:\r\n        // just ignore irrelevant story events\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the state managers due to a 'StateChange' step.\r\n   */\r\n  static processStateChangeStep(stateType, stateDelta, runtime) {\r\n    switch (stateType) {\r\n      case 'ComponentState':\r\n        {\r\n          const { pathId, state } = stateDelta;\r\n          runtime.componentStateManager.registerStateChangeFromSnapshot(pathId, state);\r\n        }\r\n        break;\r\n      case 'PresenterStateManagerState':\r\n        {\r\n          const { taskPath, state } = stateDelta;\r\n          runtime.presenterStateManager.injectStateChangeAtReplay(taskPath, state);\r\n        }\r\n        break;\r\n      case 'TaskNavigatorStateManagerState':\r\n        {\r\n          const { name, value } = stateDelta;\r\n          runtime.taskNavigatorStateManager.injectStateChangeAtReplay(name, value);\r\n        }\r\n        break;\r\n      case 'IncidentsAccumulatorState':\r\n        {\r\n          const { taskPath, state } = stateDelta;\r\n          runtime.incidentsAccumulator.injectStateChangeAtReplay(taskPath, state);\r\n        }\r\n        break;\r\n      case 'VariableManagerState':\r\n        {\r\n          const { taskPath, name, value } = stateDelta;\r\n          runtime.variableManager.injectStateChangeAtReplay(taskPath, name, value);\r\n        }\r\n        break;\r\n      case 'CalculatorState':\r\n        {\r\n          const { taskPath, state } = stateDelta;\r\n          runtime.calculatorsManager.injectStateChangeAtReplay(taskPath, state);\r\n        }\r\n        break;\r\n      case 'ClipboardState':\r\n        {\r\n          const { state } = stateDelta;\r\n          runtime.clipboardManager.injectStateChangeAtReplay(state);\r\n        }\r\n        break;\r\n      default:\r\n      {\r\n        console.warn(`Unknown StateChange replay step type ignored!`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the delay required before executing the given step.\r\n   * \r\n   * If the step does not specify a replay tick value, the delay is zero.\r\n   */\r\n  static calculateDelayMillisByNow(initialReplayTick, initialTimestamp, step, nowProvider) {\r\n    if (step === undefined || step.replayTick === undefined) return 0;\r\n    return ReplayRunner.calculateDelayMillis(initialReplayTick, initialTimestamp, step.replayTick, nowProvider());\r\n  }\r\n\r\n  /**\r\n   * Helper method that calculates the delay required before executing a step with the given replay tick value.\r\n   * \r\n   * The delay is never negative. \r\n   */\r\n  static calculateDelayMillis(initialReplayTick, initialTimestamp, stepReplayTick, nowTimestamp) {\r\n    return Math.max(0, (stepReplayTick - initialReplayTick) - (nowTimestamp - initialTimestamp));\r\n  }\r\n\r\n  /**\r\n   * Helper method that extracts the initializing triple of log entries TaskSwitch+FullState+TasksViewVisible \r\n   * from the given replay trace file.\r\n   * \r\n   * The method returns undefined if it cannot detect a proper triple. \r\n   * Besides the initializing triple it returns all StateChange events \r\n   * appearing between the FullState and the TasksViewVisible log entries.\r\n   */\r\n  static grabInitializingTriple(story, nextIndex) {\r\n    let entryIndex;\r\n\r\n    // scroll down until we see the first TaskSwitch entry that starts a task:\r\n    let tripleStartFound = false;\r\n    for (entryIndex = nextIndex; entryIndex < story.length && !tripleStartFound;) {\r\n      const currentStep = story[entryIndex];\r\n      if (currentStep.type === 'TaskSwitch' && currentStep.details.newTask !== undefined) {\r\n        tripleStartFound = true;\r\n      } else {\r\n        entryIndex += 1;\r\n      }\r\n    }\r\n    if (!tripleStartFound) return undefined;\r\n    const taskSwitchEntry = story[entryIndex];\r\n\r\n    // scroll down through StateChange entries until we find the FullState entry:\r\n    entryIndex += 1;\r\n    let nextEntry = story[entryIndex];\r\n    while (nextEntry !== undefined && nextEntry.type === 'StateChange') {\r\n      entryIndex += 1;\r\n      nextEntry = story[entryIndex];\r\n    }\r\n    if (nextEntry === undefined || nextEntry.type !== 'FullState') return undefined;\r\n    const fullStateEntry = nextEntry;\r\n\r\n    // scroll down through StateChange entries and remember them until we find the TasksViewVisible entry:\r\n    entryIndex += 1;\r\n    const stateChangeEntries = [];\r\n    nextEntry = story[entryIndex];\r\n    while (nextEntry !== undefined && nextEntry.type === 'StateChange') {\r\n      stateChangeEntries.push(nextEntry);\r\n      entryIndex += 1;\r\n      nextEntry = story[entryIndex];\r\n    }\r\n    if (nextEntry === undefined || nextEntry.type !== 'TasksViewVisible') return undefined;\r\n    const tasksViewVisibleEntry = nextEntry;\r\n\r\n    return {\r\n      taskSwitchEntry,\r\n      fullStateEntry,\r\n      tasksViewVisibleEntry,\r\n      stateChangeEntries,\r\n      nextIndex: entryIndex + 1\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","/**\r\n * Keep the currently active 'replay step'.\r\n */\r\nexport default class ReplayStepMonitor {\r\n\r\n  constructor() {\r\n    this.currentReplayStepId = 0;\r\n  }\r\n\r\n  // public API ------------------------------------------------------------------\r\n\r\n  incrementReplayStep = () => {\r\n    this.currentReplayStepId += 1;\r\n\r\n  }\r\n\r\n  getCurrentReplayStepId = () => this.currentReplayStepId;\r\n\r\n  // private stuff ------------------------------------------------------------------\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\nimport { EventEmitter } from 'fbemitter';\r\nimport moment from 'moment';\r\nimport HTML5Backend from 'react-dnd-html5-backend'\r\nimport TouchBackend from 'react-dnd-touch-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport App from './App';\r\nimport ComponentStateManager from '../state/ComponentStateManager';\r\nimport ComponentDirectory from '../state/ComponentDirectory';\r\nimport IncidentsAccumulator from '../state/IncidentsAccumulator';\r\nimport TaskManager from '../state/TaskManager';\r\nimport TaskResultsManager from '../state/TaskResultsManager';\r\nimport StatemachinesManager from '../state/StatemachinesManager';\r\nimport PresenterStateManager from '../state/PresenterStateManager';\r\nimport TaskNavigatorStateManager from '../state/TaskNavigatorStateManager';\r\nimport TraceLogBuffer from '../state/TraceLogBuffer';\r\nimport TraceLogHelper from '../state/TraceLogHelper';\r\nimport ClipboardManager from '../state/ClipboardManager';\r\nimport TraceLogUploader from '../transmit/TraceLogUploader';\r\nimport PostMessageReceiver from '../transmit/PostMessageReceiver';\r\nimport RecommendationsManager from '../state/RecommendationsManager';\r\nimport CalculatorsManager from '../state/CalculatorsManager';\r\nimport Utils from '../utils/Utils';\r\nimport '../utils/polyfills';\r\nimport ActionRegister from '../state/ActionRegister';\r\nimport FocusRegister from '../state/FocusRegister';\r\nimport CustomDragLayer from '../config/CustomDragLayer';\r\nimport RecordingBuffer from '../state/RecordingBuffer';\r\nimport RecordingUploader from '../transmit/RecordingUploader';\r\nimport ServerCalls from '../controller/ServerCalls';\r\nimport LibraryManager from '../state/LibraryManager';\r\nimport VariableManager from '../state/VariableManager';\r\nimport ReplayRunner from './ReplayRunner';\r\nimport ReplayStepMonitor from '../state/ReplayStepMonitor';\r\n\r\n/**\r\n * Entry point of task player layer.\r\n */\r\nexport default class TaskPlayer {\r\n\r\n  // ---------- public API ---------------------------------------------------------------------\r\n\r\n  /**\r\n   * Build a task player. \r\n   * \r\n   * The new task player will start to listen for postMessage events. \r\n   * You may configure and start the player via postMessage events or \r\n   * via the public API instance methods.\r\n   */\r\n  constructor(eventTargetWindow, eventDomainUri) {\r\n    this.runtime = TaskPlayer.buildRuntime();\r\n    this.runtime.postMessageReceiver.startReceiving(this.runtime, this);\r\n    this.eventTargetWindow = eventTargetWindow === undefined ? 'self' : eventTargetWindow;\r\n    this.eventDomainUri = eventDomainUri === undefined ? Utils.getCallingUrlWithoutPath() : eventDomainUri;\r\n\r\n    this.apiState = 'appNotRunning';\r\n\r\n    this.settings = {\r\n      debugScoreHotKey: undefined,\r\n      debugTraceHotKey: undefined,\r\n      debugStatemachineHotKey: undefined,\r\n      ShowTaskNavigationBars: false\r\n    };\r\n\r\n    this.headerButtons = [];\r\n    this.courseForNavigator = [];\r\n    this.testsForNavigator = [];\r\n  }\r\n\r\n  /**\r\n   * Run the task player, i.e. make it display the App component.\r\n   */\r\n  runPlayer = () => {\r\n    Utils.printCbaVersion();\r\n    this.apiState = 'notLoggedIn';\r\n    const runtimer = this.runtime;\r\n\r\n    // Use drag&drop technique adapted to screen type of the target device:\r\n    // - use specific touch backend for DnD library to capture touch events\r\n    // - use custom made drag layer for touch backend (html5 backend uses drag layer provided by browser)\r\n    const isTouchDevice = Utils.isTouchDevice()\r\n    const waitingMessageTexts = Utils.getWaitingMessageTexts();\r\n    ReactDOM.render(\r\n      <DndProvider\r\n        backend={isTouchDevice ? TouchBackend : HTML5Backend}\r\n        options={isTouchDevice ? {\r\n          enableMouseEvents: true\r\n        } : {}}\r\n      >\r\n        <App\r\n          runtime={runtimer}\r\n          waitingMessageTexts={waitingMessageTexts}\r\n        />\r\n        <CustomDragLayer runtime={runtimer} />\r\n      </DndProvider>,\r\n      document.getElementById('root')\r\n    );\r\n  }\r\n\r\n  // ------- Initialization ------------------------------------------------------------------------\r\n  sendPlayerReady = () => {\r\n    if (this.checkNotRunning) {\r\n      this.runtime.postMessageReceiver.sendTaskPlayerReadyEvent(this.eventDomainUri, this.eventTargetWindow);\r\n    }\r\n  }\r\n\r\n\r\n  // ------- Configuration Control -----------------------------------------------------------------------\r\n  setWaitMessages = (primary, secondary) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('waitMessages')) {\r\n      this.runtime.app.setWaitingMessageTexts({\r\n        primary,\r\n        secondary\r\n      })\r\n    }\r\n  }\r\n\r\n  addItem = (itemConfig, resourcePath, externalResourcePath, libraryPathsMap) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('addItem')) {\r\n      const itemConfigVersion = itemConfig.runtimeCompatibilityVersion;\r\n      if (TaskPlayer.isCompatibleVersion(itemConfigVersion)) {\r\n        this.runtime.taskManager.addItem(itemConfig, resourcePath, externalResourcePath);\r\n        this.runtime.libraryManager.addLibrariesForItem(itemConfig.dependencies, libraryPathsMap);\r\n      } else {\r\n        console.info(`Ignored item ${itemConfig.name} with incompatible version: ${itemConfigVersion}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearItems = () => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('clearItems')) {\r\n      this.runtime.taskManager.clearItems();\r\n    }\r\n  }\r\n\r\n  setScalingConfiguration = (config) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('scalingConfiguration')) {\r\n      let { scalingMode, alignmentHorizontal, alignmentVertical } = config;\r\n      const scalingModes = ['no-scaling', 'scale-up', 'scale-down', 'scale-up-down'];\r\n      const alignmentHorizontalModes = ['left', 'right', 'center'];\r\n      const alignmentVerticalModes = ['top', 'bottom', 'center'];\r\n\r\n      if (!scalingModes.includes(scalingMode)) {\r\n        console.log(\"scalingConfiguration not correct, scalingMode must be one of: \", scalingModes);\r\n        [scalingMode] = scalingModes\r\n      }\r\n\r\n      if (!alignmentHorizontalModes.includes(alignmentHorizontal)) {\r\n        console.log(\"scalingConfiguration not correct, alignmentHorizontal must be one of: \", alignmentHorizontalModes);\r\n        [alignmentHorizontal] = alignmentHorizontalModes;\r\n      }\r\n\r\n      if (!alignmentVerticalModes.includes(alignmentVertical)) {\r\n        console.log(\"scalingConfiguration not correct, alignmentVertical must be one of: \", alignmentVerticalModes);\r\n        [alignmentVertical] = alignmentVerticalModes;\r\n      }\r\n\r\n      this.runtime.app.setScalingConfig({\r\n        scalingMode, alignmentHorizontal, alignmentVertical\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * We return a Promise that can execute the preload and wait for the results.\r\n   * \r\n   * The caller must trigger the Promise and provide the success/failure handlers.\r\n   * \r\n   * @param {String} itemName \r\n   */\r\n  setPreload = itemName => (\r\n    this.checkNotLoggedInOrNoTaskRunning('setPreload')\r\n      ? this.preloadItemResources(itemName)\r\n      : undefined\r\n  );\r\n\r\n  // ------- Trace Control -----------------------------------------------------------------------\r\n\r\n  insertMessageInTrace = (message) => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('insertMessageInTrace')) {\r\n      TaskPlayer.dumpMessageToTraceLog(message, this.runtime.traceLogBuffer);\r\n    }\r\n  }\r\n\r\n  logStateToTrace = () => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('logStateToTrace')) {\r\n      TraceLogHelper.dumpSnapshotToTrace(this.runtime);\r\n    }\r\n  }\r\n\r\n  flushTrace = () => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('flushTrace')) {\r\n      this.runtime.traceLogUploader.collectEntriesAndTriggerTransmission();\r\n    }\r\n  }\r\n\r\n  setCallbackTraceTransmission = (callback, interval) => {\r\n    if (this.checkNotLoggedIn('setCallbackTraceTransmission')) {\r\n      this.runtime.traceLogUploader.setCallbackTransmissionChannel(callback, interval)\r\n    }\r\n  }\r\n\r\n  setHttpTraceTransmission = (transmitUrl, interval, httpTimeout) => {\r\n    if (this.checkNotLoggedIn('setHttpTraceTransmission')) {\r\n      this.runtime.traceLogUploader.setHttpTransmissionChannel(transmitUrl, interval, httpTimeout);\r\n    }\r\n  }\r\n\r\n  setConsoleTraceTransmission = (interval) => {\r\n    if (this.checkNotLoggedIn('setConsoleTraceTransmission')) {\r\n      this.runtime.traceLogUploader.setConsoleTransmissionChannel(interval);\r\n    }\r\n  }\r\n\r\n  setTraceContextId = (contextId) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setTraceContextId')) {\r\n      const { traceLogUploader, traceLogBuffer } = this.runtime;\r\n      const { username, loginTimestamp } = traceLogUploader.getSessionContext();\r\n      traceLogUploader.setSessionContext(contextId, username, loginTimestamp);\r\n      traceLogBuffer.setTraceContextId(contextId);\r\n    }\r\n  }\r\n\r\n  setTraceContentFilter = (replaySupport, withExtendedMetaData, withoutItemConfiguration, withoutSnapshot, withoutScoring) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setTraceContentFilter')) {\r\n      const { traceLogBuffer } = this.runtime;\r\n      traceLogBuffer.setWithReplaySupport(replaySupport);\r\n      traceLogBuffer.setWithExtendedMetaData(withExtendedMetaData);\r\n      traceLogBuffer.setWithoutItemConfiguration(withoutItemConfiguration);\r\n      traceLogBuffer.setWithoutSnapshot(withoutSnapshot);\r\n      traceLogBuffer.setWithoutScoring(withoutScoring);\r\n    }\r\n  }\r\n\r\n  // ------- Recordings Control -----------------------------------------------------------------------\r\n\r\n  setCallbackRecordingTransmission = (callback) => {\r\n    if (this.checkNotLoggedIn('setCallbackRecordingTransmission')) {\r\n      this.runtime.recordingUploader.setCallbackTransmissionChannel(callback, undefined);\r\n    }\r\n  }\r\n\r\n  setHttpRecordingTransmission = (transmitUrl, httpTimeout) => {\r\n    if (this.checkNotLoggedIn('setHttpRecordingTransmission')) {\r\n      this.runtime.recordingUploader.setHttpTransmissionChannel(transmitUrl, undefined, httpTimeout);\r\n    }\r\n  }\r\n\r\n  setConsoleRecordingTransmission = () => {\r\n    if (this.checkNotLoggedIn('setConsoleRecordingTransmission')) {\r\n      this.runtime.recordingUploader.setConsoleTransmissionChannel(undefined);\r\n    }\r\n  }\r\n\r\n  setRecordingContextId = (contextId) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setRecordingContextId')) {\r\n      const { recordingUploader } = this.runtime;\r\n      const { username, loginTimestamp } = recordingUploader.getSessionContext();\r\n      recordingUploader.setSessionContext(contextId, username, loginTimestamp);\r\n    }\r\n  }\r\n\r\n  // ------- User Control -----------------------------------------------------------------------\r\n  setUserId = (id) => {\r\n    if (this.checkNotLoggedIn('setUserId')) {\r\n      const timestamp = moment().format();\r\n      const { traceLogUploader, recordingUploader, traceLogBuffer } = this.runtime;\r\n      const { sessionId: traceSessionId } = traceLogUploader.getSessionContext();\r\n      traceLogUploader.setSessionContext(traceSessionId, id, timestamp);\r\n      const { sessionId: recordingSessionId } = recordingUploader.getSessionContext();\r\n      recordingUploader.setSessionContext(recordingSessionId, id, timestamp);\r\n      TaskPlayer.dumpLoginToTraceLog(id, timestamp, traceLogBuffer);\r\n      this.apiState = 'noTaskRunning';\r\n    }\r\n  }\r\n\r\n  logout = () => {\r\n    if (this.checkNoTaskRunning('logout')) {\r\n      const { traceLogUploader, componentStateManager } = this.runtime;\r\n\r\n      // Flush all pending trace messages before we drop the user id:\r\n      traceLogUploader.collectEntriesAndTriggerTransmission();\r\n\r\n      const { sessionId } = traceLogUploader.getSessionContext();\r\n      traceLogUploader.setSessionContext(sessionId, undefined, undefined);\r\n      componentStateManager.clear();\r\n      this.apiState = 'notLoggedIn';\r\n    }\r\n  }\r\n\r\n  getUserId = () => (this.apiState === 'notLoggedIn'\r\n    ? undefined\r\n    : this.runtime.traceLogUploader.getSessionContext().username\r\n  );\r\n\r\n  showLogin = (titleLabel, fieldLabel, buttonLabel, fieldValueCallback) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('showLogin')) {\r\n      const { app } = this.runtime;\r\n      app.showLogin(titleLabel, fieldLabel, buttonLabel, fieldValueCallback);\r\n    }\r\n  }\r\n\r\n  // ------- Task Control -----------------------------------------------------------------------\r\n  startTask = (scope, item, task) => {\r\n    if (this.checkNoTaskRunning('startTask')) {\r\n      const { app } = this.runtime;\r\n      app.showTask(scope, item, task, this.settings, this.headerButtons, this.courseForNavigator, this.testsForNavigator);\r\n      this.apiState = 'taskRunning';\r\n    }\r\n  }\r\n\r\n  stopTask = () => {\r\n    if (this.checkTaskRunning('stopTask')) {\r\n      const { app } = this.runtime;\r\n      app.showWaiting();\r\n      this.apiState = 'noTaskRunning';\r\n    }\r\n  }\r\n\r\n  pauseTask = () => {\r\n    if (this.checkTaskRunning('pauseTask')) {\r\n      TaskPlayer.pauseOrResume(true, this.runtime);\r\n    }\r\n  }\r\n\r\n  resumeTask = () => {\r\n    if (this.checkTaskRunning('resumeTask')) {\r\n      TaskPlayer.pauseOrResume(false, this.runtime);\r\n    }\r\n  }\r\n\r\n  getTask = () => {\r\n    if (this.apiState === 'taskRunning') {\r\n      const { taskManager } = this.runtime;\r\n      const { test, item, task } = taskManager.getCurrentTestTaskItemNames();\r\n      return {\r\n        scope: test,\r\n        item,\r\n        task\r\n      }\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  setTaskSequencer = (switchCallback, availabilityCallback) => {\r\n    if (this.checkNoTaskRunning('setTaskSequencer')) {\r\n      const { taskManager } = this.runtime;\r\n      taskManager.setSwitchCallback(switchCallback);\r\n      taskManager.setAvailabilityCallback(availabilityCallback);\r\n    }\r\n  }\r\n\r\n  // ------- Task State Control ----------------------------------------------------------------\r\n\r\n  getTasksState = () => {\r\n    if (this.checkNoTaskRunningOrTaskRunning('getTasksState')) {\r\n      return this.runtime.taskManager.getAllTasksState();\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  clearTasksState = () => {\r\n    if (this.checkNoTaskRunning('clearTasksState')) {\r\n      this.runtime.taskManager.clearTasksState();\r\n    }\r\n  }\r\n\r\n  preloadTasksState = (state) => {\r\n    if (this.checkNoTaskRunning('preloadTasksState')) {\r\n      this.runtime.taskManager.preloadTasksState(state);\r\n      TraceLogHelper.dumpSnapshotToTrace(this.runtime);\r\n    }\r\n  }\r\n\r\n  replay = (story) => {\r\n    if (this.checkNoTaskRunning('replay')) {\r\n      this.apiState = 'taskRunning';\r\n      const replayRunner = new ReplayRunner();\r\n      replayRunner.replay(story, () => {\r\n        this.apiState = this.runtime.taskManager.getCurrentTestTaskItemNames().task === undefined ? 'noTaskRunning' : 'taskRunning';\r\n        // TODO: return a \"finished\" signal to the TaskPlayer client\r\n        console.info(`Replay finished. API state now is ${this.apiState}`);\r\n      },\r\n      this.settings, this.headerButtons, this.courseForNavigator, this.testsForNavigator,\r\n      this.runtime);\r\n    }\r\n  }\r\n\r\n\r\n  // ------- Scoring Control ----------------------------------------------------------------\r\n\r\n  getScoringResult = () => {\r\n    if (this.checkTaskRunning('getScoringResult')) {\r\n      const { taskManager } = this.runtime;\r\n      return taskManager.getCurrentTaskResults();\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  getOldScoringResult = (scope, item, task) => {\r\n    if (this.checkNoTaskRunning('getOldScoringResult')) {\r\n      const { taskManager } = this.runtime;\r\n      return taskManager.getOldTaskResults(task, item, scope);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  // ------- Statemachine Control --------------------------------------------------------------\r\n  sendStatemachineEvent = (event) => {\r\n    if (this.checkTaskRunning('sendStatemachineEvent')) {\r\n      const { statemachinesManager, traceLogBuffer } = this.runtime;\r\n      TaskPlayer.dumpStatemachineEventToTraceLog(event, traceLogBuffer);\r\n      statemachinesManager.triggerEvent(event);\r\n    }\r\n  }\r\n\r\n\r\n  // ------- Header Control --------------------------------------------------------------------\r\n  setHeaderButtons = (headerButtons) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setHeaderButtons')) {\r\n      this.headerButtons = headerButtons;\r\n    }\r\n  }\r\n\r\n  setMenuCarousels = (course, scopes) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('setMenuCarousels')) {\r\n      this.settings.ShowTaskNavigationBars = course.length > 0;\r\n      this.courseForNavigator = course;\r\n      this.testsForNavigator = scopes.map(scope => ({\r\n        name: scope.name,\r\n        taskCourse: scope.tasks\r\n      }));\r\n    }\r\n  }\r\n\r\n  // ------- Developer Mode Control ------------------------------------------------------------\r\n  activateDebuggingWindows = (score, trace, statemachine) => {\r\n    if (this.checkNotLoggedInOrNoTaskRunning('activateDebuggingWindows')) {\r\n      this.settings.debugScoreHotKey = TaskPlayer.normalizeHotKeySpecification(score, 'scoring');\r\n      this.settings.debugTraceHotKey = TaskPlayer.normalizeHotKeySpecification(trace, 'trace');\r\n      this.settings.debugStatemachineHotKey = TaskPlayer.normalizeHotKeySpecification(statemachine, 'state machine');\r\n    }\r\n  }\r\n\r\n  // ---------- private stuff ------------------------------------------------------------------\r\n\r\n\r\n  static buildRuntime() {\r\n    const traceLogBuffer = new TraceLogBuffer();\r\n    const recordingBuffer = new RecordingBuffer();\r\n    const result = {\r\n      componentStateManager: new ComponentStateManager(),\r\n      componentDirectory: new ComponentDirectory(),\r\n      incidentsAccumulator: new IncidentsAccumulator(),\r\n      taskResultsManager: new TaskResultsManager(),\r\n      statemachinesManager: new StatemachinesManager(),\r\n      presenterStateManager: new PresenterStateManager(),\r\n      taskNavigatorStateManager: new TaskNavigatorStateManager(),\r\n      traceLogBuffer,\r\n      traceLogUploader: new TraceLogUploader(traceLogBuffer),\r\n      recordingBuffer,\r\n      recordingUploader: new RecordingUploader(recordingBuffer),\r\n      eventEmitter: new EventEmitter(),\r\n      clipboardManager: new ClipboardManager(traceLogBuffer),\r\n      postMessageReceiver: new PostMessageReceiver(),\r\n      calculatorsManager: new CalculatorsManager(),\r\n      actionRegister: new ActionRegister(),\r\n      focusRegister: new FocusRegister(),\r\n      libraryManager: new LibraryManager(),\r\n      variableManager: new VariableManager(),\r\n      replayStepMonitor: new ReplayStepMonitor()\r\n    }\r\n    result.recommendationsManager = new RecommendationsManager(result);\r\n    result.taskManager = new TaskManager(result);\r\n\r\n    return result;\r\n  }\r\n\r\n  checkNotRunning = action => this.checkApiState(['appNotRunning'], action);\r\n\r\n  checkNotLoggedIn = action => this.checkApiState(['notLoggedIn'], action);\r\n\r\n  checkNoTaskRunning = action => this.checkApiState(['noTaskRunning'], action);\r\n\r\n  checkTaskRunning = action => this.checkApiState(['taskRunning'], action);\r\n\r\n  checkNotLoggedInOrNoTaskRunning = action => this.checkApiState(['notLoggedIn', 'noTaskRunning'], action);\r\n\r\n  checkNoTaskRunningOrTaskRunning = action => this.checkApiState(['noTaskRunning', 'taskRunning'], action);\r\n\r\n  checkApiState = (acceptedList, action) => {\r\n    const result = acceptedList.includes(this.apiState);\r\n    if (!result) {\r\n      console.info(`TaskPlayer API call ${action} denied in state ${this.apiState}`);\r\n    }\r\n    return result\r\n  }\r\n\r\n  static normalizeHotKeySpecification(hotKeySpecification, windowNameForErrorMessage) {\r\n    if (hotKeySpecification === undefined || hotKeySpecification === \"\") {\r\n      return undefined;\r\n    }\r\n    const withoutCtrl = hotKeySpecification.startsWith('ctrl+') ? hotKeySpecification.substring(5) : hotKeySpecification;\r\n    const withoutShift = withoutCtrl.startsWith('shift+') ? withoutCtrl.substring(6) : withoutCtrl;\r\n    if (withoutShift.length !== 1) {\r\n      console.error(`Invalid hot key for ${windowNameForErrorMessage} debugging window ignored: ${hotKeySpecification}`);\r\n      return undefined;\r\n    }\r\n    return hotKeySpecification;\r\n  }\r\n\r\n\r\n  /**\r\n   * Dump the login configuration to the trace log.\r\n   * \r\n   * @param {*} login The data obtained in login phase.\r\n   * @param {*} traceLogBuffer The trace log buffer to dump to.\r\n   */\r\n  static dumpLoginToTraceLog(username, timestamp, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('UserLogin', new Date(), {\r\n      user: username,\r\n      loginTimestamp: timestamp,\r\n      runtimeVersion: Utils.getCbaVersion(),\r\n      webClientUserAgent: window.navigator.userAgent\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Write a message from the runtime controller to the trace log buffer.\r\n   * \r\n   * @param {*} message The message to be written to the trace log\r\n   * @param {*} traceLogBuffer The trace log buffer to write to.\r\n   */\r\n  static dumpMessageToTraceLog(message, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('RuntimeController', new Date(), {\r\n      actionType: 'insertMessageInTrace',\r\n      details: message\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Write a statemachine event to the trace log buffer.\r\n   * \r\n   * @param {*} event The statemachine event to write to the trace log.\r\n   * @param {*} traceLogBuffer The trace log buffer to write to\r\n   */\r\n  static dumpStatemachineEventToTraceLog(event, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('RuntimeController', new Date(), {\r\n      actionType: 'sendStatemachineEvent',\r\n      details: event\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Write a pause/resume event to the trace log buffer.\r\n   * \r\n   * @param {boolean} enter Do we enter or leave the paused state?\r\n   * @param {*} traceLogBuffer The trace log buffer to write to.\r\n   */\r\n  static dumpPauseResumeToTraceLog(enter, traceLogBuffer) {\r\n    traceLogBuffer.reportEvent('PauseResume', new Date(), {\r\n      type: enter === true ? 'pause' : 'resume',\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Check that the given version number is compatible with our internal version.\r\n   */\r\n  static isCompatibleVersion(versionNumber) {\r\n    return versionNumber === Utils.getCbaVersionNumber();\r\n  }\r\n\r\n  /**\r\n   * Pause or resume the currently running task.\r\n   * \r\n   * @param {boolean} enterPause Should we pause (or resume)?\r\n   * @param {*} runtime The common runtime context structure. \r\n   */\r\n  static pauseOrResume(enterPause, runtime) {\r\n    const { testPresenter, traceLogBuffer, incidentsAccumulator, statemachinesManager, taskManager } = runtime;\r\n    TaskPlayer.dumpPauseResumeToTraceLog(enterPause, traceLogBuffer);\r\n    if (testPresenter !== null) {\r\n      if (enterPause) {\r\n        testPresenter.pause();\r\n      } else {\r\n        testPresenter.resume();\r\n      }\r\n    }\r\n    const atTime = new Date().getTime();\r\n    if (enterPause) {\r\n      incidentsAccumulator.pauseTask(atTime);\r\n      statemachinesManager.pauseCurrentStatemachine();\r\n    } else {\r\n      incidentsAccumulator.resumeTask(atTime);\r\n      statemachinesManager.resumeCurrentStatemachine();\r\n    }\r\n\r\n    // handle custom pausing for components that implement a \"handleTaskPauseOrResume\" method\r\n    const { standardPage, xPage } = taskManager.getCurrentPageNames();\r\n\r\n    [\r\n      ...runtime.componentDirectory.findComponentsByPageName(standardPage),\r\n      ...runtime.componentDirectory.findComponentsByPageName(xPage)\r\n    ].forEach((component) => {\r\n      if (component.handleTaskPauseOrResume) {\r\n        component.handleTaskPauseOrResume(enterPause);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {String} itemName Name of the item \r\n   * @param {Object} config Configuration object\r\n   * @param {Boolean} config.image \r\n   * @param {Boolean} config.video \r\n   * @param {Boolean} config.audio\r\n   *  \r\n   * @returns {Promise} Promise object that completes when all resources are preloaded. Of the form [ [images], [videos], [audios] ]\r\n   */\r\n  preloadItemResources = (itemName, config = {}) => new Promise((resolve, reject) => {\r\n    console.log(\"Starting preload for item\", itemName);\r\n\r\n    const defaultConfig = {\r\n      image: true,\r\n      video: true,\r\n      audio: true\r\n    }\r\n    const invalidConfigError = \"Wrong config? If no preload is required, a call to this function is not required.\";\r\n    const invalidItemError = \"No resources to preload\";\r\n\r\n    config = Object.assign(defaultConfig, config);\r\n\r\n    if (!config.image && !config.video && !config.audio) {\r\n      return reject(invalidConfigError);\r\n    }\r\n\r\n    const resources = this.runtime.taskManager.getItemResources(itemName);\r\n\r\n    if (!resources || resources.length === 0) {\r\n      return reject(invalidItemError);\r\n    }\r\n    const imageType = \"image\";\r\n    const videoType = \"video\";\r\n    const audioType = \"audio\";\r\n\r\n    let imagesPromise;\r\n    let videoPromise;\r\n    let audioPromise;\r\n\r\n    if (config.image) {\r\n      const assets = resources.filter(res => res.type === imageType);\r\n      imagesPromise = ServerCalls.preloadResources(assets, imageType);\r\n    }\r\n\r\n    if (config.video) {\r\n      const assets = resources.filter(res => res.type === videoType);\r\n      videoPromise = ServerCalls.preloadResources(assets, videoType);\r\n    }\r\n\r\n    if (config.audio) {\r\n      const assets = resources.filter(res => res.type === audioType);\r\n      audioPromise = ServerCalls.preloadResources(assets, audioType);\r\n    }\r\n\r\n    return resolve(Promise.all([imagesPromise, videoPromise, audioPromise]))\r\n  });\r\n\r\n\r\n}\r\n","import Controller from './controller/Controller';\nimport TaskPlayer from './preamble/TaskPlayer';\nimport Utils from './utils/Utils';\n\n\n/**\n * Determine whether we should use the internal controller to control the task player\n * or wait for an extenral controller to take over.\n * \n * The method checks settings given via the cba_runtime_config attribute\n * of the global window. \n */\nfunction shouldActivateInternalController() {\n  const controllerMode = Utils.getControllerMode();\n  const useExternalController = controllerMode === 'external-controller';\n  if (useExternalController) {\n    console.log('Wait for external controller to take over...');\n  }\n  return !useExternalController;\n}\n\n/**\n * Start the task player and send the ready signal.\n */\nfunction startTaskPlayer(taskPlayer) {\n  taskPlayer.sendPlayerReady();\n  taskPlayer.runPlayer();\n}\n\n/**\n * Start up the CBA runtime.\n */\nfunction startUp() {\n  const eventReceiverConfiguration = Utils.getEventReceiverConfiguration();\n  const taskPlayer = new TaskPlayer(eventReceiverConfiguration.eventTargetWindow, eventReceiverConfiguration.eventDomainUri);\n  if (shouldActivateInternalController()) {\n    // Activate the internal controller which will control the task player.\n    const internalController = new Controller();\n    internalController.runController(taskPlayer);\n  } else if (eventReceiverConfiguration.startTaskPlayerEvent) {\n    // Wait for the configured 'start' event and start the task player once the event arrives.\n    // The task player will wait for commands from an external controller.\n    window.addEventListener(eventReceiverConfiguration.startTaskPlayerEvent, (startEvent) => {\n      startTaskPlayer(taskPlayer);\n    });\n  } else {\n    // Start the task player immediately. The task player will wait for commands from an external controller.\n    startTaskPlayer(taskPlayer);\n  }\n}\n\nstartUp();\n"],"sourceRoot":""}
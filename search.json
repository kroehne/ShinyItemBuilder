[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ShinyItemBuilder authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/access.html","id":"anonymous-access","dir":"Articles","previous_headings":"The Start of an Assessment","what":"Anonymous Access","title":"Use Custom `end`- and `login` - Functions to Controll Access","text":"default, ShinyItemBuilder configured give access anyone knows URL.","code":"library(ShinyItemBuilder)  item_pool <- getDemoPool(\"demo01\") assessment_config <- getConfig() shinyApp(assessmentOutput(pool = item_pool, config = assessment_config,overwrite=T),          renderAssessment)"},{"path":"/articles/access.html","id":"login-dialog","dir":"Articles","previous_headings":"The Start of an Assessment","what":"Login Dialog","title":"Use Custom `end`- and `login` - Functions to Controll Access","text":"Using option sessiontype=\"provided\", behavior can changed.","code":"library(ShinyItemBuilder)  item_pool <- getDemoPool(\"demo01\") assessment_config <- getConfig(sessiontype=\"provided\")  assessment_config$login=function(session){   showModal(modalDialog(     tags$h2('Login'),     tags$div('Please enter a valid token and press \"OK\".'),     textInput('queryStringParameter', ''),     footer=tagList(       actionButton('submitLoginOK', 'OK')     )   )) }  assessment_config$custom_list_accounts <- sprintf(\"%03d\", 0:99)  assessment_config$validate=function(token_or_login=NULL, password=NULL, config){   if (is.null(token_or_login)||length(token_or_login)==0)   {     return (FALSE)   }   else {     if (!is.na(match(token_or_login,config$custom_list_accounts))){       return (TRUE)     }   }   FALSE }     shinyApp(assessmentOutput(pool = item_pool, config = assessment_config,overwrite=T),          renderAssessment)"},{"path":[]},{"path":"/articles/access.html","id":"multiple-runs","dir":"Articles","previous_headings":"The End of an Assessment","what":"Multiple Runs","title":"Use Custom `end`- and `login` - Functions to Controll Access","text":"allow multiple runs, end-function needs contain actionButton name endActionButtonOK:","code":"assessment_config$end=function(session){     showModal(modalDialog(       title = \"You Answered all Items\",       \"Please close the browser / tab or click 'Restart'.\",       footer = tagList(actionButton(\"endActionButtonOK\", \"Restart\"))))   }"},{"path":"/articles/access.html","id":"single-runs-end-page","dir":"Articles","previous_headings":"The End of an Assessment","what":"Single Runs (End-Page)","title":"Use Custom `end`- and `login` - Functions to Controll Access","text":"end-function contain actionButton name endActionButtonOK, test-taker can restart assessment, long session stored browser.","code":"assessment_config$end=function(session){     showModal(modalDialog(       title = \"You Answered all Items\",       \"Please close the browser / tab.\",       footer = tagList()))   }"},{"path":"/articles/access.html","id":"single-runs-redirect","dir":"Articles","previous_headings":"The End of an Assessment","what":"Single Runs (Redirect)","title":"Use Custom `end`- and `login` - Functions to Controll Access","text":"","code":"assessment_config$end=function(session){   session$sendCustomMessage(\"shinyassess_redirect\",        \"https://URL-TO-REDIRECT.SOMEWERE/?QUERYSTRING\") }"},{"path":"/articles/cat_with_catR.html","id":"prepare-itempool","dir":"Articles","previous_headings":"","what":"Prepare ItemPool","title":"Use `catR`-Package for Adaptive Testing","text":"adaptive testing, item parameters required. demonstration purposes use random item parameters provided example. Note item bank (.e., IRT item parameters) stored configuration assessment_config$bank.","code":"library(openxlsx)  # read item parameter from excel file  assessment_config$itemPoolDescription <- read.xlsx(   file.path(system.file(\"static\", package = \"ShinyItemBuilder\"), \"IBProjects/demo03/pool.xlsx\"))  it.parameters <- assessment_config$itemPoolDescription[,c(\"A\",\"B\",\"C\",\"D\")] it.parameters <- it.parameters[1:20,]  # Currently only 20 Tasks are defined in 'ImageCat.zip'  assessment_config$bank <- it.parameters"},{"path":"/articles/cat_with_catR.html","id":"define-termination-criterion","dir":"Articles","previous_headings":"","what":"Define Termination Criterion","title":"Use `catR`-Package for Adaptive Testing","text":"example use package catR. package expects list defines stop criteria (see ?catR::checkStopRule details).","code":"library(catR)  assessment_config$stop <- list(rule = c(\"length\", \"precision\"), thr = c(10, 0.1))"},{"path":"/articles/cat_with_catR.html","id":"define-scoring","dir":"Articles","previous_headings":"","what":"Define Scoring","title":"Use `catR`-Package for Adaptive Testing","text":"CBA ItemBuilder tasks used example adaptive testing created following way. item implemented separate task. task contains one class ScoredResponse hit-names Item{ItemNumber}Correct, Item{ItemNumber}Wrong Item{ItemNumber}Missing. adaptive testing dichotomous IRT models, need response variable \\(1\\) (solved) \\(0\\) (solved). Hence, define custom score function assigns value \\(1\\) variable solved_current_item (active) hit name contains word Correct: Note function score also used store history selected items scores.","code":"assessment_config$score=function(pool, session, score, current_item){    # Score response    solved_current_item <- ifelse(length(grep(\"Correct\",score[score$Active,1]))>0,1,0)    # Store score and item in history    history_items  <- getValueForTestTaker(session, \"history-items\",default=list(), store = F)   setValueForTestTaker(session, \"history-items\", append(history_items, current_item))    history_scores  <- getValueForTestTaker(session, \"history-scores\",default=list(), store = F)   setValueForTestTaker(session, \"history-scores\", append(history_scores, solved_current_item))  }"},{"path":"/articles/cat_with_catR.html","id":"adaptive-algorithm","dir":"Articles","previous_headings":"","what":"Adaptive Algorithm","title":"Use `catR`-Package for Adaptive Testing","text":"adaptive algorithm entirely implemented navigation-function provided ShinyItemBuilder part configuration. first part function, history loaded. current_item==0 (.e., navigation called first time), first item selected using function nextItem() catR-package (see ?nextItem details). function navigation called test (.e., already responses observed), functions thetaEst() semTheta() catR-package used estimate ability corresponding standard error. later use, estimated parameters stored history. Finally, function checkStopRule() used check termination criteria. none criteria reached, function nextItem() used select next item.","code":"assessment_config$navigation = function(pool, session, direction=\"NEXT\"){    # Load history      current_item <- getValueForTestTaker(session, \"current-item-in-pool\", default=1, store = F)   history_items  <- as.numeric(unlist(getValueForTestTaker(session, \"history-items\",default=list(), store = F)))   history_scores  <- as.numeric(unlist(getValueForTestTaker(session, \"history-scores\",default=list(), store = F)))    if ((current_item==0  && direction==\"START\")||       (length(history_items) ==0)){      # Select first item      res <- nextItem(assessment_config$bank, theta=0, randomesque = 5, random.seed=1)     current_item <- as.numeric(res$name)      if (assessment_config$verbose)       print(paste0(\"Selected first item: \", current_item))   }   else   {     if (direction==\"NEXT\"){        # Estimate theta        th <- thetaEst(rbind(assessment_config$bank[history_items,]), history_scores, method = \"WL\")       se <- semTheta(th, rbind(assessment_config$bank[history_items,]), history_scores, method = \"ML\")        # Store history        history_th  <- getValueForTestTaker(session, \"history-theta\",default=list(), store = F)       setValueForTestTaker(session, \"history-theta\", append(history_th, th))       history_se  <- getValueForTestTaker(session, \"history-se\",default=list(), store = F)       setValueForTestTaker(session, \"history-se\", append(history_se, se))        if (assessment_config$verbose)         print(paste0(\"Updated interrim estimate: theta = \", round(th,3), \" (se = \", round(se,3), \")\"))        # Check test termination        check <- checkStopRule(th = th, se = se, N = length(history_items),                              stop = assessment_config$stop)        if (check$decision)       {         current_item <- -1 # end the assessment       }       else       {         if (assessment_config$verbose)           print(paste0(\"Items excluded for item selection: \", paste0(history_items, collapse = \";\")))          # Select next item          res <- nextItem(assessment_config$bank, theta=th, out = history_items)         current_item <- as.numeric(res$name)          if (assessment_config$verbose)           print(paste0(\"Selected item for step \", length(history_items)+1, \": \", current_item))       }     }     else if (direction==\"PREVIOUS\"){       # ignore     }     else if (direction==\"CANCEL\"){       current_item <- -2 # pause the assessment     }   }    setValueForTestTaker(session, \"current-item-in-pool\",current_item)    current_item }"},{"path":"/articles/cat_with_catR.html","id":"show-cat-results","dir":"Articles","previous_headings":"","what":"Show CAT Results","title":"Use `catR`-Package for Adaptive Testing","text":"show results adaptive test, following end function can used show plot administered items, theta-history final ability estimate.","code":"assessment_config$end <- function(session) {    data <- runtime.data[[session$userData$cbasession]]   a <- NULL   for (d in 1:dim(data$ResultData)[1]){     s <- parse_ib_scoring(data$ResultData[d,\"Resultdata\"])     a <- rbind(a,cbind(Project=data$ResultData[d,\"Project\"],                        Task=data$ResultData[d,\"Task\"],                        Scope=data$ResultData[d,\"Scope\"],                        s[s$Active,c(\"Name\",\"ResultText\")]))   }    history_items  <- as.numeric(unlist(getValueForTestTaker(session, \"history-items\",default=list(), store = F)))   history_scores  <- as.numeric(unlist(getValueForTestTaker(session, \"history-scores\",default=list(), store = F)))   history_th  <- as.numeric(unlist(getValueForTestTaker(session, \"history-theta\",default=list(), store = F)))   history_se  <- as.numeric(unlist(getValueForTestTaker(session, \"history-se\",default=list(), store = F)))    template <- '---     output: html_document     ---          ``` {r, echo=F}     history_b <- assessment_config$bank[history_items,\"B\"]     plot(c(1,length(history_items)+1),c(-4,4),type=\"n\",bty=\"n\",xlab=\"Step (Test length)\",ylab=\"Theta\",          main=paste0(\"Estimated Ability: \", round(history_th[length(history_th)],2), \" (SE \", round(history_se[length(history_se)],2), \")\"))     arrows(x0=1:length(history_items), y0=history_th-history_se, x1=1:length(history_items), y1=history_th+history_se,            code=3, angle=90, length=0.05, col=\"gray\")     points(1:length(history_items), history_th,type=\"l\")     points(1:length(history_items), history_b,type=\"p\", pch=history_scores+1)     legend(\"topleft\",inset=0.1,pch=c(1,2),c(\"not solved\",\"solved\"),bty=\"n\")      ``` '  write(template, file=paste0(session$userData$cbasession,\".rmd\"), append = FALSE)    tmpfile <- rmarkdown::render(paste0(session$userData$cbasession,\".rmd\"))   b64 <- base64enc::dataURI(file = tmpfile, mime = \"text/html\")    if (file.exists(tmpfile))     file.remove(tmpfile)    if (file.exists(paste0(session$userData$cbasession,\".rmd\")))     file.remove(paste0(session$userData$cbasession,\".rmd\"))    showModal(modalDialog(     title = \"Feedback\",     footer = tagList(actionButton(\"endActionButtonOK\", \"Restart\")),     renderUI({       tags$iframe(src=b64, height=400, width=550, frameBorder=0)     }),   ), session) }"},{"path":"/articles/cat_with_catR.html","id":"start-the-test","dir":"Articles","previous_headings":"","what":"Start the Test","title":"Use `catR`-Package for Adaptive Testing","text":"defining item_pool assessment_config, Shiny app started using following call:","code":"shinyApp(assessmentOutput(pool = item_pool,                           config = assessment_config,overwrite=T),          renderAssessment)"},{"path":"/articles/cat_with_catR.html","id":"about-the-example-test","dir":"Articles","previous_headings":"","what":"About the Example Test","title":"Use `catR`-Package for Adaptive Testing","text":"example item ImageCAT.zip contains images following resource: Jungjohann, J., Lutz, S., Barwasser, ., & Gebhardt, M. (2021). Bildkarten für Unterricht und Förderung. https://epub.uni-regensburg.de/49355/1/2021_Jungjohann%20et%20al_Bildkarten_fuer_Unterricht_Foerderung.pdf","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ulf Kroehne. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kroehne U, Wagner F (2023). ShinyItemBuilder: Computer-Based Assessments using CBA ItemBuilder R/Shiny. R package version 0.2.0.","code":"@Manual{,   title = {ShinyItemBuilder: Computer-Based Assessments using CBA ItemBuilder and R/Shiny},   author = {Ulf Kroehne and Felix Wagner},   year = {2023},   note = {R package version 0.2.0}, }"},{"path":"/index.html","id":"shinyitembuilder--use-shiny-with-cba-itembuilder-items","dir":"","previous_headings":"","what":"Computer-Based Assessments using CBA ItemBuilder and R/Shiny","title":"Computer-Based Assessments using CBA ItemBuilder and R/Shiny","text":"R project ShinyItemBuilder can used implement computer-based assessments using CBA ItemBuilder R/Shiny. CBA ItemBuilder authoring tool designing implementing simple complex items computer-based assessments (CBA) can used without particular knowledge specific programming language (, instance, JavaScript). R/Shiny technology create web applications using R. Packages functions R can executed server side. R/Shiny requires special Shiny servers, account ShinyApps.io prepared server using, instance, ShinyProxy Shiny Server. R/Shiny application can also run locally directly R. Demo: Install packages shiny, remotes, knitr ShinyItemBuilder executing following lines R: installation Run following code R demo01 don’t see item, try use option “Run External”: demo02 use CBA ItemBuilder-project files, create R-Studio project, copy CBA ItemBuilder project files folder items run following code R: Multiple assessment components (items, instruction pages, etc.) can used individual CBA ItemBuilder Project Files (Tasks). order can customized R-object item_pool, separate function navigate tasks provided part assessment_config configuration. software currently proof--concept. Find information CBA ItemBuilder cba.itembuilder.de. see provided vignettes run R (open view online):","code":"install.packages(\"remotes\") install.packages(\"shiny\") install.packages(\"knitr\") remotes::install_github(\"kroehne/ShinyItemBuilder\", build_vignettes = TRUE) # app.R  library(shiny)  library(ShinyItemBuilder)  item_pool <- getDemoPool(\"demo01\") assessment_config <- getConfig()   shinyApp(assessmentOutput(pool = item_pool,                           config = assessment_config,                           overwrite=T),           renderAssessment) # app.R  library(shiny)  library(ShinyItemBuilder)  item_pool <- getPool(path=\"items/\") assessment_config <- getConfig()   shinyApp(assessmentOutput(pool = item_pool,                           config = assessment_config,                           overwrite=T),           renderAssessment) browseVignettes(package=\"ShinyItemBuilder\")"},{"path":"/reference/assessmentOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create assessment output — assessmentOutput","title":"Create assessment output — assessmentOutput","text":"Function passed argument 'shinyApp(ui=...)'","code":""},{"path":"/reference/assessmentOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create assessment output — assessmentOutput","text":"","code":"assessmentOutput(pool = NULL, config = NULL, overwrite = F)"},{"path":"/reference/assessmentOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create assessment output — assessmentOutput","text":"pool Pool config Config overwrite T/F","code":""},{"path":"/reference/assessmentOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create assessment output — assessmentOutput","text":"code used argument function 'shinyApp(ui=...)'","code":""},{"path":"/reference/assessmentOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create assessment output — assessmentOutput","text":"","code":"if (FALSE) { shinyApp(assessmentOutput(pool = getDemoPool(\"demo01\"),    config = getConfig(), overwrite=T), renderAssessment) }"},{"path":"/reference/getConfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Get configuration object — getConfig","title":"Get configuration object — getConfig","text":"`getConfig` returns config object required use ShinyItemBuilder.","code":""},{"path":"/reference/getConfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get configuration object — getConfig","text":"","code":"getConfig(   WindowTitle = \"MyAssessment\",   Verbose = FALSE,   WWWfolder = \"_mywww\",   Datafolder = \"_mydata\",   posH = \"center\",   posV = \"center\",   scaling = \"scale-up-down\",   sessiontype = \"sessionstorage\",   maintenancePassword = \"\",   maintenanceQuery = \"maintenance\",   maintenanceKey = list(key = \"x\", ctrl = T, shift = F, alt = F),   clearPreviousTaskState = TRUE )"},{"path":"/reference/getConfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get configuration object — getConfig","text":"WindowTitle Title html browser window. Verbose package provide log information console? WWWfolder Folder store html/javascript files required run assessment Datafolder Folder store data files started/completed assessments posH Horizontal orientation (one 'left', 'right' 'center') posV Vertical orientation (one 'top', 'bottom' 'center') scaling Scaling content (one 'scale-', 'scale-', 'scale--' '-scaling') sessiontype Session storage (one 'sessionstorage', 'cookie', 'localstorage' 'provided' ) maintenancePassword Password access data online (access possible defined). maintenanceQuery Query string parameter name access data online. maintenanceKey Keyboard shortcut access maintenance dialog (provide list following form: `list(key=\"X\", ctrl=T, shift=F, alt=F)`) clearPreviousTaskState test allow backward navigation, let Itembuilder's runtime flush previous task states navigating forward","code":""},{"path":"/reference/getConfig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get configuration object — getConfig","text":"config object (list)","code":""},{"path":"/reference/getConfig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get configuration object — getConfig","text":"returned object list contains different configurations  assessment using ShinyItemBuilder.","code":""},{"path":"/reference/getConfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get configuration object — getConfig","text":"","code":"if (FALSE) {  conf <- getConfig() }"},{"path":"/reference/getDemoPool.html","id":null,"dir":"Reference","previous_headings":"","what":"Get example item pool — getDemoPool","title":"Get example item pool — getDemoPool","text":"Get example item pool demonstration purposes using items included ShinyItemBuilder package demonstration purposes","code":""},{"path":"/reference/getDemoPool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get example item pool — getDemoPool","text":"","code":"getDemoPool(name = \"demo01\")"},{"path":"/reference/getDemoPool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get example item pool — getDemoPool","text":"name Name example item pool (currently: \"demo01\").","code":""},{"path":"/reference/getDemoPool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get example item pool — getDemoPool","text":"config object (list)","code":""},{"path":"/reference/getDemoPool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get example item pool — getDemoPool","text":"","code":"# default pool <- getDemoPool(\"demo01\")"},{"path":"/reference/getPool.html","id":null,"dir":"Reference","previous_headings":"","what":"Get item pool — getPool","title":"Get item pool — getPool","text":"Get item pool assessment ShinyItemBuilder","code":""},{"path":"/reference/getPool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get item pool — getPool","text":"","code":"getPool(path = NULL, files = NULL, tasks = NULL, scope = NULL)"},{"path":"/reference/getPool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get item pool — getPool","text":"path Path folder CBA ItemBuilder project files. files List files (.e., path file names) CBA ItemBuilder project files. tasks List tasks (need length files). scope Scope (either single string list length files / tasks).","code":""},{"path":"/reference/getPool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get item pool — getPool","text":"config object (list)","code":""},{"path":"/reference/getPool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get item pool — getPool","text":"","code":"# default pool <- getPool(path=\"../\")"},{"path":"/reference/getValueForTestTaker.html","id":null,"dir":"Reference","previous_headings":"","what":"Get (i.e., load / retrieve) a value for a particular test-taker — getValueForTestTaker","title":"Get (i.e., load / retrieve) a value for a particular test-taker — getValueForTestTaker","text":"`getValueForTestTaker` can used custom navigation              function load data current session.","code":""},{"path":"/reference/getValueForTestTaker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get (i.e., load / retrieve) a value for a particular test-taker — getValueForTestTaker","text":"","code":"getValueForTestTaker(session, name, default = NULL, store = T)"},{"path":"/reference/getValueForTestTaker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get (i.e., load / retrieve) a value for a particular test-taker — getValueForTestTaker","text":"session shiny session object. name Name value. default Default value. store value stored, default used?","code":""},{"path":"/reference/getValueForTestTaker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get (i.e., load / retrieve) a value for a particular test-taker — getValueForTestTaker","text":"value (present) current test-taker (default value)","code":""},{"path":"/reference/getValueForTestTaker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get (i.e., load / retrieve) a value for a particular test-taker — getValueForTestTaker","text":"","code":"if (FALSE) {   value <- getValueForTestTaker(session, \"current-item\") }"},{"path":"/reference/parse_ib_scoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse CBA ItemBuilder Scoring JSON — parse_ib_scoring","title":"Parse CBA ItemBuilder Scoring JSON — parse_ib_scoring","text":"`parse_ib_scoring` converts JSON data.frame","code":""},{"path":"/reference/parse_ib_scoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse CBA ItemBuilder Scoring JSON — parse_ib_scoring","text":"","code":"parse_ib_scoring(scoringjson)"},{"path":"/reference/parse_ib_scoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse CBA ItemBuilder Scoring JSON — parse_ib_scoring","text":"scoringjson Scoring JSON provided CBA ItemBuilder runtime.","code":""},{"path":"/reference/parse_ib_scoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse CBA ItemBuilder Scoring JSON — parse_ib_scoring","text":"data frame hits result texts","code":""},{"path":"/reference/parse_ib_scoring.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse CBA ItemBuilder Scoring JSON — parse_ib_scoring","text":"returned object returns data.frame containing scoring provided JSON.","code":""},{"path":"/reference/parse_ib_scoring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse CBA ItemBuilder Scoring JSON — parse_ib_scoring","text":"","code":"if (FALSE) {  demo <- parse_ib_scoring(json) }"},{"path":"/reference/parse_ib_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse CBA ItemBuilder Trace JSON — parse_ib_trace","title":"Parse CBA ItemBuilder Trace JSON — parse_ib_trace","text":"`parse_ib_trace` converts JSON data.frame","code":""},{"path":"/reference/parse_ib_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse CBA ItemBuilder Trace JSON — parse_ib_trace","text":"","code":"parse_ib_trace(tracejson)"},{"path":"/reference/parse_ib_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse CBA ItemBuilder Trace JSON — parse_ib_trace","text":"tracejson Trace JSON provided CBA ItemBuilder runtime.","code":""},{"path":"/reference/parse_ib_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse CBA ItemBuilder Trace JSON — parse_ib_trace","text":"data frame hits result texts","code":""},{"path":"/reference/parse_ib_trace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse CBA ItemBuilder Trace JSON — parse_ib_trace","text":"returned object returns data.frame containing trace data provided JSON.","code":""},{"path":"/reference/parse_ib_trace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse CBA ItemBuilder Trace JSON — parse_ib_trace","text":"","code":"if (FALSE) {  demo <- parse_ib_trace(json) }"},{"path":"/reference/renderAssessment.html","id":null,"dir":"Reference","previous_headings":"","what":"Render assessment content — renderAssessment","title":"Render assessment content — renderAssessment","text":"Function passed argument 'shinyApp(server=...)'","code":""},{"path":"/reference/renderAssessment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render assessment content — renderAssessment","text":"","code":"renderAssessment(input, output, session)"},{"path":"/reference/renderAssessment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render assessment content — renderAssessment","text":"input Input. output Output session Session.","code":""},{"path":"/reference/renderAssessment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render assessment content — renderAssessment","text":"code used argument function 'shinyApp(server=...)'","code":""},{"path":"/reference/renderAssessment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render assessment content — renderAssessment","text":"","code":"if (FALSE) { shinyApp(assessmentOutput(pool = getDemoPool(\"demo01\"),      config = getConfig(), overwrite=T),      renderAssessment) }"},{"path":"/reference/setValueForTestTaker.html","id":null,"dir":"Reference","previous_headings":"","what":"Set (i.e., save, store) a value for a particular test-taker — setValueForTestTaker","title":"Set (i.e., save, store) a value for a particular test-taker — setValueForTestTaker","text":"`getValueForTestTaker` can used custom navigation              function store data current session.","code":""},{"path":"/reference/setValueForTestTaker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set (i.e., save, store) a value for a particular test-taker — setValueForTestTaker","text":"","code":"setValueForTestTaker(session, name, value)"},{"path":"/reference/setValueForTestTaker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set (i.e., save, store) a value for a particular test-taker — setValueForTestTaker","text":"session shiny session object. name Name value. value Value store.","code":""},{"path":"/reference/setValueForTestTaker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set (i.e., save, store) a value for a particular test-taker — setValueForTestTaker","text":"value (present) current test-taker (default value)","code":""},{"path":"/reference/setValueForTestTaker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set (i.e., save, store) a value for a particular test-taker — setValueForTestTaker","text":"","code":"if (FALSE) {   setValueForTestTaker(session, \"current-item\",1) }"},{"path":"/news/index.html","id":"shinyitembuilder-020","dir":"Changelog","previous_headings":"","what":"ShinyItemBuilder 0.2.0","title":"ShinyItemBuilder 0.2.0","text":"Update CBA ItemBuilder 10.0","code":""},{"path":"/news/index.html","id":"shinyitembuilder-010","dir":"Changelog","previous_headings":"","what":"ShinyItemBuilder 0.1.0","title":"ShinyItemBuilder 0.1.0","text":"Initial release (proof--concept)","code":""}]
